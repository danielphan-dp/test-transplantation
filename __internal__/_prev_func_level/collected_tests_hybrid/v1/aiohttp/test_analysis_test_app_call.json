{
  "test_name": "test_app_call",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_app.py",
  "static_methods": [
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app",
      "source_code": "def app(loop: asyncio.AbstractEventLoop) -> web.Application:\n    ret: web.Application = mock.create_autospec(web.Application, spec_set=True)\n    ret.on_response_prepare = aiosignal.Signal(ret)  # type: ignore[misc]\n    ret.on_response_prepare.freeze()\n    return ret",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 30
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_app_call",
      "source_code": ""
    },
    {
      "function": "app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 30,
      "caller": "test_app_call",
      "source_code": "@pytest.fixture\ndef app(loop: asyncio.AbstractEventLoop) -> web.Application:\n    ret: web.Application = mock.create_autospec(web.Application, spec_set=True)\n    ret.on_response_prepare = aiosignal.Signal(ret)  # type: ignore[misc]\n    ret.on_response_prepare.freeze()\n    return ret\n\n\n"
    }
  ],
  "assertions": [
    "assert app is app()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_app_call() -> None:\n    app = web.Application()\n    assert app is app()"
}