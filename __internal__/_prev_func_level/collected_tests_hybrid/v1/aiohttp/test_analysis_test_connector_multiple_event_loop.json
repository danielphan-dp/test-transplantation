{
  "test_name": "test_connector_multiple_event_loop",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_connector.py",
  "static_methods": [
    {
      "name": "futures.ThreadPoolExecutor",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "suppress",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 1683
    },
    {
      "name": "ClientRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "futures.ThreadPoolExecutor",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "suppress",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 1683
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "executor.submit",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "res.result",
      "source_code": "    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 3480
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "async_connect",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "futures.as_completed",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "conn.connect",
      "source_code": "    def connect(self, f, t):\n        \"\"\"Connect two existing vertices.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 50
    },
    {
      "name": "ClientTimeout",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "futures.ThreadPoolExecutor",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "suppress",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 1683,
      "caller": "test_connector_multiple_event_loop",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)\n\n"
    },
    {
      "function": "ClientRequest",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "futures.ThreadPoolExecutor",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "suppress",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 1683,
      "caller": "test_connector_multiple_event_loop",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "loop.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_connector_multiple_event_loop",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "executor.submit",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "res.result",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 3480,
      "caller": "test_connector_multiple_event_loop",
      "source_code": "    @property\n    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')\n\n        return self._future.result()\n\n"
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "async_connect",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "futures.as_completed",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    },
    {
      "function": "conn.connect",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 50,
      "caller": "test_connector_multiple_event_loop",
      "source_code": "    def connect(self, f, t):\n        \"\"\"Connect two existing vertices.\n\n        Nothing happens if the vertices are already connected.\n        \"\"\"\n        if t not in self._vertices:\n            raise KeyError(t)\n        self._forwards[f].add(t)\n        self._backwards[t].add(f)\n\n"
    },
    {
      "function": "ClientTimeout",
      "filename": "",
      "line": 0,
      "caller": "test_connector_multiple_event_loop",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert raw_response_list == [True, True]"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_connector_multiple_event_loop() -> None:\n    \"\"\"Test the connector with multiple event loops.\"\"\"\n\n    async def async_connect() -> Literal[True]:\n        conn = aiohttp.TCPConnector()\n        loop = asyncio.get_running_loop()\n        req = ClientRequest(\"GET\", URL(\"https://127.0.0.1\"), loop=loop)\n        with suppress(aiohttp.ClientConnectorError):\n            with mock.patch.object(\n                conn._loop,\n                \"create_connection\",\n                autospec=True,\n                spec_set=True,\n                side_effect=ssl.CertificateError,\n            ):\n                await conn.connect(req, [], ClientTimeout())\n        return True\n\n    def test_connect() -> Literal[True]:\n        loop = asyncio.new_event_loop()\n        try:\n            return loop.run_until_complete(async_connect())\n        finally:\n            loop.close()\n\n    with futures.ThreadPoolExecutor() as executor:\n        res_list = [executor.submit(test_connect) for _ in range(2)]\n        raw_response_list = [res.result() for res in futures.as_completed(res_list)]\n\n    assert raw_response_list == [True, True]"
}