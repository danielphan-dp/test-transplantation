{
  "test_name": "test_domain_matching",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
  "static_methods": [
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    },
    {
      "function": "test_func",
      "filename": "",
      "line": 0,
      "caller": "test_domain_matching",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert test_func('test.com', 'test.com')",
    "assert test_func('test.com', 'sub.test.com')",
    "assert not test_func('test.com', '')",
    "assert not test_func('test.com', 'test.org')",
    "assert not test_func('diff-test.com', 'test.com')",
    "assert not test_func('test.com', 'diff-test.com')",
    "assert not test_func('test.com', '127.0.0.1')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_domain_matching() -> None:\n    test_func = CookieJar._is_domain_match\n\n    assert test_func(\"test.com\", \"test.com\")\n    assert test_func(\"test.com\", \"sub.test.com\")\n\n    assert not test_func(\"test.com\", \"\")\n    assert not test_func(\"test.com\", \"test.org\")\n    assert not test_func(\"diff-test.com\", \"test.com\")\n    assert not test_func(\"test.com\", \"diff-test.com\")\n    assert not test_func(\"test.com\", \"127.0.0.1\")"
}