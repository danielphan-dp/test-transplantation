{
  "test_name": "test_match_domain",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_urldispatch.py",
  "static_methods": [
    {
      "name": "MaskDomain",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Domain",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "rule.match_domain",
      "source_code": "    def match_domain(self, host: str) -> bool:\n        return host.lower() == self._domain",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 820
    }
  ],
  "dynamic_methods": [
    {
      "function": "MaskDomain",
      "filename": "",
      "line": 0,
      "caller": "test_match_domain",
      "source_code": ""
    },
    {
      "function": "Domain",
      "filename": "",
      "line": 0,
      "caller": "test_match_domain",
      "source_code": ""
    },
    {
      "function": "rule.match_domain",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 820,
      "caller": "test_match_domain",
      "source_code": "    def match_domain(self, host: str) -> bool:\n        return host.lower() == self._domain\n\n"
    }
  ],
  "assertions": [
    "assert rule.match_domain(b) is result"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_match_domain(a: str, b: str, result: bool) -> None:\n    if \"*\" in a:\n        rule: Domain = MaskDomain(a)\n    else:\n        rule = Domain(a)\n    assert rule.match_domain(b) is result"
}