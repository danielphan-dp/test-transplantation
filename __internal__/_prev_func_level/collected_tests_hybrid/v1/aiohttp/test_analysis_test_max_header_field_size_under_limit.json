{
  "test_name": "test_max_header_field_size_under_limit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
  "static_methods": [
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "name.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    }
  ],
  "dynamic_methods": [
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_max_header_field_size_under_limit",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_max_header_field_size_under_limit",
      "source_code": ""
    },
    {
      "function": "name.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_max_header_field_size_under_limit",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    }
  ],
  "assertions": [
    "assert msg.method == 'GET'",
    "assert msg.path == '/test'",
    "assert msg.version == (1, 1)",
    "assert msg.headers == CIMultiDict({name.decode(): 'data'})",
    "assert msg.raw_headers == ((name, b'data'),)",
    "assert not msg.should_close",
    "assert msg.compression is None",
    "assert not msg.upgrade",
    "assert not msg.chunked",
    "assert msg.url == URL('/test')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_max_header_field_size_under_limit(parser: HttpRequestParser) -> None:\n    name = b\"t\" * 8190\n    text = b\"GET /test HTTP/1.1\\r\\n\" + name + b\":data\\r\\n\\r\\n\"\n\n    messages, upgrade, tail = parser.feed_data(text)\n    msg = messages[0][0]\n    assert msg.method == \"GET\"\n    assert msg.path == \"/test\"\n    assert msg.version == (1, 1)\n    assert msg.headers == CIMultiDict({name.decode(): \"data\"})\n    assert msg.raw_headers == ((name, b\"data\"),)\n    assert not msg.should_close\n    assert msg.compression is None\n    assert not msg.upgrade\n    assert not msg.chunked\n    assert msg.url == URL(\"/test\")"
}