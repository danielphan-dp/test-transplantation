{
  "test_name": "test_parse_mimetype",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "helpers.parse_mimetype",
      "source_code": "def parse_mimetype(mimetype: str) -> MimeType:\n    \"\"\"Parses a MIME type into its components.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line_number": 315
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.MimeType",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "helpers.parse_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line": 315,
      "caller": "test_parse_mimetype",
      "source_code": "@functools.lru_cache(maxsize=56)\ndef parse_mimetype(mimetype: str) -> MimeType:\n    \"\"\"Parses a MIME type into its components.\n\n    mimetype is a MIME type string.\n\n    Returns a MimeType object.\n\n    Example:\n\n    >>> parse_mimetype('text/html; charset=utf-8')\n    MimeType(type='text', subtype='html', suffix='',\n             parameters={'charset': 'utf-8'})\n\n    \"\"\"\n    if not mimetype:\n        return MimeType(\n            type=\"\", subtype=\"\", suffix=\"\", parameters=MultiDictProxy(MultiDict())\n        )\n\n    parts = mimetype.split(\";\")\n    params: MultiDict[str] = MultiDict()\n    for item in parts[1:]:\n        if not item:\n            continue\n        key, _, value = item.partition(\"=\")\n        params.add(key.lower().strip(), value.strip(' \"'))\n\n    fulltype = parts[0].strip().lower()\n    if fulltype == \"*\":\n        fulltype = \"*/*\"\n\n    mtype, _, stype = fulltype.partition(\"/\")\n    stype, _, suffix = stype.partition(\"+\")\n\n    return MimeType(\n        type=mtype, subtype=stype, suffix=suffix, parameters=MultiDictProxy(params)\n    )\n\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "helpers.MimeType",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_parse_mimetype",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert isinstance(result, helpers.MimeType)",
    "assert result == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_parse_mimetype(mimetype: str, expected: helpers.MimeType) -> None:\n    result = helpers.parse_mimetype(mimetype)\n\n    assert isinstance(result, helpers.MimeType)\n    assert result == expected"
}