{
  "test_name": "test_partial_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
  "static_methods": [
    {
      "name": "payload.is_eof",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line_number": 233
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "payload.is_eof",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line": 233,
      "caller": "test_partial_url",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_partial_url",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_partial_url",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(messages) == 0",
    "assert len(messages) == 1",
    "assert msg.method == 'GET'",
    "assert msg.path == '/test'",
    "assert msg.version == (1, 1)",
    "assert payload.is_eof()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_partial_url(parser: HttpRequestParser) -> None:\n    messages, upgrade, tail = parser.feed_data(b\"GET /te\")\n    assert len(messages) == 0\n    messages, upgrade, tail = parser.feed_data(b\"st HTTP/1.1\\r\\n\\r\\n\")\n    assert len(messages) == 1\n\n    msg, payload = messages[0]\n\n    assert msg.method == \"GET\"\n    assert msg.path == \"/test\"\n    assert msg.version == (1, 1)\n    assert payload.is_eof()"
}