{
  "test_name": "test_populate_with_cookies",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "CookieImplementation",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cookies_mixin.set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line_number": 349
    },
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.populate_with_cookies",
      "source_code": "def populate_with_cookies(headers: \"CIMultiDict[str]\", cookies: SimpleCookie) -> None:\n    for cookie in cookies.values():\n        value = cookie.output(header=\"\")[1:]\n        headers.add(hdrs.SET_COOKIE, value)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line_number": 1010
    },
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "CookieImplementation",
      "filename": "",
      "line": 0,
      "caller": "test_populate_with_cookies",
      "source_code": ""
    },
    {
      "function": "cookies_mixin.set_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line": 349,
      "caller": "test_populate_with_cookies",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n"
    },
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_populate_with_cookies",
      "source_code": ""
    },
    {
      "function": "helpers.populate_with_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line": 1010,
      "caller": "test_populate_with_cookies",
      "source_code": "def populate_with_cookies(headers: \"CIMultiDict[str]\", cookies: SimpleCookie) -> None:\n    for cookie in cookies.values():\n        value = cookie.output(header=\"\")[1:]\n        headers.add(hdrs.SET_COOKIE, value)\n\n\n"
    },
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_populate_with_cookies",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert headers == CIMultiDict({'Set-Cookie': 'name=value; Path=/'})"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_populate_with_cookies() -> None:\n    cookies_mixin = CookieImplementation()\n    cookies_mixin.set_cookie(\"name\", \"value\")\n    headers = CIMultiDict[str]()\n\n    helpers.populate_with_cookies(headers, cookies_mixin.cookies)\n    assert headers == CIMultiDict({\"Set-Cookie\": \"name=value; Path=/\"})"
}