{
  "test_name": "test_repr_yarl_URL",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_exceptions.py",
  "static_methods": [
    {
      "name": "client.InvalidURL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "client.InvalidURL",
      "filename": "",
      "line": 0,
      "caller": "test_repr_yarl_URL",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_repr_yarl_URL",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_repr_yarl_URL",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert repr(err) == '<InvalidURL :wrong:url:>'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_repr_yarl_URL(self) -> None:\n        err = client.InvalidURL(url=URL(\":wrong:url:\"))\n        assert repr(err) == \"<InvalidURL :wrong:url:>\""
}