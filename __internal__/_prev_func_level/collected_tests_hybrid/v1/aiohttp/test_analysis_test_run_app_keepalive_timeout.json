{
  "test_name": "test_run_app_keepalive_timeout",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
  "static_methods": [
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "web.run_app",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n    ) -> Tuple[\"asyncio.Task[None]\", int]:\n        num_connections = -1\n        t = test_task = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 1007
    },
    {
      "name": "base_runner_init_orig",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stopper",
      "source_code": "def stopper(loop: asyncio.AbstractEventLoop) -> Callable[[], None]:\n    def raiser() -> NoReturn:\n        raise KeyboardInterrupt",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 99
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_keepalive_timeout",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_run_app_keepalive_timeout",
      "source_code": ""
    },
    {
      "function": "web.run_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 1007,
      "caller": "test_run_app_keepalive_timeout",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n"
    },
    {
      "function": "base_runner_init_orig",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_keepalive_timeout",
      "source_code": ""
    },
    {
      "function": "stopper",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 99,
      "caller": "test_run_app_keepalive_timeout",
      "source_code": "def stopper(loop: asyncio.AbstractEventLoop) -> Callable[[], None]:\n    def raiser() -> NoReturn:\n        raise KeyboardInterrupt\n\n    def f(*args: object) -> None:\n        loop.call_soon(raiser)\n\n    return f\n\n\n"
    }
  ],
  "assertions": [
    "assert kwargs['keepalive_timeout'] == new_timeout"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_run_app_keepalive_timeout(\n    patched_loop: asyncio.AbstractEventLoop,\n    mocker: MockerFixture,\n    monkeypatch: pytest.MonkeyPatch,\n) -> None:\n    new_timeout = 1234\n    base_runner_init_orig = BaseRunner.__init__\n\n    def base_runner_init_spy(\n        self: BaseRunner[web.Request], *args: Any, **kwargs: Any\n    ) -> None:\n        assert kwargs[\"keepalive_timeout\"] == new_timeout\n        base_runner_init_orig(self, *args, **kwargs)\n\n    app = web.Application()\n    monkeypatch.setattr(BaseRunner, \"__init__\", base_runner_init_spy)\n    web.run_app(\n        app,\n        keepalive_timeout=new_timeout,\n        print=stopper(patched_loop),\n        loop=patched_loop,\n    )"
}