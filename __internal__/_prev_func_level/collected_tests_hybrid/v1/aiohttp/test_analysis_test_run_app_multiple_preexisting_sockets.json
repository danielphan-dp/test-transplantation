{
  "test_name": "test_run_app_multiple_preexisting_sockets",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
  "static_methods": [
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock1.bind",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock1.getsockname",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock2.bind",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock2.getsockname",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "web.run_app",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n    ) -> Tuple[\"asyncio.Task[None]\", int]:\n        num_connections = -1\n        t = test_task = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 1007
    },
    {
      "name": "patched_loop.create_server.assert_has_calls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stopper",
      "source_code": "def stopper(loop: asyncio.AbstractEventLoop) -> Callable[[], None]:\n    def raiser() -> NoReturn:\n        raise KeyboardInterrupt",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 99
    },
    {
      "name": "mock.call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "sock1.bind",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "sock1.getsockname",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "sock2.bind",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "sock2.getsockname",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "web.run_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 1007,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n"
    },
    {
      "function": "patched_loop.create_server.assert_has_calls",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "stopper",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 99,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": "def stopper(loop: asyncio.AbstractEventLoop) -> Callable[[], None]:\n    def raiser() -> NoReturn:\n        raise KeyboardInterrupt\n\n    def f(*args: object) -> None:\n        loop.call_soon(raiser)\n\n    return f\n\n\n"
    },
    {
      "function": "mock.call",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    },
    {
      "function": "mock.call",
      "filename": "",
      "line": 0,
      "caller": "test_run_app_multiple_preexisting_sockets",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert f'http://127.0.0.1:{port1}' in printer.call_args[0][0]",
    "assert f'http://127.0.0.1:{port2}' in printer.call_args[0][0]"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_run_app_multiple_preexisting_sockets(\n    patched_loop: asyncio.AbstractEventLoop,\n) -> None:\n    app = web.Application()\n\n    sock1 = socket.socket()\n    sock2 = socket.socket()\n    with contextlib.closing(sock1), contextlib.closing(sock2):\n        sock1.bind((\"localhost\", 0))\n        _, port1 = sock1.getsockname()\n        sock2.bind((\"localhost\", 0))\n        _, port2 = sock2.getsockname()\n\n        printer = mock.Mock(wraps=stopper(patched_loop))\n        web.run_app(app, sock=(sock1, sock2), print=printer, loop=patched_loop)\n\n        patched_loop.create_server.assert_has_calls(  # type: ignore[attr-defined]\n            [\n                mock.call(mock.ANY, sock=sock1, backlog=128, ssl=None),\n                mock.call(mock.ANY, sock=sock2, backlog=128, ssl=None),\n            ]\n        )\n        assert f\"http://127.0.0.1:{port1}\" in printer.call_args[0][0]\n        assert f\"http://127.0.0.1:{port2}\" in printer.call_args[0][0]"
}