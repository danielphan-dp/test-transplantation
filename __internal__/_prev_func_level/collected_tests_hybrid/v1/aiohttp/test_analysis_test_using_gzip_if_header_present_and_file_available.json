{
  "test_name": "test_using_gzip_if_header_present_and_file_available",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_sendfile.py",
  "static_methods": [
    {
      "name": "make_mocked_request",
      "source_code": "def make_mocked_request(\n    method: str,\n    path: str,\n    headers: Optional[LooseHeaders] = None,\n    *,\n    match_info: Optional[Dict[str, str]] = None,\n    version: HttpVersion = HttpVersion(1, 1),\n    closing: bool = False,\n    app: Optional[Application] = None,\n    writer: Optional[AbstractStreamWriter] = None,\n    protocol: Optional[RequestHandler[Request]] = None,\n    transport: Optional[asyncio.Transport] = None,\n    payload: StreamReader = EMPTY_PAYLOAD,\n    sslcontext: Optional[SSLContext] = None,\n    client_max_size: int = 1024**2,\n    loop: Any = ...,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/test_utils.py",
      "line_number": 605
    },
    {
      "name": "mock.create_autospec",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.create_autospec",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FileResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "make_mocked_coro",
      "source_code": "def make_mocked_coro(\n    return_value: Any = sentinel, raise_exception: Any = sentinel",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/test_utils.py",
      "line_number": 698
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_sender.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_mocked_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/test_utils.py",
      "line": 605,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": "def make_mocked_request(\n    method: str,\n    path: str,\n    headers: Optional[LooseHeaders] = None,\n    *,\n    match_info: Optional[Dict[str, str]] = None,\n    version: HttpVersion = HttpVersion(1, 1),\n    closing: bool = False,\n    app: Optional[Application] = None,\n    writer: Optional[AbstractStreamWriter] = None,\n    protocol: Optional[RequestHandler[Request]] = None,\n    transport: Optional[asyncio.Transport] = None,\n    payload: StreamReader = EMPTY_PAYLOAD,\n    sslcontext: Optional[SSLContext] = None,\n    client_max_size: int = 1024**2,\n    loop: Any = ...,\n"
    },
    {
      "function": "mock.create_autospec",
      "filename": "",
      "line": 0,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": ""
    },
    {
      "function": "mock.create_autospec",
      "filename": "",
      "line": 0,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": ""
    },
    {
      "function": "FileResponse",
      "filename": "",
      "line": 0,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": ""
    },
    {
      "function": "make_mocked_coro",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/test_utils.py",
      "line": 698,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": "def make_mocked_coro(\n    return_value: Any = sentinel, raise_exception: Any = sentinel\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": ""
    },
    {
      "function": "file_sender.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_using_gzip_if_header_present_and_file_available",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    }
  ],
  "assertions": [
    "assert not filepath.open.called",
    "assert gz_filepath.open.called"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_using_gzip_if_header_present_and_file_available(\n    loop: asyncio.AbstractEventLoop,\n) -> None:\n    request = make_mocked_request(\n        \"GET\",\n        \"http://python.org/logo.png\",\n        # Header uses some uppercase to ensure case-insensitive treatment\n        headers={hdrs.ACCEPT_ENCODING: \"GZip\"},\n    )\n\n    gz_filepath = mock.create_autospec(Path, spec_set=True)\n    gz_filepath.lstat.return_value.st_size = 1024\n    gz_filepath.lstat.return_value.st_mtime_ns = 1603733507222449291\n    gz_filepath.lstat.return_value.st_mode = MOCK_MODE\n\n    filepath = mock.create_autospec(Path, spec_set=True)\n    filepath.name = \"logo.png\"\n    filepath.with_suffix.return_value = gz_filepath\n\n    file_sender = FileResponse(filepath)\n    file_sender._path = filepath\n    file_sender._sendfile = make_mocked_coro(None)  # type: ignore[method-assign]\n\n    loop.run_until_complete(file_sender.prepare(request))\n\n    assert not filepath.open.called\n    assert gz_filepath.open.called"
}