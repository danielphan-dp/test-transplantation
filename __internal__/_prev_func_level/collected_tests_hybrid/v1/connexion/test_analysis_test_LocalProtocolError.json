{
  "test_name": "test_LocalProtocolError",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_util.py",
  "static_methods": [
    {
      "name": "LocalProtocolError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "LocalProtocolError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "LocalProtocolError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "thunk",
      "source_code": "    def thunk() -> NoReturn:\n        raise LocalProtocolError(\"a\", error_status_hint=420)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_util.py",
      "line_number": 36
    },
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "new_traceback.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "exc1._reraise_as_remote_protocol_error",
      "source_code": "    def _reraise_as_remote_protocol_error(self) -> NoReturn:\n        # After catching a LocalProtocolError, use this method to re-raise it\n        # as a RemoteProtocolError. This method must be called from inside an\n        # except: block.\n        #\n        # An easy way to get an equivalent RemoteProtocolError is just to\n        # modify 'self' in place.\n        self.__class__ = RemoteProtocolError  # type: ignore\n        # But the re-raising is somewhat non-trivial -- you might think that\n        # now that we've modified the in-flight exception object, that just\n        # doing 'raise' to re-raise it would be enough. But it turns out that\n        # this doesn't work, because Python tracks the exception type\n        # (exc_info[0]) separately from the exception object (exc_info[1]),\n        # and we only modified the latter. So we really do need to re-raise\n        # the new type explicitly.\n        # On py3, the traceback is part of the exception object, so our\n        # in-place modification preserved it and we can just re-raise:\n        raise self",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 60
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "LocalProtocolError",
      "filename": "",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "LocalProtocolError",
      "filename": "",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "LocalProtocolError",
      "filename": "",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "thunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_util.py",
      "line": 36,
      "caller": "test_LocalProtocolError",
      "source_code": "    def thunk() -> NoReturn:\n        raise LocalProtocolError(\"a\", error_status_hint=420)\n\n"
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_LocalProtocolError",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "new_traceback.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_LocalProtocolError",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "exc1._reraise_as_remote_protocol_error",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 60,
      "caller": "test_LocalProtocolError",
      "source_code": "    def _reraise_as_remote_protocol_error(self) -> NoReturn:\n        # After catching a LocalProtocolError, use this method to re-raise it\n        # as a RemoteProtocolError. This method must be called from inside an\n        # except: block.\n        #\n        # An easy way to get an equivalent RemoteProtocolError is just to\n        # modify 'self' in place.\n        self.__class__ = RemoteProtocolError  # type: ignore\n        # But the re-raising is somewhat non-trivial -- you might think that\n        # now that we've modified the in-flight exception object, that just\n        # doing 'raise' to re-raise it would be enough. But it turns out that\n        # this doesn't work, because Python tracks the exception type\n        # (exc_info[0]) separately from the exception object (exc_info[1]),\n        # and we only modified the latter. So we really do need to re-raise\n        # the new type explicitly.\n        # On py3, the traceback is part of the exception object, so our\n        # in-place modification preserved it and we can just re-raise:\n        raise self\n\n\n"
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_LocalProtocolError",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(e) == 'foo'",
    "assert e.error_status_hint == 400",
    "assert str(e) == 'foo'",
    "assert e.error_status_hint == 418",
    "assert type(exc2) is RemoteProtocolError",
    "assert exc2.args == ('a',)",
    "assert exc2.error_status_hint == 420",
    "assert new_traceback.endswith(orig_traceback)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_LocalProtocolError() -> None:\n    try:\n        raise LocalProtocolError(\"foo\")\n    except LocalProtocolError as e:\n        assert str(e) == \"foo\"\n        assert e.error_status_hint == 400\n\n    try:\n        raise LocalProtocolError(\"foo\", error_status_hint=418)\n    except LocalProtocolError as e:\n        assert str(e) == \"foo\"\n        assert e.error_status_hint == 418\n\n    def thunk() -> NoReturn:\n        raise LocalProtocolError(\"a\", error_status_hint=420)\n\n    try:\n        try:\n            thunk()\n        except LocalProtocolError as exc1:\n            orig_traceback = \"\".join(traceback.format_tb(sys.exc_info()[2]))\n            exc1._reraise_as_remote_protocol_error()\n    except RemoteProtocolError as exc2:\n        assert type(exc2) is RemoteProtocolError\n        assert exc2.args == (\"a\",)\n        assert exc2.error_status_hint == 420\n        new_traceback = \"\".join(traceback.format_tb(sys.exc_info()[2]))\n        assert new_traceback.endswith(orig_traceback)"
}