{
  "test_name": "test_add_wsgi_middleware",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_middleware.py",
  "static_methods": [
    {
      "name": "build_app_from_fixture",
      "source_code": "def build_app_from_fixture(\n    api_spec_folder, *, app_class, spec_file, middlewares=None, **kwargs",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/conftest.py",
      "line_number": 75
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_wsgi_middleware",
      "source_code": "    def add_wsgi_middleware(\n        self, middleware: t.Type[WSGIApp], **options: t.Any\n    ) -> None:\n        \"\"\"Wrap the underlying Flask application with a WSGI middleware. Note that it will only be\n        called at the end of the middleware stack. Middleware that needs to act sooner, needs to\n        be added as ASGI middleware instead.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/flask.py",
      "line_number": 279
    },
    {
      "name": "app.test_client",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line_number": 273
    },
    {
      "name": "app_client.post",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().post(\n            url,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 575
    },
    {
      "name": "mock.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.mock_counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.next_app",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "build_app_from_fixture",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/conftest.py",
      "line": 75,
      "caller": "test_add_wsgi_middleware",
      "source_code": "def build_app_from_fixture(\n    api_spec_folder, *, app_class, spec_file, middlewares=None, **kwargs\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_add_wsgi_middleware",
      "source_code": ""
    },
    {
      "function": "app.add_wsgi_middleware",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/flask.py",
      "line": 279,
      "caller": "test_add_wsgi_middleware",
      "source_code": "    def add_wsgi_middleware(\n        self, middleware: t.Type[WSGIApp], **options: t.Any\n"
    },
    {
      "function": "app.test_client",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line": 273,
      "caller": "test_add_wsgi_middleware",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)\n\n"
    },
    {
      "function": "app_client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 575,
      "caller": "test_add_wsgi_middleware",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "mock.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_add_wsgi_middleware",
      "source_code": ""
    },
    {
      "function": "self.mock_counter",
      "filename": "",
      "line": 0,
      "caller": "test_add_wsgi_middleware",
      "source_code": ""
    },
    {
      "function": "self.next_app",
      "filename": "",
      "line": 0,
      "caller": "test_add_wsgi_middleware",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_wsgi_middleware(spec):\n    app: FlaskApp = build_app_from_fixture(\"simple\", app_class=FlaskApp, spec_file=spec)\n\n    class WSGIMiddleware:\n        def __init__(self, app_: WSGIApp, mock_counter):\n            self.next_app = app_\n            self.mock_counter = mock_counter\n\n        def __call__(\n            self, environ: Environ, start_response: StartResponse\n        ) -> ResponseStream:\n            self.mock_counter()\n            return self.next_app(environ, start_response)\n\n    mock = Mock()\n    app.add_wsgi_middleware(WSGIMiddleware, mock_counter=mock)\n\n    app_client = app.test_client()\n    app_client.post(\"/v1.0/greeting/robbe\")\n\n    mock.assert_called_once()"
}