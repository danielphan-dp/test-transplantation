{
  "test_name": "test_additionalProperties_false_patternProperties",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.message_for",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 307
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.message_for",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 307
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.message_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 307,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "self.message_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 307,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_false_patternProperties",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_additionalProperties_false_patternProperties(self):\n        schema = {\"type\": \"object\",\n                  \"additionalProperties\": False,\n                  \"patternProperties\": {\n                      \"^abc$\": {\"type\": \"string\"},\n                      \"^def$\": {\"type\": \"string\"},\n                  }}\n        message = self.message_for(\n            instance={\"zebra\": 123},\n            schema=schema,\n            cls=validators.Draft4Validator,\n        )\n        self.assertEqual(\n            message,\n            \"{} does not match any of the regexes: {}, {}\".format(\n                repr(\"zebra\"), repr(\"^abc$\"), repr(\"^def$\"),\n            ),\n        )\n        message = self.message_for(\n            instance={\"zebra\": 123, \"fish\": 456},\n            schema=schema,\n            cls=validators.Draft4Validator,\n        )\n        self.assertEqual(\n            message,\n            \"{}, {} do not match any of the regexes: {}, {}\".format(\n                repr(\"fish\"), repr(\"zebra\"), repr(\"^abc$\"), repr(\"^def$\"),\n            ),\n        )"
}