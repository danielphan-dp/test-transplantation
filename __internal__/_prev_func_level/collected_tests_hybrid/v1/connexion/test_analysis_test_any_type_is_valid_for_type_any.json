{
  "test_name": "test_any_type_is_valid_for_type_any",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 84
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.Validator",
      "filename": "",
      "line": 0,
      "caller": "test_any_type_is_valid_for_type_any",
      "source_code": ""
    },
    {
      "function": "validator.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 84,
      "caller": "test_any_type_is_valid_for_type_any",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_any_type_is_valid_for_type_any",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_any_type_is_valid_for_type_any(self):\n        validator = self.Validator({\"type\": \"any\"})\n        validator.validate(object())"
}