{
  "test_name": "test_automatic_remote_retrieval",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py",
  "static_methods": [
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.Draft202012Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.addCleanup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.header_items",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "header.lower",
      "source_code": "    def lower(self, /) -> te.Self:\n        return self.__class__(super().lower())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line_number": 251
    },
    {
      "name": "BytesIO",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.is_valid",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 486
    },
    {
      "name": "validator.is_valid",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 486
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "validators.Draft202012Validator",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.addCleanup",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "request.header_items",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "header.lower",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line": 251,
      "caller": "test_automatic_remote_retrieval",
      "source_code": "    def lower(self, /) -> te.Self:\n        return self.__class__(super().lower())\n\n"
    },
    {
      "function": "BytesIO",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_remote_retrieval",
      "source_code": ""
    },
    {
      "function": "validator.is_valid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 486,
      "caller": "test_automatic_remote_retrieval",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)\n\n            error = next(self.iter_errors(instance), None)\n            return error is None\n\n"
    },
    {
      "function": "validator.is_valid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 486,
      "caller": "test_automatic_remote_retrieval",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)\n\n            error = next(self.iter_errors(instance), None)\n            return error is None\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_automatic_remote_retrieval(self):\n        \"\"\"\n        Automatic retrieval of remote references is deprecated as of v4.18.0.\n        \"\"\"\n        ref = \"http://bar#/$defs/baz\"\n        schema = {\"$defs\": {\"baz\": {\"type\": \"integer\"}}}\n\n        if \"requests\" in sys.modules:  # pragma: no cover\n            self.addCleanup(\n                sys.modules.__setitem__, \"requests\", sys.modules[\"requests\"],\n            )\n        sys.modules[\"requests\"] = None\n\n        @contextmanager\n        def fake_urlopen(request):\n            self.assertIsInstance(request, urllib.request.Request)\n            self.assertEqual(request.full_url, \"http://bar\")\n\n            # Ha ha urllib.request.Request \"normalizes\" header names and\n            # Request.get_header does not also normalize them...\n            (header, value), = request.header_items()\n            self.assertEqual(header.lower(), \"user-agent\")\n            self.assertEqual(\n                value, \"python-jsonschema (deprecated $ref resolution)\",\n            )\n            yield BytesIO(json.dumps(schema).encode(\"utf8\"))\n\n        validator = validators.Draft202012Validator({\"$ref\": ref})\n\n        message = \"Automatically retrieving remote references \"\n        patch = mock.patch.object(urllib.request, \"urlopen\", new=fake_urlopen)\n\n        with patch, self.assertWarnsRegex(DeprecationWarning, message):\n            self.assertEqual(\n                (validator.is_valid({}), validator.is_valid(37)),\n                (False, True),\n            )"
}