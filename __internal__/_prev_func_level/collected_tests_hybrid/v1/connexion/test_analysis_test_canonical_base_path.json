{
  "test_name": "test_canonical_base_path",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_api.py",
  "static_methods": [
    {
      "name": "canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line_number": 68
    },
    {
      "name": "canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line_number": 68
    },
    {
      "name": "canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line_number": 68
    },
    {
      "name": "canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line_number": 68
    }
  ],
  "dynamic_methods": [
    {
      "function": "canonical_base_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line": 68,
      "caller": "test_canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")\n\n\n"
    },
    {
      "function": "canonical_base_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line": 68,
      "caller": "test_canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")\n\n\n"
    },
    {
      "function": "canonical_base_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line": 68,
      "caller": "test_canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")\n\n\n"
    },
    {
      "function": "canonical_base_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/spec.py",
      "line": 68,
      "caller": "test_canonical_base_path",
      "source_code": "def canonical_base_path(base_path):\n    \"\"\"\n    Make given \"basePath\" a canonical base URL which can be prepended to paths starting with \"/\".\n    \"\"\"\n    return base_path.rstrip(\"/\")\n\n\n"
    }
  ],
  "assertions": [
    "assert canonical_base_path('') == ''",
    "assert canonical_base_path('/') == ''",
    "assert canonical_base_path('/api') == '/api'",
    "assert canonical_base_path('/api/') == '/api'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_canonical_base_path():\n    assert canonical_base_path(\"\") == \"\"\n    assert canonical_base_path(\"/\") == \"\"\n    assert canonical_base_path(\"/api\") == \"/api\"\n    assert canonical_base_path(\"/api/\") == \"/api\""
}