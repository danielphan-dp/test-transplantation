{
  "test_name": "test_check_schema_with_different_metaschema_defaults_to_self",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.create",
      "source_code": "    def create(\n        cls,\n        find_links: List[str],\n        index_urls: List[str],\n        no_index: bool,\n    ) -> \"SearchScope\":\n        \"\"\"\n        Create a SearchScope object after normalizing the `find_links`.\n        \"\"\"\n        # Build find_links. If an argument starts with ~, it may be\n        # a local file relative to a home directory. So try normalizing\n        # it and if it exists, use the normalized version.\n        # This is deliberately conservative - it might be fine just to\n        # blindly normalize anything starting with a ~...\n        built_find_links: List[str] = []\n        for link in find_links:\n            if link.startswith(\"~\"):\n                new_link = normalize_path(link)\n                if os.path.exists(new_link):\n                    link = new_link\n            built_find_links.append(link)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/models/search_scope.py",
      "line_number": 26
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NoEmptySchemasValidator.check_schema",
      "source_code": "        def check_schema(cls, schema, format_checker=_UNSET):\n            Validator = validator_for(cls.META_SCHEMA, default=cls)\n            if format_checker is _UNSET:\n                format_checker = Validator.FORMAT_CHECKER\n            validator = Validator(\n                schema=cls.META_SCHEMA,\n                format_checker=format_checker,\n            )\n            for error in validator.iter_errors(schema):\n                raise exceptions.SchemaError.create_from(error)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 308
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_check_schema_with_different_metaschema_defaults_to_self",
      "source_code": ""
    },
    {
      "function": "validators.create",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/models/search_scope.py",
      "line": 26,
      "caller": "test_check_schema_with_different_metaschema_defaults_to_self",
      "source_code": "    @classmethod\n    def create(\n        cls,\n        find_links: List[str],\n        index_urls: List[str],\n        no_index: bool,\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_check_schema_with_different_metaschema_defaults_to_self",
      "source_code": ""
    },
    {
      "function": "NoEmptySchemasValidator.check_schema",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 308,
      "caller": "test_check_schema_with_different_metaschema_defaults_to_self",
      "source_code": "        @classmethod\n        def check_schema(cls, schema, format_checker=_UNSET):\n            Validator = validator_for(cls.META_SCHEMA, default=cls)\n            if format_checker is _UNSET:\n                format_checker = Validator.FORMAT_CHECKER\n            validator = Validator(\n                schema=cls.META_SCHEMA,\n                format_checker=format_checker,\n            )\n            for error in validator.iter_errors(schema):\n                raise exceptions.SchemaError.create_from(error)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_check_schema_with_different_metaschema_defaults_to_self(self):\n        \"\"\"\n        A validator whose metaschema doesn't declare $schema defaults to its\n        own validation behavior, not the latest \"normal\" specification.\n        \"\"\"\n\n        NoEmptySchemasValidator = validators.create(\n            meta_schema={\"fail\": [{\"message\": \"Meta schema whoops!\"}]},\n            validators={\"fail\": fail},\n        )\n        with self.assertRaises(exceptions.SchemaError):\n            NoEmptySchemasValidator.check_schema({})"
}