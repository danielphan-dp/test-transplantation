{
  "test_name": "test_custom_cache",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_retrieval.py",
  "static_methods": [
    {
      "name": "to_cached_resource",
      "source_code": "def to_cached_resource(\n    cache: Callable[[Retrieve[D]], Retrieve[D]] | None = None,\n    loads: Callable[[_T], D] = json.loads,\n    from_contents: Callable[[D], Resource[D]] = Resource.from_contents,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/retrieval.py",
      "line_number": 20
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Resource.from_contents",
      "source_code": "    def from_contents(\n        cls,\n        contents: D,\n        default_specification: (\n            type[Specification[D]] | Specification[D]\n        ) = Specification,\n    ) -> Resource[D]:\n        \"\"\"\n        Create a resource guessing which specification applies to the contents.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 191
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "mapping.items",
      "source_code": "    def items(self) -> typing.ItemsView[_KeyType, _CovariantValueType]:\n        return self._dict.items()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line_number": 288
    },
    {
      "name": "mapping.pop",
      "source_code": "    def pop(self, key: typing.Any, default: typing.Any = None) -> typing.Any:\n        self._list = [(k, v) for k, v in self._list if k != key]\n        return self._dict.pop(key, default)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line_number": 325
    },
    {
      "name": "lru_cache",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    }
  ],
  "dynamic_methods": [
    {
      "function": "to_cached_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/retrieval.py",
      "line": 20,
      "caller": "test_custom_cache",
      "source_code": "def to_cached_resource(\n    cache: Callable[[Retrieve[D]], Retrieve[D]] | None = None,\n    loads: Callable[[_T], D] = json.loads,\n    from_contents: Callable[[D], Resource[D]] = Resource.from_contents,\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_custom_cache",
      "source_code": ""
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_custom_cache",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_custom_cache",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_custom_cache",
      "source_code": ""
    },
    {
      "function": "Resource.from_contents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 191,
      "caller": "test_custom_cache",
      "source_code": "    @classmethod\n    def from_contents(\n        cls,\n        contents: D,\n        default_specification: (\n            type[Specification[D]] | Specification[D]\n        ) = Specification,\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "mapping.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line": 288,
      "caller": "test_custom_cache",
      "source_code": "    def items(self) -> typing.ItemsView[_KeyType, _CovariantValueType]:\n        return self._dict.items()\n\n"
    },
    {
      "function": "mapping.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line": 325,
      "caller": "test_custom_cache",
      "source_code": "    def pop(self, key: typing.Any, default: typing.Any = None) -> typing.Any:\n        self._list = [(k, v) for k, v in self._list if k != key]\n        return self._dict.pop(key, default)\n\n"
    },
    {
      "function": "lru_cache",
      "filename": "",
      "line": 0,
      "caller": "test_custom_cache",
      "source_code": ""
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_custom_cache",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    }
  ],
  "assertions": [
    "assert got.value == resources['urn:example:1']",
    "assert registry.get_or_retrieve('urn:example:1').value is got.value",
    "assert registry.get_or_retrieve('urn:example:1').value is got.value",
    "assert got.value == resources['urn:example:2']",
    "assert registry.get_or_retrieve('urn:example:2').value is got.value",
    "assert registry.get_or_retrieve('urn:example:2').value is got.value",
    "assert got.value == resources['urn:example:3']",
    "assert registry.get_or_retrieve('urn:example:3').value is got.value",
    "assert registry.get_or_retrieve('urn:example:3').value is got.value"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_custom_cache(self):\n        schema = {\"$schema\": \"https://json-schema.org/draft/2020-12/schema\"}\n        mapping = {\n            \"urn:example:1\": dict(schema, foo=1),\n            \"urn:example:2\": dict(schema, foo=2),\n            \"urn:example:3\": dict(schema, foo=3),\n        }\n\n        resources = {\n            uri: Resource.from_contents(contents)\n            for uri, contents in mapping.items()\n        }\n\n        @to_cached_resource(cache=lru_cache(maxsize=2))\n        def retrieve(uri):\n            return json.dumps(mapping.pop(uri))\n\n        registry = Registry(retrieve=retrieve)\n\n        got = registry.get_or_retrieve(\"urn:example:1\")\n        assert got.value == resources[\"urn:example:1\"]\n        assert registry.get_or_retrieve(\"urn:example:1\").value is got.value\n        assert registry.get_or_retrieve(\"urn:example:1\").value is got.value\n\n        got = registry.get_or_retrieve(\"urn:example:2\")\n        assert got.value == resources[\"urn:example:2\"]\n        assert registry.get_or_retrieve(\"urn:example:2\").value is got.value\n        assert registry.get_or_retrieve(\"urn:example:2\").value is got.value\n\n        # This still succeeds, but evicts the first URI\n        got = registry.get_or_retrieve(\"urn:example:3\")\n        assert got.value == resources[\"urn:example:3\"]\n        assert registry.get_or_retrieve(\"urn:example:3\").value is got.value\n        assert registry.get_or_retrieve(\"urn:example:3\").value is got.value\n\n        # And now this fails (as we popped the value out of `mapping`)\n        with pytest.raises(exceptions.Unretrievable):\n            registry.get_or_retrieve(\"urn:example:1\")"
}