{
  "test_name": "test_dashes_are_stripped_from_validator_names",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "validators.create",
      "source_code": "    def create(\n        cls,\n        find_links: List[str],\n        index_urls: List[str],\n        no_index: bool,\n    ) -> \"SearchScope\":\n        \"\"\"\n        Create a SearchScope object after normalizing the `find_links`.\n        \"\"\"\n        # Build find_links. If an argument starts with ~, it may be\n        # a local file relative to a home directory. So try normalizing\n        # it and if it exists, use the normalized version.\n        # This is deliberately conservative - it might be fine just to\n        # blindly normalize anything starting with a ~...\n        built_find_links: List[str] = []\n        for link in find_links:\n            if link.startswith(\"~\"):\n                new_link = normalize_path(link)\n                if os.path.exists(new_link):\n                    link = new_link\n            built_find_links.append(link)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/models/search_scope.py",
      "line_number": 26
    },
    {
      "name": "self.addCleanup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.addCleanup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "validators.create",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/models/search_scope.py",
      "line": 26,
      "caller": "test_dashes_are_stripped_from_validator_names",
      "source_code": "    @classmethod\n    def create(\n        cls,\n        find_links: List[str],\n        index_urls: List[str],\n        no_index: bool,\n"
    },
    {
      "function": "self.addCleanup",
      "filename": "",
      "line": 0,
      "caller": "test_dashes_are_stripped_from_validator_names",
      "source_code": ""
    },
    {
      "function": "self.addCleanup",
      "filename": "",
      "line": 0,
      "caller": "test_dashes_are_stripped_from_validator_names",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dashes_are_stripped_from_validator_names",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dashes_are_stripped_from_validator_names(self):\n        Validator = validators.create(\n            meta_schema={\"$id\": \"something\"},\n            version=\"foo-bar\",\n        )\n        self.addCleanup(validators._META_SCHEMAS.pop, \"something\")\n        self.addCleanup(validators._VALIDATORS.pop, \"foo-bar\")\n        self.assertEqual(Validator.__qualname__, \"FooBarValidator\")"
}