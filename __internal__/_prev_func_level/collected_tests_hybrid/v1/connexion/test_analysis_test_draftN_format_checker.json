{
  "test_name": "test_draftN_format_checker",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_deprecations.py",
  "static_methods": [
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarnsRegex",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertWarnsRegex",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_draftN_format_checker",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_draftN_format_checker(self):\n        \"\"\"\n        As of v4.16.0, accessing jsonschema.draftn_format_checker is deprecated\n        in favor of Validator.FORMAT_CHECKER.\n        \"\"\"\n\n        message = \"Accessing jsonschema.draft202012_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft202012_format_checker\n\n        self.assertIs(\n            draft202012_format_checker,\n            validators.Draft202012Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        message = \"Accessing jsonschema.draft201909_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft201909_format_checker\n\n        self.assertIs(\n            draft201909_format_checker,\n            validators.Draft201909Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        message = \"Accessing jsonschema.draft7_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft7_format_checker\n\n        self.assertIs(\n            draft7_format_checker,\n            validators.Draft7Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        message = \"Accessing jsonschema.draft6_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft6_format_checker\n\n        self.assertIs(\n            draft6_format_checker,\n            validators.Draft6Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        message = \"Accessing jsonschema.draft4_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft4_format_checker\n\n        self.assertIs(\n            draft4_format_checker,\n            validators.Draft4Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        message = \"Accessing jsonschema.draft3_format_checker is \"\n        with self.assertWarnsRegex(DeprecationWarning, message) as w:\n            from jsonschema import draft3_format_checker\n\n        self.assertIs(\n            draft3_format_checker,\n            validators.Draft3Validator.FORMAT_CHECKER,\n        )\n        self.assertEqual(w.filename, __file__)\n\n        with self.assertRaises(ImportError):\n            from jsonschema import draft1234_format_checker"
}