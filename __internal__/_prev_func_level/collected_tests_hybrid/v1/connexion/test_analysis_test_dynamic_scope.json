{
  "test_name": "test_dynamic_scope",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "ID_AND_CHILDREN.create_resource",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 160
    },
    {
      "name": "ID_AND_CHILDREN.create_resource",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 160
    },
    {
      "name": "registry.resolver",
      "source_code": "        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 320
    },
    {
      "name": "resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "first.resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "second.resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "third.resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "fourth.resolver.dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 699
    },
    {
      "name": "third.resolver.dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 699
    },
    {
      "name": "second.resolver.dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 699
    },
    {
      "name": "first.resolver.dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 699
    }
  ],
  "dynamic_methods": [
    {
      "function": "ID_AND_CHILDREN.create_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 160,
      "caller": "test_dynamic_scope",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)\n\n\n"
    },
    {
      "function": "ID_AND_CHILDREN.create_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 160,
      "caller": "test_dynamic_scope",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)\n\n\n"
    },
    {
      "function": "registry.resolver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 320,
      "caller": "test_dynamic_scope",
      "source_code": "        @property\n        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver\n\n"
    },
    {
      "function": "resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_dynamic_scope",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "first.resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_dynamic_scope",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "second.resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_dynamic_scope",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "third.resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_dynamic_scope",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_dynamic_scope",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dynamic_scope",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dynamic_scope",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dynamic_scope",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dynamic_scope",
      "source_code": ""
    },
    {
      "function": "fourth.resolver.dynamic_scope",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 699,
      "caller": "test_dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry\n\n"
    },
    {
      "function": "third.resolver.dynamic_scope",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 699,
      "caller": "test_dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry\n\n"
    },
    {
      "function": "second.resolver.dynamic_scope",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 699,
      "caller": "test_dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry\n\n"
    },
    {
      "function": "first.resolver.dynamic_scope",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 699,
      "caller": "test_dynamic_scope",
      "source_code": "    def dynamic_scope(self) -> Iterable[tuple[URI, Registry[D]]]:\n        \"\"\"\n        In specs with such a notion, return the URIs in the dynamic scope.\n        \"\"\"\n        for uri in self._previous:\n            yield uri, self._registry\n\n"
    }
  ],
  "assertions": [
    "assert list(fourth.resolver.dynamic_scope()) == [('http://example.com/child/grandchild', fourth.resolver._registry), ('http://example.com/child/', fourth.resolver._registry), ('http://example.com/', fourth.resolver._registry)]",
    "assert list(third.resolver.dynamic_scope()) == [('http://example.com/child/', third.resolver._registry), ('http://example.com/', third.resolver._registry)]",
    "assert list(second.resolver.dynamic_scope()) == [('http://example.com/', second.resolver._registry)]",
    "assert list(first.resolver.dynamic_scope()) == []"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dynamic_scope(self):\n        one = ID_AND_CHILDREN.create_resource(\n            {\n                \"ID\": \"http://example.com/\",\n                \"children\": [\n                    {\n                        \"ID\": \"child/\",\n                        \"children\": [{\"ID\": \"grandchild\"}],\n                    },\n                ],\n            },\n        )\n        two = ID_AND_CHILDREN.create_resource(\n            {\n                \"ID\": \"http://example.com/two\",\n                \"children\": [{\"ID\": \"two-child/\"}],\n            },\n        )\n        registry = [one, two] @ Registry()\n\n        resolver = registry.resolver()\n        first = resolver.lookup(\"http://example.com/\")\n        second = first.resolver.lookup(\"#/children/0\")\n        third = second.resolver.lookup(\"grandchild\")\n        fourth = third.resolver.lookup(\"http://example.com/two\")\n        assert list(fourth.resolver.dynamic_scope()) == [\n            (\"http://example.com/child/grandchild\", fourth.resolver._registry),\n            (\"http://example.com/child/\", fourth.resolver._registry),\n            (\"http://example.com/\", fourth.resolver._registry),\n        ]\n        assert list(third.resolver.dynamic_scope()) == [\n            (\"http://example.com/child/\", third.resolver._registry),\n            (\"http://example.com/\", third.resolver._registry),\n        ]\n        assert list(second.resolver.dynamic_scope()) == [\n            (\"http://example.com/\", second.resolver._registry),\n        ]\n        assert list(first.resolver.dynamic_scope()) == []"
}