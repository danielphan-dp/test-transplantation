{
  "test_name": "test_evolve_with_subclass",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertWarns",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "OhNo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.evolve",
      "source_code": "        def evolve(self, **changes):\n            schema = changes.setdefault(\"schema\", self.schema)\n            NewValidator = validator_for(schema, default=self.__class__)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 340
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarns",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "field",
      "source_code": "def field(\n    *,\n    default=NOTHING,\n    validator=None,\n    repr=True,\n    hash=None,\n    init=True,\n    metadata=None,\n    type=None,\n    converter=None,\n    factory=None,\n    kw_only=False,\n    eq=None,\n    order=None,\n    on_setattr=None,\n    alias=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/attr/_next_gen.py",
      "line_number": 418
    },
    {
      "name": "field",
      "source_code": "def field(\n    *,\n    default=NOTHING,\n    validator=None,\n    repr=True,\n    hash=None,\n    init=True,\n    metadata=None,\n    type=None,\n    converter=None,\n    factory=None,\n    kw_only=False,\n    eq=None,\n    order=None,\n    on_setattr=None,\n    alias=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/attr/_next_gen.py",
      "line_number": 418
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertWarns",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "OhNo",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "validator.evolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 340,
      "caller": "test_evolve_with_subclass",
      "source_code": "        def evolve(self, **changes):\n            schema = changes.setdefault(\"schema\", self.schema)\n            NewValidator = validator_for(schema, default=self.__class__)\n\n            for (attr_name, init_name) in evolve_fields:\n                if init_name not in changes:\n                    changes[init_name] = getattr(self, attr_name)\n\n            return NewValidator(**changes)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "self.assertWarns",
      "filename": "",
      "line": 0,
      "caller": "test_evolve_with_subclass",
      "source_code": ""
    },
    {
      "function": "field",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/attr/_next_gen.py",
      "line": 418,
      "caller": "test_evolve_with_subclass",
      "source_code": "def field(\n    *,\n    default=NOTHING,\n    validator=None,\n    repr=True,\n    hash=None,\n    init=True,\n    metadata=None,\n    type=None,\n    converter=None,\n    factory=None,\n    kw_only=False,\n    eq=None,\n    order=None,\n    on_setattr=None,\n    alias=None,\n"
    },
    {
      "function": "field",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/attr/_next_gen.py",
      "line": 418,
      "caller": "test_evolve_with_subclass",
      "source_code": "def field(\n    *,\n    default=NOTHING,\n    validator=None,\n    repr=True,\n    hash=None,\n    init=True,\n    metadata=None,\n    type=None,\n    converter=None,\n    factory=None,\n    kw_only=False,\n    eq=None,\n    order=None,\n    on_setattr=None,\n    alias=None,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_evolve_with_subclass(self):\n        \"\"\"\n        Subclassing validators isn't supported public API, but some users have\n        done it, because we don't actually error entirely when it's done :/\n\n        We need to deprecate doing so first to help as many of these users\n        ensure they can move to supported APIs, but this test ensures that in\n        the interim, we haven't broken those users.\n        \"\"\"\n\n        with self.assertWarns(DeprecationWarning):\n            @define\n            class OhNo(self.Validator):\n                foo = field(factory=lambda: [1, 2, 3])\n                _bar = field(default=37)\n\n        validator = OhNo({}, bar=12)\n        self.assertEqual(validator.foo, [1, 2, 3])\n\n        new = validator.evolve(schema={\"type\": \"integer\"})\n        self.assertEqual(new.foo, [1, 2, 3])\n        self.assertEqual(new._bar, 12)"
}