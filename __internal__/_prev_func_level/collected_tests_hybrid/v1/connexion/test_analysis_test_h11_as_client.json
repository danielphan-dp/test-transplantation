{
  "test_name": "test_h11_as_client",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
  "static_methods": [
    {
      "name": "socket_server",
      "source_code": "def socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line_number": 15
    },
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "socket_server",
      "source_code": "def socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line_number": 15
    },
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "s.sendall",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 649
    },
    {
      "name": "s.sendall",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 649
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "c.next_event",
      "source_code": "    def next_event(self) -> Event:\n        event: Event = NEED_DATA",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/sansio/multipart.py",
      "line_number": 149
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bytes",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "c.receive_data",
      "source_code": "    def receive_data(self, data: bytes | None) -> None:\n        if data is None:\n            self.complete = True\n        elif (\n            self.max_form_memory_size is not None\n            and len(self.buffer) + len(data) > self.max_form_memory_size\n        ):\n            # Ensure that data within single event does not exceed limit.\n            # Also checked across accumulated events in MultiPartParser.\n            raise RequestEntityTooLarge()\n        else:\n            self.buffer.extend(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/sansio/multipart.py",
      "line_number": 136
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "s.recv",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 577
    }
  ],
  "dynamic_methods": [
    {
      "function": "socket_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line": 15,
      "caller": "test_h11_as_client",
      "source_code": "@contextmanager\ndef socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]\n"
    },
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "socket_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line": 15,
      "caller": "test_h11_as_client",
      "source_code": "@contextmanager\ndef socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]\n"
    },
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "s.sendall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 649,
      "caller": "test_h11_as_client",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent\n\n"
    },
    {
      "function": "s.sendall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 649,
      "caller": "test_h11_as_client",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent\n\n"
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_h11_as_client",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_h11_as_client",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "c.next_event",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/sansio/multipart.py",
      "line": 149,
      "caller": "test_h11_as_client",
      "source_code": "    def next_event(self) -> Event:\n        event: Event = NEED_DATA\n\n        if self.state == State.PREAMBLE:\n            match = self.preamble_re.search(self.buffer, self._search_position)\n            if match is not None:\n                if match.group(1).startswith(b\"--\"):\n                    self.state = State.EPILOGUE\n                else:\n                    self.state = State.PART\n                data = bytes(self.buffer[: match.start()])\n                del self.buffer[: match.end()]\n                event = Preamble(data=data)\n                self._search_position = 0\n            else:\n                # Update the search start position to be equal to the\n                # current buffer length (already searched) minus a\n                # safe buffer for part of the search target.\n                self._search_position = max(\n                    0, len(self.buffer) - len(self.boundary) - SEARCH_EXTRA_LENGTH\n                )\n\n        elif self.state == State.PART:\n            match = BLANK_LINE_RE.search(self.buffer, self._search_position)\n            if match is not None:\n                headers = self._parse_headers(self.buffer[: match.start()])\n                # The final header ends with a single CRLF, however a\n                # blank line indicates the start of the\n                # body. Therefore the end is after the first CRLF.\n                headers_end = (match.start() + match.end()) // 2\n                del self.buffer[:headers_end]\n\n                if \"content-disposition\" not in headers:\n                    raise ValueError(\"Missing Content-Disposition header\")\n\n                disposition, extra = parse_options_header(\n                    headers[\"content-disposition\"]\n                )\n                name = t.cast(str, extra.get(\"name\"))\n                filename = extra.get(\"filename\")\n                if filename is not None:\n                    event = File(\n                        filename=filename,\n                        headers=headers,\n                        name=name,\n                    )\n                else:\n                    event = Field(\n                        headers=headers,\n                        name=name,\n                    )\n                self.state = State.DATA_START\n                self._search_position = 0\n                self._parts_decoded += 1\n\n                if self.max_parts is not None and self._parts_decoded > self.max_parts:\n                    raise RequestEntityTooLarge()\n            else:\n                # Update the search start position to be equal to the\n                # current buffer length (already searched) minus a\n                # safe buffer for part of the search target.\n                self._search_position = max(0, len(self.buffer) - SEARCH_EXTRA_LENGTH)\n\n        elif self.state == State.DATA_START:\n            data, del_index, more_data = self._parse_data(self.buffer, start=True)\n            del self.buffer[:del_index]\n            event = Data(data=data, more_data=more_data)\n            if more_data:\n                self.state = State.DATA\n\n        elif self.state == State.DATA:\n            data, del_index, more_data = self._parse_data(self.buffer, start=False)\n            del self.buffer[:del_index]\n            if data or not more_data:\n                event = Data(data=data, more_data=more_data)\n\n        elif self.state == State.EPILOGUE and self.complete:\n            event = Epilogue(data=bytes(self.buffer))\n            del self.buffer[:]\n            self.state = State.COMPLETE\n\n        if self.complete and isinstance(event, NeedData):\n            raise ValueError(f\"Invalid form-data cannot parse beyond {self.state}\")\n\n        return event\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "bytes",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "c.receive_data",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/sansio/multipart.py",
      "line": 136,
      "caller": "test_h11_as_client",
      "source_code": "    def receive_data(self, data: bytes | None) -> None:\n        if data is None:\n            self.complete = True\n        elif (\n            self.max_form_memory_size is not None\n            and len(self.buffer) + len(data) > self.max_form_memory_size\n        ):\n            # Ensure that data within single event does not exceed limit.\n            # Also checked across accumulated events in MultiPartParser.\n            raise RequestEntityTooLarge()\n        else:\n            self.buffer.extend(data)\n\n"
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_client",
      "source_code": ""
    },
    {
      "function": "s.recv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 577,
      "caller": "test_h11_as_client",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data\n\n"
    }
  ],
  "assertions": [
    "assert bytes(data) == test_file_data",
    "assert event.status_code == 200"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_h11_as_client() -> None:\n    with socket_server(SingleMindedRequestHandler) as httpd:\n        with closing(socket.create_connection(httpd.server_address)) as s:\n            c = h11.Connection(h11.CLIENT)\n\n            s.sendall(\n                c.send(  # type: ignore[arg-type]\n                    h11.Request(\n                        method=\"GET\", target=\"/foo\", headers=[(\"Host\", \"localhost\")]\n                    )\n                )\n            )\n            s.sendall(c.send(h11.EndOfMessage()))  # type: ignore[arg-type]\n\n            data = bytearray()\n            while True:\n                event = c.next_event()\n                print(event)\n                if event is h11.NEED_DATA:\n                    # Use a small read buffer to make things more challenging\n                    # and exercise more paths :-)\n                    c.receive_data(s.recv(10))\n                    continue\n                if type(event) is h11.Response:\n                    assert event.status_code == 200\n                if type(event) is h11.Data:\n                    data += event.data\n                if type(event) is h11.EndOfMessage:\n                    break\n            assert bytes(data) == test_file_data"
}