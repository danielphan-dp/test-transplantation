{
  "test_name": "test_if_you_give_it_junk_you_get_a_resolution_error",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "validators._RefResolver",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "resolver.resolving",
      "source_code": "    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1048
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "exceptions._RefResolutionError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "resolver.resolving",
      "source_code": "    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1048
    },
    {
      "name": "self.fail",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line_number": 315
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "validators._RefResolver",
      "filename": "",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "resolver.resolving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1048,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": "    @contextlib.contextmanager\n    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.\n\n        Exits the scope on exit of this context manager.\n\n        Arguments:\n\n            ref (str):\n\n                The reference to resolve\n\n        \"\"\"\n        url, resolved = self.resolve(ref)\n        self.push_scope(url)\n        try:\n            yield resolved\n        finally:\n            self.pop_scope()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "exceptions._RefResolutionError",
      "filename": "",
      "line": 0,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": ""
    },
    {
      "function": "resolver.resolving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1048,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": "    @contextlib.contextmanager\n    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.\n\n        Exits the scope on exit of this context manager.\n\n        Arguments:\n\n            ref (str):\n\n                The reference to resolve\n\n        \"\"\"\n        url, resolved = self.resolve(ref)\n        self.push_scope(url)\n        try:\n            yield resolved\n        finally:\n            self.pop_scope()\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line": 315,
      "caller": "test_if_you_give_it_junk_you_get_a_resolution_error",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_if_you_give_it_junk_you_get_a_resolution_error(self):\n        error = ValueError(\"Oh no! What's this?\")\n\n        def handler(url):\n            raise error\n\n        ref = \"foo://bar\"\n        resolver = validators._RefResolver(\"\", {}, handlers={\"foo\": handler})\n        with self.assertRaises(exceptions._RefResolutionError) as err:  # noqa: SIM117\n            with resolver.resolving(ref):\n                self.fail(\"Shouldn't get this far!\")  # pragma: no cover\n        self.assertEqual(err.exception, exceptions._RefResolutionError(error))"
}