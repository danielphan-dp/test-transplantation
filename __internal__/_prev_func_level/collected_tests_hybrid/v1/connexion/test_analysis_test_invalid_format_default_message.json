{
  "test_name": "test_invalid_format_default_message",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "FormatChecker",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "checker.checks",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n    ) -> typing.Callable[[_F], _F]:\n        \"\"\"\n        Register a decorated function as validating a new format.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line_number": 59
    },
    {
      "name": "self.message_for",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 307
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "checker.checks",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n    ) -> typing.Callable[[_F], _F]:\n        \"\"\"\n        Register a decorated function as validating a new format.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line_number": 59
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "FormatChecker",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    },
    {
      "function": "checker.checks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line": 59,
      "caller": "test_invalid_format_default_message",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n"
    },
    {
      "function": "self.message_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 307,
      "caller": "test_invalid_format_default_message",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message\n\n"
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    },
    {
      "function": "checker.checks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line": 59,
      "caller": "test_invalid_format_default_message",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_invalid_format_default_message",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_invalid_format_default_message(self):\n        checker = FormatChecker(formats=())\n        checker.checks(\"thing\")(lambda value: False)\n\n        schema = {\"format\": \"thing\"}\n        message = self.message_for(\n            instance=\"bla\",\n            schema=schema,\n            format_checker=checker,\n        )\n\n        self.assertIn(repr(\"bla\"), message)\n        self.assertIn(repr(\"thing\"), message)\n        self.assertIn(\"is not a\", message)"
}