{
  "test_name": "test_is_json_mimetype",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_utils.py",
  "static_methods": [
    {
      "name": "utils.is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line_number": 153
    },
    {
      "name": "utils.is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line_number": 153
    },
    {
      "name": "utils.is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line_number": 153
    },
    {
      "name": "utils.is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line_number": 153
    },
    {
      "name": "utils.is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line_number": 153
    }
  ],
  "dynamic_methods": [
    {
      "function": "utils.is_json_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line": 153,
      "caller": "test_is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False\n\n    maintype, subtype = mimetype.split(\"/\")  # type: str, str\n    if \";\" in subtype:\n        subtype, parameter = subtype.split(\";\", maxsplit=1)\n    return maintype == \"application\" and (\n        subtype == \"json\" or subtype.endswith(\"+json\")\n    )\n\n\n"
    },
    {
      "function": "utils.is_json_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line": 153,
      "caller": "test_is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False\n\n    maintype, subtype = mimetype.split(\"/\")  # type: str, str\n    if \";\" in subtype:\n        subtype, parameter = subtype.split(\";\", maxsplit=1)\n    return maintype == \"application\" and (\n        subtype == \"json\" or subtype.endswith(\"+json\")\n    )\n\n\n"
    },
    {
      "function": "utils.is_json_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line": 153,
      "caller": "test_is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False\n\n    maintype, subtype = mimetype.split(\"/\")  # type: str, str\n    if \";\" in subtype:\n        subtype, parameter = subtype.split(\";\", maxsplit=1)\n    return maintype == \"application\" and (\n        subtype == \"json\" or subtype.endswith(\"+json\")\n    )\n\n\n"
    },
    {
      "function": "utils.is_json_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line": 153,
      "caller": "test_is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False\n\n    maintype, subtype = mimetype.split(\"/\")  # type: str, str\n    if \";\" in subtype:\n        subtype, parameter = subtype.split(\";\", maxsplit=1)\n    return maintype == \"application\" and (\n        subtype == \"json\" or subtype.endswith(\"+json\")\n    )\n\n\n"
    },
    {
      "function": "utils.is_json_mimetype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/utils.py",
      "line": 153,
      "caller": "test_is_json_mimetype",
      "source_code": "def is_json_mimetype(mimetype):\n    \"\"\"\n    :type mimetype: str\n    :rtype: bool\n    \"\"\"\n    if mimetype is None:\n        return False\n\n    maintype, subtype = mimetype.split(\"/\")  # type: str, str\n    if \";\" in subtype:\n        subtype, parameter = subtype.split(\";\", maxsplit=1)\n    return maintype == \"application\" and (\n        subtype == \"json\" or subtype.endswith(\"+json\")\n    )\n\n\n"
    }
  ],
  "assertions": [
    "assert utils.is_json_mimetype('application/json')",
    "assert utils.is_json_mimetype('application/vnd.com.myEntreprise.v6+json')",
    "assert utils.is_json_mimetype('application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0')",
    "assert utils.is_json_mimetype('application/vnd.com.myEntreprise.v6+json; charset=UTF-8')",
    "assert not utils.is_json_mimetype('text/html')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_is_json_mimetype():\n    assert utils.is_json_mimetype(\"application/json\")\n    assert utils.is_json_mimetype(\"application/vnd.com.myEntreprise.v6+json\")\n    assert utils.is_json_mimetype(\n        \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\"\n    )\n    assert utils.is_json_mimetype(\n        \"application/vnd.com.myEntreprise.v6+json; charset=UTF-8\"\n    )\n    assert not utils.is_json_mimetype(\"text/html\")"
}