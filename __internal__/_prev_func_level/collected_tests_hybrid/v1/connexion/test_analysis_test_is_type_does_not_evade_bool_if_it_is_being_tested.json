{
  "test_name": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.Validator.is_type",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 453
    },
    {
      "name": "self.Validator.is_valid",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 486
    },
    {
      "name": "self.Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": ""
    },
    {
      "function": "self.Validator.is_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 453,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None\n\n"
    },
    {
      "function": "self.Validator.is_valid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 486,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)\n\n            error = next(self.iter_errors(instance), None)\n            return error is None\n\n"
    },
    {
      "function": "self.Validator",
      "filename": "",
      "line": 0,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": ""
    },
    {
      "function": "self.Validator",
      "filename": "",
      "line": 0,
      "caller": "test_is_type_does_not_evade_bool_if_it_is_being_tested",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_is_type_does_not_evade_bool_if_it_is_being_tested(self):\n        self.assertTrue(self.Validator({}).is_type(True, \"boolean\"))\n        self.assertTrue(self.Validator({\"type\": \"any\"}).is_valid(True))"
}