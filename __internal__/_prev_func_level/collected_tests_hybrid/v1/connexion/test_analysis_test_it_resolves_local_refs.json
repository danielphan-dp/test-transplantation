{
  "test_name": "test_it_resolves_local_refs",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.resolver.resolving",
      "source_code": "    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1048
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.resolver.resolving",
      "source_code": "    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1048
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.resolver.resolving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1048,
      "caller": "test_it_resolves_local_refs",
      "source_code": "    @contextlib.contextmanager\n    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.\n\n        Exits the scope on exit of this context manager.\n\n        Arguments:\n\n            ref (str):\n\n                The reference to resolve\n\n        \"\"\"\n        url, resolved = self.resolve(ref)\n        self.push_scope(url)\n        try:\n            yield resolved\n        finally:\n            self.pop_scope()\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_resolves_local_refs",
      "source_code": ""
    },
    {
      "function": "self.resolver.resolving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1048,
      "caller": "test_it_resolves_local_refs",
      "source_code": "    @contextlib.contextmanager\n    def resolving(self, ref):\n        \"\"\"\n        Resolve the given ``ref`` and enter its resolution scope.\n\n        Exits the scope on exit of this context manager.\n\n        Arguments:\n\n            ref (str):\n\n                The reference to resolve\n\n        \"\"\"\n        url, resolved = self.resolve(ref)\n        self.push_scope(url)\n        try:\n            yield resolved\n        finally:\n            self.pop_scope()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_resolves_local_refs",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_resolves_local_refs(self):\n        ref = \"#/properties/foo\"\n        self.referrer[\"properties\"] = {\"foo\": object()}\n        with self.resolver.resolving(ref) as resolved:\n            self.assertEqual(resolved, self.referrer[\"properties\"][\"foo\"])"
}