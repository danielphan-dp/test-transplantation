{
  "test_name": "test_it_validates_formats_if_a_checker_is_provided",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FormatChecker",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "checker.checks",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n    ) -> typing.Callable[[_F], _F]:\n        \"\"\"\n        Register a decorated function as validating a new format.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line_number": 59
    },
    {
      "name": "self.Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 84
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 84
    },
    {
      "name": "self.fail",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line_number": 315
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "FormatChecker",
      "filename": "",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "checker.checks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_format.py",
      "line": 59,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": "    def checks(\n        self, format: str, raises: _RaisesType = (),\n"
    },
    {
      "function": "self.Validator",
      "filename": "",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "validator.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 84,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any\n"
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": ""
    },
    {
      "function": "validator.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 84,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line": 315,
      "caller": "test_it_validates_formats_if_a_checker_is_provided",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_validates_formats_if_a_checker_is_provided(self):\n        checker = FormatChecker()\n        bad = ValueError(\"Bad!\")\n\n        @checker.checks(\"foo\", raises=ValueError)\n        def check(value):\n            if value == \"good\":\n                return True\n            elif value == \"bad\":\n                raise bad\n            else:  # pragma: no cover\n                self.fail(f\"What is {value}? [Baby Don't Hurt Me]\")\n\n        validator = self.Validator(\n            {\"format\": \"foo\"}, format_checker=checker,\n        )\n\n        validator.validate(\"good\")\n        with self.assertRaises(exceptions.ValidationError) as cm:\n            validator.validate(\"bad\")\n\n        # Make sure original cause is attached\n        self.assertIs(cm.exception.cause, bad)"
}