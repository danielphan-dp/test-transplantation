{
  "test_name": "test_lookup_anchor_without_id",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "ID_AND_CHILDREN.create_resource",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 160
    },
    {
      "name": "Registry.with_resource.resolver",
      "source_code": "        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 320
    },
    {
      "name": "resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "Registry.with_resource",
      "source_code": "    def with_resource(self, uri: URI, resource: Resource[D]):\n        \"\"\"\n        Add the given `Resource` to the registry, without crawling it.\n        \"\"\"\n        return self.with_resources([(uri, resource)])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 509
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ID_AND_CHILDREN.create_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 160,
      "caller": "test_lookup_anchor_without_id",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)\n\n\n"
    },
    {
      "function": "Registry.with_resource.resolver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 320,
      "caller": "test_lookup_anchor_without_id",
      "source_code": "        @property\n        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver\n\n"
    },
    {
      "function": "resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_lookup_anchor_without_id",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "Registry.with_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 509,
      "caller": "test_lookup_anchor_without_id",
      "source_code": "    def with_resource(self, uri: URI, resource: Resource[D]):\n        \"\"\"\n        Add the given `Resource` to the registry, without crawling it.\n        \"\"\"\n        return self.with_resources([(uri, resource)])\n\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_lookup_anchor_without_id",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert resolved.contents == 12"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_lookup_anchor_without_id(self):\n        root = ID_AND_CHILDREN.create_resource({\"anchors\": {\"foo\": 12}})\n        resolver = Registry().with_resource(\"urn:example\", root).resolver()\n        resolved = resolver.lookup(\"urn:example#foo\")\n        assert resolved.contents == 12"
}