{
  "test_name": "test_parameter_validator",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_validation.py",
  "static_methods": [
    {
      "name": "Swagger2URIParser",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ParameterValidator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "validator.validate_request",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 106
    },
    {
      "name": "exc.value.detail.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Swagger2URIParser",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "ParameterValidator",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "validator.validate_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 106,
      "caller": "test_parameter_validator",
      "source_code": "    def validate_request(self, request):\n        if self.strict_validation:\n            query_errors = self.validate_query_parameter_list(\n                request, security_params=self.security_query_params\n            )\n\n            if query_errors:\n                raise ExtraParameterProblem(\n                    param_type=\"query\", extra_params=query_errors\n                )\n\n        for param in self.parameters.get(\"query\", []):\n            error = self.validate_query_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"path\", []):\n            error = self.validate_path_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"header\", []):\n            error = self.validate_header_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n\n        for param in self.parameters.get(\"cookie\", []):\n            error = self.validate_cookie_parameter(param, request)\n            if error:\n                raise BadRequestProblem(detail=error)\n"
    },
    {
      "function": "exc.value.detail.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_parameter_validator",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert exc.value.detail == \"Missing path parameter 'p1'\"",
    "assert exc.value.detail.startswith(\"'123' is not of type 'integer'\")",
    "assert exc.value.detail.startswith(\"'' is not of type 'integer'\")",
    "assert exc.value.detail.startswith(\"'foo' is not of type 'integer'\")",
    "assert exc.value.detail.startswith(\"'1.2' is not of type 'integer'\")",
    "assert exc.value.detail.startswith('4 is greater than the maximum of 3')",
    "assert exc.value.detail.startswith(\"'a' is not of type 'integer'\")",
    "assert validator.validate_request(request)",
    "assert exc.value.detail.startswith(\"'x' is not one of ['a', 'b']\")",
    "assert exc.value.detail.startswith('-1 is less than the minimum of 0')",
    "assert exc.value.detail.startswith('[1] is too short')",
    "assert exc.value.detail.startswith('[1, 2, 3, 4] is too long')",
    "assert exc.value.detail.startswith(\"'x' is not one of ['a', 'b']\")"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_parameter_validator(monkeypatch):\n    params = [\n        {\"name\": \"p1\", \"in\": \"path\", \"type\": \"integer\", \"required\": True},\n        {\"name\": \"h1\", \"in\": \"header\", \"type\": \"string\", \"enum\": [\"a\", \"b\"]},\n        {\"name\": \"c1\", \"in\": \"cookie\", \"type\": \"string\", \"enum\": [\"a\", \"b\"]},\n        {\"name\": \"q1\", \"in\": \"query\", \"type\": \"integer\", \"maximum\": 3},\n        {\n            \"name\": \"a1\",\n            \"in\": \"query\",\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 3,\n            \"items\": {\"type\": \"integer\", \"minimum\": 0},\n        },\n    ]\n\n    uri_parser = Swagger2URIParser(params, {})\n    validator = ParameterValidator(params, uri_parser=uri_parser)\n\n    kwargs = {\"query_params\": {}, \"headers\": {}, \"cookies\": {}}\n    request = MagicMock(path_params={}, **kwargs)\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail == \"Missing path parameter 'p1'\"\n\n    request = MagicMock(path_params={\"p1\": \"123\"}, **kwargs)\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'123' is not of type 'integer'\")\n\n    request = MagicMock(path_params={\"p1\": \"\"}, **kwargs)\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'' is not of type 'integer'\")\n\n    request = MagicMock(path_params={\"p1\": \"foo\"}, **kwargs)\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'foo' is not of type 'integer'\")\n\n    request = MagicMock(path_params={\"p1\": \"1.2\"}, **kwargs)\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'1.2' is not of type 'integer'\")\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"q1\": 4}, headers={}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"4 is greater than the maximum of 3\")\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"q1\": 3}, headers={}, cookies={}\n    )\n    try:\n        validator.validate_request(request)\n    except Exception as e:\n        pytest.fail(str(e))\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"a1\": [1, 2]}, headers={}, cookies={}\n    )\n    try:\n        validator.validate_request(request)\n    except Exception as e:\n        pytest.fail(str(e))\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"a1\": [1, \"a\"]}, headers={}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'a' is not of type 'integer'\")\n\n    request = MagicMock(\n        path_params={\"p1\": 123}, query_params={}, headers={}, cookies={\"c1\": \"b\"}\n    )\n    try:\n        validator.validate_request(request)\n    except Exception as e:\n        pytest.fail(str(e))\n\n    request = MagicMock(\n        path_params={\"p1\": 123}, query={}, headers={}, cookies={\"c1\": \"x\"}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        assert validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'x' is not one of ['a', 'b']\")\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"a1\": [1, -1]}, headers={}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"-1 is less than the minimum of 0\")\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"a1\": 1}, headers={}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"[1] is too short\")\n\n    request = MagicMock(\n        path_params={\"p1\": 1}, query_params={\"a1\": [1, 2, 3, 4]}, headers={}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"[1, 2, 3, 4] is too long\")\n\n    request = MagicMock(\n        path_params={\"p1\": 123}, query_params={}, headers={\"h1\": \"a\"}, cookies={}\n    )\n    try:\n        validator.validate_request(request)\n    except Exception as e:\n        pytest.fail(str(e))\n\n    request = MagicMock(\n        path_params={\"p1\": 123}, query_params={}, headers={\"h1\": \"x\"}, cookies={}\n    )\n    with pytest.raises(BadRequestProblem) as exc:\n        validator.validate_request(request)\n        assert exc.value.detail.startswith(\"'x' is not one of ['a', 'b']\")"
}