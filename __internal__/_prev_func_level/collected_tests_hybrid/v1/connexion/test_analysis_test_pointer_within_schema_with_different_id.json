{
  "test_name": "test_pointer_within_schema_with_different_id",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "validators._RefResolver",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.Draft7Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators._RefResolver",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.Draft7Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.is_valid",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 486
    },
    {
      "name": "validator.is_valid",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 486
    }
  ],
  "dynamic_methods": [
    {
      "function": "validators._RefResolver",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "validators.Draft7Validator",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "validators._RefResolver",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "validators.Draft7Validator",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": ""
    },
    {
      "function": "validator.is_valid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 486,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)\n\n            error = next(self.iter_errors(instance), None)\n            return error is None\n\n"
    },
    {
      "function": "validator.is_valid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 486,
      "caller": "test_pointer_within_schema_with_different_id",
      "source_code": "        def is_valid(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.is_valid is deprecated \"\n                        \"and will be removed in a future release. Call \"\n                        \"validator.evolve(schema=new_schema).is_valid(...) \"\n                        \"instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                self = self.evolve(schema=_schema)\n\n            error = next(self.iter_errors(instance), None)\n            return error is None\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pointer_within_schema_with_different_id(self):\n        \"\"\"\n        See #1085.\n        \"\"\"\n        schema = validators.Draft7Validator.META_SCHEMA\n        one = validators._RefResolver(\"\", schema)\n        validator = validators.Draft7Validator(schema, resolver=one)\n        self.assertFalse(validator.is_valid({\"maxLength\": \"foo\"}))\n\n        another = {\n            \"allOf\": [{\"$ref\": validators.Draft7Validator.META_SCHEMA[\"$id\"]}],\n        }\n        two = validators._RefResolver(\"\", another)\n        validator = validators.Draft7Validator(another, resolver=two)\n        self.assertFalse(validator.is_valid({\"maxLength\": \"foo\"}))"
}