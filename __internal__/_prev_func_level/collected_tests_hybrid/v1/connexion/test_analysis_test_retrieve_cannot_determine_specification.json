{
  "test_name": "test_retrieve_cannot_determine_specification",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Resource.from_contents",
      "source_code": "    def from_contents(\n        cls,\n        contents: D,\n        default_specification: (\n            type[Specification[D]] | Specification[D]\n        ) = Specification,\n    ) -> Resource[D]:\n        \"\"\"\n        Create a resource guessing which specification applies to the contents.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 191
    },
    {
      "name": "registry.get_or_retrieve",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 405
    }
  ],
  "dynamic_methods": [
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_retrieve_cannot_determine_specification",
      "source_code": ""
    },
    {
      "function": "Resource.from_contents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 191,
      "caller": "test_retrieve_cannot_determine_specification",
      "source_code": "    @classmethod\n    def from_contents(\n        cls,\n        contents: D,\n        default_specification: (\n            type[Specification[D]] | Specification[D]\n        ) = Specification,\n"
    },
    {
      "function": "registry.get_or_retrieve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 405,
      "caller": "test_retrieve_cannot_determine_specification",
      "source_code": "    def get_or_retrieve(self, uri: URI) -> Retrieved[D, Resource[D]]:\n        \"\"\"\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        \"\"\"\n        resource = self._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=self, value=resource)\n\n        registry = self.crawl()\n        resource = registry._resources.get(uri)\n        if resource is not None:\n            return Retrieved(registry=registry, value=resource)\n\n        try:\n            resource = registry._retrieve(uri)\n        except (\n            exceptions.CannotDetermineSpecification,\n            exceptions.NoSuchResource,\n        ):\n            raise\n        except Exception as error:\n            raise exceptions.Unretrievable(ref=uri) from error\n        else:\n            registry = registry.with_resource(uri, resource)\n            return Retrieved(registry=registry, value=resource)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_retrieve_cannot_determine_specification(self):\n        def retrieve(uri):\n            return Resource.from_contents({})\n\n        registry = Registry(retrieve=retrieve)\n        with pytest.raises(exceptions.CannotDetermineSpecification):\n            registry.get_or_retrieve(\"urn:uhoh\")"
}