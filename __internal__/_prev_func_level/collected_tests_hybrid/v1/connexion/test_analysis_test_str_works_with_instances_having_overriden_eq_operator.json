{
  "test_name": "test_str_works_with_instances_having_overriden_eq_operator",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "DontEQMeBro",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "exceptions.ValidationError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.fail",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line_number": 315
    },
    {
      "name": "self.fail",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line_number": 315
    }
  ],
  "dynamic_methods": [
    {
      "function": "DontEQMeBro",
      "filename": "",
      "line": 0,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": ""
    },
    {
      "function": "exceptions.ValidationError",
      "filename": "",
      "line": 0,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": ""
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line": 315,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/formparser.py",
      "line": 315,
      "caller": "test_str_works_with_instances_having_overriden_eq_operator",
      "source_code": "    def fail(self, message: str) -> te.NoReturn:\n        raise ValueError(message)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_str_works_with_instances_having_overriden_eq_operator(self):\n        \"\"\"\n        Check for #164 which rendered exceptions unusable when a\n        `ValidationError` involved instances with an `__eq__` method\n        that returned truthy values.\n        \"\"\"\n\n        class DontEQMeBro:\n            def __eq__(this, other):  # pragma: no cover\n                self.fail(\"Don't!\")\n\n            def __ne__(this, other):  # pragma: no cover\n                self.fail(\"Don't!\")\n\n        instance = DontEQMeBro()\n        error = exceptions.ValidationError(\n            \"a message\",\n            validator=\"foo\",\n            instance=instance,\n            validator_value=\"some\",\n            schema=\"schema\",\n        )\n        self.assertIn(repr(instance), str(error))"
}