{
  "test_name": "test_subresources_of_bool",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_jsonschema.py",
  "static_methods": [
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "specification.subresources_of",
      "source_code": "    def subresources_of(contents: Schema) -> Iterable[ObjectSchema]:\n        if isinstance(contents, bool):\n            return\n        for each in in_value:\n            if each in contents:\n                yield contents[each]\n        for each in in_subarray:\n            if each in contents:\n                yield from contents[each]\n        for each in in_subvalues:\n            if each in contents:\n                yield from contents[each].values()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/jsonschema.py",
      "line_number": 151
    }
  ],
  "dynamic_methods": [
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subresources_of_bool",
      "source_code": ""
    },
    {
      "function": "specification.subresources_of",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/jsonschema.py",
      "line": 151,
      "caller": "test_subresources_of_bool",
      "source_code": "    def subresources_of(contents: Schema) -> Iterable[ObjectSchema]:\n        if isinstance(contents, bool):\n            return\n        for each in in_value:\n            if each in contents:\n                yield contents[each]\n        for each in in_subarray:\n            if each in contents:\n                yield from contents[each]\n        for each in in_subvalues:\n            if each in contents:\n                yield from contents[each].values()\n\n"
    }
  ],
  "assertions": [
    "assert list(specification.subresources_of(value)) == []"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subresources_of_bool(specification, value):\n    assert list(specification.subresources_of(value)) == []"
}