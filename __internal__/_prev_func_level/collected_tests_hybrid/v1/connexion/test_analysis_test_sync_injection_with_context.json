{
  "test_name": "test_sync_injection_with_context",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/decorators/test_parameter.py",
  "static_methods": [
    {
      "name": "TestContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "func",
      "source_code": "    def func(self, name: str) -> str:\n        return f\"{self.choose_async()}def {name}\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jinja2/compiler.py",
      "line_number": 611
    },
    {
      "name": "TestContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SyncParameterDecorator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "parameter_decorator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "decorated_handler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "func.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "TestContext",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "func",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jinja2/compiler.py",
      "line": 611,
      "caller": "test_sync_injection_with_context",
      "source_code": "    def func(self, name: str) -> str:\n        return f\"{self.choose_async()}def {name}\"\n\n"
    },
    {
      "function": "TestContext",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "SyncParameterDecorator",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "parameter_decorator",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "decorated_handler",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    },
    {
      "function": "func.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_sync_injection_with_context",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_sync_injection_with_context():\n    request = MagicMock(name=\"request\")\n    request.path_params = {\"p1\": \"123\"}\n    request.get_body.return_value = {}\n\n    func = MagicMock()\n\n    def handler(context_, **kwargs):\n        func(context_, **kwargs)\n\n    context = {\"test\": \"success\"}\n\n    operation = MagicMock(name=\"operation\")\n    operation.is_request_body_defined = False\n    operation.body_name = lambda _: \"body\"\n\n    with TestContext(context=context, operation=operation):\n        parameter_decorator = SyncParameterDecorator(framework=FlaskFramework)\n        decorated_handler = parameter_decorator(handler)\n        decorated_handler(request)\n        func.assert_called_with(context, p1=\"123\", test=\"success\")"
}