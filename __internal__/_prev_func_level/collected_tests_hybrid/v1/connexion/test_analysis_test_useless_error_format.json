{
  "test_name": "test_useless_error_format",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
  "static_methods": [
    {
      "name": "self.cli_output_for",
      "source_code": "    def cli_output_for(self, *argv):\n        stdout, stderr = StringIO(), StringIO()\n        with redirect_stdout(stdout), redirect_stderr(stderr):  # noqa: SIM117\n            with self.assertRaises(SystemExit):\n                cli.parse_args(argv)\n        return stdout.getvalue(), stderr.getvalue()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
      "line_number": 854
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.cli_output_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
      "line": 854,
      "caller": "test_useless_error_format",
      "source_code": "    def cli_output_for(self, *argv):\n        stdout, stderr = StringIO(), StringIO()\n        with redirect_stdout(stdout), redirect_stderr(stderr):  # noqa: SIM117\n            with self.assertRaises(SystemExit):\n                cli.parse_args(argv)\n        return stdout.getvalue(), stderr.getvalue()\n\n"
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_useless_error_format",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_useless_error_format",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_useless_error_format(self):\n        stdout, stderr = self.cli_output_for(\n            \"--output\", \"pretty\",\n            \"--error-format\", \"foo\",\n            \"mem://some/schema\",\n        )\n        self.assertIn(\n            \"--error-format can only be used with --output plain\",\n            stderr,\n        )\n        self.assertFalse(stdout)"
}