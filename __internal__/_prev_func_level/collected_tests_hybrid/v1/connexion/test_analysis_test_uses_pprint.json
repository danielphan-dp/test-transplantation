{
  "test_name": "test_uses_pprint",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "self.assertShows",
      "source_code": "    def assertShows(self, expected, **kwargs):\n        expected = textwrap.dedent(expected).rstrip(\"\\n\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
      "line_number": 520
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "zip",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertShows",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
      "line": 520,
      "caller": "test_uses_pprint",
      "source_code": "    def assertShows(self, expected, **kwargs):\n        expected = textwrap.dedent(expected).rstrip(\"\\n\")\n\n        error = self.make_error(**kwargs)\n        message_line, _, rest = str(error).partition(\"\\n\")\n        self.assertEqual(message_line, error.message)\n        self.assertEqual(rest, expected)\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    },
    {
      "function": "zip",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uses_pprint",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_uses_pprint(self):\n        self.assertShows(\n            \"\"\"\n            Failed validating 'maxLength' in schema:\n                {0: 0,\n                 1: 1,\n                 2: 2,\n                 3: 3,\n                 4: 4,\n                 5: 5,\n                 6: 6,\n                 7: 7,\n                 8: 8,\n                 9: 9,\n                 10: 10,\n                 11: 11,\n                 12: 12,\n                 13: 13,\n                 14: 14,\n                 15: 15,\n                 16: 16,\n                 17: 17,\n                 18: 18,\n                 19: 19}\n\n            On instance:\n                [0,\n                 1,\n                 2,\n                 3,\n                 4,\n                 5,\n                 6,\n                 7,\n                 8,\n                 9,\n                 10,\n                 11,\n                 12,\n                 13,\n                 14,\n                 15,\n                 16,\n                 17,\n                 18,\n                 19,\n                 20,\n                 21,\n                 22,\n                 23,\n                 24]\n            \"\"\",\n            instance=list(range(25)),\n            schema=dict(zip(range(20), range(20))),\n            validator=\"maxLength\",\n        )"
}