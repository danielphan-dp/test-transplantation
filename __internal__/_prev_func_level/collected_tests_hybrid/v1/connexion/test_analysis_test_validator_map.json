{
  "test_name": "test_validator_map",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_json_validation.py",
  "static_methods": [
    {
      "name": "extend",
      "source_code": "    def extend(\n        self,\n        arg: (\n            Headers\n            | MultiDict[str, t.Any]\n            | cabc.Mapping[str, t.Any | list[t.Any] | tuple[t.Any, ...] | set[t.Any]]\n            | cabc.Iterable[tuple[str, t.Any]]\n            | None\n        ) = None,\n        /,\n        **kwargs: str,\n    ) -> None:\n        \"\"\"Extend headers in this object with items from another object\n        containing header items as well as keyword arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line_number": 225
    },
    {
      "name": "App",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_api",
      "source_code": "    def add_api(\n        self,\n        specification: t.Union[pathlib.Path, str, dict],\n        *,\n        base_path: t.Optional[str] = None,\n        name: t.Optional[str] = None,\n        arguments: t.Optional[dict] = None,\n        auth_all_paths: t.Optional[bool] = None,\n        jsonifier: t.Optional[Jsonifier] = None,\n        pythonic_params: t.Optional[bool] = None,\n        resolver: t.Optional[t.Union[Resolver, t.Callable]] = None,\n        resolver_error: t.Optional[int] = None,\n        strict_validation: t.Optional[bool] = None,\n        swagger_ui_options: t.Optional[SwaggerUIOptions] = None,\n        uri_parser_class: t.Optional[AbstractURIParser] = None,\n        validate_responses: t.Optional[bool] = None,\n        validator_map: t.Optional[dict] = None,\n        security_map: t.Optional[dict] = None,\n        **kwargs,\n    ) -> t.Any:\n        \"\"\"\n        Register an API represented by a single OpenAPI specification on this application.\n        Multiple APIs can be registered on a single application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line_number": 122
    },
    {
      "name": "app.test_client",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line_number": 273
    },
    {
      "name": "app_client.post",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().post(\n            url,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 575
    },
    {
      "name": "app_client.post",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().post(\n            url,\n            content=content,\n            data=data,\n            files=files,\n            json=json,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 575
    },
    {
      "name": "_utils.ensure_list",
      "source_code": "def ensure_list(thing):\n    \"\"\"\n    Wrap ``thing`` in a list if it's a single str.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_utils.py",
      "line_number": 95
    },
    {
      "name": "Draft4RequestValidator.VALIDATORS",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Draft4RequestValidator.VALIDATORS",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MinLengthRequestValidator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "extend",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line": 225,
      "caller": "test_validator_map",
      "source_code": "    def extend(\n        self,\n        arg: (\n            Headers\n            | MultiDict[str, t.Any]\n            | cabc.Mapping[str, t.Any | list[t.Any] | tuple[t.Any, ...] | set[t.Any]]\n            | cabc.Iterable[tuple[str, t.Any]]\n            | None\n        ) = None,\n        /,\n        **kwargs: str,\n"
    },
    {
      "function": "App",
      "filename": "",
      "line": 0,
      "caller": "test_validator_map",
      "source_code": ""
    },
    {
      "function": "app.add_api",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line": 122,
      "caller": "test_validator_map",
      "source_code": "    def add_api(\n        self,\n        specification: t.Union[pathlib.Path, str, dict],\n        *,\n        base_path: t.Optional[str] = None,\n        name: t.Optional[str] = None,\n        arguments: t.Optional[dict] = None,\n        auth_all_paths: t.Optional[bool] = None,\n        jsonifier: t.Optional[Jsonifier] = None,\n        pythonic_params: t.Optional[bool] = None,\n        resolver: t.Optional[t.Union[Resolver, t.Callable]] = None,\n        resolver_error: t.Optional[int] = None,\n        strict_validation: t.Optional[bool] = None,\n        swagger_ui_options: t.Optional[SwaggerUIOptions] = None,\n        uri_parser_class: t.Optional[AbstractURIParser] = None,\n        validate_responses: t.Optional[bool] = None,\n        validator_map: t.Optional[dict] = None,\n        security_map: t.Optional[dict] = None,\n        **kwargs,\n"
    },
    {
      "function": "app.test_client",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line": 273,
      "caller": "test_validator_map",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)\n\n"
    },
    {
      "function": "app_client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 575,
      "caller": "test_validator_map",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "app_client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 575,
      "caller": "test_validator_map",
      "source_code": "    def post(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        content: httpx._types.RequestContent | None = None,\n        data: _RequestData | None = None,\n        files: httpx._types.RequestFiles | None = None,\n        json: typing.Any = None,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "_utils.ensure_list",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_utils.py",
      "line": 95,
      "caller": "test_validator_map",
      "source_code": "def ensure_list(thing):\n    \"\"\"\n    Wrap ``thing`` in a list if it's a single str.\n\n    Otherwise, return it unchanged.\n    \"\"\"\n    if isinstance(thing, str):\n        return [thing]\n    return thing\n\n\n"
    },
    {
      "function": "Draft4RequestValidator.VALIDATORS",
      "filename": "",
      "line": 0,
      "caller": "test_validator_map",
      "source_code": ""
    },
    {
      "function": "Draft4RequestValidator.VALIDATORS",
      "filename": "",
      "line": 0,
      "caller": "test_validator_map",
      "source_code": ""
    },
    {
      "function": "MinLengthRequestValidator",
      "filename": "",
      "line": 0,
      "caller": "test_validator_map",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert res.status_code == 200",
    "assert res.status_code == 400"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_validator_map(json_validation_spec_dir, spec):\n    def validate_type(validator, types, instance, schema):\n        types = _utils.ensure_list(types)\n        errors = Draft4RequestValidator.VALIDATORS[\"type\"](\n            validator, types, instance, schema\n        )\n        yield from errors\n\n        if \"string\" in types and \"minLength\" not in schema:\n            errors = Draft4RequestValidator.VALIDATORS[\"minLength\"](\n                validator, 1, instance, schema\n            )\n            yield from errors\n\n    MinLengthRequestValidator = extend(Draft4RequestValidator, {\"type\": validate_type})\n\n    class MyJSONBodyValidator(JSONRequestBodyValidator):\n        @property\n        def _validator(self):\n            return MinLengthRequestValidator(self._schema)\n\n    validator_map = {\"body\": {\"application/json\": MyJSONBodyValidator}}\n\n    app = App(__name__, specification_dir=json_validation_spec_dir)\n    app.add_api(spec, validate_responses=True, validator_map=validator_map)\n    app_client = app.test_client()\n\n    res = app_client.post(\n        \"/v1.0/minlength\",\n        json={\"foo\": \"bar\"},\n    )\n    assert res.status_code == 200\n\n    res = app_client.post(\n        \"/v1.0/minlength\",\n        json={\"foo\": \"\"},\n    )\n    assert res.status_code == 400"
}