{
  "test_name": "test_warns_if_meta_schema_specified_was_not_found",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertWarns",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertWarns",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.validator_for",
      "source_code": "def validator_for(\n    schema,\n    default: Validator | _utils.Unset = _UNSET,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1335
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertWarns",
      "filename": "",
      "line": 0,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": ""
    },
    {
      "function": "self.assertWarns",
      "filename": "",
      "line": 0,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": ""
    },
    {
      "function": "validators.validator_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1335,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": "def validator_for(\n    schema,\n    default: Validator | _utils.Unset = _UNSET,\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_warns_if_meta_schema_specified_was_not_found",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_warns_if_meta_schema_specified_was_not_found(self):\n        with self.assertWarns(DeprecationWarning) as cm:\n            validators.validator_for(schema={\"$schema\": \"unknownSchema\"})\n\n        self.assertEqual(cm.filename, __file__)\n        self.assertEqual(\n            str(cm.warning),\n            \"The metaschema specified by $schema was not found. \"\n            \"Using the latest draft to validate, but this will raise \"\n            \"an error in the future.\",\n        )"
}