{
  "test_name": "test_with_contents_and_default_specification",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "Registry.with_contents",
      "source_code": "    def with_contents(\n        self,\n        pairs: Iterable[tuple[URI, D]],\n        **kwargs: Any,\n    ) -> Registry[D]:\n        r\"\"\"\n        Add the given contents to the registry, autodetecting when necessary.\n        \"\"\"\n        return self.with_resources(\n            (uri, Resource.from_contents(each, **kwargs))\n            for uri, each in pairs\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 532
    },
    {
      "name": "Resource.opaque",
      "source_code": "    def opaque(cls, contents: D) -> Resource[D]:\n        \"\"\"\n        Create an opaque `Resource` -- i.e. one with opaque specification.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 214
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Registry.with_contents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 532,
      "caller": "test_with_contents_and_default_specification",
      "source_code": "    def with_contents(\n        self,\n        pairs: Iterable[tuple[URI, D]],\n        **kwargs: Any,\n"
    },
    {
      "function": "Resource.opaque",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 214,
      "caller": "test_with_contents_and_default_specification",
      "source_code": "    @classmethod\n    def opaque(cls, contents: D) -> Resource[D]:\n        \"\"\"\n        Create an opaque `Resource` -- i.e. one with opaque specification.\n\n        See `Specification.OPAQUE` for details.\n        \"\"\"\n        return Specification.OPAQUE.create_resource(contents=contents)\n\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_with_contents_and_default_specification",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert registry[uri] == Resource.opaque({'foo': 'bar'})"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_with_contents_and_default_specification(self):\n        uri = \"urn:example\"\n        registry = Registry().with_contents(\n            [(uri, {\"foo\": \"bar\"})],\n            default_specification=Specification.OPAQUE,\n        )\n        assert registry[uri] == Resource.opaque({\"foo\": \"bar\"})"
}