{
  "test_name": "test_writers_unusual",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
  "static_methods": [
    {
      "name": "tw",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 88
    },
    {
      "name": "tw",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 88
    },
    {
      "name": "normalize_and_validate",
      "source_code": "def normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:\n    ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 134
    },
    {
      "name": "Headers",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tw",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 88
    },
    {
      "name": "tw",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 88
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "tw",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 88,
      "caller": "test_writers_unusual",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected\n\n\n"
    },
    {
      "function": "tw",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 88,
      "caller": "test_writers_unusual",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected\n\n\n"
    },
    {
      "function": "normalize_and_validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 134,
      "caller": "test_writers_unusual",
      "source_code": "@overload\ndef normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:\n    ...\n\n\n"
    },
    {
      "function": "Headers",
      "filename": "",
      "line": 0,
      "caller": "test_writers_unusual",
      "source_code": ""
    },
    {
      "function": "tw",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 88,
      "caller": "test_writers_unusual",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected\n\n\n"
    },
    {
      "function": "tw",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 88,
      "caller": "test_writers_unusual",
      "source_code": "def tw(writer: Any, obj: Any, expected: Any) -> None:\n    got = dowrite(writer, obj)\n    assert got == expected\n\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_writers_unusual",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_writers_unusual",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_writers_unusual() -> None:\n    # Simple test of the write_headers utility routine\n    tw(\n        write_headers,\n        normalize_and_validate([(\"foo\", \"bar\"), (\"baz\", \"quux\")]),\n        b\"foo: bar\\r\\nbaz: quux\\r\\n\\r\\n\",\n    )\n    tw(write_headers, Headers([]), b\"\\r\\n\")\n\n    # We understand HTTP/1.0, but we don't speak it\n    with pytest.raises(LocalProtocolError):\n        tw(\n            write_request,\n            Request(\n                method=\"GET\",\n                target=\"/\",\n                headers=[(\"Host\", \"foo\"), (\"Connection\", \"close\")],\n                http_version=\"1.0\",\n            ),\n            None,\n        )\n    with pytest.raises(LocalProtocolError):\n        tw(\n            write_any_response,\n            Response(\n                status_code=200, headers=[(\"Connection\", \"close\")], http_version=\"1.0\"\n            ),\n            None,\n        )"
}