{
  "test_name": "test_client_open_environ",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_testing.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/scaffold.py",
      "line_number": 336
    },
    {
      "name": "EnvironBuilder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.addfinalizer",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "builder.get_environ",
      "source_code": "    def get_environ(self) -> WSGIEnvironment:\n        \"\"\"Return the built environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 667
    },
    {
      "name": "client.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/scaffold.py",
      "line": 336,
      "caller": "test_client_open_environ",
      "source_code": "    @setupmethod\n    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n        def decorator(f: T_route) -> T_route:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f\n\n        return decorator\n\n"
    },
    {
      "function": "EnvironBuilder",
      "filename": "",
      "line": 0,
      "caller": "test_client_open_environ",
      "source_code": ""
    },
    {
      "function": "request.addfinalizer",
      "filename": "",
      "line": 0,
      "caller": "test_client_open_environ",
      "source_code": ""
    },
    {
      "function": "client.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_client_open_environ",
      "source_code": ""
    },
    {
      "function": "builder.get_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 667,
      "caller": "test_client_open_environ",
      "source_code": "    def get_environ(self) -> WSGIEnvironment:\n        \"\"\"Return the built environ.\n\n        .. versionchanged:: 0.15\n            The content type and length headers are set based on\n            input stream detection. Previously this only set the WSGI\n            keys.\n        \"\"\"\n        input_stream = self.input_stream\n        content_length = self.content_length\n\n        mimetype = self.mimetype\n        content_type = self.content_type\n\n        if input_stream is not None:\n            start_pos = input_stream.tell()\n            input_stream.seek(0, 2)\n            end_pos = input_stream.tell()\n            input_stream.seek(start_pos)\n            content_length = end_pos - start_pos\n        elif mimetype == \"multipart/form-data\":\n            input_stream, content_length, boundary = stream_encode_multipart(\n                CombinedMultiDict([self.form, self.files])\n            )\n            content_type = f'{mimetype}; boundary=\"{boundary}\"'\n        elif mimetype == \"application/x-www-form-urlencoded\":\n            form_encoded = _urlencode(self.form).encode(\"ascii\")\n            content_length = len(form_encoded)\n            input_stream = BytesIO(form_encoded)\n        else:\n            input_stream = BytesIO()\n\n        result: WSGIEnvironment = {}\n        if self.environ_base:\n            result.update(self.environ_base)\n\n        def _path_encode(x: str) -> str:\n            return _wsgi_encoding_dance(unquote(x))\n\n        raw_uri = _wsgi_encoding_dance(self.request_uri)\n        result.update(\n            {\n                \"REQUEST_METHOD\": self.method,\n                \"SCRIPT_NAME\": _path_encode(self.script_root),\n                \"PATH_INFO\": _path_encode(self.path),\n                \"QUERY_STRING\": _wsgi_encoding_dance(self.query_string),\n                # Non-standard, added by mod_wsgi, uWSGI\n                \"REQUEST_URI\": raw_uri,\n                # Non-standard, added by gunicorn\n                \"RAW_URI\": raw_uri,\n                \"SERVER_NAME\": self.server_name,\n                \"SERVER_PORT\": str(self.server_port),\n                \"HTTP_HOST\": self.host,\n                \"SERVER_PROTOCOL\": self.server_protocol,\n                \"wsgi.version\": self.wsgi_version,\n                \"wsgi.url_scheme\": self.url_scheme,\n                \"wsgi.input\": input_stream,\n                \"wsgi.errors\": self.errors_stream,\n                \"wsgi.multithread\": self.multithread,\n                \"wsgi.multiprocess\": self.multiprocess,\n                \"wsgi.run_once\": self.run_once,\n            }\n        )\n\n        headers = self.headers.copy()\n        # Don't send these as headers, they're part of the environ.\n        headers.remove(\"Content-Type\")\n        headers.remove(\"Content-Length\")\n\n        if content_type is not None:\n            result[\"CONTENT_TYPE\"] = content_type\n\n        if content_length is not None:\n            result[\"CONTENT_LENGTH\"] = str(content_length)\n\n        combined_headers = defaultdict(list)\n\n        for key, value in headers.to_wsgi_list():\n            combined_headers[f\"HTTP_{key.upper().replace('-', '_')}\"].append(value)\n\n        for key, values in combined_headers.items():\n            result[key] = \", \".join(values)\n\n        if self.environ_overrides:\n            result.update(self.environ_overrides)\n\n        return result\n\n"
    },
    {
      "function": "client.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_client_open_environ",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert rv.data == b'127.0.0.1'",
    "assert rv.data == b'127.0.0.2'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_client_open_environ(app, client, request):\n    @app.route(\"/index\")\n    def index():\n        return flask.request.remote_addr\n\n    builder = EnvironBuilder(app, path=\"/index\", method=\"GET\")\n    request.addfinalizer(builder.close)\n\n    rv = client.open(builder)\n    assert rv.data == b\"127.0.0.1\"\n\n    environ = builder.get_environ()\n    client.environ_base[\"REMOTE_ADDR\"] = \"127.0.0.2\"\n    rv = client.open(environ)\n    assert rv.data == b\"127.0.0.2\""
}