{
  "test_name": "test_load_dotenv",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.chdir",
      "source_code": "def chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 424
    },
    {
      "name": "load_dotenv",
      "source_code": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line_number": 704
    },
    {
      "name": "monkeypatch._setitem.append",
      "source_code": "    def append(self, item: t.Any) -> t.NoReturn:\n        _immutable_error(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/mixins.py",
      "line_number": 54
    },
    {
      "name": "Path.cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "load_dotenv",
      "source_code": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line_number": 704
    },
    {
      "name": "need_dotenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_load_dotenv",
      "source_code": ""
    },
    {
      "function": "monkeypatch.chdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 424,
      "caller": "test_load_dotenv",
      "source_code": "@contextlib.contextmanager\ndef chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)\n\n\n"
    },
    {
      "function": "load_dotenv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line": 704,
      "caller": "test_load_dotenv",
      "source_code": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n"
    },
    {
      "function": "monkeypatch._setitem.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/mixins.py",
      "line": 54,
      "caller": "test_load_dotenv",
      "source_code": "    def append(self, item: t.Any) -> t.NoReturn:\n        _immutable_error(self)\n\n"
    },
    {
      "function": "Path.cwd",
      "filename": "",
      "line": 0,
      "caller": "test_load_dotenv",
      "source_code": ""
    },
    {
      "function": "load_dotenv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line": 704,
      "caller": "test_load_dotenv",
      "source_code": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n"
    },
    {
      "function": "need_dotenv",
      "filename": "",
      "line": 0,
      "caller": "test_load_dotenv",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert load_dotenv()",
    "assert Path.cwd() == test_path",
    "assert os.environ['FOO'] == 'env'",
    "assert os.environ['BAR'] == 'bar'",
    "assert os.environ['SPAM'] == '1'",
    "assert os.environ['EGGS'] == '3'",
    "assert os.environ['HAM'] == '\u706b\u817f'",
    "assert not load_dotenv('non-existent-file', load_defaults=False)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_load_dotenv(monkeypatch):\n    # can't use monkeypatch.delitem since the keys don't exist yet\n    for item in (\"FOO\", \"BAR\", \"SPAM\", \"HAM\"):\n        monkeypatch._setitem.append((os.environ, item, notset))\n\n    monkeypatch.setenv(\"EGGS\", \"3\")\n    monkeypatch.chdir(test_path)\n    assert load_dotenv()\n    assert Path.cwd() == test_path\n    # .flaskenv doesn't overwrite .env\n    assert os.environ[\"FOO\"] == \"env\"\n    # set only in .flaskenv\n    assert os.environ[\"BAR\"] == \"bar\"\n    # set only in .env\n    assert os.environ[\"SPAM\"] == \"1\"\n    # set manually, files don't overwrite\n    assert os.environ[\"EGGS\"] == \"3\"\n    # test env file encoding\n    assert os.environ[\"HAM\"] == \"\u706b\u817f\"\n    # Non existent file should not load\n    assert not load_dotenv(\"non-existent-file\", load_defaults=False)"
}