{
  "test_name": "test_template_test_with_name",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_templating.py",
  "static_methods": [
    {
      "name": "app.template_test",
      "source_code": "    def template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]:\n        \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/app.py",
      "line_number": 698
    },
    {
      "name": "app.jinja_env.tests",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.jinja_env.tests.keys",
      "source_code": "    def keys(self, lower: bool = False) -> t.Iterable[str]:\n        for key, _ in self.items(lower):\n            yield key",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line_number": 217
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.template_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/app.py",
      "line": 698,
      "caller": "test_template_test_with_name",
      "source_code": "    @setupmethod\n    def template_test(\n        self, name: str | None = None\n"
    },
    {
      "function": "app.jinja_env.tests",
      "filename": "",
      "line": 0,
      "caller": "test_template_test_with_name",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_template_test_with_name",
      "source_code": ""
    },
    {
      "function": "app.jinja_env.tests.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line": 217,
      "caller": "test_template_test_with_name",
      "source_code": "    def keys(self, lower: bool = False) -> t.Iterable[str]:\n        for key, _ in self.items(lower):\n            yield key\n\n"
    }
  ],
  "assertions": [
    "assert 'boolean' in app.jinja_env.tests.keys()",
    "assert app.jinja_env.tests['boolean'] == is_boolean",
    "assert app.jinja_env.tests['boolean'](False)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_template_test_with_name(app):\n    @app.template_test(\"boolean\")\n    def is_boolean(value):\n        return isinstance(value, bool)\n\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == is_boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
}