{
  "test_name": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1179
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1179
    },
    {
      "name": "StringIO",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stream.close",
      "source_code": "    def close(self) -> None:\n        for callback in self._callbacks:\n            callback()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/wsgi.py",
      "line_number": 258
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1179
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1179
    },
    {
      "name": "AnsiToWin32",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1179,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1179,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "StringIO",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": ""
    },
    {
      "function": "stream.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/wsgi.py",
      "line": 258,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": "    def close(self) -> None:\n        for callback in self._callbacks:\n            callback()\n\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1179,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1179,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": "    def patch(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``PATCH``.\"\"\"\n        kw[\"method\"] = \"PATCH\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "AnsiToWin32",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('colorama.ansitowin32.os.name', 'nt')",
    "patch('colorama.ansitowin32.winapi_test', lambda : True)"
  ],
  "success": false,
  "test_source_code": "def test_wrap_shouldnt_raise_on_closed_orig_stdout(self):\n        stream = StringIO()\n        stream.close()\n        with \\\n            patch(\"colorama.ansitowin32.os.name\", \"nt\"), \\\n            patch(\"colorama.ansitowin32.winapi_test\", lambda: True):\n                converter = AnsiToWin32(stream)\n        self.assertTrue(converter.strip)\n        self.assertFalse(converter.convert)"
}