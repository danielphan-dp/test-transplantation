{
  "metrics": {
    "total_tests": 132,
    "successful_tests": 116,
    "failed_tests": 16,
    "total_assertions": 246,
    "total_mocks": 6,
    "total_static_methods": 711,
    "total_dynamic_methods": 711,
    "tests_with_docstrings": 7,
    "tests_with_fixtures": 0,
    "average_test_length": 8.590909090909092,
    "test_complexity": {
      "simple": 99,
      "moderate": 23,
      "complex": 10
    },
    "most_tested_methods": {
      "mock.patch": 54,
      "AltArgs": 42,
      "c.set": 38,
      "mock.Mock": 25,
      "reader.read": 22
    },
    "most_used_fixtures": {},
    "most_common_mocks": {
      "patch('colorama.ansitowin32.os.name', 'nt')": 2,
      "patch('colorama.ansitowin32.winapi_test', lambda : True)": 2,
      "patch('colorama.ansitowin32.winterm')": 1,
      "patch(a, b, create=True)": 1
    },
    "test_lengths": [
      8,
      7,
      8,
      6,
      6,
      15,
      22,
      7,
      7,
      10,
      10,
      9,
      33,
      8,
      8,
      8,
      8,
      9,
      9,
      7,
      6,
      7,
      7,
      7,
      6,
      10,
      4,
      40,
      11,
      13,
      6,
      16,
      9,
      8,
      9,
      17,
      10,
      6,
      5,
      6,
      6,
      6,
      5,
      5,
      6,
      20,
      8,
      11,
      9,
      5,
      7,
      5,
      10,
      7,
      5,
      6,
      8,
      6,
      6,
      4,
      5,
      33,
      2,
      4,
      4,
      2,
      2,
      4,
      2,
      5,
      7,
      8,
      2,
      23,
      15,
      15,
      17,
      8,
      5,
      5,
      5,
      6,
      11,
      13,
      5,
      5,
      13,
      9,
      9,
      8,
      3,
      3,
      4,
      4,
      7,
      9,
      7,
      26,
      15,
      7,
      4,
      5,
      12,
      8,
      8,
      9,
      14,
      8,
      11,
      8,
      3,
      4,
      4,
      3,
      4,
      4,
      2,
      9,
      5,
      5,
      6,
      9,
      7,
      15,
      43,
      5,
      5,
      4,
      4,
      4,
      6,
      6
    ],
    "assertion_density": 0.21693121693121692,
    "mock_density": 0.045454545454545456,
    "coverage_metrics": {
      "methods_with_multiple_tests": 96,
      "untested_methods": 0,
      "average_tests_per_method": 4.44375
    },
    "test_isolation": {
      "fully_isolated": 0,
      "partially_isolated": 4,
      "no_isolation": 128
    },
    "test_length_stats": {
      "min": 2,
      "max": 43,
      "median": 7.0,
      "std_dev": 6.658467083351046
    }
  },
  "analyses": [
    {
      "test_name": "test_create_sockets_unix_bytes",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_sock.py",
      "static_methods": [
        {
          "name": "mock.patch.object",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch.object",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "sock.create_sockets",
          "source_code": "def create_sockets(conf, log, fds=None):\n    \"\"\"\n    Create a new socket for the configured addresses or file descriptors.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line_number": 142
        },
        {
          "name": "print",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "isinstance",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "len",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "type",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch.object",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "mock.patch.object",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "sock.create_sockets",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line": 142,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": "def create_sockets(conf, log, fds=None):\n    \"\"\"\n    Create a new socket for the configured addresses or file descriptors.\n\n    If a configured address is a tuple then a TCP socket is created.\n    If it is a string, a Unix socket is created. Otherwise, a TypeError is\n    raised.\n    \"\"\"\n    listeners = []\n\n    # get it only once\n    addr = conf.address\n    fdaddr = [bind for bind in addr if isinstance(bind, int)]\n    if fds:\n        fdaddr += list(fds)\n    laddr = [bind for bind in addr if not isinstance(bind, int)]\n\n    # check ssl config early to raise the error on startup\n    # only the certfile is needed since it can contains the keyfile\n    if conf.certfile and not os.path.exists(conf.certfile):\n        raise ValueError('certfile \"%s\" does not exist' % conf.certfile)\n\n    if conf.keyfile and not os.path.exists(conf.keyfile):\n        raise ValueError('keyfile \"%s\" does not exist' % conf.keyfile)\n\n    # sockets are already bound\n    if fdaddr:\n        for fd in fdaddr:\n            sock = socket.fromfd(fd, socket.AF_UNIX, socket.SOCK_STREAM)\n            sock_name = sock.getsockname()\n            sock_type = _sock_type(sock_name)\n            listener = sock_type(sock_name, conf, log, fd=fd)\n            listeners.append(listener)\n\n        return listeners\n\n    # no sockets is bound, first initialization of gunicorn in this env.\n    for addr in laddr:\n        sock_type = _sock_type(addr)\n        sock = None\n        for i in range(5):\n            try:\n                sock = sock_type(addr, conf, log)\n            except OSError as e:\n                if e.args[0] == errno.EADDRINUSE:\n                    log.error(\"Connection in use: %s\", str(addr))\n                if e.args[0] == errno.EADDRNOTAVAIL:\n                    log.error(\"Invalid address: %s\", str(addr))\n                msg = \"connection to {addr} failed: {error}\"\n                log.error(msg.format(addr=str(addr), error=str(e)))\n                if i < 5:\n                    log.debug(\"Retrying in 1 second.\")\n                    time.sleep(1)\n            else:\n                break\n\n        if sock is None:\n            log.error(\"Can't connect to %s\", str(addr))\n            sys.exit(1)\n\n        listeners.append(sock)\n\n    return listeners\n\n\n"
        },
        {
          "function": "print",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "isinstance",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "len",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "type",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_create_sockets_unix_bytes",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert len(listeners) == 1",
        "assert isinstance(listeners[0], sock.UnixSocket)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_create_sockets_unix_bytes(stat):\n    conf = mock.Mock(address=[b'127.0.0.1:8000'])\n    log = mock.Mock()\n    with mock.patch.object(sock.UnixSocket, '__init__', lambda *args: None):\n        listeners = sock.create_sockets(conf, log)\n        assert len(listeners) == 1\n        print(type(listeners[0]))\n        assert isinstance(listeners[0], sock.UnixSocket)"
    },
    {
      "test_name": "test_create_sockets_unix_strings",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_sock.py",
      "static_methods": [
        {
          "name": "mock.patch.object",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch.object",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "sock.create_sockets",
          "source_code": "def create_sockets(conf, log, fds=None):\n    \"\"\"\n    Create a new socket for the configured addresses or file descriptors.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line_number": 142
        },
        {
          "name": "isinstance",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "len",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch.object",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_create_sockets_unix_strings",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "mock.patch.object",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "sock.create_sockets",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line": 142,
          "caller": "test_create_sockets_unix_strings",
          "source_code": "def create_sockets(conf, log, fds=None):\n    \"\"\"\n    Create a new socket for the configured addresses or file descriptors.\n\n    If a configured address is a tuple then a TCP socket is created.\n    If it is a string, a Unix socket is created. Otherwise, a TypeError is\n    raised.\n    \"\"\"\n    listeners = []\n\n    # get it only once\n    addr = conf.address\n    fdaddr = [bind for bind in addr if isinstance(bind, int)]\n    if fds:\n        fdaddr += list(fds)\n    laddr = [bind for bind in addr if not isinstance(bind, int)]\n\n    # check ssl config early to raise the error on startup\n    # only the certfile is needed since it can contains the keyfile\n    if conf.certfile and not os.path.exists(conf.certfile):\n        raise ValueError('certfile \"%s\" does not exist' % conf.certfile)\n\n    if conf.keyfile and not os.path.exists(conf.keyfile):\n        raise ValueError('keyfile \"%s\" does not exist' % conf.keyfile)\n\n    # sockets are already bound\n    if fdaddr:\n        for fd in fdaddr:\n            sock = socket.fromfd(fd, socket.AF_UNIX, socket.SOCK_STREAM)\n            sock_name = sock.getsockname()\n            sock_type = _sock_type(sock_name)\n            listener = sock_type(sock_name, conf, log, fd=fd)\n            listeners.append(listener)\n\n        return listeners\n\n    # no sockets is bound, first initialization of gunicorn in this env.\n    for addr in laddr:\n        sock_type = _sock_type(addr)\n        sock = None\n        for i in range(5):\n            try:\n                sock = sock_type(addr, conf, log)\n            except OSError as e:\n                if e.args[0] == errno.EADDRINUSE:\n                    log.error(\"Connection in use: %s\", str(addr))\n                if e.args[0] == errno.EADDRNOTAVAIL:\n                    log.error(\"Invalid address: %s\", str(addr))\n                msg = \"connection to {addr} failed: {error}\"\n                log.error(msg.format(addr=str(addr), error=str(e)))\n                if i < 5:\n                    log.debug(\"Retrying in 1 second.\")\n                    time.sleep(1)\n            else:\n                break\n\n        if sock is None:\n            log.error(\"Can't connect to %s\", str(addr))\n            sys.exit(1)\n\n        listeners.append(sock)\n\n    return listeners\n\n\n"
        },
        {
          "function": "isinstance",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "len",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_create_sockets_unix_strings",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_create_sockets_unix_strings",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert len(listeners) == 1",
        "assert isinstance(listeners[0], sock.UnixSocket)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_create_sockets_unix_strings(stat):\n    conf = mock.Mock(address=['127.0.0.1:8000'])\n    log = mock.Mock()\n    with mock.patch.object(sock.UnixSocket, '__init__', lambda *args: None):\n        listeners = sock.create_sockets(conf, log)\n        assert len(listeners) == 1\n        assert isinstance(listeners[0], sock.UnixSocket)"
    },
    {
      "test_name": "test_socket_close",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_sock.py",
      "static_methods": [
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "sock.close_sockets",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line_number": 207
        },
        {
          "name": "listener1.close.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "listener2.close.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_socket_close",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_socket_close",
          "source_code": ""
        },
        {
          "function": "sock.close_sockets",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line": 207,
          "caller": "test_socket_close",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)\n\n\n"
        },
        {
          "function": "listener1.close.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_socket_close",
          "source_code": ""
        },
        {
          "function": "listener2.close.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_socket_close",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_socket_close():\n    listener1 = mock.Mock()\n    listener1.getsockname.return_value = ('127.0.0.1', '80')\n    listener2 = mock.Mock()\n    listener2.getsockname.return_value = ('192.168.2.5', '80')\n    sock.close_sockets([listener1, listener2])\n    listener1.close.assert_called_with()\n    listener2.close.assert_called_with()"
    },
    {
      "test_name": "test_unix_socket_close_unlink",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_sock.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "sock.close_sockets",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line_number": 207
        },
        {
          "name": "listener.close.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unlink.assert_called_once_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_unix_socket_close_unlink",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_unix_socket_close_unlink",
          "source_code": ""
        },
        {
          "function": "sock.close_sockets",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line": 207,
          "caller": "test_unix_socket_close_unlink",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)\n\n\n"
        },
        {
          "function": "listener.close.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_unix_socket_close_unlink",
          "source_code": ""
        },
        {
          "function": "unlink.assert_called_once_with",
          "filename": "",
          "line": 0,
          "caller": "test_unix_socket_close_unlink",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_unix_socket_close_unlink",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unix_socket_close_unlink(unlink):\n    listener = mock.Mock()\n    listener.getsockname.return_value = '/var/run/test.sock'\n    sock.close_sockets([listener])\n    listener.close.assert_called_with()\n    unlink.assert_called_once_with('/var/run/test.sock')"
    },
    {
      "test_name": "test_unix_socket_close_without_unlink",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_sock.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "sock.close_sockets",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line_number": 207
        },
        {
          "name": "listener.close.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_unix_socket_close_without_unlink",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_unix_socket_close_without_unlink",
          "source_code": ""
        },
        {
          "function": "sock.close_sockets",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/sock.py",
          "line": 207,
          "caller": "test_unix_socket_close_without_unlink",
          "source_code": "def close_sockets(listeners, unlink=True):\n    for sock in listeners:\n        sock_name = sock.getsockname()\n        sock.close()\n        if unlink and _sock_type(sock_name) is UnixSocket:\n            os.unlink(sock_name)\n\n\n"
        },
        {
          "function": "listener.close.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_unix_socket_close_without_unlink",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_unix_socket_close_without_unlink",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert not unlink.called, 'unlink should not have been called'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unix_socket_close_without_unlink(unlink):\n    listener = mock.Mock()\n    listener.getsockname.return_value = '/var/run/test.sock'\n    sock.close_sockets([listener], False)\n    listener.close.assert_called_with()\n    assert not unlink.called, 'unlink should not have been called'"
    },
    {
      "test_name": "test_reload_on_syntax_error",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_reload.py",
      "static_methods": [
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SyntaxErrorApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MyWorker",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "worker.init_process",
          "source_code": "    def init_process(self):\n        \"\"\"\\\n        If you override this method in a subclass, the last statement\n        in the function should be to call this method with\n        super().init_process() so that the ``run()`` loop is initiated.\n        \"\"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line_number": 86
        },
        {
          "name": "reloader.start.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "reloader.add_extra_file.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        },
        {
          "function": "SyntaxErrorApp",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        },
        {
          "function": "MyWorker",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        },
        {
          "function": "worker.init_process",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line": 86,
          "caller": "test_reload_on_syntax_error",
          "source_code": "    def init_process(self):\n        \"\"\"\\\n        If you override this method in a subclass, the last statement\n        in the function should be to call this method with\n        super().init_process() so that the ``run()`` loop is initiated.\n        \"\"\"\n\n        # set environment' variables\n        if self.cfg.env:\n            for k, v in self.cfg.env.items():\n                os.environ[k] = v\n\n        util.set_owner_process(self.cfg.uid, self.cfg.gid,\n                               initgroups=self.cfg.initgroups)\n\n        # Reseed the random number generator\n        util.seed()\n\n        # For waking ourselves up\n        self.PIPE = os.pipe()\n        for p in self.PIPE:\n            util.set_non_blocking(p)\n            util.close_on_exec(p)\n\n        # Prevent fd inheritance\n        for s in self.sockets:\n            util.close_on_exec(s)\n        util.close_on_exec(self.tmp.fileno())\n\n        self.wait_fds = self.sockets + [self.PIPE[0]]\n\n        self.log.close_on_exec()\n\n        self.init_signals()\n\n        # start the reloader\n        if self.cfg.reload:\n            def changed(fname):\n                self.log.info(\"Worker reloading: %s modified\", fname)\n                self.alive = False\n                os.write(self.PIPE[1], b\"1\")\n                self.cfg.worker_int(self)\n                time.sleep(0.1)\n                sys.exit(0)\n\n            reloader_cls = reloader_engines[self.cfg.reload_engine]\n            self.reloader = reloader_cls(extra_files=self.cfg.reload_extra_files,\n                                         callback=changed)\n\n        self.load_wsgi()\n        if self.reloader:\n            self.reloader.start()\n\n        self.cfg.post_worker_init(self)\n\n        # Enter main run loop\n        self.booted = True\n        self.run()\n\n"
        },
        {
          "function": "reloader.start.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        },
        {
          "function": "reloader.add_extra_file.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_reload_on_syntax_error",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_reload_on_syntax_error():\n    \"\"\"\n    Test that reloading works if the application has a syntax error.\n    \"\"\"\n    reloader = mock.Mock()\n    reloader_engines['poll'] = lambda *args, **kw: reloader\n\n    app = SyntaxErrorApp()\n    cfg = app.cfg\n    log = mock.Mock()\n    worker = MyWorker(age=0, ppid=0, sockets=[], app=app, timeout=0, cfg=cfg, log=log)\n\n    worker.init_process()\n    reloader.start.assert_called_with()\n    reloader.add_extra_file.assert_called_with('syntax_error_filename')"
    },
    {
      "test_name": "test_start_reloader_after_load_wsgi",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_reload.py",
      "static_methods": [
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "ReloadApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MyWorker",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock_parent.attach_mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock_parent.attach_mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "worker.init_process",
          "source_code": "    def init_process(self):\n        \"\"\"\\\n        If you override this method in a subclass, the last statement\n        in the function should be to call this method with\n        super().init_process() so that the ``run()`` loop is initiated.\n        \"\"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line_number": 86
        },
        {
          "name": "mock_parent.assert_has_calls",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.call.load_wsgi",
          "source_code": "    def load_wsgi(self):\n        try:\n            self.wsgi = self.app.wsgi()\n        except SyntaxError as e:\n            if not self.cfg.reload:\n                raise",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line_number": 145
        },
        {
          "name": "mock.call.reloader_start",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "ReloadApp",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "MyWorker",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock_parent.attach_mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock_parent.attach_mock",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "worker.init_process",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line": 86,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": "    def init_process(self):\n        \"\"\"\\\n        If you override this method in a subclass, the last statement\n        in the function should be to call this method with\n        super().init_process() so that the ``run()`` loop is initiated.\n        \"\"\"\n\n        # set environment' variables\n        if self.cfg.env:\n            for k, v in self.cfg.env.items():\n                os.environ[k] = v\n\n        util.set_owner_process(self.cfg.uid, self.cfg.gid,\n                               initgroups=self.cfg.initgroups)\n\n        # Reseed the random number generator\n        util.seed()\n\n        # For waking ourselves up\n        self.PIPE = os.pipe()\n        for p in self.PIPE:\n            util.set_non_blocking(p)\n            util.close_on_exec(p)\n\n        # Prevent fd inheritance\n        for s in self.sockets:\n            util.close_on_exec(s)\n        util.close_on_exec(self.tmp.fileno())\n\n        self.wait_fds = self.sockets + [self.PIPE[0]]\n\n        self.log.close_on_exec()\n\n        self.init_signals()\n\n        # start the reloader\n        if self.cfg.reload:\n            def changed(fname):\n                self.log.info(\"Worker reloading: %s modified\", fname)\n                self.alive = False\n                os.write(self.PIPE[1], b\"1\")\n                self.cfg.worker_int(self)\n                time.sleep(0.1)\n                sys.exit(0)\n\n            reloader_cls = reloader_engines[self.cfg.reload_engine]\n            self.reloader = reloader_cls(extra_files=self.cfg.reload_extra_files,\n                                         callback=changed)\n\n        self.load_wsgi()\n        if self.reloader:\n            self.reloader.start()\n\n        self.cfg.post_worker_init(self)\n\n        # Enter main run loop\n        self.booted = True\n        self.run()\n\n"
        },
        {
          "function": "mock_parent.assert_has_calls",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        },
        {
          "function": "mock.call.load_wsgi",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/workers/base.py",
          "line": 145,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": "    def load_wsgi(self):\n        try:\n            self.wsgi = self.app.wsgi()\n        except SyntaxError as e:\n            if not self.cfg.reload:\n                raise\n\n            self.log.exception(e)\n\n            # fix from PR #1228\n            # storing the traceback into exc_tb will create a circular reference.\n            # per https://docs.python.org/2/library/sys.html#sys.exc_info warning,\n            # delete the traceback after use.\n            try:\n                _, exc_val, exc_tb = sys.exc_info()\n                self.reloader.add_extra_file(exc_val.filename)\n\n                tb_string = io.StringIO()\n                traceback.print_tb(exc_tb, file=tb_string)\n                self.wsgi = util.make_fail_app(tb_string.getvalue())\n            finally:\n                del exc_tb\n\n"
        },
        {
          "function": "mock.call.reloader_start",
          "filename": "",
          "line": 0,
          "caller": "test_start_reloader_after_load_wsgi",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_start_reloader_after_load_wsgi():\n    \"\"\"\n    Check that the reloader is started after the wsgi app has been loaded.\n    \"\"\"\n    reloader = mock.Mock()\n    reloader_engines['poll'] = lambda *args, **kw: reloader\n\n    app = ReloadApp()\n    cfg = app.cfg\n    log = mock.Mock()\n    worker = MyWorker(age=0, ppid=0, sockets=[], app=app, timeout=0, cfg=cfg, log=log)\n\n    worker.load_wsgi = mock.Mock()\n    mock_parent = mock.Mock()\n    mock_parent.attach_mock(worker.load_wsgi, 'load_wsgi')\n    mock_parent.attach_mock(reloader.start, 'reloader_start')\n\n    worker.init_process()\n    mock_parent.assert_has_calls([\n        mock.call.load_wsgi(),\n        mock.call.reloader_start(),\n    ])"
    },
    {
      "test_name": "test_listen_fds_ignores_wrong_pid",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_systemd.py",
      "static_methods": [
        {
          "name": "mock.patch.dict",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "check_environ",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line_number": 217
        },
        {
          "name": "mock.patch.dict",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "check_environ",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line_number": 217
        },
        {
          "name": "systemd.listen_fds",
          "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
          "line_number": 11
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch.dict",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": ""
        },
        {
          "function": "check_environ",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line": 217,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
        },
        {
          "function": "mock.patch.dict",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": ""
        },
        {
          "function": "check_environ",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line": 217,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
        },
        {
          "function": "systemd.listen_fds",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
          "line": 11,
          "caller": "test_listen_fds_ignores_wrong_pid",
          "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.\n\n    :param unset_environment: clear systemd environment variables unless False\n    :type unset_environment: bool\n    :return: the number of sockets to inherit from systemd socket activation\n    :rtype: int\n\n    Returns zero immediately if $LISTEN_PID is not set to the current pid.\n    Otherwise, returns the number of systemd activation sockets specified by\n    $LISTEN_FDS.\n\n    When $LISTEN_PID matches the current pid, unsets the environment variables\n    unless the ``unset_environment`` flag is ``False``.\n\n    .. note::\n        Unlike the sd_listen_fds C function, this implementation does not set\n        the FD_CLOEXEC flag because the gunicorn arbiter never needs to do this.\n\n    .. seealso::\n        `<https://www.freedesktop.org/software/systemd/man/sd_listen_fds.html>`_\n\n    \"\"\"\n    fds = int(os.environ.get('LISTEN_FDS', 0))\n    listen_pid = int(os.environ.get('LISTEN_PID', 0))\n\n    if listen_pid != os.getpid():\n        return 0\n\n    if unset_environment:\n        os.environ.pop('LISTEN_PID', None)\n        os.environ.pop('LISTEN_FDS', None)\n\n    return fds\n\n\n"
        }
      ],
      "assertions": [
        "assert systemd.listen_fds(unset) == 0, 'should ignore listen fds not intended for this pid'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_listen_fds_ignores_wrong_pid(unset):\n    with mock.patch.dict(os.environ):\n        os.environ['LISTEN_FDS'] = str(5)\n        os.environ['LISTEN_PID'] = str(1)\n        with check_environ(False):  # early exit \u2014 never changes the environment\n            assert systemd.listen_fds(unset) == 0, \\\n                \"should ignore listen fds not intended for this pid\""
    },
    {
      "test_name": "test_listen_fds_returns_count",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_systemd.py",
      "static_methods": [
        {
          "name": "mock.patch.dict",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "check_environ",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line_number": 217
        },
        {
          "name": "mock.patch.dict",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "check_environ",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line_number": 217
        },
        {
          "name": "systemd.listen_fds",
          "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
          "line_number": 11
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch.dict",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_returns_count",
          "source_code": ""
        },
        {
          "function": "check_environ",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line": 217,
          "caller": "test_listen_fds_returns_count",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
        },
        {
          "function": "mock.patch.dict",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_returns_count",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_returns_count",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_listen_fds_returns_count",
          "source_code": ""
        },
        {
          "function": "check_environ",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
          "line": 217,
          "caller": "test_listen_fds_returns_count",
          "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
        },
        {
          "function": "systemd.listen_fds",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
          "line": 11,
          "caller": "test_listen_fds_returns_count",
          "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.\n\n    :param unset_environment: clear systemd environment variables unless False\n    :type unset_environment: bool\n    :return: the number of sockets to inherit from systemd socket activation\n    :rtype: int\n\n    Returns zero immediately if $LISTEN_PID is not set to the current pid.\n    Otherwise, returns the number of systemd activation sockets specified by\n    $LISTEN_FDS.\n\n    When $LISTEN_PID matches the current pid, unsets the environment variables\n    unless the ``unset_environment`` flag is ``False``.\n\n    .. note::\n        Unlike the sd_listen_fds C function, this implementation does not set\n        the FD_CLOEXEC flag because the gunicorn arbiter never needs to do this.\n\n    .. seealso::\n        `<https://www.freedesktop.org/software/systemd/man/sd_listen_fds.html>`_\n\n    \"\"\"\n    fds = int(os.environ.get('LISTEN_FDS', 0))\n    listen_pid = int(os.environ.get('LISTEN_PID', 0))\n\n    if listen_pid != os.getpid():\n        return 0\n\n    if unset_environment:\n        os.environ.pop('LISTEN_PID', None)\n        os.environ.pop('LISTEN_FDS', None)\n\n    return fds\n\n\n"
        }
      ],
      "assertions": [
        "assert systemd.listen_fds(unset) == 5, 'should return the correct count of fds'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_listen_fds_returns_count(unset):\n    with mock.patch.dict(os.environ):\n        os.environ['LISTEN_FDS'] = str(5)\n        os.environ['LISTEN_PID'] = str(os.getpid())\n        with check_environ(unset):\n            assert systemd.listen_fds(unset) == 5, \\\n                \"should return the correct count of fds\""
    },
    {
      "test_name": "test_statsd_fail",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        },
        {
          "name": "logger.debug",
          "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line_number": 906
        },
        {
          "name": "logger.critical",
          "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 267
        },
        {
          "name": "logger.error",
          "source_code": "    def error() -> None:",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/traceback.py",
          "line_number": 667
        },
        {
          "name": "logger.warning",
          "source_code": "    def warning(self, response):\n        \"\"\"\n        Return a valid 1xx warning header value describing the cache\n        adjustments.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
          "line_number": 26
        },
        {
          "name": "logger.exception",
          "source_code": "    def exception(self, msg, *args, **kwargs):\n        self.error_log.exception(msg, *args, **kwargs)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 282
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_fail",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_fail",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_statsd_fail",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        },
        {
          "function": "logger.debug",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line": 906,
          "caller": "test_statsd_fail",
          "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)\n\n"
        },
        {
          "function": "logger.critical",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 267,
          "caller": "test_statsd_fail",
          "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)\n\n"
        },
        {
          "function": "logger.error",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/traceback.py",
          "line": 667,
          "caller": "test_statsd_fail",
          "source_code": "    def error() -> None:\n\n        try:\n            try:\n                foo(0)\n            except:\n                slfkjsldkfj  # type: ignore[name-defined]\n        except:\n            console.print_exception(show_locals=True)\n\n"
        },
        {
          "function": "logger.warning",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
          "line": 26,
          "caller": "test_statsd_fail",
          "source_code": "    def warning(self, response):\n        \"\"\"\n        Return a valid 1xx warning header value describing the cache\n        adjustments.\n\n        The response is provided too allow warnings like 113\n        http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need\n        to explicitly say response is over 24 hours old.\n        \"\"\"\n        return '110 - \"Response is Stale\"'\n\n"
        },
        {
          "function": "logger.exception",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 282,
          "caller": "test_statsd_fail",
          "source_code": "    def exception(self, msg, *args, **kwargs):\n        self.error_log.exception(msg, *args, **kwargs)\n\n"
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_fail",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_statsd_fail():\n    \"UDP socket fails\"\n    logger = Statsd(Config())\n    logger.sock = MockSocket(True)\n    logger.info(\"No impact on logging\")\n    logger.debug(\"No impact on logging\")\n    logger.critical(\"No impact on logging\")\n    logger.error(\"No impact on logging\")\n    logger.warning(\"No impact on logging\")\n    logger.exception(\"No impact on logging\")"
    },
    {
      "test_name": "test_statsd_host_initialization",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_host_initialization",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host_initialization",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_host_initialization",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_statsd_host_initialization",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host_initialization",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_host_initialization",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_statsd_host_initialization",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_statsd_host_initialization():\n    c = Config()\n    c.set('statsd_host', 'unix:test.sock')\n    logger = Statsd(c)\n    logger.info(\"Can be initialized and used with a UDS socket\")\n\n    # Can be initialized and used with a UDP address\n    c.set('statsd_host', 'host:8080')\n    logger = Statsd(c)\n    logger.info(\"Can be initialized and used with a UDP socket\")"
    },
    {
      "test_name": "test_dogstatsd_tags",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        },
        {
          "name": "tags.encode",
          "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
          "line_number": 103
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_dogstatsd_tags",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_dogstatsd_tags",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_dogstatsd_tags",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_dogstatsd_tags",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_dogstatsd_tags",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        },
        {
          "function": "tags.encode",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
          "line": 103,
          "caller": "test_dogstatsd_tags",
          "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'barb.westerly:2|g|#' + tags.encode('ascii')"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_dogstatsd_tags():\n    c = Config()\n    tags = 'yucatan,libertine:rhubarb'\n    c.set('dogstatsd_tags', tags)\n    logger = Statsd(c)\n    logger.sock = MockSocket(False)\n    logger.info(\"Twill\", extra={\"mtype\": \"gauge\", \"metric\": \"barb.westerly\",\n                                \"value\": 2})\n    assert logger.sock.msgs[0] == b\"barb.westerly:2|g|#\" + tags.encode('ascii')"
    },
    {
      "test_name": "test_instrument",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.error_log.addHandler",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        },
        {
          "name": "logger.sock.reset",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line_number": 1467
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        },
        {
          "name": "logger.sock.reset",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line_number": 1467
        },
        {
          "name": "logger.debug",
          "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line_number": 906
        },
        {
          "name": "logger.sock.reset",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line_number": 1467
        },
        {
          "name": "logger.critical",
          "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 267
        },
        {
          "name": "logger.sock.reset",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line_number": 1467
        },
        {
          "name": "logger.access",
          "source_code": "    def access(self, resp, req, environ, request_time):\n        \"\"\" See http://httpd.apache.org/docs/2.0/logs.html#combined\n        for format details\n        \"\"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 344
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "sio.getvalue",
          "source_code": "        def getvalue(self):\n            return self.builder.build()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line_number": 66
        },
        {
          "name": "sio.getvalue",
          "source_code": "        def getvalue(self):\n            return self.builder.build()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line_number": 66
        },
        {
          "name": "sio.getvalue",
          "source_code": "        def getvalue(self):\n            return self.builder.build()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line_number": 66
        },
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "timedelta",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        },
        {
          "function": "logger.error_log.addHandler",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_instrument",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        },
        {
          "function": "logger.sock.reset",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line": 1467,
          "caller": "test_instrument",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_instrument",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        },
        {
          "function": "logger.sock.reset",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line": 1467,
          "caller": "test_instrument",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
        },
        {
          "function": "logger.debug",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line": 906,
          "caller": "test_instrument",
          "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)\n\n"
        },
        {
          "function": "logger.sock.reset",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line": 1467,
          "caller": "test_instrument",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
        },
        {
          "function": "logger.critical",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 267,
          "caller": "test_instrument",
          "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)\n\n"
        },
        {
          "function": "logger.sock.reset",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
          "line": 1467,
          "caller": "test_instrument",
          "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
        },
        {
          "function": "logger.access",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 344,
          "caller": "test_instrument",
          "source_code": "    def access(self, resp, req, environ, request_time):\n        \"\"\" See http://httpd.apache.org/docs/2.0/logs.html#combined\n        for format details\n        \"\"\"\n\n        if not (self.cfg.accesslog or self.cfg.logconfig or\n           self.cfg.logconfig_dict or self.cfg.logconfig_json or\n           (self.cfg.syslog and not self.cfg.disable_redirect_access_to_syslog)):\n            return\n\n        # wrap atoms:\n        # - make sure atoms will be test case insensitively\n        # - if atom doesn't exist replace it by '-'\n        safe_atoms = self.atoms_wrapper_class(\n            self.atoms(resp, req, environ, request_time)\n        )\n\n        try:\n            self.access_log.info(self.cfg.access_log_format, safe_atoms)\n        except Exception:\n            self.error(traceback.format_exc())\n\n"
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        },
        {
          "function": "sio.getvalue",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line": 66,
          "caller": "test_instrument",
          "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
        },
        {
          "function": "sio.getvalue",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line": 66,
          "caller": "test_instrument",
          "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
        },
        {
          "function": "sio.getvalue",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
          "line": 66,
          "caller": "test_instrument",
          "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
        },
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        },
        {
          "function": "timedelta",
          "filename": "",
          "line": 0,
          "caller": "test_instrument",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'gunicorn.test:666|g'",
        "assert sio.getvalue() == 'Blah\\n'",
        "assert logger.sock.msgs[0] == b'gunicorn.test:666|g'",
        "assert sio.getvalue() == 'Blah\\n'",
        "assert logger.sock.msgs[0] == b'gunicorn.debug:667|g'",
        "assert sio.getvalue() == 'Blah\\n'",
        "assert logger.sock.msgs[0] == b'gunicorn.log.critical:1|c|@1.0'",
        "assert logger.sock.msgs[0] == b'gunicorn.request.duration:7000.0|ms'",
        "assert logger.sock.msgs[1] == b'gunicorn.requests:1|c|@1.0'",
        "assert logger.sock.msgs[2] == b'gunicorn.request.status.200:1|c|@1.0'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_instrument():\n    logger = Statsd(Config())\n    # Capture logged messages\n    sio = io.StringIO()\n    logger.error_log.addHandler(logging.StreamHandler(sio))\n    logger.sock = MockSocket(False)\n\n    # Regular message\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"gunicorn.test:666|g\"\n    assert sio.getvalue() == \"Blah\\n\"\n    logger.sock.reset()\n\n    # Only metrics, no logging\n    logger.info(\"\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"gunicorn.test:666|g\"\n    assert sio.getvalue() == \"Blah\\n\"  # log is unchanged\n    logger.sock.reset()\n\n    # Debug logging also supports metrics\n    logger.debug(\"\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.debug\", \"value\": 667})\n    assert logger.sock.msgs[0] == b\"gunicorn.debug:667|g\"\n    assert sio.getvalue() == \"Blah\\n\"  # log is unchanged\n    logger.sock.reset()\n\n    logger.critical(\"Boom\")\n    assert logger.sock.msgs[0] == b\"gunicorn.log.critical:1|c|@1.0\"\n    logger.sock.reset()\n\n    logger.access(SimpleNamespace(status=\"200 OK\"), None, {}, timedelta(seconds=7))\n    assert logger.sock.msgs[0] == b\"gunicorn.request.duration:7000.0|ms\"\n    assert logger.sock.msgs[1] == b\"gunicorn.requests:1|c|@1.0\"\n    assert logger.sock.msgs[2] == b\"gunicorn.request.status.200:1|c|@1.0\""
    },
    {
      "test_name": "test_prefix",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_prefix",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_prefix",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_prefix",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_prefix",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_prefix",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'test.gunicorn.test:666|g'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_prefix():\n    c = Config()\n    c.set(\"statsd_prefix\", \"test.\")\n    logger = Statsd(c)\n    logger.sock = MockSocket(False)\n\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"test.gunicorn.test:666|g\""
    },
    {
      "test_name": "test_prefix_no_dot",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_no_dot",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_prefix_no_dot",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_no_dot",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_no_dot",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_prefix_no_dot",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'test.gunicorn.test:666|g'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_prefix_no_dot():\n    c = Config()\n    c.set(\"statsd_prefix\", \"test\")\n    logger = Statsd(c)\n    logger.sock = MockSocket(False)\n\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"test.gunicorn.test:666|g\""
    },
    {
      "test_name": "test_prefix_multiple_dots",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_multiple_dots",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_prefix_multiple_dots",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_multiple_dots",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_multiple_dots",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_prefix_multiple_dots",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'test.gunicorn.test:666|g'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_prefix_multiple_dots():\n    c = Config()\n    c.set(\"statsd_prefix\", \"test...\")\n    logger = Statsd(c)\n    logger.sock = MockSocket(False)\n\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"test.gunicorn.test:666|g\""
    },
    {
      "test_name": "test_prefix_nested",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
      "static_methods": [
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Statsd",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "MockSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.info",
          "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line_number": 287
        }
      ],
      "dynamic_methods": [
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_nested",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_prefix_nested",
          "source_code": ""
        },
        {
          "function": "Statsd",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_nested",
          "source_code": ""
        },
        {
          "function": "MockSocket",
          "filename": "",
          "line": 0,
          "caller": "test_prefix_nested",
          "source_code": ""
        },
        {
          "function": "logger.info",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
          "line": 287,
          "caller": "test_prefix_nested",
          "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
        }
      ],
      "assertions": [
        "assert logger.sock.msgs[0] == b'test.asdf.gunicorn.test:666|g'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_prefix_nested():\n    c = Config()\n    c.set(\"statsd_prefix\", \"test.asdf.\")\n    logger = Statsd(c)\n    logger.sock = MockSocket(False)\n\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"test.asdf.gunicorn.test:666|g\""
    },
    {
      "test_name": "test_http_parser",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_invalid_requests.py",
      "static_methods": [
        {
          "name": "treq.load_py",
          "source_code": "def load_py(fname):\n    module_name = '__config__'\n    mod = types.ModuleType(module_name)\n    setattr(mod, 'uri', uri)\n    setattr(mod, 'cfg', Config())\n    loader = importlib.machinery.SourceFileLoader(module_name, fname)\n    loader.exec_module(mod)\n    return vars(mod)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line_number": 32
        },
        {
          "name": "treq.badrequest",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "req.check",
          "source_code": "    def check(self, name: str, *, peek: bool = False) -> bool:\n        \"\"\"Check whether the next token has the provided name.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 115
        }
      ],
      "dynamic_methods": [
        {
          "function": "treq.load_py",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line": 32,
          "caller": "test_http_parser",
          "source_code": "def load_py(fname):\n    module_name = '__config__'\n    mod = types.ModuleType(module_name)\n    setattr(mod, 'uri', uri)\n    setattr(mod, 'cfg', Config())\n    loader = importlib.machinery.SourceFileLoader(module_name, fname)\n    loader.exec_module(mod)\n    return vars(mod)\n\n\n"
        },
        {
          "function": "treq.badrequest",
          "filename": "",
          "line": 0,
          "caller": "test_http_parser",
          "source_code": ""
        },
        {
          "function": "req.check",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 115,
          "caller": "test_http_parser",
          "source_code": "    def check(self, name: str, *, peek: bool = False) -> bool:\n        \"\"\"Check whether the next token has the provided name.\n\n        By default, if the check succeeds, the token *must* be read before\n        another check. If `peek` is set to `True`, the token is not loaded and\n        would need to be checked again.\n        \"\"\"\n        assert (\n            self.next_token is None\n        ), f\"Cannot check for {name!r}, already have {self.next_token!r}\"\n        assert name in self.rules, f\"Unknown token name: {name!r}\"\n\n        expression = self.rules[name]\n\n        match = expression.match(self.source, self.position)\n        if match is None:\n            return False\n        if not peek:\n            self.next_token = Token(name, match[0], self.position)\n        return True\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_http_parser(fname):\n    env = treq.load_py(os.path.splitext(fname)[0] + \".py\")\n\n    expect = env[\"request\"]\n    cfg = env[\"cfg\"]\n    req = treq.badrequest(fname)\n\n    with pytest.raises(expect):\n        req.check(cfg)"
    },
    {
      "test_name": "test_http_parser",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_valid_requests.py",
      "static_methods": [
        {
          "name": "treq.load_py",
          "source_code": "def load_py(fname):\n    module_name = '__config__'\n    mod = types.ModuleType(module_name)\n    setattr(mod, 'uri', uri)\n    setattr(mod, 'cfg', Config())\n    loader = importlib.machinery.SourceFileLoader(module_name, fname)\n    loader.exec_module(mod)\n    return vars(mod)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line_number": 32
        },
        {
          "name": "treq.request",
          "source_code": "    def request(\n        self,\n        method,\n        url,\n        params=None,\n        data=None,\n        headers=None,\n        cookies=None,\n        files=None,\n        auth=None,\n        timeout=None,\n        allow_redirects=True,\n        proxies=None,\n        hooks=None,\n        stream=None,\n        verify=None,\n        cert=None,\n        json=None,\n    ):\n        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n        Returns :class:`Response <Response>` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 500
        },
        {
          "name": "req.gen_cases",
          "source_code": "    def gen_cases(self, cfg):\n        def get_funs(p):\n            return [v for k, v in inspect.getmembers(self) if k.startswith(p)]\n        senders = get_funs(\"send_\")\n        sizers = get_funs(\"size_\")\n        matchers = get_funs(\"match_\")\n        cfgs = [\n            (mt, sz, sn)\n            for mt in matchers\n            for sz in sizers\n            for sn in senders\n        ]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line_number": 217
        },
        {
          "name": "case",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "treq.load_py",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line": 32,
          "caller": "test_http_parser",
          "source_code": "def load_py(fname):\n    module_name = '__config__'\n    mod = types.ModuleType(module_name)\n    setattr(mod, 'uri', uri)\n    setattr(mod, 'cfg', Config())\n    loader = importlib.machinery.SourceFileLoader(module_name, fname)\n    loader.exec_module(mod)\n    return vars(mod)\n\n\n"
        },
        {
          "function": "treq.request",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 500,
          "caller": "test_http_parser",
          "source_code": "    def request(\n        self,\n        method,\n        url,\n        params=None,\n        data=None,\n        headers=None,\n        cookies=None,\n        files=None,\n        auth=None,\n        timeout=None,\n        allow_redirects=True,\n        proxies=None,\n        hooks=None,\n        stream=None,\n        verify=None,\n        cert=None,\n        json=None,\n"
        },
        {
          "function": "req.gen_cases",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/treq.py",
          "line": 217,
          "caller": "test_http_parser",
          "source_code": "    def gen_cases(self, cfg):\n        def get_funs(p):\n            return [v for k, v in inspect.getmembers(self) if k.startswith(p)]\n        senders = get_funs(\"send_\")\n        sizers = get_funs(\"size_\")\n        matchers = get_funs(\"match_\")\n        cfgs = [\n            (mt, sz, sn)\n            for mt in matchers\n            for sz in sizers\n            for sn in senders\n        ]\n\n        ret = []\n        for (mt, sz, sn) in cfgs:\n            if hasattr(mt, 'funcname'):\n                mtn = mt.func_name[6:]\n                szn = sz.func_name[5:]\n                snn = sn.func_name[5:]\n            else:\n                mtn = mt.__name__[6:]\n                szn = sz.__name__[5:]\n                snn = sn.__name__[5:]\n\n            def test_req(sn, sz, mt):\n                self.check(cfg, sn, sz, mt)\n            desc = \"%s: MT: %s SZ: %s SN: %s\" % (self.name, mtn, szn, snn)\n            test_req.description = desc\n            ret.append((test_req, sn, sz, mt))\n        return ret\n\n"
        },
        {
          "function": "case",
          "filename": "",
          "line": 0,
          "caller": "test_http_parser",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_http_parser(fname):\n    env = treq.load_py(os.path.splitext(fname)[0] + \".py\")\n\n    expect = env['request']\n    cfg = env['cfg']\n    req = treq.request(fname, expect)\n\n    for case in req.gen_cases(cfg):\n        case[0](*case[1:])"
    },
    {
      "test_name": "test_keyfile",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_keyfile",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(KeyFile, Setting)",
        "assert KeyFile.name == 'keyfile'",
        "assert KeyFile.section == 'SSL'",
        "assert KeyFile.cli == ['--keyfile']",
        "assert KeyFile.meta == 'FILE'",
        "assert KeyFile.default is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_keyfile():\n    assert issubclass(KeyFile, Setting)\n    assert KeyFile.name == 'keyfile'\n    assert KeyFile.section == 'SSL'\n    assert KeyFile.cli == ['--keyfile']\n    assert KeyFile.meta == 'FILE'\n    assert KeyFile.default is None"
    },
    {
      "test_name": "test_certfile",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_certfile",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(CertFile, Setting)",
        "assert CertFile.name == 'certfile'",
        "assert CertFile.section == 'SSL'",
        "assert CertFile.cli == ['--certfile']",
        "assert CertFile.default is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_certfile():\n    assert issubclass(CertFile, Setting)\n    assert CertFile.name == 'certfile'\n    assert CertFile.section == 'SSL'\n    assert CertFile.cli == ['--certfile']\n    assert CertFile.default is None"
    },
    {
      "test_name": "test_cacerts",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_cacerts",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(CACerts, Setting)",
        "assert CACerts.name == 'ca_certs'",
        "assert CACerts.section == 'SSL'",
        "assert CACerts.cli == ['--ca-certs']",
        "assert CACerts.meta == 'FILE'",
        "assert CACerts.default is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cacerts():\n    assert issubclass(CACerts, Setting)\n    assert CACerts.name == 'ca_certs'\n    assert CACerts.section == 'SSL'\n    assert CACerts.cli == ['--ca-certs']\n    assert CACerts.meta == 'FILE'\n    assert CACerts.default is None"
    },
    {
      "test_name": "test_suppress_ragged_eofs",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_suppress_ragged_eofs",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(SuppressRaggedEOFs, Setting)",
        "assert SuppressRaggedEOFs.name == 'suppress_ragged_eofs'",
        "assert SuppressRaggedEOFs.section == 'SSL'",
        "assert SuppressRaggedEOFs.cli == ['--suppress-ragged-eofs']",
        "assert SuppressRaggedEOFs.action == 'store_true'",
        "assert SuppressRaggedEOFs.default is True"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_suppress_ragged_eofs():\n    assert issubclass(SuppressRaggedEOFs, Setting)\n    assert SuppressRaggedEOFs.name == 'suppress_ragged_eofs'\n    assert SuppressRaggedEOFs.section == 'SSL'\n    assert SuppressRaggedEOFs.cli == ['--suppress-ragged-eofs']\n    assert SuppressRaggedEOFs.action == 'store_true'\n    assert SuppressRaggedEOFs.default is True"
    },
    {
      "test_name": "test_do_handshake_on_connect",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_do_handshake_on_connect",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(DoHandshakeOnConnect, Setting)",
        "assert DoHandshakeOnConnect.name == 'do_handshake_on_connect'",
        "assert DoHandshakeOnConnect.section == 'SSL'",
        "assert DoHandshakeOnConnect.cli == ['--do-handshake-on-connect']",
        "assert DoHandshakeOnConnect.action == 'store_true'",
        "assert DoHandshakeOnConnect.default is False"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_do_handshake_on_connect():\n    assert issubclass(DoHandshakeOnConnect, Setting)\n    assert DoHandshakeOnConnect.name == 'do_handshake_on_connect'\n    assert DoHandshakeOnConnect.section == 'SSL'\n    assert DoHandshakeOnConnect.cli == ['--do-handshake-on-connect']\n    assert DoHandshakeOnConnect.action == 'store_true'\n    assert DoHandshakeOnConnect.default is False"
    },
    {
      "test_name": "test_ciphers",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_ssl.py",
      "static_methods": [
        {
          "name": "issubclass",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "issubclass",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_ciphers",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert issubclass(Ciphers, Setting)",
        "assert Ciphers.name == 'ciphers'",
        "assert Ciphers.section == 'SSL'",
        "assert Ciphers.cli == ['--ciphers']",
        "assert Ciphers.default is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_ciphers():\n    assert issubclass(Ciphers, Setting)\n    assert Ciphers.name == 'ciphers'\n    assert Ciphers.section == 'SSL'\n    assert Ciphers.cli == ['--ciphers']\n    assert Ciphers.default is None"
    },
    {
      "test_name": "test_worker_class",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "isinstance",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "load_class",
          "source_code": "def load_class(uri, default=\"gunicorn.workers.sync.SyncWorker\",\n               section=\"gunicorn.workers\"):\n    if inspect.isclass(uri):\n        return uri\n    if uri.startswith(\"egg:\"):\n        # uses entry points\n        entry_str = uri.split(\"egg:\")[1]\n        try:\n            dist, name = entry_str.rsplit(\"#\", 1)\n        except ValueError:\n            dist = entry_str\n            name = default",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 68
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_worker_class",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_worker_class",
          "source_code": ""
        },
        {
          "function": "isinstance",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_worker_class",
          "source_code": ""
        },
        {
          "function": "load_class",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 68,
          "caller": "test_worker_class",
          "source_code": "def load_class(uri, default=\"gunicorn.workers.sync.SyncWorker\",\n               section=\"gunicorn.workers\"):\n    if inspect.isclass(uri):\n        return uri\n    if uri.startswith(\"egg:\"):\n        # uses entry points\n        entry_str = uri.split(\"egg:\")[1]\n        try:\n            dist, name = entry_str.rsplit(\"#\", 1)\n        except ValueError:\n            dist = entry_str\n            name = default\n\n        try:\n            return load_entry_point(dist, section, name)\n        except Exception:\n            exc = traceback.format_exc()\n            msg = \"class uri %r invalid or not found: \\n\\n[%s]\"\n            raise RuntimeError(msg % (uri, exc))\n    else:\n        components = uri.split('.')\n        if len(components) == 1:\n            while True:\n                if uri.startswith(\"#\"):\n                    uri = uri[1:]\n\n                if uri in SUPPORTED_WORKERS:\n                    components = SUPPORTED_WORKERS[uri].split(\".\")\n                    break\n\n                try:\n                    return load_entry_point(\n                        \"gunicorn\", section, uri\n                    )\n                except Exception:\n                    exc = traceback.format_exc()\n                    msg = \"class uri %r invalid or not found: \\n\\n[%s]\"\n                    raise RuntimeError(msg % (uri, exc))\n\n        klass = components.pop(-1)\n\n        try:\n            mod = importlib.import_module('.'.join(components))\n        except Exception:\n            exc = traceback.format_exc()\n            msg = \"class uri %r invalid or not found: \\n\\n[%s]\"\n            raise RuntimeError(msg % (uri, exc))\n        return getattr(mod, klass)\n\n\n"
        }
      ],
      "assertions": [
        "assert c.worker_class == CustomWorker",
        "assert isinstance(load_class(c.worker_class), object)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_worker_class():\n\n    c = config.Config()\n    c.set(\"worker_class\", CustomWorker)\n    assert c.worker_class == CustomWorker\n\n    try:\n        assert isinstance(load_class(c.worker_class), object)\n    except AttributeError:\n        pytest.fail(\"'load_class doesn't support type class argument'\")"
    },
    {
      "test_name": "test_defaults",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.settings.validator",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.settings.get",
          "source_code": "    def get(self, key):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line_number": 14
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_defaults",
          "source_code": ""
        },
        {
          "function": "c.settings.validator",
          "filename": "",
          "line": 0,
          "caller": "test_defaults",
          "source_code": ""
        },
        {
          "function": "c.settings.get",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line": 14,
          "caller": "test_defaults",
          "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
        }
      ],
      "assertions": [
        "assert c.settings[s.name].validator(s.default) == c.settings[s.name].get()"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_defaults():\n    c = config.Config()\n    for s in config.KNOWN_SETTINGS:\n        assert c.settings[s.name].validator(s.default) == c.settings[s.name].get()"
    },
    {
      "test_name": "test_property_access",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Baz",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "getattr",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_property_access",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_property_access",
          "source_code": ""
        },
        {
          "function": "Baz",
          "filename": "",
          "line": 0,
          "caller": "test_property_access",
          "source_code": ""
        },
        {
          "function": "getattr",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_property_access",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.worker_class == SyncWorker",
        "assert c.logger_class == glogging.Logger",
        "assert c.workers == 1",
        "assert c.workers == 3",
        "assert c.address == [('127.0.0.1', 8000)]",
        "assert os.geteuid() == c.uid",
        "assert os.getegid() == c.gid",
        "assert 'gunicorn' == c.proc_name",
        "assert c.foo == 3.14"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_property_access():\n    c = config.Config()\n    for s in config.KNOWN_SETTINGS:\n        getattr(c, s.name)\n\n    # Class was loaded\n    assert c.worker_class == SyncWorker\n\n    # logger class was loaded\n    assert c.logger_class == glogging.Logger\n\n    # Workers defaults to 1\n    assert c.workers == 1\n    c.set(\"workers\", 3)\n    assert c.workers == 3\n\n    # Address is parsed\n    assert c.address == [(\"127.0.0.1\", 8000)]\n\n    # User and group defaults\n    assert os.geteuid() == c.uid\n    assert os.getegid() == c.gid\n\n    # Proc name\n    assert \"gunicorn\" == c.proc_name\n\n    # Not a config property\n    pytest.raises(AttributeError, getattr, c, \"foo\")\n    # Force to be not an error\n    class Baz:\n        def get(self):\n            return 3.14\n    c.settings[\"foo\"] = Baz()\n    assert c.foo == 3.14\n\n    # Attempt to set a cfg not via c.set\n    pytest.raises(AttributeError, setattr, c, \"proc_name\", \"baz\")\n\n    # No setting for name\n    pytest.raises(AttributeError, c.set, \"baz\", \"bar\")"
    },
    {
      "test_name": "test_bool_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_bool_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_bool_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_bool_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_bool_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.preload_app is False",
        "assert c.preload_app is True",
        "assert c.preload_app is True",
        "assert c.preload_app is False"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_bool_validation():\n    c = config.Config()\n    assert c.preload_app is False\n    c.set(\"preload_app\", True)\n    assert c.preload_app is True\n    c.set(\"preload_app\", \"true\")\n    assert c.preload_app is True\n    c.set(\"preload_app\", \"false\")\n    assert c.preload_app is False\n    pytest.raises(ValueError, c.set, \"preload_app\", \"zilch\")\n    pytest.raises(TypeError, c.set, \"preload_app\", 4)"
    },
    {
      "test_name": "test_pos_int_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_pos_int_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_pos_int_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_pos_int_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_pos_int_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_pos_int_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.workers == 1",
        "assert c.workers == 4",
        "assert c.workers == 5",
        "assert c.workers == 255",
        "assert c.workers == 1"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_pos_int_validation():\n    c = config.Config()\n    assert c.workers == 1\n    c.set(\"workers\", 4)\n    assert c.workers == 4\n    c.set(\"workers\", \"5\")\n    assert c.workers == 5\n    c.set(\"workers\", \"0xFF\")\n    assert c.workers == 255\n    c.set(\"workers\", True)\n    assert c.workers == 1  # Yes. That's right...\n    pytest.raises(ValueError, c.set, \"workers\", -21)\n    pytest.raises(TypeError, c.set, \"workers\", c)"
    },
    {
      "test_name": "test_str_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_str_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.proc_name == 'gunicorn'",
        "assert c.proc_name == 'foo'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_str_validation():\n    c = config.Config()\n    assert c.proc_name == \"gunicorn\"\n    c.set(\"proc_name\", \" foo \")\n    assert c.proc_name == \"foo\"\n    pytest.raises(TypeError, c.set, \"proc_name\", 2)"
    },
    {
      "test_name": "test_str_to_addr_list_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_str_to_addr_list_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_addr_list_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_addr_list_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_addr_list_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.proxy_allow_ips == ['127.0.0.1', '::1']",
        "assert c.forwarded_allow_ips == ['127.0.0.1', '::1']",
        "assert c.forwarded_allow_ips == ['127.0.0.1', '192.0.2.1']",
        "assert c.forwarded_allow_ips == []",
        "assert c.forwarded_allow_ips == []"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_str_to_addr_list_validation():\n    c = config.Config()\n    assert c.proxy_allow_ips == [\"127.0.0.1\", \"::1\"]\n    assert c.forwarded_allow_ips == [\"127.0.0.1\", \"::1\"]\n    c.set(\"forwarded_allow_ips\", \"127.0.0.1,192.0.2.1\")\n    assert c.forwarded_allow_ips == [\"127.0.0.1\", \"192.0.2.1\"]\n    c.set(\"forwarded_allow_ips\", \"\")\n    assert c.forwarded_allow_ips == []\n    c.set(\"forwarded_allow_ips\", None)\n    assert c.forwarded_allow_ips == []\n    # demand addresses are specified unambiguously\n    pytest.raises(TypeError, c.set, \"forwarded_allow_ips\", 1)\n    # demand networks are specified unambiguously\n    pytest.raises(ValueError, c.set, \"forwarded_allow_ips\", \"127.0.0\")\n    # detect typos\n    pytest.raises(ValueError, c.set, \"forwarded_allow_ips\", \"::f:\")"
    },
    {
      "test_name": "test_str_to_list",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_str_to_list",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_list",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_list",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str_to_list",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.forwarder_headers == ['SCRIPT_NAME', 'PATH_INFO']",
        "assert c.forwarder_headers == ['SCRIPT_NAME', 'REMOTE_USER']",
        "assert c.forwarder_headers == []",
        "assert c.forwarder_headers == []"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_str_to_list():\n    c = config.Config()\n    assert c.forwarder_headers == [\"SCRIPT_NAME\", \"PATH_INFO\"]\n    c.set(\"forwarder_headers\", \"SCRIPT_NAME,REMOTE_USER\")\n    assert c.forwarder_headers == [\"SCRIPT_NAME\", \"REMOTE_USER\"]\n    c.set(\"forwarder_headers\", \"\")\n    assert c.forwarder_headers == []\n    c.set(\"forwarder_headers\", None)\n    assert c.forwarder_headers == []"
    },
    {
      "test_name": "test_callable_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_callable_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_callable_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.pre_fork == func"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_callable_validation():\n    c = config.Config()\n    def func(a, b):\n        pass\n    c.set(\"pre_fork\", func)\n    assert c.pre_fork == func\n    pytest.raises(TypeError, c.set, \"pre_fork\", 1)\n    pytest.raises(TypeError, c.set, \"pre_fork\", lambda x: True)"
    },
    {
      "test_name": "test_reload_engine_validation",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_reload_engine_validation",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_reload_engine_validation",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.reload_engine == 'auto'",
        "assert c.reload_engine == 'poll'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_reload_engine_validation():\n    c = config.Config()\n\n    assert c.reload_engine == \"auto\"\n\n    c.set('reload_engine', 'poll')\n    assert c.reload_engine == 'poll'\n\n    pytest.raises(ConfigError, c.set, \"reload_engine\", \"invalid\")"
    },
    {
      "test_name": "test_callable_validation_for_string",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.validate_callable",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 433
        },
        {
          "name": "config.validate_callable",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 433
        },
        {
          "name": "config.validate_callable",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 433
        },
        {
          "name": "config.validate_callable",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 433
        },
        {
          "name": "config.validate_callable",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 433
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.validate_callable",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 433,
          "caller": "test_callable_validation_for_string",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable\n\n\n"
        },
        {
          "function": "config.validate_callable",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 433,
          "caller": "test_callable_validation_for_string",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable\n\n\n"
        },
        {
          "function": "config.validate_callable",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 433,
          "caller": "test_callable_validation_for_string",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable\n\n\n"
        },
        {
          "function": "config.validate_callable",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 433,
          "caller": "test_callable_validation_for_string",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable\n\n\n"
        },
        {
          "function": "config.validate_callable",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 433,
          "caller": "test_callable_validation_for_string",
          "source_code": "def validate_callable(arity):\n    def _validate_callable(val):\n        if isinstance(val, str):\n            try:\n                mod_name, obj_name = val.rsplit(\".\", 1)\n            except ValueError:\n                raise TypeError(\"Value '%s' is not import string. \"\n                                \"Format: module[.submodules...].object\" % val)\n            try:\n                mod = __import__(mod_name, fromlist=[obj_name])\n                val = getattr(mod, obj_name)\n            except ImportError as e:\n                raise TypeError(str(e))\n            except AttributeError:\n                raise TypeError(\"Can not load '%s' from '%s'\"\n                                \"\" % (obj_name, mod_name))\n        if not callable(val):\n            raise TypeError(\"Value is not callable: %s\" % val)\n        if arity != -1 and arity != util.get_arity(val):\n            raise TypeError(\"Value must have an arity of: %s\" % arity)\n        return val\n    return _validate_callable\n\n\n"
        }
      ],
      "assertions": [
        "assert config.validate_callable(-1)('os.path.isdir') == testfunc"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_callable_validation_for_string():\n    from os.path import isdir as testfunc\n    assert config.validate_callable(-1)(\"os.path.isdir\") == testfunc\n\n    # invalid values tests\n    pytest.raises(\n        TypeError,\n        config.validate_callable(-1), \"\"\n    )\n    pytest.raises(\n        TypeError,\n        config.validate_callable(-1), \"os.path.not_found_func\"\n    )\n    pytest.raises(\n        TypeError,\n        config.validate_callable(-1), \"notfoundmodule.func\"\n    )"
    },
    {
      "test_name": "test_cmd_line",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['blargh']",
        "assert app.cfg.workers == 3",
        "assert app.cfg.preload_app"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cmd_line():\n    with AltArgs([\"prog_name\", \"-b\", \"blargh\"]):\n        app = NoConfigApp()\n        assert app.cfg.bind == [\"blargh\"]\n    with AltArgs([\"prog_name\", \"-w\", \"3\"]):\n        app = NoConfigApp()\n        assert app.cfg.workers == 3\n    with AltArgs([\"prog_name\", \"--preload\"]):\n        app = NoConfigApp()\n        assert app.cfg.preload_app"
    },
    {
      "test_name": "test_cmd_line_invalid_setting",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "capsys.readouterr",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line_invalid_setting",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line_invalid_setting",
          "source_code": ""
        },
        {
          "function": "capsys.readouterr",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line_invalid_setting",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cmd_line_invalid_setting",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert 'error: unrecognized arguments: -q' in err"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cmd_line_invalid_setting(capsys):\n    with AltArgs([\"prog_name\", \"-q\", \"bar\"]):\n        with pytest.raises(SystemExit):\n            NoConfigApp()\n        _, err = capsys.readouterr()\n        assert  \"error: unrecognized arguments: -q\" in err"
    },
    {
      "test_name": "test_app_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "app.cfg.settings.validator",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "app.cfg.settings.get",
          "source_code": "    def get(self, key):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line_number": 14
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_app_config",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_app_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_app_config",
          "source_code": ""
        },
        {
          "function": "app.cfg.settings.validator",
          "filename": "",
          "line": 0,
          "caller": "test_app_config",
          "source_code": ""
        },
        {
          "function": "app.cfg.settings.get",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line": 14,
          "caller": "test_app_config",
          "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
        }
      ],
      "assertions": [
        "assert app.cfg.settings[s.name].validator(s.default) == app.cfg.settings[s.name].get()"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_app_config():\n    with AltArgs():\n        app = NoConfigApp()\n    for s in config.KNOWN_SETTINGS:\n        assert app.cfg.settings[s.name].validator(s.default) == app.cfg.settings[s.name].get()"
    },
    {
      "test_name": "test_load_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_load_config",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_load_config",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['unix:/tmp/bar/baz']",
        "assert app.cfg.workers == 3",
        "assert app.cfg.proc_name == 'fooey'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_load_config():\n    with AltArgs([\"prog_name\", \"-c\", cfg_file()]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"unix:/tmp/bar/baz\"]\n    assert app.cfg.workers == 3\n    assert app.cfg.proc_name == \"fooey\""
    },
    {
      "test_name": "test_load_config_explicit_file",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_explicit_file",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_explicit_file",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_explicit_file",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_load_config_explicit_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['unix:/tmp/bar/baz']",
        "assert app.cfg.workers == 3",
        "assert app.cfg.proc_name == 'fooey'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_load_config_explicit_file():\n    with AltArgs([\"prog_name\", \"-c\", \"file:%s\" % cfg_file()]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"unix:/tmp/bar/baz\"]\n    assert app.cfg.workers == 3\n    assert app.cfg.proc_name == \"fooey\""
    },
    {
      "test_name": "test_load_config_module",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_module",
          "source_code": "def cfg_module():\n    return 'config.test_cfg'",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 21
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_module",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_module",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_load_config_module",
          "source_code": ""
        },
        {
          "function": "cfg_module",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 21,
          "caller": "test_load_config_module",
          "source_code": "def cfg_module():\n    return 'config.test_cfg'\n"
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['unix:/tmp/bar/baz']",
        "assert app.cfg.workers == 3",
        "assert app.cfg.proc_name == 'fooey'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_load_config_module():\n    with AltArgs([\"prog_name\", \"-c\", \"python:%s\" % cfg_module()]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"unix:/tmp/bar/baz\"]\n    assert app.cfg.workers == 3\n    assert app.cfg.proc_name == \"fooey\""
    },
    {
      "test_name": "test_cli_overrides_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_cli_overrides_config",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['blarney']",
        "assert app.cfg.proc_name == 'fooey'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cli_overrides_config():\n    with AltArgs([\"prog_name\", \"-c\", cfg_file(), \"-b\", \"blarney\"]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"blarney\"]\n    assert app.cfg.proc_name == \"fooey\""
    },
    {
      "test_name": "test_cli_overrides_config_module",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_module",
          "source_code": "def cfg_module():\n    return 'config.test_cfg'",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 21
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config_module",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config_module",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_config_module",
          "source_code": ""
        },
        {
          "function": "cfg_module",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 21,
          "caller": "test_cli_overrides_config_module",
          "source_code": "def cfg_module():\n    return 'config.test_cfg'\n"
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['blarney']",
        "assert app.cfg.proc_name == 'fooey'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cli_overrides_config_module():\n    with AltArgs([\"prog_name\", \"-c\", \"python:%s\" % cfg_module(), \"-b\", \"blarney\"]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"blarney\"]\n    assert app.cfg.proc_name == \"fooey\""
    },
    {
      "test_name": "test_default_config_file",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "config.get_default_config_file",
          "source_code": "def get_default_config_file():\n    config_path = os.path.join(os.path.abspath(os.getcwd()),\n                               'gunicorn.conf.py')\n    if os.path.exists(config_path):\n        return config_path\n    return None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 542
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_default_config_file",
          "source_code": ""
        },
        {
          "function": "config.get_default_config_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 542,
          "caller": "test_default_config_file",
          "source_code": "def get_default_config_file():\n    config_path = os.path.join(os.path.abspath(os.getcwd()),\n                               'gunicorn.conf.py')\n    if os.path.exists(config_path):\n        return config_path\n    return None\n\n\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_default_config_file",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_default_config_file",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert config.get_default_config_file() == create_config_file.name",
        "assert app.cfg.bind == ['0.0.0.0:9090']"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_default_config_file(create_config_file):\n    assert config.get_default_config_file() == create_config_file.name\n\n    with AltArgs([\"prog_name\"]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"0.0.0.0:9090\"]"
    },
    {
      "test_name": "test_post_request",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 1934
        },
        {
          "name": "c.post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 1934
        },
        {
          "name": "c.post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 1934
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_post_request",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_post_request",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_post_request",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_post_request",
          "source_code": ""
        },
        {
          "function": "c.post_request",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 1934,
          "caller": "test_post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
        },
        {
          "function": "c.post_request",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 1934,
          "caller": "test_post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
        },
        {
          "function": "c.post_request",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 1934,
          "caller": "test_post_request",
          "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
        }
      ],
      "assertions": [
        "assert c.post_request(1, 2, 3, 4) == 4",
        "assert c.post_request(1, 2, 3, 4) == 3",
        "assert c.post_request(1, 2, 3, 4) == 2"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_post_request():\n    c = config.Config()\n\n    def post_request_4(worker, req, environ, resp):\n        return 4\n\n    def post_request_3(worker, req, environ):\n        return 3\n\n    def post_request_2(worker, req):\n        return 2\n\n    c.set(\"post_request\", post_request_4)\n    assert c.post_request(1, 2, 3, 4) == 4\n\n    c.set(\"post_request\", post_request_3)\n    assert c.post_request(1, 2, 3, 4) == 3\n\n    c.set(\"post_request\", post_request_2)\n    assert c.post_request(1, 2, 3, 4) == 2"
    },
    {
      "test_name": "test_nworkers_changed",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.nworkers_changed",
          "source_code": "    def nworkers_changed(server, new_value, old_value):\n        pass\n    default = staticmethod(nworkers_changed)\n    desc = \"\"\"\\\n        Called just after *num_workers* has been changed.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line_number": 1987
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_nworkers_changed",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_nworkers_changed",
          "source_code": ""
        },
        {
          "function": "c.nworkers_changed",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
          "line": 1987,
          "caller": "test_nworkers_changed",
          "source_code": "    def nworkers_changed(server, new_value, old_value):\n        pass\n"
        }
      ],
      "assertions": [
        "assert c.nworkers_changed(1, 2, 3) == 3"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_nworkers_changed():\n    c = config.Config()\n\n    def nworkers_changed_3(server, new_value, old_value):\n        return 3\n\n    c.set(\"nworkers_changed\", nworkers_changed_3)\n    assert c.nworkers_changed(1, 2, 3) == 3"
    },
    {
      "test_name": "test_statsd_host",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_host",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.statsd_host is None",
        "assert c.statsd_host == ('localhost', 8125)",
        "assert c.statsd_host == ('statsd', 7777)",
        "assert c.statsd_host == '/path/to.sock'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_statsd_host():\n    c = config.Config()\n    assert c.statsd_host is None\n    c.set(\"statsd_host\", \"localhost\")\n    assert c.statsd_host == (\"localhost\", 8125)\n    c.set(\"statsd_host\", \"statsd:7777\")\n    assert c.statsd_host == (\"statsd\", 7777)\n    c.set(\"statsd_host\", \"unix:///path/to.sock\")\n    assert c.statsd_host == \"/path/to.sock\"\n    pytest.raises(TypeError, c.set, \"statsd_host\", 666)\n    pytest.raises(TypeError, c.set, \"statsd_host\", \"host:string\")"
    },
    {
      "test_name": "test_statsd_host_with_unix_as_hostname",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_host_with_unix_as_hostname",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host_with_unix_as_hostname",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_host_with_unix_as_hostname",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.statsd_host == ('unix', 7777)",
        "assert c.statsd_host == 'some.socket'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_statsd_host_with_unix_as_hostname():\n    # This is a regression test for major release 20. After this release\n    # we should consider modifying the behavior of util.parse_address to\n    # simplify gunicorn's code\n    c = config.Config()\n    c.set(\"statsd_host\", \"unix:7777\")\n    assert c.statsd_host == (\"unix\", 7777)\n    c.set(\"statsd_host\", \"unix://some.socket\")\n    assert c.statsd_host == \"some.socket\""
    },
    {
      "test_name": "test_statsd_changes_logger",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_statsd_changes_logger",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_statsd_changes_logger",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.logger_class == glogging.Logger",
        "assert c.logger_class == statsd.Statsd"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_statsd_changes_logger():\n    c = config.Config()\n    assert c.logger_class == glogging.Logger\n    c.set('statsd_host', 'localhost:12345')\n    assert c.logger_class == statsd.Statsd"
    },
    {
      "test_name": "test_always_use_configured_logger",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_always_use_configured_logger",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_always_use_configured_logger",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_always_use_configured_logger",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert c.logger_class == MyLogger",
        "assert c.logger_class == MyLogger"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_always_use_configured_logger():\n    c = config.Config()\n    c.set('logger_class', __name__ + '.MyLogger')\n    assert c.logger_class == MyLogger\n    c.set('statsd_host', 'localhost:12345')\n    # still uses custom logger over statsd\n    assert c.logger_class == MyLogger"
    },
    {
      "test_name": "test_load_enviroment_variables_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "monkeypatch.setenv",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "monkeypatch.setenv",
          "filename": "",
          "line": 0,
          "caller": "test_load_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_load_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_load_enviroment_variables_config",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert app.cfg.workers == 4"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_load_enviroment_variables_config(monkeypatch):\n    monkeypatch.setenv(\"GUNICORN_CMD_ARGS\", \"--workers=4\")\n    with AltArgs():\n        app = NoConfigApp()\n    assert app.cfg.workers == 4"
    },
    {
      "test_name": "test_config_file_environment_variable",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "monkeypatch.setenv",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "alt_cfg_file",
          "source_code": "def alt_cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg_alt.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 27
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        },
        {
          "name": "alt_cfg_file",
          "source_code": "def alt_cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg_alt.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 27
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "monkeypatch.setenv",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "alt_cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 27,
          "caller": "test_config_file_environment_variable",
          "source_code": "def alt_cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg_alt.py\")\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_config_file_environment_variable",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_config_file_environment_variable",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        },
        {
          "function": "alt_cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 27,
          "caller": "test_config_file_environment_variable",
          "source_code": "def alt_cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg_alt.py\")\n"
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_config_file_environment_variable",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert app.cfg.proc_name == 'not-fooey'",
        "assert app.cfg.config == alt_cfg_file()",
        "assert app.cfg.proc_name == 'fooey'",
        "assert app.cfg.config == cfg_file()"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_config_file_environment_variable(monkeypatch):\n    monkeypatch.setenv(\"GUNICORN_CMD_ARGS\", \"--config=\" + alt_cfg_file())\n    with AltArgs():\n        app = NoConfigApp()\n    assert app.cfg.proc_name == \"not-fooey\"\n    assert app.cfg.config == alt_cfg_file()\n    with AltArgs([\"prog_name\", \"--config\", cfg_file()]):\n        app = NoConfigApp()\n    assert app.cfg.proc_name == \"fooey\"\n    assert app.cfg.config == cfg_file()"
    },
    {
      "test_name": "test_invalid_enviroment_variables_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "monkeypatch.setenv",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "capsys.readouterr",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "monkeypatch.setenv",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "capsys.readouterr",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_enviroment_variables_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_enviroment_variables_config",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert 'error: unrecognized arguments: --foo' in err"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_invalid_enviroment_variables_config(monkeypatch, capsys):\n    monkeypatch.setenv(\"GUNICORN_CMD_ARGS\", \"--foo=bar\")\n    with AltArgs():\n        with pytest.raises(SystemExit):\n            NoConfigApp()\n        _, err = capsys.readouterr()\n        assert  \"error: unrecognized arguments: --foo\" in err"
    },
    {
      "test_name": "test_cli_overrides_enviroment_variables_module",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "monkeypatch.setenv",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_enviroment_variables_module",
          "source_code": ""
        },
        {
          "function": "monkeypatch.setenv",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_enviroment_variables_module",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_enviroment_variables_module",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_cli_overrides_enviroment_variables_module",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_cli_overrides_enviroment_variables_module",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert app.cfg.workers == 3"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_cli_overrides_enviroment_variables_module(monkeypatch):\n    monkeypatch.setenv(\"GUNICORN_CMD_ARGS\", \"--workers=4\")\n    with AltArgs([\"prog_name\", \"-c\", cfg_file(), \"--workers\", \"3\"]):\n        app = NoConfigApp()\n    assert app.cfg.workers == 3"
    },
    {
      "test_name": "test_wsgi_app_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cmdline.extend",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line_number": 105
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "WSGIApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        },
        {
          "name": "cfg_file_with_wsgi_app",
          "source_code": "def cfg_file_with_wsgi_app():\n    return os.path.join(dirname, \"config\", \"test_cfg_with_wsgi_app.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 29
        },
        {
          "name": "cfg_file_with_wsgi_app",
          "source_code": "def cfg_file_with_wsgi_app():\n    return os.path.join(dirname, \"config\", \"test_cfg_with_wsgi_app.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 29
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_wsgi_app_config",
          "source_code": ""
        },
        {
          "function": "cmdline.extend",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line": 105,
          "caller": "test_wsgi_app_config",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_wsgi_app_config",
          "source_code": ""
        },
        {
          "function": "WSGIApp",
          "filename": "",
          "line": 0,
          "caller": "test_wsgi_app_config",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_wsgi_app_config",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        },
        {
          "function": "cfg_file_with_wsgi_app",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 29,
          "caller": "test_wsgi_app_config",
          "source_code": "def cfg_file_with_wsgi_app():\n    return os.path.join(dirname, \"config\", \"test_cfg_with_wsgi_app.py\")\n"
        },
        {
          "function": "cfg_file_with_wsgi_app",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 29,
          "caller": "test_wsgi_app_config",
          "source_code": "def cfg_file_with_wsgi_app():\n    return os.path.join(dirname, \"config\", \"test_cfg_with_wsgi_app.py\")\n"
        }
      ],
      "assertions": [
        "assert app.app_uri == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_wsgi_app_config(options, expected):\n    cmdline = [\"prog_name\"]\n    cmdline.extend(options)\n    with AltArgs(cmdline):\n        app = WSGIApp()\n    assert app.app_uri == expected"
    },
    {
      "test_name": "test_non_wsgi_app",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cmdline.extend",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line_number": 105
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "capsys.readouterr",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "WSGIApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cfg_file",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line_number": 25
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_non_wsgi_app",
          "source_code": ""
        },
        {
          "function": "cmdline.extend",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line": 105,
          "caller": "test_non_wsgi_app",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_non_wsgi_app",
          "source_code": ""
        },
        {
          "function": "capsys.readouterr",
          "filename": "",
          "line": 0,
          "caller": "test_non_wsgi_app",
          "source_code": ""
        },
        {
          "function": "WSGIApp",
          "filename": "",
          "line": 0,
          "caller": "test_non_wsgi_app",
          "source_code": ""
        },
        {
          "function": "cfg_file",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
          "line": 25,
          "caller": "test_non_wsgi_app",
          "source_code": "def cfg_file():\n    return os.path.join(dirname, \"config\", \"test_cfg.py\")\n"
        }
      ],
      "assertions": [
        "assert 'Error: No application module specified.' in err"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_non_wsgi_app(options, capsys):\n    cmdline = [\"prog_name\"]\n    cmdline.extend(options)\n    with AltArgs(cmdline):\n        with pytest.raises(SystemExit):\n            WSGIApp()\n        _, err = capsys.readouterr()\n        assert  \"Error: No application module specified.\" in err"
    },
    {
      "test_name": "test_reload",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cmdline.extend",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line_number": 105
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_reload",
          "source_code": ""
        },
        {
          "function": "cmdline.extend",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line": 105,
          "caller": "test_reload",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_reload",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_reload",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert app.cfg.reload == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_reload(options, expected):\n    cmdline = [\"prog_name\"]\n    cmdline.extend(options)\n    with AltArgs(cmdline):\n        app = NoConfigApp()\n    assert app.cfg.reload == expected"
    },
    {
      "test_name": "test_umask_config",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "cmdline.extend",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line_number": 105
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_umask_config",
          "source_code": ""
        },
        {
          "function": "cmdline.extend",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line": 105,
          "caller": "test_umask_config",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_umask_config",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_umask_config",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert app.cfg.umask == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_umask_config(options, expected):\n    cmdline = [\"prog_name\"]\n    cmdline.extend(options)\n    with AltArgs(cmdline):\n        app = NoConfigApp()\n    assert app.cfg.umask == expected"
    },
    {
      "test_name": "test_bind_fd",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AltArgs",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "NoConfigApp",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_bind_fd",
          "source_code": ""
        },
        {
          "function": "AltArgs",
          "filename": "",
          "line": 0,
          "caller": "test_bind_fd",
          "source_code": ""
        },
        {
          "function": "NoConfigApp",
          "filename": "",
          "line": 0,
          "caller": "test_bind_fd",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert app.cfg.bind == ['fd://42']"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_bind_fd():\n    with AltArgs([\"prog_name\", \"-b\", \"fd://42\"]):\n        app = NoConfigApp()\n    assert app.cfg.bind == [\"fd://42\"]"
    },
    {
      "test_name": "test_repr",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "c.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "repr",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_repr",
          "source_code": ""
        },
        {
          "function": "c.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_repr",
          "source_code": ""
        },
        {
          "function": "repr",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_repr",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert 'with value 5' in repr(c.settings['workers'])"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_repr():\n    c = config.Config()\n    c.set(\"workers\", 5)\n\n    assert \"with value 5\" in repr(c.settings['workers'])"
    },
    {
      "test_name": "test_str",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
      "static_methods": [
        {
          "name": "config.Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "enumerate",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "o.splitlines",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "format",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "m.group",
          "source_code": "def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:\n    \"\"\"A decorator that turns an iterable of renderables in to a group.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
          "line_number": 495
        },
        {
          "name": "format",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "format",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "format",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "OUTPUT_MATCH.pop",
          "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
          "line_number": 940
        },
        {
          "name": "OUTPUT_MATCH.keys",
          "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
          "line_number": 745
        }
      ],
      "dynamic_methods": [
        {
          "function": "config.Config",
          "filename": "",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "enumerate",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "o.splitlines",
          "filename": "",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "format",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "m.group",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
          "line": 495,
          "caller": "test_str",
          "source_code": "def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:\n    \"\"\"A decorator that turns an iterable of renderables in to a group.\n\n    Args:\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    \"\"\"\n\n    def decorator(\n        method: Callable[..., Iterable[RenderableType]]\n    ) -> Callable[..., Group]:\n        \"\"\"Convert a method that returns an iterable of renderables in to a Group.\"\"\"\n\n        @wraps(method)\n        def _replace(*args: Any, **kwargs: Any) -> Group:\n            renderables = method(*args, **kwargs)\n            return Group(*renderables, fit=fit)\n\n        return _replace\n\n    return decorator\n\n\n"
        },
        {
          "function": "format",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "format",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "format",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_str",
          "source_code": ""
        },
        {
          "function": "OUTPUT_MATCH.pop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
          "line": 940,
          "caller": "test_str",
          "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
        },
        {
          "function": "OUTPUT_MATCH.keys",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
          "line": 745,
          "caller": "test_str",
          "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)\n\n"
        }
      ],
      "assertions": [
        "assert m, \"Line {} didn't match expected format: {!r}\".format(i, line)",
        "assert re.match(line_re, line), '{!r} != {!r}'.format(line_re, line)",
        "assert False, 'missing expected setting lines? {}'.format(OUTPUT_MATCH.keys())"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_str():\n    c = config.Config()\n    o = str(c)\n\n    # match the first few lines, some different types, but don't go OTT\n    # to avoid needless test fails with changes\n    OUTPUT_MATCH = {\n        'access_log_format': '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"',\n        'accesslog': 'None',\n        'backlog': '2048',\n        'bind': \"['127.0.0.1:8000']\",\n        'capture_output': 'False',\n        'child_exit': '<ChildExit.child_exit()>',\n    }\n    for i, line in enumerate(o.splitlines()):\n        m = re.match(r'^(\\w+)\\s+= ', line)\n        assert m, \"Line {} didn't match expected format: {!r}\".format(i, line)\n\n        key = m.group(1)\n        try:\n            s = OUTPUT_MATCH.pop(key)\n        except KeyError:\n            continue\n\n        line_re = r'^{}\\s+= {}$'.format(key, re.escape(s))\n        assert re.match(line_re, line), '{!r} != {!r}'.format(line_re, line)\n\n        if not OUTPUT_MATCH:\n            break\n    else:\n        assert False, 'missing expected setting lines? {}'.format(\n            OUTPUT_MATCH.keys()\n        )"
    },
    {
      "test_name": "test_parse_address",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.parse_address",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 222
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.parse_address",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 222,
          "caller": "test_parse_address",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]\n\n    if netloc.startswith(\"fd://\"):\n        fd = netloc[5:]\n        try:\n            return int(fd)\n        except ValueError:\n            raise RuntimeError(\"%r is not a valid file descriptor.\" % fd) from None\n\n    if netloc.startswith(\"tcp://\"):\n        netloc = netloc.split(\"tcp://\")[1]\n    host, port = netloc, default_port\n\n    if '[' in netloc and ']' in netloc:\n        host = netloc.split(']')[0][1:]\n        port = (netloc.split(']:') + [default_port])[1]\n    elif ':' in netloc:\n        host, port = (netloc.split(':') + [default_port])[:2]\n    elif netloc == \"\":\n        host, port = \"0.0.0.0\", default_port\n\n    try:\n        port = int(port)\n    except ValueError:\n        raise RuntimeError(\"%r is not a valid port number.\" % port)\n\n    return host.lower(), port\n\n\n"
        }
      ],
      "assertions": [
        "assert util.parse_address(test_input) == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_parse_address(test_input, expected):\n    assert util.parse_address(test_input) == expected"
    },
    {
      "test_name": "test_parse_address_invalid",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.parse_address",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 222
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.parse_address",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 222,
          "caller": "test_parse_address_invalid",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]\n\n    if netloc.startswith(\"fd://\"):\n        fd = netloc[5:]\n        try:\n            return int(fd)\n        except ValueError:\n            raise RuntimeError(\"%r is not a valid file descriptor.\" % fd) from None\n\n    if netloc.startswith(\"tcp://\"):\n        netloc = netloc.split(\"tcp://\")[1]\n    host, port = netloc, default_port\n\n    if '[' in netloc and ']' in netloc:\n        host = netloc.split(']')[0][1:]\n        port = (netloc.split(']:') + [default_port])[1]\n    elif ':' in netloc:\n        host, port = (netloc.split(':') + [default_port])[:2]\n    elif netloc == \"\":\n        host, port = \"0.0.0.0\", default_port\n\n    try:\n        port = int(port)\n    except ValueError:\n        raise RuntimeError(\"%r is not a valid port number.\" % port)\n\n    return host.lower(), port\n\n\n"
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_parse_address_invalid",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert \"'test' is not a valid port number.\" in str(exc_info.value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_parse_address_invalid():\n    with pytest.raises(RuntimeError) as exc_info:\n        util.parse_address('127.0.0.1:test')\n    assert \"'test' is not a valid port number.\" in str(exc_info.value)"
    },
    {
      "test_name": "test_parse_fd_invalid",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.parse_address",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 222
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.parse_address",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 222,
          "caller": "test_parse_fd_invalid",
          "source_code": "def parse_address(netloc, default_port='8000'):\n    if re.match(r'unix:(//)?', netloc):\n        return re.split(r'unix:(//)?', netloc)[-1]\n\n    if netloc.startswith(\"fd://\"):\n        fd = netloc[5:]\n        try:\n            return int(fd)\n        except ValueError:\n            raise RuntimeError(\"%r is not a valid file descriptor.\" % fd) from None\n\n    if netloc.startswith(\"tcp://\"):\n        netloc = netloc.split(\"tcp://\")[1]\n    host, port = netloc, default_port\n\n    if '[' in netloc and ']' in netloc:\n        host = netloc.split(']')[0][1:]\n        port = (netloc.split(']:') + [default_port])[1]\n    elif ':' in netloc:\n        host, port = (netloc.split(':') + [default_port])[:2]\n    elif netloc == \"\":\n        host, port = \"0.0.0.0\", default_port\n\n    try:\n        port = int(port)\n    except ValueError:\n        raise RuntimeError(\"%r is not a valid port number.\" % port)\n\n    return host.lower(), port\n\n\n"
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_parse_fd_invalid",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert \"'asd' is not a valid file descriptor.\" in str(exc_info.value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_parse_fd_invalid():\n    with pytest.raises(RuntimeError) as exc_info:\n        util.parse_address('fd://asd')\n    assert \"'asd' is not a valid file descriptor.\" in str(exc_info.value)"
    },
    {
      "test_name": "test_http_date",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.http_date",
          "source_code": "def http_date(timestamp=None):\n    \"\"\"Return the current date and time formatted for a message header.\"\"\"\n    if timestamp is None:\n        timestamp = time.time()\n    s = email.utils.formatdate(timestamp, localtime=False, usegmt=True)\n    return s",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 455
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.http_date",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 455,
          "caller": "test_http_date",
          "source_code": "def http_date(timestamp=None):\n    \"\"\"Return the current date and time formatted for a message header.\"\"\"\n    if timestamp is None:\n        timestamp = time.time()\n    s = email.utils.formatdate(timestamp, localtime=False, usegmt=True)\n    return s\n\n\n"
        }
      ],
      "assertions": [
        "assert util.http_date(1508607753.740316) == 'Sat, 21 Oct 2017 17:42:33 GMT'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_http_date():\n    assert util.http_date(1508607753.740316) == 'Sat, 21 Oct 2017 17:42:33 GMT'"
    },
    {
      "test_name": "test_is_ipv6",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.is_ipv6",
          "source_code": "def is_ipv6(addr):\n    try:\n        socket.inet_pton(socket.AF_INET6, addr)\n    except OSError:  # not a valid address\n        return False\n    except ValueError:  # ipv6 not supported on this platform\n        return False\n    return True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 212
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.is_ipv6",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 212,
          "caller": "test_is_ipv6",
          "source_code": "def is_ipv6(addr):\n    try:\n        socket.inet_pton(socket.AF_INET6, addr)\n    except OSError:  # not a valid address\n        return False\n    except ValueError:  # ipv6 not supported on this platform\n        return False\n    return True\n\n\n"
        }
      ],
      "assertions": [
        "assert util.is_ipv6(test_input) == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_is_ipv6(test_input, expected):\n    assert util.is_ipv6(test_input) == expected"
    },
    {
      "test_name": "test_warn",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.warn",
          "source_code": "    def warn(self, msg, *args):\n        log.warn(msg, *args)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line_number": 912
        },
        {
          "name": "capsys.readouterr",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.warn",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
          "line": 912,
          "caller": "test_warn",
          "source_code": "    def warn(self, msg, *args):\n        log.warn(msg, *args)\n\n\n"
        },
        {
          "function": "capsys.readouterr",
          "filename": "",
          "line": 0,
          "caller": "test_warn",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert '!!! WARNING: test warn' in err"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_warn(capsys):\n    util.warn('test warn')\n    _, err = capsys.readouterr()\n    assert '!!! WARNING: test warn' in err"
    },
    {
      "test_name": "test_import_app_good",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.import_app",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 358
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.import_app",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 358,
          "caller": "test_import_app_good",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]\n\n    try:\n        mod = importlib.import_module(module)\n    except ImportError:\n        if module.endswith(\".py\") and os.path.exists(module):\n            msg = \"Failed to find application, did you mean '%s:%s'?\"\n            raise ImportError(msg % (module.rsplit(\".\", 1)[0], obj))\n        raise\n\n    # Parse obj as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expression = ast.parse(obj, mode=\"eval\").body\n    except SyntaxError:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    if isinstance(expression, ast.Name):\n        name = expression.id\n        args = kwargs = None\n    elif isinstance(expression, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expression.func, ast.Name):\n            raise AppImportError(\"Function reference must be a simple name: %r\" % obj)\n\n        name = expression.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expression.args]\n            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expression.keywords}\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise AppImportError(\n                \"Failed to parse arguments as literal values: %r\" % obj\n            )\n    else:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    is_debug = logging.root.level == logging.DEBUG\n    try:\n        app = getattr(mod, name)\n    except AttributeError:\n        if is_debug:\n            traceback.print_exception(*sys.exc_info())\n        raise AppImportError(\"Failed to find attribute %r in %r.\" % (name, module))\n\n    # If the expression was a function call, call the retrieved object\n    # to get the real application.\n    if args is not None:\n        try:\n            app = app(*args, **kwargs)\n        except TypeError as e:\n            # If the TypeError was due to bad arguments to the factory\n            # function, show Python's nice error message without a\n            # traceback.\n            if _called_with_wrong_args(app):\n                raise AppImportError(\n                    \"\".join(traceback.format_exception_only(TypeError, e)).strip()\n                )\n\n            # Otherwise it was raised from within the function, show the\n            # full traceback.\n            raise\n\n    if app is None:\n        raise AppImportError(\"Failed to find application object: %r\" % obj)\n\n    if not callable(app):\n        raise AppImportError(\"Application object must be callable.\")\n    return app\n\n\n"
        }
      ],
      "assertions": [
        "assert util.import_app(value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_import_app_good(value):\n    assert util.import_app(value)"
    },
    {
      "test_name": "test_import_app_bad",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.import_app",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 358
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.import_app",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 358,
          "caller": "test_import_app_bad",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]\n\n    try:\n        mod = importlib.import_module(module)\n    except ImportError:\n        if module.endswith(\".py\") and os.path.exists(module):\n            msg = \"Failed to find application, did you mean '%s:%s'?\"\n            raise ImportError(msg % (module.rsplit(\".\", 1)[0], obj))\n        raise\n\n    # Parse obj as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expression = ast.parse(obj, mode=\"eval\").body\n    except SyntaxError:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    if isinstance(expression, ast.Name):\n        name = expression.id\n        args = kwargs = None\n    elif isinstance(expression, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expression.func, ast.Name):\n            raise AppImportError(\"Function reference must be a simple name: %r\" % obj)\n\n        name = expression.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expression.args]\n            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expression.keywords}\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise AppImportError(\n                \"Failed to parse arguments as literal values: %r\" % obj\n            )\n    else:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    is_debug = logging.root.level == logging.DEBUG\n    try:\n        app = getattr(mod, name)\n    except AttributeError:\n        if is_debug:\n            traceback.print_exception(*sys.exc_info())\n        raise AppImportError(\"Failed to find attribute %r in %r.\" % (name, module))\n\n    # If the expression was a function call, call the retrieved object\n    # to get the real application.\n    if args is not None:\n        try:\n            app = app(*args, **kwargs)\n        except TypeError as e:\n            # If the TypeError was due to bad arguments to the factory\n            # function, show Python's nice error message without a\n            # traceback.\n            if _called_with_wrong_args(app):\n                raise AppImportError(\n                    \"\".join(traceback.format_exception_only(TypeError, e)).strip()\n                )\n\n            # Otherwise it was raised from within the function, show the\n            # full traceback.\n            raise\n\n    if app is None:\n        raise AppImportError(\"Failed to find application object: %r\" % obj)\n\n    if not callable(app):\n        raise AppImportError(\"Application object must be callable.\")\n    return app\n\n\n"
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_import_app_bad",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert msg in str(exc_info.value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_import_app_bad(value, exc_type, msg):\n    with pytest.raises(exc_type) as exc_info:\n        util.import_app(value)\n\n    assert msg in str(exc_info.value)"
    },
    {
      "test_name": "test_import_app_py_ext",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "monkeypatch.chdir",
          "source_code": "def chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 424
        },
        {
          "name": "util.import_app",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 358
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "monkeypatch.chdir",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 424,
          "caller": "test_import_app_py_ext",
          "source_code": "@contextlib.contextmanager\ndef chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)\n\n\n"
        },
        {
          "function": "util.import_app",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 358,
          "caller": "test_import_app_py_ext",
          "source_code": "def import_app(module):\n    parts = module.split(\":\", 1)\n    if len(parts) == 1:\n        obj = \"application\"\n    else:\n        module, obj = parts[0], parts[1]\n\n    try:\n        mod = importlib.import_module(module)\n    except ImportError:\n        if module.endswith(\".py\") and os.path.exists(module):\n            msg = \"Failed to find application, did you mean '%s:%s'?\"\n            raise ImportError(msg % (module.rsplit(\".\", 1)[0], obj))\n        raise\n\n    # Parse obj as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expression = ast.parse(obj, mode=\"eval\").body\n    except SyntaxError:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    if isinstance(expression, ast.Name):\n        name = expression.id\n        args = kwargs = None\n    elif isinstance(expression, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expression.func, ast.Name):\n            raise AppImportError(\"Function reference must be a simple name: %r\" % obj)\n\n        name = expression.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expression.args]\n            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expression.keywords}\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise AppImportError(\n                \"Failed to parse arguments as literal values: %r\" % obj\n            )\n    else:\n        raise AppImportError(\n            \"Failed to parse %r as an attribute name or function call.\" % obj\n        )\n\n    is_debug = logging.root.level == logging.DEBUG\n    try:\n        app = getattr(mod, name)\n    except AttributeError:\n        if is_debug:\n            traceback.print_exception(*sys.exc_info())\n        raise AppImportError(\"Failed to find attribute %r in %r.\" % (name, module))\n\n    # If the expression was a function call, call the retrieved object\n    # to get the real application.\n    if args is not None:\n        try:\n            app = app(*args, **kwargs)\n        except TypeError as e:\n            # If the TypeError was due to bad arguments to the factory\n            # function, show Python's nice error message without a\n            # traceback.\n            if _called_with_wrong_args(app):\n                raise AppImportError(\n                    \"\".join(traceback.format_exception_only(TypeError, e)).strip()\n                )\n\n            # Otherwise it was raised from within the function, show the\n            # full traceback.\n            raise\n\n    if app is None:\n        raise AppImportError(\"Failed to find application object: %r\" % obj)\n\n    if not callable(app):\n        raise AppImportError(\"Application object must be callable.\")\n    return app\n\n\n"
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_import_app_py_ext",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert 'did you mean' in str(exc_info.value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_import_app_py_ext(monkeypatch):\n    monkeypatch.chdir(os.path.dirname(__file__))\n\n    with pytest.raises(ImportError) as exc_info:\n        util.import_app(\"support.py\")\n\n    assert \"did you mean\" in str(exc_info.value)"
    },
    {
      "test_name": "test_to_bytestring",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 568
        },
        {
          "name": "util.to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 568
        },
        {
          "name": "util.to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 568
        },
        {
          "name": "util.to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 568
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.to_bytestring",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 568,
          "caller": "test_to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
        },
        {
          "function": "util.to_bytestring",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 568,
          "caller": "test_to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
        },
        {
          "function": "util.to_bytestring",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 568,
          "caller": "test_to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
        },
        {
          "function": "util.to_bytestring",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 568,
          "caller": "test_to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_to_bytestring",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert util.to_bytestring('test_str', 'ascii') == b'test_str'",
        "assert util.to_bytestring('test_str\u00ae') == b'test_str\\xc2\\xae'",
        "assert util.to_bytestring(b'byte_test_str') == b'byte_test_str'",
        "assert msg in str(exc_info.value)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_to_bytestring():\n    assert util.to_bytestring('test_str', 'ascii') == b'test_str'\n    assert util.to_bytestring('test_str\u00ae') == b'test_str\\xc2\\xae'\n    assert util.to_bytestring(b'byte_test_str') == b'byte_test_str'\n    with pytest.raises(TypeError) as exc_info:\n        util.to_bytestring(100)\n    msg = '100 is not a string'\n    assert msg in str(exc_info.value)"
    },
    {
      "test_name": "test_split_request_uri",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_util.py",
      "static_methods": [
        {
          "name": "util.split_request_uri",
          "source_code": "def split_request_uri(uri):\n    if uri.startswith(\"//\"):\n        # When the path starts with //, urlsplit considers it as a\n        # relative uri while the RFC says we should consider it as abs_path\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n        # We use temporary dot prefix to workaround this behaviour\n        parts = urllib.parse.urlsplit(\".\" + uri)\n        return parts._replace(path=parts.path[1:])",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 617
        },
        {
          "name": "SplitResult",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SplitResult",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SplitResult",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SplitResult",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SplitResult",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "util.split_request_uri",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 617,
          "caller": "test_split_request_uri",
          "source_code": "def split_request_uri(uri):\n    if uri.startswith(\"//\"):\n        # When the path starts with //, urlsplit considers it as a\n        # relative uri while the RFC says we should consider it as abs_path\n        # http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n        # We use temporary dot prefix to workaround this behaviour\n        parts = urllib.parse.urlsplit(\".\" + uri)\n        return parts._replace(path=parts.path[1:])\n\n    return urllib.parse.urlsplit(uri)\n\n\n"
        },
        {
          "function": "SplitResult",
          "filename": "",
          "line": 0,
          "caller": "test_split_request_uri",
          "source_code": ""
        },
        {
          "function": "SplitResult",
          "filename": "",
          "line": 0,
          "caller": "test_split_request_uri",
          "source_code": ""
        },
        {
          "function": "SplitResult",
          "filename": "",
          "line": 0,
          "caller": "test_split_request_uri",
          "source_code": ""
        },
        {
          "function": "SplitResult",
          "filename": "",
          "line": 0,
          "caller": "test_split_request_uri",
          "source_code": ""
        },
        {
          "function": "SplitResult",
          "filename": "",
          "line": 0,
          "caller": "test_split_request_uri",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert util.split_request_uri(test_input) == expected"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_split_request_uri(test_input, expected):\n    assert util.split_request_uri(test_input) == expected"
    },
    {
      "test_name": "test_atoms_defaults",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_logger.py",
      "static_methods": [
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Logger",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.atoms",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 290
        },
        {
          "name": "isinstance",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_defaults",
          "source_code": ""
        },
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_defaults",
          "source_code": ""
        },
        {
          "function": "Logger",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_defaults",
          "source_code": ""
        },
        {
          "function": "logger.atoms",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 290,
          "caller": "test_atoms_defaults",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }\n\n        # add request headers\n        if hasattr(req, 'headers'):\n            req_headers = req.headers\n        else:\n            req_headers = req\n\n        if hasattr(req_headers, \"items\"):\n            req_headers = req_headers.items()\n\n        atoms.update({\"{%s}i\" % k.lower(): v for k, v in req_headers})\n\n        resp_headers = resp.headers\n        if hasattr(resp_headers, \"items\"):\n            resp_headers = resp_headers.items()\n\n        # add response headers\n        atoms.update({\"{%s}o\" % k.lower(): v for k, v in resp_headers})\n\n        # add environ variables\n        environ_variables = environ.items()\n        atoms.update({\"{%s}e\" % k.lower(): v for k, v in environ_variables})\n\n        return atoms\n\n"
        },
        {
          "function": "isinstance",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_atoms_defaults",
          "source_code": ""
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_defaults",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert isinstance(atoms, dict)",
        "assert atoms['r'] == 'GET /my/path?foo=bar HTTP/1.1'",
        "assert atoms['m'] == 'GET'",
        "assert atoms['U'] == '/my/path'",
        "assert atoms['q'] == 'foo=bar'",
        "assert atoms['H'] == 'HTTP/1.1'",
        "assert atoms['b'] == '1024'",
        "assert atoms['B'] == 1024",
        "assert atoms['{accept}i'] == 'application/json'",
        "assert atoms['{content-type}o'] == 'application/json'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_atoms_defaults():\n    response = SimpleNamespace(\n        status='200', response_length=1024,\n        headers=(('Content-Type', 'application/json'),), sent=1024,\n    )\n    request = SimpleNamespace(headers=(('Accept', 'application/json'),))\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert isinstance(atoms, dict)\n    assert atoms['r'] == 'GET /my/path?foo=bar HTTP/1.1'\n    assert atoms['m'] == 'GET'\n    assert atoms['U'] == '/my/path'\n    assert atoms['q'] == 'foo=bar'\n    assert atoms['H'] == 'HTTP/1.1'\n    assert atoms['b'] == '1024'\n    assert atoms['B'] == 1024\n    assert atoms['{accept}i'] == 'application/json'\n    assert atoms['{content-type}o'] == 'application/json'"
    },
    {
      "test_name": "test_atoms_zero_bytes",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_logger.py",
      "static_methods": [
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Logger",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.atoms",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 290
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_zero_bytes",
          "source_code": ""
        },
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_zero_bytes",
          "source_code": ""
        },
        {
          "function": "Logger",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_zero_bytes",
          "source_code": ""
        },
        {
          "function": "logger.atoms",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 290,
          "caller": "test_atoms_zero_bytes",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }\n\n        # add request headers\n        if hasattr(req, 'headers'):\n            req_headers = req.headers\n        else:\n            req_headers = req\n\n        if hasattr(req_headers, \"items\"):\n            req_headers = req_headers.items()\n\n        atoms.update({\"{%s}i\" % k.lower(): v for k, v in req_headers})\n\n        resp_headers = resp.headers\n        if hasattr(resp_headers, \"items\"):\n            resp_headers = resp_headers.items()\n\n        # add response headers\n        atoms.update({\"{%s}o\" % k.lower(): v for k, v in resp_headers})\n\n        # add environ variables\n        environ_variables = environ.items()\n        atoms.update({\"{%s}e\" % k.lower(): v for k, v in environ_variables})\n\n        return atoms\n\n"
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_atoms_zero_bytes",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert atoms['b'] == '0'",
        "assert atoms['B'] == 0"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_atoms_zero_bytes():\n    response = SimpleNamespace(\n        status='200', response_length=0,\n        headers=(('Content-Type', 'application/json'),), sent=0,\n    )\n    request = SimpleNamespace(headers=(('Accept', 'application/json'),))\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['b'] == '0'\n    assert atoms['B'] == 0"
    },
    {
      "test_name": "test_get_username_from_basic_auth_header",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_logger.py",
      "static_methods": [
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Logger",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.atoms",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 290
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_from_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_from_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "Logger",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_from_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "logger.atoms",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 290,
          "caller": "test_get_username_from_basic_auth_header",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }\n\n        # add request headers\n        if hasattr(req, 'headers'):\n            req_headers = req.headers\n        else:\n            req_headers = req\n\n        if hasattr(req_headers, \"items\"):\n            req_headers = req_headers.items()\n\n        atoms.update({\"{%s}i\" % k.lower(): v for k, v in req_headers})\n\n        resp_headers = resp.headers\n        if hasattr(resp_headers, \"items\"):\n            resp_headers = resp_headers.items()\n\n        # add response headers\n        atoms.update({\"{%s}o\" % k.lower(): v for k, v in resp_headers})\n\n        # add environ variables\n        environ_variables = environ.items()\n        atoms.update({\"{%s}e\" % k.lower(): v for k, v in environ_variables})\n\n        return atoms\n\n"
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_from_basic_auth_header",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert atoms['u'] == 'brk0v'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_get_username_from_basic_auth_header(auth):\n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': auth,\n    }\n    logger = Logger(Config())\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == 'brk0v'"
    },
    {
      "test_name": "test_get_username_handles_malformed_basic_auth_header",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_logger.py",
      "static_methods": [
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SimpleNamespace",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Logger",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "logger.atoms",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line_number": 290
        },
        {
          "name": "Config",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_handles_malformed_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "SimpleNamespace",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_handles_malformed_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "Logger",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_handles_malformed_basic_auth_header",
          "source_code": ""
        },
        {
          "function": "logger.atoms",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
          "line": 290,
          "caller": "test_get_username_handles_malformed_basic_auth_header",
          "source_code": "    def atoms(self, resp, req, environ, request_time):\n        \"\"\" Gets atoms for log formatting.\n        \"\"\"\n        status = resp.status\n        if isinstance(status, str):\n            status = status.split(None, 1)[0]\n        atoms = {\n            'h': environ.get('REMOTE_ADDR', '-'),\n            'l': '-',\n            'u': self._get_user(environ) or '-',\n            't': self.now(),\n            'r': \"%s %s %s\" % (environ['REQUEST_METHOD'],\n                               environ['RAW_URI'],\n                               environ[\"SERVER_PROTOCOL\"]),\n            's': status,\n            'm': environ.get('REQUEST_METHOD'),\n            'U': environ.get('PATH_INFO'),\n            'q': environ.get('QUERY_STRING'),\n            'H': environ.get('SERVER_PROTOCOL'),\n            'b': getattr(resp, 'sent', None) is not None and str(resp.sent) or '-',\n            'B': getattr(resp, 'sent', None),\n            'f': environ.get('HTTP_REFERER', '-'),\n            'a': environ.get('HTTP_USER_AGENT', '-'),\n            'T': request_time.seconds,\n            'D': (request_time.seconds * 1000000) + request_time.microseconds,\n            'M': (request_time.seconds * 1000) + int(request_time.microseconds / 1000),\n            'L': \"%d.%06d\" % (request_time.seconds, request_time.microseconds),\n            'p': \"<%s>\" % os.getpid()\n        }\n\n        # add request headers\n        if hasattr(req, 'headers'):\n            req_headers = req.headers\n        else:\n            req_headers = req\n\n        if hasattr(req_headers, \"items\"):\n            req_headers = req_headers.items()\n\n        atoms.update({\"{%s}i\" % k.lower(): v for k, v in req_headers})\n\n        resp_headers = resp.headers\n        if hasattr(resp_headers, \"items\"):\n            resp_headers = resp_headers.items()\n\n        # add response headers\n        atoms.update({\"{%s}o\" % k.lower(): v for k, v in resp_headers})\n\n        # add environ variables\n        environ_variables = environ.items()\n        atoms.update({\"{%s}e\" % k.lower(): v for k, v in environ_variables})\n\n        return atoms\n\n"
        },
        {
          "function": "Config",
          "filename": "",
          "line": 0,
          "caller": "test_get_username_handles_malformed_basic_auth_header",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert atoms['u'] == '-'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_get_username_handles_malformed_basic_auth_header():\n    \"\"\"Should catch a malformed auth header\"\"\"\n    request = SimpleNamespace(headers=())\n    response = SimpleNamespace(\n        status='200', response_length=1024, sent=1024,\n        headers=(('Content-Type', 'text/plain'),),\n    )\n    environ = {\n        'REQUEST_METHOD': 'GET', 'RAW_URI': '/my/path?foo=bar',\n        'PATH_INFO': '/my/path', 'QUERY_STRING': 'foo=bar',\n        'SERVER_PROTOCOL': 'HTTP/1.1',\n        'HTTP_AUTHORIZATION': 'Basic ixsTtkKzIpVTncfQjbBcnoRNoDfbnaXG',\n    }\n    logger = Logger(Config())\n\n    atoms = logger.atoms(response, request, environ, datetime.timedelta(seconds=1))\n    assert atoms['u'] == '-'"
    },
    {
      "test_name": "test_arbiter_stop_closes_listeners",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.stop",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 1308
        },
        {
          "name": "close_sockets.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": ""
        },
        {
          "function": "arbiter.stop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 1308,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
        },
        {
          "function": "close_sockets.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_closes_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_stop_closes_listeners(close_sockets):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    listener1 = mock.Mock()\n    listener2 = mock.Mock()\n    listeners = [listener1, listener2]\n    arbiter.LISTENERS = listeners\n    arbiter.stop()\n    close_sockets.assert_called_with(listeners, True)"
    },
    {
      "test_name": "test_arbiter_stop_child_does_not_unlink_listeners",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.stop",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 1308
        },
        {
          "name": "close_sockets.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_child_does_not_unlink_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.stop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 1308,
          "caller": "test_arbiter_stop_child_does_not_unlink_listeners",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
        },
        {
          "function": "close_sockets.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_child_does_not_unlink_listeners",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_child_does_not_unlink_listeners",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_child_does_not_unlink_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_stop_child_does_not_unlink_listeners(close_sockets):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.reexec_pid = os.getpid()\n    arbiter.stop()\n    close_sockets.assert_called_with([], False)"
    },
    {
      "test_name": "test_arbiter_stop_parent_does_not_unlink_listeners",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.stop",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 1308
        },
        {
          "name": "close_sockets.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_parent_does_not_unlink_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.stop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 1308,
          "caller": "test_arbiter_stop_parent_does_not_unlink_listeners",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
        },
        {
          "function": "close_sockets.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_parent_does_not_unlink_listeners",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_parent_does_not_unlink_listeners",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_parent_does_not_unlink_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_stop_parent_does_not_unlink_listeners(close_sockets):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.master_pid = os.getppid()\n    arbiter.stop()\n    close_sockets.assert_called_with([], False)"
    },
    {
      "test_name": "test_arbiter_stop_does_not_unlink_systemd_listeners",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.stop",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 1308
        },
        {
          "name": "close_sockets.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_does_not_unlink_systemd_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.stop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 1308,
          "caller": "test_arbiter_stop_does_not_unlink_systemd_listeners",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
        },
        {
          "function": "close_sockets.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_systemd_listeners",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_systemd_listeners",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_does_not_unlink_systemd_listeners",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_stop_does_not_unlink_systemd_listeners(close_sockets):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.systemd = True\n    arbiter.stop()\n    close_sockets.assert_called_with([], False)"
    },
    {
      "test_name": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "ReusePort",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.cfg.settings.set",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "arbiter.stop",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line_number": 1308
        },
        {
          "name": "close_sockets.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "ReusePort",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": ""
        },
        {
          "function": "arbiter.cfg.settings.set",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": ""
        },
        {
          "function": "arbiter.stop",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
          "line": 1308,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
        },
        {
          "function": "close_sockets.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_stop_does_not_unlink_when_using_reuse_port",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_stop_does_not_unlink_when_using_reuse_port(close_sockets):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.cfg.settings['reuse_port'] = ReusePort()\n    arbiter.cfg.settings['reuse_port'].set(True)\n    arbiter.stop()\n    close_sockets.assert_called_with([], False)"
    },
    {
      "test_name": "test_arbiter_reexec_passing_systemd_sockets",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.reexec",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 401
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.reexec",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 401,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return\n\n        if self.master_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Parent exists.\")\n            return\n\n        master_pid = os.getpid()\n        self.reexec_pid = os.fork()\n        if self.reexec_pid != 0:\n            return\n\n        self.cfg.pre_exec(self)\n\n        environ = self.cfg.env_orig.copy()\n        environ['GUNICORN_PID'] = str(master_pid)\n\n        if self.systemd:\n            environ['LISTEN_PID'] = str(os.getpid())\n            environ['LISTEN_FDS'] = str(len(self.LISTENERS))\n        else:\n            environ['GUNICORN_FD'] = ','.join(\n                str(lnr.fileno()) for lnr in self.LISTENERS)\n\n        os.chdir(self.START_CTX['cwd'])\n\n        # exec the process using the original environment\n        os.execvpe(self.START_CTX[0], self.START_CTX['args'], environ)\n\n"
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_systemd_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert environ['GUNICORN_PID'] == '2'",
        "assert environ['LISTEN_FDS'] == '2'",
        "assert environ['LISTEN_PID'] == '3'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_reexec_passing_systemd_sockets(execvpe, fork, getpid):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.LISTENERS = [mock.Mock(), mock.Mock()]\n    arbiter.systemd = True\n    fork.return_value = 0\n    getpid.side_effect = [2, 3]\n    arbiter.reexec()\n    environ = execvpe.call_args[0][2]\n    assert environ['GUNICORN_PID'] == '2'\n    assert environ['LISTEN_FDS'] == '2'\n    assert environ['LISTEN_PID'] == '3'"
    },
    {
      "test_name": "test_arbiter_reexec_passing_gunicorn_sockets",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.reexec",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 401
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": ""
        },
        {
          "function": "arbiter.reexec",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 401,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return\n\n        if self.master_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Parent exists.\")\n            return\n\n        master_pid = os.getpid()\n        self.reexec_pid = os.fork()\n        if self.reexec_pid != 0:\n            return\n\n        self.cfg.pre_exec(self)\n\n        environ = self.cfg.env_orig.copy()\n        environ['GUNICORN_PID'] = str(master_pid)\n\n        if self.systemd:\n            environ['LISTEN_PID'] = str(os.getpid())\n            environ['LISTEN_FDS'] = str(len(self.LISTENERS))\n        else:\n            environ['GUNICORN_FD'] = ','.join(\n                str(lnr.fileno()) for lnr in self.LISTENERS)\n\n        os.chdir(self.START_CTX['cwd'])\n\n        # exec the process using the original environment\n        os.execvpe(self.START_CTX[0], self.START_CTX['args'], environ)\n\n"
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_passing_gunicorn_sockets",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert environ['GUNICORN_FD'] == '4,5'",
        "assert environ['GUNICORN_PID'] == '2'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_reexec_passing_gunicorn_sockets(execvpe, fork, getpid):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    listener1 = mock.Mock()\n    listener2 = mock.Mock()\n    listener1.fileno.return_value = 4\n    listener2.fileno.return_value = 5\n    arbiter.LISTENERS = [listener1, listener2]\n    fork.return_value = 0\n    getpid.side_effect = [2, 3]\n    arbiter.reexec()\n    environ = execvpe.call_args[0][2]\n    assert environ['GUNICORN_FD'] == '4,5'\n    assert environ['GUNICORN_PID'] == '2'"
    },
    {
      "test_name": "test_arbiter_reexec_limit_parent",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.reexec",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 401
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_limit_parent",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.reexec",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 401,
          "caller": "test_arbiter_reexec_limit_parent",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return\n\n        if self.master_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Parent exists.\")\n            return\n\n        master_pid = os.getpid()\n        self.reexec_pid = os.fork()\n        if self.reexec_pid != 0:\n            return\n\n        self.cfg.pre_exec(self)\n\n        environ = self.cfg.env_orig.copy()\n        environ['GUNICORN_PID'] = str(master_pid)\n\n        if self.systemd:\n            environ['LISTEN_PID'] = str(os.getpid())\n            environ['LISTEN_FDS'] = str(len(self.LISTENERS))\n        else:\n            environ['GUNICORN_FD'] = ','.join(\n                str(lnr.fileno()) for lnr in self.LISTENERS)\n\n        os.chdir(self.START_CTX['cwd'])\n\n        # exec the process using the original environment\n        os.execvpe(self.START_CTX[0], self.START_CTX['args'], environ)\n\n"
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_limit_parent",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_limit_parent",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert fork.called is False, 'should not fork when there is already a child'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_reexec_limit_parent(fork):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.reexec_pid = ~os.getpid()\n    arbiter.reexec()\n    assert fork.called is False, \"should not fork when there is already a child\""
    },
    {
      "test_name": "test_arbiter_reexec_limit_child",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "arbiter.reexec",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 401
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_limit_child",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "arbiter.reexec",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 401,
          "caller": "test_arbiter_reexec_limit_child",
          "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return\n\n        if self.master_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Parent exists.\")\n            return\n\n        master_pid = os.getpid()\n        self.reexec_pid = os.fork()\n        if self.reexec_pid != 0:\n            return\n\n        self.cfg.pre_exec(self)\n\n        environ = self.cfg.env_orig.copy()\n        environ['GUNICORN_PID'] = str(master_pid)\n\n        if self.systemd:\n            environ['LISTEN_PID'] = str(os.getpid())\n            environ['LISTEN_FDS'] = str(len(self.LISTENERS))\n        else:\n            environ['GUNICORN_FD'] = ','.join(\n                str(lnr.fileno()) for lnr in self.LISTENERS)\n\n        os.chdir(self.START_CTX['cwd'])\n\n        # exec the process using the original environment\n        os.execvpe(self.START_CTX[0], self.START_CTX['args'], environ)\n\n"
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reexec_limit_child",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reexec_limit_child",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert fork.called is False, 'should not fork when arbiter is a child'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_reexec_limit_child(fork):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.master_pid = ~os.getpid()\n    arbiter.reexec()\n    assert fork.called is False, \"should not fork when arbiter is a child\""
    },
    {
      "test_name": "test_arbiter_calls_worker_exit",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.cfg.worker_exit.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.spawn_worker",
          "source_code": "    def spawn_worker(self):\n        self.worker_age += 1\n        worker = self.worker_class(self.worker_age, self.pid, self.LISTENERS,\n                                   self.app, self.timeout / 2.0,\n                                   self.cfg, self.log)\n        self.cfg.pre_fork(self, worker)\n        pid = os.fork()\n        if pid != 0:\n            worker.pid = pid\n            self.WORKERS[pid] = worker\n            return pid",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 588
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": ""
        },
        {
          "function": "arbiter.cfg.worker_exit.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": ""
        },
        {
          "function": "arbiter.spawn_worker",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 588,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": "    def spawn_worker(self):\n        self.worker_age += 1\n        worker = self.worker_class(self.worker_age, self.pid, self.LISTENERS,\n                                   self.app, self.timeout / 2.0,\n                                   self.cfg, self.log)\n        self.cfg.pre_fork(self, worker)\n        pid = os.fork()\n        if pid != 0:\n            worker.pid = pid\n            self.WORKERS[pid] = worker\n            return pid\n\n        # Do not inherit the temporary files of other workers\n        for sibling in self.WORKERS.values():\n            sibling.tmp.close()\n\n        # Process Child\n        worker.pid = os.getpid()\n        try:\n            util._setproctitle(\"worker [%s]\" % self.proc_name)\n            self.log.info(\"Booting worker with pid: %s\", worker.pid)\n            if self.cfg.reuse_port:\n                worker.sockets = sock.create_sockets(self.cfg, self.log)\n            self.cfg.post_fork(self, worker)\n            worker.init_process()\n            sys.exit(0)\n        except SystemExit:\n            raise\n        except AppImportError as e:\n            self.log.debug(\"Exception while loading the application\",\n                           exc_info=True)\n            print(\"%s\" % e, file=sys.stderr)\n            sys.stderr.flush()\n            sys.exit(self.APP_LOAD_ERROR)\n        except Exception:\n            self.log.exception(\"Exception in worker process\")\n            if not worker.booted:\n                sys.exit(self.WORKER_BOOT_ERROR)\n            sys.exit(-1)\n        finally:\n            self.log.info(\"Worker exiting (pid: %s)\", worker.pid)\n            try:\n                worker.tmp.close()\n                self.cfg.worker_exit(self, worker)\n            except Exception:\n                self.log.warning(\"Exception during worker exit:\\n%s\",\n                                 traceback.format_exc())\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_calls_worker_exit",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_calls_worker_exit(mock_os_fork):\n    mock_os_fork.return_value = 0\n\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.cfg.settings['worker_exit'] = mock.Mock()\n    arbiter.pid = None\n    mock_worker = mock.Mock()\n    arbiter.worker_class = mock.Mock(return_value=mock_worker)\n    try:\n        arbiter.spawn_worker()\n    except SystemExit:\n        pass\n    arbiter.cfg.worker_exit.assert_called_with(arbiter, mock_worker)"
    },
    {
      "test_name": "test_arbiter_reap_workers",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.reap_workers",
          "source_code": "    def reap_workers(self):\n        \"\"\"\\\n        Reap workers to avoid zombie processes\n        \"\"\"\n        try:\n            while True:\n                wpid, status = os.waitpid(-1, os.WNOHANG)\n                if not wpid:\n                    break\n                if self.reexec_pid == wpid:\n                    self.reexec_pid = 0\n                else:\n                    # A worker was terminated. If the termination reason was\n                    # that it could not boot, we'll shut it down to avoid\n                    # infinite start/stop cycles.\n                    exitcode = status >> 8\n                    if exitcode != 0:\n                        self.log.error('Worker (pid:%s) exited with code %s', wpid, exitcode)\n                    if exitcode == self.WORKER_BOOT_ERROR:\n                        reason = \"Worker failed to boot.\"\n                        raise HaltServer(reason, self.WORKER_BOOT_ERROR)\n                    if exitcode == self.APP_LOAD_ERROR:\n                        reason = \"App failed to load.\"\n                        raise HaltServer(reason, self.APP_LOAD_ERROR)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line_number": 511
        },
        {
          "name": "mock_worker.tmp.close.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "arbiter.cfg.child_exit.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "DummyApplication",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reap_workers",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reap_workers",
          "source_code": ""
        },
        {
          "function": "mock.Mock",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reap_workers",
          "source_code": ""
        },
        {
          "function": "arbiter.reap_workers",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
          "line": 511,
          "caller": "test_arbiter_reap_workers",
          "source_code": "    def reap_workers(self):\n        \"\"\"\\\n        Reap workers to avoid zombie processes\n        \"\"\"\n        try:\n            while True:\n                wpid, status = os.waitpid(-1, os.WNOHANG)\n                if not wpid:\n                    break\n                if self.reexec_pid == wpid:\n                    self.reexec_pid = 0\n                else:\n                    # A worker was terminated. If the termination reason was\n                    # that it could not boot, we'll shut it down to avoid\n                    # infinite start/stop cycles.\n                    exitcode = status >> 8\n                    if exitcode != 0:\n                        self.log.error('Worker (pid:%s) exited with code %s', wpid, exitcode)\n                    if exitcode == self.WORKER_BOOT_ERROR:\n                        reason = \"Worker failed to boot.\"\n                        raise HaltServer(reason, self.WORKER_BOOT_ERROR)\n                    if exitcode == self.APP_LOAD_ERROR:\n                        reason = \"App failed to load.\"\n                        raise HaltServer(reason, self.APP_LOAD_ERROR)\n\n                    if exitcode > 0:\n                        # If the exit code of the worker is greater than 0,\n                        # let the user know.\n                        self.log.error(\"Worker (pid:%s) exited with code %s.\",\n                                       wpid, exitcode)\n                    elif status > 0:\n                        # If the exit code of the worker is 0 and the status\n                        # is greater than 0, then it was most likely killed\n                        # via a signal.\n                        try:\n                            sig_name = signal.Signals(status).name\n                        except ValueError:\n                            sig_name = \"code {}\".format(status)\n                        msg = \"Worker (pid:{}) was sent {}!\".format(\n                            wpid, sig_name)\n\n                        # Additional hint for SIGKILL\n                        if status == signal.SIGKILL:\n                            msg += \" Perhaps out of memory?\"\n                        self.log.error(msg)\n\n                    worker = self.WORKERS.pop(wpid, None)\n                    if not worker:\n                        continue\n                    worker.tmp.close()\n                    self.cfg.child_exit(self, worker)\n        except OSError as e:\n            if e.errno != errno.ECHILD:\n                raise\n\n"
        },
        {
          "function": "mock_worker.tmp.close.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reap_workers",
          "source_code": ""
        },
        {
          "function": "arbiter.cfg.child_exit.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reap_workers",
          "source_code": ""
        },
        {
          "function": "DummyApplication",
          "filename": "",
          "line": 0,
          "caller": "test_arbiter_reap_workers",
          "source_code": ""
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_arbiter_reap_workers",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_arbiter_reap_workers(mock_os_waitpid):\n    mock_os_waitpid.side_effect = [(42, 0), (0, 0)]\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.cfg.settings['child_exit'] = mock.Mock()\n    mock_worker = mock.Mock()\n    arbiter.WORKERS = {42: mock_worker}\n    arbiter.reap_workers()\n    mock_worker.tmp.close.assert_called_with()\n    arbiter.cfg.child_exit.assert_called_with(arbiter, mock_worker)"
    },
    {
      "test_name": "test_env_vars_available_during_preload",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
      "static_methods": [
        {
          "name": "PreloadedAppWithEnvSettings",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "PreloadedAppWithEnvSettings",
          "filename": "",
          "line": 0,
          "caller": "test_env_vars_available_during_preload",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_env_vars_available_during_preload():\n    \"\"\"Ensure that configured environmental variables are set during the\n    initial set up of the application (called from the .setup() method of\n    the Arbiter) such that they are available during the initial loading\n    of the WSGI application.\n    \"\"\"\n    # Note that we aren't making any assertions here, they are made in the\n    # dummy application object being loaded here instead.\n    gunicorn.arbiter.Arbiter(PreloadedAppWithEnvSettings())"
    },
    {
      "test_name": "test_method_pattern",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "TOKEN_RE.fullmatch",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "TOKEN_RE.fullmatch",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "TOKEN_RE.fullmatch",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "TOKEN_RE.fullmatch",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "TOKEN_RE.match",
          "source_code": "    def match(self, version):\n        \"\"\"\n        Check if the provided version matches the constraints.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py",
          "line_number": 129
        }
      ],
      "dynamic_methods": [
        {
          "function": "TOKEN_RE.fullmatch",
          "filename": "",
          "line": 0,
          "caller": "test_method_pattern",
          "source_code": ""
        },
        {
          "function": "TOKEN_RE.fullmatch",
          "filename": "",
          "line": 0,
          "caller": "test_method_pattern",
          "source_code": ""
        },
        {
          "function": "TOKEN_RE.fullmatch",
          "filename": "",
          "line": 0,
          "caller": "test_method_pattern",
          "source_code": ""
        },
        {
          "function": "TOKEN_RE.fullmatch",
          "filename": "",
          "line": 0,
          "caller": "test_method_pattern",
          "source_code": ""
        },
        {
          "function": "TOKEN_RE.match",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py",
          "line": 129,
          "caller": "test_method_pattern",
          "source_code": "    def match(self, version):\n        \"\"\"\n        Check if the provided version matches the constraints.\n\n        :param version: The version to match against this instance.\n        :type version: String or :class:`Version` instance.\n        \"\"\"\n        if isinstance(version, string_types):\n            version = self.version_class(version)\n        for operator, constraint, prefix in self._parts:\n            f = self._operators.get(operator)\n            if isinstance(f, string_types):\n                f = getattr(self, f)\n            if not f:\n                msg = ('%r not implemented '\n                       'for %s' % (operator, self.__class__.__name__))\n                raise NotImplementedError(msg)\n            if not f(version, constraint, prefix):\n                return False\n        return True\n\n"
        }
      ],
      "assertions": [
        "assert TOKEN_RE.fullmatch('GET')",
        "assert TOKEN_RE.fullmatch('MKCALENDAR')",
        "assert not TOKEN_RE.fullmatch('GET:')",
        "assert not TOKEN_RE.fullmatch('GET;')",
        "assert not TOKEN_RE.match(bad_char)"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_method_pattern():\n    assert TOKEN_RE.fullmatch(\"GET\")\n    assert TOKEN_RE.fullmatch(\"MKCALENDAR\")\n    assert not TOKEN_RE.fullmatch(\"GET:\")\n    assert not TOKEN_RE.fullmatch(\"GET;\")\n    RFC9110_5_6_2_TOKEN_DELIM = r'\"(),/:;<=>?@[\\]{}'\n    for bad_char in RFC9110_5_6_2_TOKEN_DELIM:\n        assert not TOKEN_RE.match(bad_char)"
    },
    {
      "test_name": "test_readline_empty_body",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "assert_readline",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line_number": 24
        },
        {
          "name": "assert_readline",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line_number": 24
        }
      ],
      "dynamic_methods": [
        {
          "function": "assert_readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line": 24,
          "caller": "test_readline_empty_body",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected\n\n\n"
        },
        {
          "function": "assert_readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line": 24,
          "caller": "test_readline_empty_body",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected\n\n\n"
        }
      ],
      "assertions": [
        "assert_readline(b'', None, b'')",
        "assert_readline(b'', 1, b'')"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_empty_body():\n    assert_readline(b\"\", None, b\"\")\n    assert_readline(b\"\", 1, b\"\")"
    },
    {
      "test_name": "test_readline_zero_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "assert_readline",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line_number": 24
        },
        {
          "name": "assert_readline",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line_number": 24
        }
      ],
      "dynamic_methods": [
        {
          "function": "assert_readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line": 24,
          "caller": "test_readline_zero_size",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected\n\n\n"
        },
        {
          "function": "assert_readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
          "line": 24,
          "caller": "test_readline_zero_size",
          "source_code": "def assert_readline(payload, size, expected):\n    body = Body(io.BytesIO(payload))\n    assert body.readline(size) == expected\n\n\n"
        }
      ],
      "assertions": [
        "assert_readline(b'abc', 0, b'')",
        "assert_readline(b'\\n', 0, b'')"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_zero_size():\n    assert_readline(b\"abc\", 0, b\"\")\n    assert_readline(b\"\\n\", 0, b\"\")"
    },
    {
      "test_name": "test_readline_new_line_before_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        }
      ],
      "dynamic_methods": [
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_new_line_before_size",
          "source_code": ""
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_new_line_before_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_new_line_before_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        }
      ],
      "assertions": [
        "assert body.readline(4) == b'abc\\n'",
        "assert body.readline() == b'def'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_new_line_before_size():\n    body = Body(io.BytesIO(b\"abc\\ndef\"))\n    assert body.readline(4) == b\"abc\\n\"\n    assert body.readline() == b\"def\""
    },
    {
      "test_name": "test_readline_new_line_after_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        }
      ],
      "dynamic_methods": [
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_new_line_after_size",
          "source_code": ""
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_new_line_after_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_new_line_after_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        }
      ],
      "assertions": [
        "assert body.readline(2) == b'ab'",
        "assert body.readline() == b'c\\n'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_new_line_after_size():\n    body = Body(io.BytesIO(b\"abc\\ndef\"))\n    assert body.readline(2) == b\"ab\"\n    assert body.readline() == b\"c\\n\""
    },
    {
      "test_name": "test_readline_no_new_line",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        }
      ],
      "dynamic_methods": [
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_no_new_line",
          "source_code": ""
        },
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_no_new_line",
          "source_code": ""
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_no_new_line",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_no_new_line",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_no_new_line",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_no_new_line",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        }
      ],
      "assertions": [
        "assert body.readline() == b'abcdef'",
        "assert body.readline(2) == b'ab'",
        "assert body.readline(2) == b'cd'",
        "assert body.readline(2) == b'ef'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_no_new_line():\n    body = Body(io.BytesIO(b\"abcdef\"))\n    assert body.readline() == b\"abcdef\"\n    body = Body(io.BytesIO(b\"abcdef\"))\n    assert body.readline(2) == b\"ab\"\n    assert body.readline(2) == b\"cd\"\n    assert body.readline(2) == b\"ef\""
    },
    {
      "test_name": "test_readline_buffer_loaded",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "body.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.write",
          "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
          "line_number": 765
        },
        {
          "name": "reader.seek",
          "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 38
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        }
      ],
      "dynamic_methods": [
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_buffer_loaded",
          "source_code": ""
        },
        {
          "function": "body.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_readline_buffer_loaded",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.write",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
          "line": 765,
          "caller": "test_readline_buffer_loaded",
          "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
        },
        {
          "function": "reader.seek",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 38,
          "caller": "test_readline_buffer_loaded",
          "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        }
      ],
      "assertions": [
        "assert body.readline() == b'bc\\n'",
        "assert body.readline() == b'defg\\n'",
        "assert body.readline() == b'hi'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_buffer_loaded():\n    reader = io.BytesIO(b\"abc\\ndef\")\n    body = Body(reader)\n    body.read(1) # load internal buffer\n    reader.write(b\"g\\nhi\")\n    reader.seek(7)\n    assert body.readline() == b\"bc\\n\"\n    assert body.readline() == b\"defg\\n\"\n    assert body.readline() == b\"hi\""
    },
    {
      "test_name": "test_readline_buffer_loaded_with_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Body",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "body.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        },
        {
          "name": "body.readline",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 32
        }
      ],
      "dynamic_methods": [
        {
          "function": "Body",
          "filename": "",
          "line": 0,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": ""
        },
        {
          "function": "body.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        },
        {
          "function": "body.readline",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 32,
          "caller": "test_readline_buffer_loaded_with_size",
          "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
        }
      ],
      "assertions": [
        "assert body.readline(2) == b'bc'",
        "assert body.readline(2) == b'\\n'",
        "assert body.readline(2) == b'de'",
        "assert body.readline(2) == b'f'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_readline_buffer_loaded_with_size():\n    body = Body(io.BytesIO(b\"abc\\ndef\"))\n    body.read(1)  # load internal buffer\n    assert body.readline(2) == b\"bc\"\n    assert body.readline(2) == b\"\\n\"\n    assert body.readline(2) == b\"de\"\n    assert body.readline(2) == b\"f\""
    },
    {
      "test_name": "test_http_header_encoding",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Response",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "response.headers.append",
          "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line_number": 917
        },
        {
          "name": "response.send_headers",
          "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line_number": 323
        },
        {
          "name": "Response",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "response.headers.append",
          "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line_number": 917
        },
        {
          "name": "response.default_headers",
          "source_code": "def default_headers():\n    \"\"\"\n    :rtype: requests.structures.CaseInsensitiveDict\n    \"\"\"\n    return CaseInsensitiveDict(\n        {\n            \"User-Agent\": default_user_agent(),\n            \"Accept-Encoding\": DEFAULT_ACCEPT_ENCODING,\n            \"Accept\": \"*/*\",\n            \"Connection\": \"keep-alive\",\n        }\n    )",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py",
          "line_number": 893
        },
        {
          "name": "tosend.extend",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line_number": 105
        },
        {
          "name": "response.send_headers",
          "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line_number": 323
        },
        {
          "name": "join",
          "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line_number": 740
        },
        {
          "name": "mocked_socket.sendall",
          "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "line_number": 649
        },
        {
          "name": "util.to_bytestring",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line_number": 568
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_header_encoding",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_header_encoding",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_header_encoding",
          "source_code": ""
        },
        {
          "function": "Response",
          "filename": "",
          "line": 0,
          "caller": "test_http_header_encoding",
          "source_code": ""
        },
        {
          "function": "response.headers.append",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line": 917,
          "caller": "test_http_header_encoding",
          "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
        },
        {
          "function": "response.send_headers",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line": 323,
          "caller": "test_http_header_encoding",
          "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])\n\n        header_str = \"%s\\r\\n\" % \"\".join(tosend)\n        util.write(self.sock, util.to_bytestring(header_str, \"latin-1\"))\n        self.headers_sent = True\n\n"
        },
        {
          "function": "Response",
          "filename": "",
          "line": 0,
          "caller": "test_http_header_encoding",
          "source_code": ""
        },
        {
          "function": "response.headers.append",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line": 917,
          "caller": "test_http_header_encoding",
          "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
        },
        {
          "function": "response.default_headers",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py",
          "line": 893,
          "caller": "test_http_header_encoding",
          "source_code": "def default_headers():\n    \"\"\"\n    :rtype: requests.structures.CaseInsensitiveDict\n    \"\"\"\n    return CaseInsensitiveDict(\n        {\n            \"User-Agent\": default_user_agent(),\n            \"Accept-Encoding\": DEFAULT_ACCEPT_ENCODING,\n            \"Accept\": \"*/*\",\n            \"Connection\": \"keep-alive\",\n        }\n    )\n\n\n"
        },
        {
          "function": "tosend.extend",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
          "line": 105,
          "caller": "test_http_header_encoding",
          "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
        },
        {
          "function": "response.send_headers",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line": 323,
          "caller": "test_http_header_encoding",
          "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])\n\n        header_str = \"%s\\r\\n\" % \"\".join(tosend)\n        util.write(self.sock, util.to_bytestring(header_str, \"latin-1\"))\n        self.headers_sent = True\n\n"
        },
        {
          "function": "join",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
          "line": 740,
          "caller": "test_http_header_encoding",
          "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
        },
        {
          "function": "mocked_socket.sendall",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
          "line": 649,
          "caller": "test_http_header_encoding",
          "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent\n\n"
        },
        {
          "function": "util.to_bytestring",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
          "line": 568,
          "caller": "test_http_header_encoding",
          "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_http_header_encoding():\n    \"\"\" tests whether http response headers are USASCII encoded \"\"\"\n\n    mocked_socket = mock.MagicMock()\n    mocked_socket.sendall = mock.MagicMock()\n\n    mocked_request = mock.MagicMock()\n    response = Response(mocked_request, mocked_socket, None)\n\n    # set umlaut header value - latin-1 is OK\n    response.headers.append(('foo', 'h\u00e4der'))\n    response.send_headers()\n\n    # set a-breve header value - unicode, non-latin-1 fails\n    response = Response(mocked_request, mocked_socket, None)\n    response.headers.append(('apple', 'm\u0103r'))\n    with pytest.raises(UnicodeEncodeError):\n        response.send_headers()\n\n    # build our own header_str to compare against\n    tosend = response.default_headers()\n    tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in response.headers])\n    header_str = \"%s\\r\\n\" % \"\".join(tosend)\n\n    with pytest.raises(UnicodeEncodeError):\n        mocked_socket.sendall(util.to_bytestring(header_str, \"ascii\"))"
    },
    {
      "test_name": "test_http_invalid_response_header",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Response",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "Response",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "response.start_response",
          "source_code": "    def start_response(self, status, headers, exc_info=None):\n        if exc_info:\n            try:\n                if self.status and self.headers_sent:\n                    util.reraise(exc_info[0], exc_info[1], exc_info[2])\n            finally:\n                exc_info = None\n        elif self.status is not None:\n            raise AssertionError(\"Response headers already set!\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line_number": 230
        },
        {
          "name": "response.start_response",
          "source_code": "    def start_response(self, status, headers, exc_info=None):\n        if exc_info:\n            try:\n                if self.status and self.headers_sent:\n                    util.reraise(exc_info[0], exc_info[1], exc_info[2])\n            finally:\n                exc_info = None\n        elif self.status is not None:\n            raise AssertionError(\"Response headers already set!\")",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line_number": 230
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_invalid_response_header",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_invalid_response_header",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_http_invalid_response_header",
          "source_code": ""
        },
        {
          "function": "Response",
          "filename": "",
          "line": 0,
          "caller": "test_http_invalid_response_header",
          "source_code": ""
        },
        {
          "function": "Response",
          "filename": "",
          "line": 0,
          "caller": "test_http_invalid_response_header",
          "source_code": ""
        },
        {
          "function": "response.start_response",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line": 230,
          "caller": "test_http_invalid_response_header",
          "source_code": "    def start_response(self, status, headers, exc_info=None):\n        if exc_info:\n            try:\n                if self.status and self.headers_sent:\n                    util.reraise(exc_info[0], exc_info[1], exc_info[2])\n            finally:\n                exc_info = None\n        elif self.status is not None:\n            raise AssertionError(\"Response headers already set!\")\n\n        self.status = status\n\n        # get the status code from the response here so we can use it to check\n        # the need for the connection header later without parsing the string\n        # each time.\n        try:\n            self.status_code = int(self.status.split()[0])\n        except ValueError:\n            self.status_code = None\n\n        self.process_headers(headers)\n        self.chunked = self.is_chunked()\n        return self.write\n\n"
        },
        {
          "function": "response.start_response",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
          "line": 230,
          "caller": "test_http_invalid_response_header",
          "source_code": "    def start_response(self, status, headers, exc_info=None):\n        if exc_info:\n            try:\n                if self.status and self.headers_sent:\n                    util.reraise(exc_info[0], exc_info[1], exc_info[2])\n            finally:\n                exc_info = None\n        elif self.status is not None:\n            raise AssertionError(\"Response headers already set!\")\n\n        self.status = status\n\n        # get the status code from the response here so we can use it to check\n        # the need for the connection header later without parsing the string\n        # each time.\n        try:\n            self.status_code = int(self.status.split()[0])\n        except ValueError:\n            self.status_code = None\n\n        self.process_headers(headers)\n        self.chunked = self.is_chunked()\n        return self.write\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_http_invalid_response_header():\n    \"\"\" tests whether http response headers are contains control chars \"\"\"\n\n    mocked_socket = mock.MagicMock()\n    mocked_socket.sendall = mock.MagicMock()\n\n    mocked_request = mock.MagicMock()\n    response = Response(mocked_request, mocked_socket, None)\n\n    with pytest.raises(InvalidHeader):\n        response.start_response(\"200 OK\", [('foo', 'essai\\r\\n')])\n\n    response = Response(mocked_request, mocked_socket, None)\n    with pytest.raises(InvalidHeaderName):\n        response.start_response(\"200 OK\", [('foo\\r\\n', 'essai')])"
    },
    {
      "test_name": "test_unreader_read_when_size_is_none",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Unreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "Unreader",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_when_size_is_none",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_when_size_is_none",
          "source_code": ""
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_when_size_is_none",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_when_size_is_none",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_when_size_is_none",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert unreader.read(size=None) == b'qwerty'",
        "assert unreader.read(size=None) == b'123456'",
        "assert unreader.read(size=None) == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unreader_read_when_size_is_none():\n    unreader = Unreader()\n    unreader.chunk = mock.MagicMock(side_effect=[b'qwerty', b'123456', b''])\n\n    assert unreader.read(size=None) == b'qwerty'\n    assert unreader.read(size=None) == b'123456'\n    assert unreader.read(size=None) == b''"
    },
    {
      "test_name": "test_unreader_unread",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Unreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unreader.unread",
          "source_code": "    def unread(self, data):\n        self.buf.seek(0, os.SEEK_END)\n        self.buf.write(data)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 51
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "Unreader",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_unread",
          "source_code": ""
        },
        {
          "function": "unreader.unread",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 51,
          "caller": "test_unreader_unread",
          "source_code": "    def unread(self, data):\n        self.buf.seek(0, os.SEEK_END)\n        self.buf.write(data)\n\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_unread",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert b'hi there' in unreader.read()"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unreader_unread():\n    unreader = Unreader()\n    unreader.unread(b'hi there')\n    assert b'hi there' in unreader.read()"
    },
    {
      "test_name": "test_unreader_read_zero_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Unreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "Unreader",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_zero_size",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_zero_size",
          "source_code": ""
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_zero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert unreader.read(size=0) == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unreader_read_zero_size():\n    unreader = Unreader()\n    unreader.chunk = mock.MagicMock(side_effect=[b'qwerty', b'asdfgh'])\n\n    assert unreader.read(size=0) == b''"
    },
    {
      "test_name": "test_unreader_read_with_nonzero_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Unreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "mock.MagicMock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "Unreader",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": ""
        },
        {
          "function": "mock.MagicMock",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": ""
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_read_with_nonzero_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert unreader.read(size=5) == b'qwert'",
        "assert unreader.read(size=5) == b'yasdf'",
        "assert unreader.read(size=5) == b'ghzxc'",
        "assert unreader.read(size=5) == b'vbn12'",
        "assert unreader.read(size=5) == b'3456'",
        "assert unreader.read(size=5) == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unreader_read_with_nonzero_size():\n    unreader = Unreader()\n    unreader.chunk = mock.MagicMock(side_effect=[\n        b'qwerty', b'asdfgh', b'zxcvbn', b'123456', b'', b''\n    ])\n\n    assert unreader.read(size=5) == b'qwert'\n    assert unreader.read(size=5) == b'yasdf'\n    assert unreader.read(size=5) == b'ghzxc'\n    assert unreader.read(size=5) == b'vbn12'\n    assert unreader.read(size=5) == b'3456'\n    assert unreader.read(size=5) == b''"
    },
    {
      "test_name": "test_unreader_raises_excpetion_on_invalid_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "Unreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "unreader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "Unreader",
          "filename": "",
          "line": 0,
          "caller": "test_unreader_raises_excpetion_on_invalid_size",
          "source_code": ""
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_raises_excpetion_on_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_raises_excpetion_on_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "unreader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_unreader_raises_excpetion_on_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_unreader_raises_excpetion_on_invalid_size():\n    unreader = Unreader()\n    with pytest.raises(TypeError):\n        unreader.read(size='foobar')\n    with pytest.raises(TypeError):\n        unreader.read(size=3.14)\n    with pytest.raises(TypeError):\n        unreader.read(size=[])"
    },
    {
      "test_name": "test_iter_unreader_chunk",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "IterUnreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "iter_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "iter_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "iter_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "iter_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "iter_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        }
      ],
      "dynamic_methods": [
        {
          "function": "IterUnreader",
          "filename": "",
          "line": 0,
          "caller": "test_iter_unreader_chunk",
          "source_code": ""
        },
        {
          "function": "iter_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_iter_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "iter_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_iter_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "iter_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_iter_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "iter_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_iter_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "iter_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_iter_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        }
      ],
      "assertions": [
        "assert iter_unreader.chunk() == b'ab'",
        "assert iter_unreader.chunk() == b'cd'",
        "assert iter_unreader.chunk() == b'ef'",
        "assert iter_unreader.chunk() == b''",
        "assert iter_unreader.chunk() == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_iter_unreader_chunk():\n    iter_unreader = IterUnreader((b'ab', b'cd', b'ef'))\n\n    assert iter_unreader.chunk() == b'ab'\n    assert iter_unreader.chunk() == b'cd'\n    assert iter_unreader.chunk() == b'ef'\n    assert iter_unreader.chunk() == b''\n    assert iter_unreader.chunk() == b''"
    },
    {
      "test_name": "test_socket_unreader_chunk",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "t.FakeSocket",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SocketUnreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "sock_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "sock_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "sock_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "sock_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        },
        {
          "name": "sock_unreader.chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line_number": 16
        }
      ],
      "dynamic_methods": [
        {
          "function": "t.FakeSocket",
          "filename": "",
          "line": 0,
          "caller": "test_socket_unreader_chunk",
          "source_code": ""
        },
        {
          "function": "SocketUnreader",
          "filename": "",
          "line": 0,
          "caller": "test_socket_unreader_chunk",
          "source_code": ""
        },
        {
          "function": "sock_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_socket_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "sock_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_socket_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "sock_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_socket_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "sock_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_socket_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        },
        {
          "function": "sock_unreader.chunk",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
          "line": 16,
          "caller": "test_socket_unreader_chunk",
          "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
        }
      ],
      "assertions": [
        "assert sock_unreader.chunk() == b'Lorem'",
        "assert sock_unreader.chunk() == b' ipsu'",
        "assert sock_unreader.chunk() == b'm dol'",
        "assert sock_unreader.chunk() == b'or'",
        "assert sock_unreader.chunk() == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_socket_unreader_chunk():\n    fake_sock = t.FakeSocket(io.BytesIO(b'Lorem ipsum dolor'))\n    sock_unreader = SocketUnreader(fake_sock, max_chunk=5)\n\n    assert sock_unreader.chunk() == b'Lorem'\n    assert sock_unreader.chunk() == b' ipsu'\n    assert sock_unreader.chunk() == b'm dol'\n    assert sock_unreader.chunk() == b'or'\n    assert sock_unreader.chunk() == b''"
    },
    {
      "test_name": "test_length_reader_read",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "IterUnreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "LengthReader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "LengthReader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "IterUnreader",
          "filename": "",
          "line": 0,
          "caller": "test_length_reader_read",
          "source_code": ""
        },
        {
          "function": "LengthReader",
          "filename": "",
          "line": 0,
          "caller": "test_length_reader_read",
          "source_code": ""
        },
        {
          "function": "LengthReader",
          "filename": "",
          "line": 0,
          "caller": "test_length_reader_read",
          "source_code": ""
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert reader.read(0) == b''",
        "assert reader.read(5) == b'Lorem'",
        "assert reader.read(6) == b'ipsumd'",
        "assert reader.read(4) == b'ol'",
        "assert reader.read(100) == b''",
        "assert reader.read(0) == b''",
        "assert reader.read(5) == b'orsit'",
        "assert reader.read(5) == b'amet'",
        "assert reader.read(100) == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_length_reader_read():\n    unreader = IterUnreader((b'Lorem', b'ipsum', b'dolor', b'sit', b'amet'))\n    reader = LengthReader(unreader, 13)\n    assert reader.read(0) == b''\n    assert reader.read(5) == b'Lorem'\n    assert reader.read(6) == b'ipsumd'\n    assert reader.read(4) == b'ol'\n    assert reader.read(100) == b''\n\n    reader = LengthReader(unreader, 10)\n    assert reader.read(0) == b''\n    assert reader.read(5) == b'orsit'\n    assert reader.read(5) == b'amet'\n    assert reader.read(100) == b''"
    },
    {
      "test_name": "test_length_reader_read_invalid_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "LengthReader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "LengthReader",
          "filename": "",
          "line": 0,
          "caller": "test_length_reader_read_invalid_size",
          "source_code": ""
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_length_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_length_reader_read_invalid_size():\n    reader = LengthReader(None, 5)\n    with pytest.raises(TypeError):\n        reader.read('100')\n    with pytest.raises(TypeError):\n        reader.read([100])\n    with pytest.raises(ValueError):\n        reader.read(-100)"
    },
    {
      "test_name": "test_eof_reader_read",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "IterUnreader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "EOFReader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "IterUnreader",
          "filename": "",
          "line": 0,
          "caller": "test_eof_reader_read",
          "source_code": ""
        },
        {
          "function": "EOFReader",
          "filename": "",
          "line": 0,
          "caller": "test_eof_reader_read",
          "source_code": ""
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [
        "assert reader.read(0) == b''",
        "assert reader.read(5) == b'Lorem'",
        "assert reader.read(5) == b'ipsum'",
        "assert reader.read(3) == b'dol'",
        "assert reader.read(3) == b'ors'",
        "assert reader.read(100) == b'itamet'",
        "assert reader.read(100) == b''"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_eof_reader_read():\n    unreader = IterUnreader((b'Lorem', b'ipsum', b'dolor', b'sit', b'amet'))\n    reader = EOFReader(unreader)\n\n    assert reader.read(0) == b''\n    assert reader.read(5) == b'Lorem'\n    assert reader.read(5) == b'ipsum'\n    assert reader.read(3) == b'dol'\n    assert reader.read(3) == b'ors'\n    assert reader.read(100) == b'itamet'\n    assert reader.read(100) == b''"
    },
    {
      "test_name": "test_eof_reader_read_invalid_size",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "EOFReader",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        },
        {
          "name": "reader.read",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line_number": 145
        }
      ],
      "dynamic_methods": [
        {
          "function": "EOFReader",
          "filename": "",
          "line": 0,
          "caller": "test_eof_reader_read_invalid_size",
          "source_code": ""
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        },
        {
          "function": "reader.read",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
          "line": 145,
          "caller": "test_eof_reader_read_invalid_size",
          "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_eof_reader_read_invalid_size():\n    reader = EOFReader(None)\n    with pytest.raises(TypeError):\n        reader.read('100')\n    with pytest.raises(TypeError):\n        reader.read([100])\n    with pytest.raises(ValueError):\n        reader.read(-100)"
    },
    {
      "test_name": "test_invalid_http_version_error",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
      "static_methods": [
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "str",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "InvalidHTTPVersion",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "InvalidHTTPVersion",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_invalid_http_version_error",
          "source_code": ""
        },
        {
          "function": "str",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_invalid_http_version_error",
          "source_code": ""
        },
        {
          "function": "InvalidHTTPVersion",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_http_version_error",
          "source_code": ""
        },
        {
          "function": "InvalidHTTPVersion",
          "filename": "",
          "line": 0,
          "caller": "test_invalid_http_version_error",
          "source_code": ""
        }
      ],
      "assertions": [
        "assert str(InvalidHTTPVersion('foo')) == \"Invalid HTTP Version: 'foo'\"",
        "assert str(InvalidHTTPVersion((2, 1))) == 'Invalid HTTP Version: (2, 1)'"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_invalid_http_version_error():\n    assert str(InvalidHTTPVersion('foo')) == \"Invalid HTTP Version: 'foo'\"\n    assert str(InvalidHTTPVersion((2, 1))) == 'Invalid HTTP Version: (2, 1)'"
    },
    {
      "test_name": "test_validate_no_file",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "IOError",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "builtin",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line_number": 11
        },
        {
          "name": "pidfile.validate",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line_number": 921
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_no_file",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "IOError",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_validate_no_file",
          "source_code": ""
        },
        {
          "function": "builtin",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line": 11,
          "caller": "test_validate_no_file",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)\n\n\n"
        },
        {
          "function": "pidfile.validate",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line": 921,
          "caller": "test_validate_no_file",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_no_file",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert pidfile.validate() is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_validate_no_file(_open):\n    pidfile = gunicorn.pidfile.Pidfile('test.pid')\n    _open.side_effect = IOError(errno.ENOENT)\n    assert pidfile.validate() is None"
    },
    {
      "test_name": "test_validate_file_pid_exists",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "builtin",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line_number": 11
        },
        {
          "name": "pidfile.validate",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line_number": 921
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "builtin",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line": 11,
          "caller": "test_validate_file_pid_exists",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)\n\n\n"
        },
        {
          "function": "pidfile.validate",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line": 921,
          "caller": "test_validate_file_pid_exists",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert pidfile.validate() == 1",
        "assert kill.called"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_validate_file_pid_exists(kill, _open):\n    pidfile = gunicorn.pidfile.Pidfile('test.pid')\n    assert pidfile.validate() == 1\n    assert kill.called"
    },
    {
      "test_name": "test_validate_file_pid_malformed",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "builtin",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line_number": 11
        },
        {
          "name": "pidfile.validate",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line_number": 921
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_malformed",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "builtin",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line": 11,
          "caller": "test_validate_file_pid_malformed",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)\n\n\n"
        },
        {
          "function": "pidfile.validate",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line": 921,
          "caller": "test_validate_file_pid_malformed",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_malformed",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert pidfile.validate() is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_validate_file_pid_malformed(_open):\n    pidfile = gunicorn.pidfile.Pidfile('test.pid')\n    assert pidfile.validate() is None"
    },
    {
      "test_name": "test_validate_file_pid_exists_kill_exception",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "OSError",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "builtin",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line_number": 11
        },
        {
          "name": "pidfile.validate",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line_number": 921
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "OSError",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": ""
        },
        {
          "function": "builtin",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line": 11,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)\n\n\n"
        },
        {
          "function": "pidfile.validate",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line": 921,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_exists_kill_exception",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert pidfile.validate() == 1"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_validate_file_pid_exists_kill_exception(kill, _open):\n    pidfile = gunicorn.pidfile.Pidfile('test.pid')\n    kill.side_effect = OSError(errno.EPERM)\n    assert pidfile.validate() == 1"
    },
    {
      "test_name": "test_validate_file_pid_does_not_exist",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
      "static_methods": [
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "OSError",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        },
        {
          "name": "builtin",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line_number": 11
        },
        {
          "name": "pidfile.validate",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line_number": 921
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "mock.patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "OSError",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": ""
        },
        {
          "function": "builtin",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_pidfile.py",
          "line": 11,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "def builtin(name):\n    return 'builtins.{}'.format(name)\n\n\n"
        },
        {
          "function": "pidfile.validate",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
          "line": 921,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "    def validate(self):\n        if self._legacy:\n            missing, warnings = self._legacy.check(True)\n            if missing or warnings:\n                logger.warning('Metadata: missing: %s, warnings: %s',\n                               missing, warnings)\n        else:\n            self._validate_mapping(self._data, self.scheme)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "mock.patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_validate_file_pid_does_not_exist",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [
        "assert pidfile.validate() is None"
      ],
      "mocks": [],
      "success": true,
      "test_source_code": "def test_validate_file_pid_does_not_exist(kill, _open):\n    pidfile = gunicorn.pidfile.Pidfile('test.pid')\n    kill.side_effect = OSError(errno.ESRCH)\n    assert pidfile.validate() is None"
    },
    {
      "test_name": "test_import",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/workers/test_ggevent.py",
      "static_methods": [
        {
          "name": "__import__",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "__import__",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_import",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_import():\n    __import__('gunicorn.workers.ggevent')"
    },
    {
      "test_name": "test_import",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/workers/test_geventlet.py",
      "static_methods": [
        {
          "name": "__import__",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "__import__",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_import",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_import():\n\n    try:\n        import eventlet\n    except AttributeError:\n        if (3,13) > sys.version_info >= (3, 12):\n            pytest.skip(\"Ignoring eventlet failures on Python 3.12\")\n        raise\n    __import__('gunicorn.workers.geventlet')"
    },
    {
      "test_name": "test_closed_shouldnt_raise_on_closed_stream",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "StringIO",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stream.close",
          "source_code": "    def close(self):\n        pass",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line_number": 23
        },
        {
          "name": "StreamWrapper",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertEqual",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "StringIO",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_closed_stream",
          "source_code": ""
        },
        {
          "function": "stream.close",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line": 23,
          "caller": "test_closed_shouldnt_raise_on_closed_stream",
          "source_code": "    def close(self):\n        pass\n\n\n"
        },
        {
          "function": "StreamWrapper",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_closed_stream",
          "source_code": ""
        },
        {
          "function": "self.assertEqual",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_closed_stream",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_closed_shouldnt_raise_on_closed_stream(self):\n        stream = StringIO()\n        stream.close()\n        wrapper = StreamWrapper(stream, None)\n        self.assertEqual(wrapper.closed, True)"
    },
    {
      "test_name": "test_closed_shouldnt_raise_on_detached_stream",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "TextIOWrapper",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stream.detach",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "StreamWrapper",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertEqual",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "StringIO",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "TextIOWrapper",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_detached_stream",
          "source_code": ""
        },
        {
          "function": "stream.detach",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_detached_stream",
          "source_code": ""
        },
        {
          "function": "StreamWrapper",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_detached_stream",
          "source_code": ""
        },
        {
          "function": "self.assertEqual",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_detached_stream",
          "source_code": ""
        },
        {
          "function": "StringIO",
          "filename": "",
          "line": 0,
          "caller": "test_closed_shouldnt_raise_on_detached_stream",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_closed_shouldnt_raise_on_detached_stream(self):\n        stream = TextIOWrapper(StringIO())\n        stream.detach()\n        wrapper = StreamWrapper(stream, None)\n        self.assertEqual(wrapper.closed, True)"
    },
    {
      "test_name": "test_reset_all_shouldnt_raise_on_closed_orig_stdout",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "StringIO",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stream.close",
          "source_code": "    def close(self):\n        pass",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line_number": 23
        },
        {
          "name": "converter.reset_all",
          "source_code": "    def reset_all(self):\n        if self.convert:\n            self.call_win32('m', (0,))\n        elif not self.strip and not self.stream.closed:\n            self.wrapped.write(Style.RESET_ALL)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line_number": 185
        }
      ],
      "dynamic_methods": [
        {
          "function": "StringIO",
          "filename": "",
          "line": 0,
          "caller": "test_reset_all_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_reset_all_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        },
        {
          "function": "stream.close",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line": 23,
          "caller": "test_reset_all_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def close(self):\n        pass\n\n\n"
        },
        {
          "function": "converter.reset_all",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line": 185,
          "caller": "test_reset_all_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def reset_all(self):\n        if self.convert:\n            self.call_win32('m', (0,))\n        elif not self.strip and not self.stream.closed:\n            self.wrapped.write(Style.RESET_ALL)\n\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_reset_all_shouldnt_raise_on_closed_orig_stdout(self):\n        stream = StringIO()\n        converter = AnsiToWin32(stream)\n        stream.close()\n\n        converter.reset_all()"
    },
    {
      "test_name": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "StringIO",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stream.close",
          "source_code": "    def close(self):\n        pass",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line_number": 23
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "StringIO",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        },
        {
          "function": "stream.close",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
          "line": 23,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def close(self):\n        pass\n\n\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_closed_orig_stdout",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [
        "patch('colorama.ansitowin32.os.name', 'nt')",
        "patch('colorama.ansitowin32.winapi_test', lambda : True)"
      ],
      "success": false,
      "test_source_code": "def test_wrap_shouldnt_raise_on_closed_orig_stdout(self):\n        stream = StringIO()\n        stream.close()\n        with \\\n            patch(\"colorama.ansitowin32.os.name\", \"nt\"), \\\n            patch(\"colorama.ansitowin32.winapi_test\", lambda: True):\n                converter = AnsiToWin32(stream)\n        self.assertTrue(converter.strip)\n        self.assertFalse(converter.convert)"
    },
    {
      "test_name": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "object",
          "source_code": "",
          "file_path": "<built-in>",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": ""
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": ""
        },
        {
          "function": "object",
          "filename": "<built-in>",
          "line": 0,
          "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [
        "patch('colorama.ansitowin32.os.name', 'nt')",
        "patch('colorama.ansitowin32.winapi_test', lambda : True)"
      ],
      "success": false,
      "test_source_code": "def test_wrap_shouldnt_raise_on_missing_closed_attr(self):\n        with \\\n            patch(\"colorama.ansitowin32.os.name\", \"nt\"), \\\n            patch(\"colorama.ansitowin32.winapi_test\", lambda: True):\n                converter = AnsiToWin32(object())\n        self.assertTrue(converter.strip)\n        self.assertFalse(converter.convert)"
    },
    {
      "test_name": "test_osc_codes",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        },
        {
          "name": "self.assertEqual",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stream.write",
          "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
          "line_number": 765
        }
      ],
      "dynamic_methods": [
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_osc_codes",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "Mock",
          "filename": "",
          "line": 0,
          "caller": "test_osc_codes",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_osc_codes",
          "source_code": ""
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_osc_codes",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        },
        {
          "function": "self.assertEqual",
          "filename": "",
          "line": 0,
          "caller": "test_osc_codes",
          "source_code": ""
        },
        {
          "function": "stream.write",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
          "line": 765,
          "caller": "test_osc_codes",
          "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
        }
      ],
      "assertions": [],
      "mocks": [
        "patch('colorama.ansitowin32.winterm')"
      ],
      "success": false,
      "test_source_code": "def test_osc_codes(self):\n        mockStdout = Mock()\n        stream = AnsiToWin32(mockStdout, convert=True)\n        with patch('colorama.ansitowin32.winterm') as winterm:\n            data = [\n                '\\033]0\\x07',                      # missing arguments\n                '\\033]0;foo\\x08',                  # wrong OSC command\n                '\\033]0;colorama_test_title\\x07',  # should work\n                '\\033]1;colorama_test_title\\x07',  # wrong set command\n                '\\033]2;colorama_test_title\\x07',  # should work\n                '\\033]' + ';' * 64 + '\\x08',       # see issue #247\n            ]\n            for code in data:\n                stream.write(code)\n            self.assertEqual(winterm.set_title.call_count, 2)"
    },
    {
      "test_name": "test_native_windows_ansi",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "static_methods": [
        {
          "name": "ExitStack",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "ExitStack",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SetConsoleMode.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "Mock",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "p",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line_number": 250
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "SetConsoleMode.assert_called_with",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "stack.enter_context",
          "source_code": "    def enter_context(self, context_provider: ContextManager[_T]) -> _T:\n        assert self._in_main_context",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_internal/cli/command_context.py",
          "line_number": 24
        },
        {
          "name": "stream.should_wrap",
          "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line_number": 121
        },
        {
          "name": "stream.should_wrap",
          "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line_number": 121
        },
        {
          "name": "patch",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line_number": 649
        }
      ],
      "dynamic_methods": [
        {
          "function": "ExitStack",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "ExitStack",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "Mock",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "Mock",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "SetConsoleMode.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "Mock",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "p",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
          "line": 250,
          "caller": "test_native_windows_ansi",
          "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "SetConsoleMode.assert_called_with",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_native_windows_ansi",
          "source_code": ""
        },
        {
          "function": "stack.enter_context",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_internal/cli/command_context.py",
          "line": 24,
          "caller": "test_native_windows_ansi",
          "source_code": "    def enter_context(self, context_provider: ContextManager[_T]) -> _T:\n        assert self._in_main_context\n\n        return self._main_context.enter_context(context_provider)\n"
        },
        {
          "function": "stream.should_wrap",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line": 121,
          "caller": "test_native_windows_ansi",
          "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset\n\n"
        },
        {
          "function": "stream.should_wrap",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
          "line": 121,
          "caller": "test_native_windows_ansi",
          "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset\n\n"
        },
        {
          "function": "patch",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
          "line": 649,
          "caller": "test_native_windows_ansi",
          "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
        }
      ],
      "assertions": [],
      "mocks": [
        "patch(a, b, create=True)"
      ],
      "success": false,
      "test_source_code": "def test_native_windows_ansi(self):\n        with ExitStack() as stack:\n            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)\n\n            # Pretend that our mock stream has native ANSI support\n            p(\n                \"colorama.winterm.win32.GetConsoleMode\",\n                lambda _: ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n            )\n            SetConsoleMode = Mock()\n            p(\"colorama.winterm.win32.SetConsoleMode\", SetConsoleMode)\n\n            stdout = Mock()\n            stdout.closed = False\n            stdout.isatty.return_value = True\n            stdout.fileno.return_value = 1\n\n            # Our fake console says it has native vt support, so AnsiToWin32 should\n            # enable that support and do nothing else.\n            stream = AnsiToWin32(stdout)\n            SetConsoleMode.assert_called_with(1234, ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n            self.assertFalse(stream.strip)\n            self.assertFalse(stream.convert)\n            self.assertFalse(stream.should_wrap())\n\n            # Now let's pretend we're on an old Windows console, that doesn't have\n            # native ANSI support.\n            p(\"colorama.winterm.win32.GetConsoleMode\", lambda _: 0)\n            SetConsoleMode = Mock()\n            p(\"colorama.winterm.win32.SetConsoleMode\", SetConsoleMode)\n\n            stream = AnsiToWin32(stdout)\n            SetConsoleMode.assert_called_with(1234, ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n            self.assertTrue(stream.strip)\n            self.assertTrue(stream.convert)\n            self.assertTrue(stream.should_wrap())"
    },
    {
      "test_name": "test_TTY",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "StreamTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_TTY",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "StreamTTY",
          "filename": "",
          "line": 0,
          "caller": "test_TTY",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_TTY",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_TTY",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_TTY",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_TTY",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_TTY",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_TTY(self):\n        tty = StreamTTY()\n        self.assertTrue(is_a_tty(tty))\n        with pycharm():\n            self.assertTrue(is_a_tty(tty))"
    },
    {
      "test_name": "test_nonTTY",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "StreamNonTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_nonTTY",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "StreamNonTTY",
          "filename": "",
          "line": 0,
          "caller": "test_nonTTY",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_nonTTY",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_nonTTY",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_nonTTY",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_nonTTY",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_nonTTY",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_nonTTY(self):\n        non_tty = StreamNonTTY()\n        self.assertFalse(is_a_tty(non_tty))\n        with pycharm():\n            self.assertFalse(is_a_tty(non_tty))"
    },
    {
      "test_name": "test_withPycharm",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharm",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharm",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharm",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharm",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharm",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharm",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_withPycharm(self):\n        with pycharm():\n            self.assertTrue(is_a_tty(sys.stderr))\n            self.assertTrue(is_a_tty(sys.stdout))"
    },
    {
      "test_name": "test_withPycharmTTYOverride",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "StreamTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmTTYOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmTTYOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "StreamTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmTTYOverride",
          "source_code": ""
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmTTYOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmTTYOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmTTYOverride",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharmTTYOverride",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_withPycharmTTYOverride(self):\n        tty = StreamTTY()\n        with pycharm(), replace_by(tty):\n            self.assertTrue(is_a_tty(tty))"
    },
    {
      "test_name": "test_withPycharmNonTTYOverride",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "StreamNonTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "StreamNonTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": ""
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharmNonTTYOverride",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_withPycharmNonTTYOverride(self):\n        non_tty = StreamNonTTY()\n        with pycharm(), replace_by(non_tty):\n            self.assertFalse(is_a_tty(non_tty))"
    },
    {
      "test_name": "test_withPycharmNoneOverride",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "replace_original_by",
          "source_code": "def replace_original_by(stream):\n    orig_stdout = sys.__stdout__\n    orig_stderr = sys.__stderr__\n    sys.__stdout__ = stream\n    sys.__stderr__ = stream\n    yield\n    sys.__stdout__ = orig_stdout\n    sys.__stderr__ = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 34
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "replace_by",
          "source_code": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 24
        },
        {
          "name": "replace_original_by",
          "source_code": "def replace_original_by(stream):\n    orig_stdout = sys.__stdout__\n    orig_stderr = sys.__stderr__\n    sys.__stdout__ = stream\n    sys.__stderr__ = stream\n    yield\n    sys.__stdout__ = orig_stdout\n    sys.__stderr__ = orig_stderr",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 34
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "is_a_tty",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line_number": 9
        },
        {
          "name": "StreamNonTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "StreamTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "replace_original_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 34,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef replace_original_by(stream):\n    orig_stdout = sys.__stdout__\n    orig_stderr = sys.__stderr__\n    sys.__stdout__ = stream\n    sys.__stderr__ = stream\n    yield\n    sys.__stdout__ = orig_stdout\n    sys.__stderr__ = orig_stderr\n\n"
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "replace_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 24,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n\n"
        },
        {
          "function": "replace_original_by",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 34,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "@contextmanager\ndef replace_original_by(stream):\n    orig_stdout = sys.__stdout__\n    orig_stderr = sys.__stderr__\n    sys.__stdout__ = stream\n    sys.__stderr__ = stream\n    yield\n    sys.__stdout__ = orig_stdout\n    sys.__stderr__ = orig_stderr\n\n"
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNoneOverride",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNoneOverride",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNoneOverride",
          "source_code": ""
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "is_a_tty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
          "line": 9,
          "caller": "test_withPycharmNoneOverride",
          "source_code": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\n\n"
        },
        {
          "function": "StreamNonTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNoneOverride",
          "source_code": ""
        },
        {
          "function": "StreamTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmNoneOverride",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_withPycharmNoneOverride(self):\n        with pycharm():\n            with replace_by(None), replace_original_by(None):\n                self.assertFalse(is_a_tty(None))\n                self.assertFalse(is_a_tty(StreamNonTTY()))\n                self.assertTrue(is_a_tty(StreamTTY()))"
    },
    {
      "test_name": "test_withPycharmStreamWrapped",
      "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/isatty_test.py",
      "static_methods": [
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "pycharm",
          "source_code": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line_number": 44
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertFalse",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "self.assertTrue",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32.stream.isatty",
          "source_code": "    def isatty(self) -> bool:\n        return False",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 23
        },
        {
          "name": "AnsiToWin32.stream.isatty",
          "source_code": "    def isatty(self) -> bool:\n        return False",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 23
        },
        {
          "name": "AnsiToWin32.stream.isatty",
          "source_code": "    def isatty(self) -> bool:\n        return False",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 23
        },
        {
          "name": "AnsiToWin32.stream.isatty",
          "source_code": "    def isatty(self) -> bool:\n        return False",
          "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line_number": 23
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "AnsiToWin32",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "StreamTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        },
        {
          "name": "StreamNonTTY",
          "source_code": "",
          "file_path": "",
          "line_number": 0
        }
      ],
      "dynamic_methods": [
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "pycharm",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/utils.py",
          "line": 44,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "@contextmanager\ndef pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]\n"
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "self.assertFalse",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "self.assertTrue",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32.stream.isatty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 23,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "    def isatty(self) -> bool:\n        return False\n\n"
        },
        {
          "function": "AnsiToWin32.stream.isatty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 23,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "    def isatty(self) -> bool:\n        return False\n\n"
        },
        {
          "function": "AnsiToWin32.stream.isatty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 23,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "    def isatty(self) -> bool:\n        return False\n\n"
        },
        {
          "function": "AnsiToWin32.stream.isatty",
          "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
          "line": 23,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": "    def isatty(self) -> bool:\n        return False\n\n"
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "AnsiToWin32",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "StreamTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        },
        {
          "function": "StreamNonTTY",
          "filename": "",
          "line": 0,
          "caller": "test_withPycharmStreamWrapped",
          "source_code": ""
        }
      ],
      "assertions": [],
      "mocks": [],
      "success": false,
      "test_source_code": "def test_withPycharmStreamWrapped(self):\n        with pycharm():\n            self.assertTrue(AnsiToWin32(StreamTTY()).stream.isatty())\n            self.assertFalse(AnsiToWin32(StreamNonTTY()).stream.isatty())\n            self.assertTrue(AnsiToWin32(sys.stdout).stream.isatty())\n            self.assertTrue(AnsiToWin32(sys.stderr).stream.isatty())"
    }
  ]
}