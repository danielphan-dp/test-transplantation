{
  "test_name": "test_app_config",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "AltArgs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "AltArgs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NoConfigApp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.cfg.settings.validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.cfg.settings.get",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 14
    }
  ],
  "dynamic_methods": [
    {
      "function": "AltArgs",
      "filename": "",
      "line": 0,
      "caller": "test_app_config",
      "source_code": ""
    },
    {
      "function": "AltArgs",
      "filename": "",
      "line": 0,
      "caller": "test_app_config",
      "source_code": ""
    },
    {
      "function": "NoConfigApp",
      "filename": "",
      "line": 0,
      "caller": "test_app_config",
      "source_code": ""
    },
    {
      "function": "app.cfg.settings.validator",
      "filename": "",
      "line": 0,
      "caller": "test_app_config",
      "source_code": ""
    },
    {
      "function": "app.cfg.settings.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 14,
      "caller": "test_app_config",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
    }
  ],
  "assertions": [
    "assert app.cfg.settings[s.name].validator(s.default) == app.cfg.settings[s.name].get()"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_config():\n    with AltArgs():\n        app = NoConfigApp()\n    for s in config.KNOWN_SETTINGS:\n        assert app.cfg.settings[s.name].validator(s.default) == app.cfg.settings[s.name].get()"
}