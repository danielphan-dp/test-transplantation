{
  "test_name": "test_arbiter_reexec_limit_parent",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_arbiter.py",
  "static_methods": [
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "arbiter.reexec",
      "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
      "line_number": 401
    },
    {
      "name": "DummyApplication",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_arbiter_reexec_limit_parent",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "arbiter.reexec",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/arbiter.py",
      "line": 401,
      "caller": "test_arbiter_reexec_limit_parent",
      "source_code": "    def reexec(self):\n        \"\"\"\\\n        Relaunch the master and workers.\n        \"\"\"\n        if self.reexec_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Child exists.\")\n            return\n\n        if self.master_pid != 0:\n            self.log.warning(\"USR2 signal ignored. Parent exists.\")\n            return\n\n        master_pid = os.getpid()\n        self.reexec_pid = os.fork()\n        if self.reexec_pid != 0:\n            return\n\n        self.cfg.pre_exec(self)\n\n        environ = self.cfg.env_orig.copy()\n        environ['GUNICORN_PID'] = str(master_pid)\n\n        if self.systemd:\n            environ['LISTEN_PID'] = str(os.getpid())\n            environ['LISTEN_FDS'] = str(len(self.LISTENERS))\n        else:\n            environ['GUNICORN_FD'] = ','.join(\n                str(lnr.fileno()) for lnr in self.LISTENERS)\n\n        os.chdir(self.START_CTX['cwd'])\n\n        # exec the process using the original environment\n        os.execvpe(self.START_CTX[0], self.START_CTX['args'], environ)\n\n"
    },
    {
      "function": "DummyApplication",
      "filename": "",
      "line": 0,
      "caller": "test_arbiter_reexec_limit_parent",
      "source_code": ""
    },
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_arbiter_reexec_limit_parent",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [
    "assert fork.called is False, 'should not fork when there is already a child'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_arbiter_reexec_limit_parent(fork):\n    arbiter = gunicorn.arbiter.Arbiter(DummyApplication())\n    arbiter.reexec_pid = ~os.getpid()\n    arbiter.reexec()\n    assert fork.called is False, \"should not fork when there is already a child\""
}