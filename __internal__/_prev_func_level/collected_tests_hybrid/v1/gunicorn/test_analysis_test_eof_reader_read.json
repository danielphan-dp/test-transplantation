{
  "test_name": "test_eof_reader_read",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
  "static_methods": [
    {
      "name": "IterUnreader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EOFReader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    }
  ],
  "dynamic_methods": [
    {
      "function": "IterUnreader",
      "filename": "",
      "line": 0,
      "caller": "test_eof_reader_read",
      "source_code": ""
    },
    {
      "function": "EOFReader",
      "filename": "",
      "line": 0,
      "caller": "test_eof_reader_read",
      "source_code": ""
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_eof_reader_read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    }
  ],
  "assertions": [
    "assert reader.read(0) == b''",
    "assert reader.read(5) == b'Lorem'",
    "assert reader.read(5) == b'ipsum'",
    "assert reader.read(3) == b'dol'",
    "assert reader.read(3) == b'ors'",
    "assert reader.read(100) == b'itamet'",
    "assert reader.read(100) == b''"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_eof_reader_read():\n    unreader = IterUnreader((b'Lorem', b'ipsum', b'dolor', b'sit', b'amet'))\n    reader = EOFReader(unreader)\n\n    assert reader.read(0) == b''\n    assert reader.read(5) == b'Lorem'\n    assert reader.read(5) == b'ipsum'\n    assert reader.read(3) == b'dol'\n    assert reader.read(3) == b'ors'\n    assert reader.read(100) == b'itamet'\n    assert reader.read(100) == b''"
}