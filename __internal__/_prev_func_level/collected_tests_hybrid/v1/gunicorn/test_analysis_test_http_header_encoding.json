{
  "test_name": "test_http_header_encoding",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
  "static_methods": [
    {
      "name": "mock.MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.headers.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "response.send_headers",
      "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
      "line_number": 323
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.headers.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "response.default_headers",
      "source_code": "def default_headers():\n    \"\"\"\n    :rtype: requests.structures.CaseInsensitiveDict\n    \"\"\"\n    return CaseInsensitiveDict(\n        {\n            \"User-Agent\": default_user_agent(),\n            \"Accept-Encoding\": DEFAULT_ACCEPT_ENCODING,\n            \"Accept\": \"*/*\",\n            \"Connection\": \"keep-alive\",\n        }\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py",
      "line_number": 893
    },
    {
      "name": "tosend.extend",
      "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
      "line_number": 105
    },
    {
      "name": "response.send_headers",
      "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
      "line_number": 323
    },
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "mocked_socket.sendall",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 649
    },
    {
      "name": "util.to_bytestring",
      "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
      "line_number": 568
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_http_header_encoding",
      "source_code": ""
    },
    {
      "function": "mock.MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_http_header_encoding",
      "source_code": ""
    },
    {
      "function": "mock.MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_http_header_encoding",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_http_header_encoding",
      "source_code": ""
    },
    {
      "function": "response.headers.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_http_header_encoding",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "response.send_headers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
      "line": 323,
      "caller": "test_http_header_encoding",
      "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])\n\n        header_str = \"%s\\r\\n\" % \"\".join(tosend)\n        util.write(self.sock, util.to_bytestring(header_str, \"latin-1\"))\n        self.headers_sent = True\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_http_header_encoding",
      "source_code": ""
    },
    {
      "function": "response.headers.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_http_header_encoding",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "response.default_headers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/utils.py",
      "line": 893,
      "caller": "test_http_header_encoding",
      "source_code": "def default_headers():\n    \"\"\"\n    :rtype: requests.structures.CaseInsensitiveDict\n    \"\"\"\n    return CaseInsensitiveDict(\n        {\n            \"User-Agent\": default_user_agent(),\n            \"Accept-Encoding\": DEFAULT_ACCEPT_ENCODING,\n            \"Accept\": \"*/*\",\n            \"Connection\": \"keep-alive\",\n        }\n    )\n\n\n"
    },
    {
      "function": "tosend.extend",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/containers.py",
      "line": 105,
      "caller": "test_http_header_encoding",
      "source_code": "    def extend(self, lines: Iterable[\"Text\"]) -> None:\n        self._lines.extend(lines)\n\n"
    },
    {
      "function": "response.send_headers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/wsgi.py",
      "line": 323,
      "caller": "test_http_header_encoding",
      "source_code": "    def send_headers(self):\n        if self.headers_sent:\n            return\n        tosend = self.default_headers()\n        tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in self.headers])\n\n        header_str = \"%s\\r\\n\" % \"\".join(tosend)\n        util.write(self.sock, util.to_bytestring(header_str, \"latin-1\"))\n        self.headers_sent = True\n\n"
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_http_header_encoding",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "mocked_socket.sendall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 649,
      "caller": "test_http_header_encoding",
      "source_code": "    def sendall(self, data):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.send(data[total_sent : total_sent + SSL_WRITE_BLOCKSIZE])\n            total_sent += sent\n\n"
    },
    {
      "function": "util.to_bytestring",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/util.py",
      "line": 568,
      "caller": "test_http_header_encoding",
      "source_code": "def to_bytestring(value, encoding=\"utf8\"):\n    \"\"\"Converts a string argument to a byte string\"\"\"\n    if isinstance(value, bytes):\n        return value\n    if not isinstance(value, str):\n        raise TypeError('%r is not a string' % value)\n\n    return value.encode(encoding)\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_http_header_encoding():\n    \"\"\" tests whether http response headers are USASCII encoded \"\"\"\n\n    mocked_socket = mock.MagicMock()\n    mocked_socket.sendall = mock.MagicMock()\n\n    mocked_request = mock.MagicMock()\n    response = Response(mocked_request, mocked_socket, None)\n\n    # set umlaut header value - latin-1 is OK\n    response.headers.append(('foo', 'h\u00e4der'))\n    response.send_headers()\n\n    # set a-breve header value - unicode, non-latin-1 fails\n    response = Response(mocked_request, mocked_socket, None)\n    response.headers.append(('apple', 'm\u0103r'))\n    with pytest.raises(UnicodeEncodeError):\n        response.send_headers()\n\n    # build our own header_str to compare against\n    tosend = response.default_headers()\n    tosend.extend([\"%s: %s\\r\\n\" % (k, v) for k, v in response.headers])\n    header_str = \"%s\\r\\n\" % \"\".join(tosend)\n\n    with pytest.raises(UnicodeEncodeError):\n        mocked_socket.sendall(util.to_bytestring(header_str, \"ascii\"))"
}