{
  "test_name": "test_method_pattern",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
  "static_methods": [
    {
      "name": "TOKEN_RE.fullmatch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TOKEN_RE.fullmatch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TOKEN_RE.fullmatch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TOKEN_RE.fullmatch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TOKEN_RE.match",
      "source_code": "    def match(self, version):\n        \"\"\"\n        Check if the provided version matches the constraints.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py",
      "line_number": 129
    }
  ],
  "dynamic_methods": [
    {
      "function": "TOKEN_RE.fullmatch",
      "filename": "",
      "line": 0,
      "caller": "test_method_pattern",
      "source_code": ""
    },
    {
      "function": "TOKEN_RE.fullmatch",
      "filename": "",
      "line": 0,
      "caller": "test_method_pattern",
      "source_code": ""
    },
    {
      "function": "TOKEN_RE.fullmatch",
      "filename": "",
      "line": 0,
      "caller": "test_method_pattern",
      "source_code": ""
    },
    {
      "function": "TOKEN_RE.fullmatch",
      "filename": "",
      "line": 0,
      "caller": "test_method_pattern",
      "source_code": ""
    },
    {
      "function": "TOKEN_RE.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/version.py",
      "line": 129,
      "caller": "test_method_pattern",
      "source_code": "    def match(self, version):\n        \"\"\"\n        Check if the provided version matches the constraints.\n\n        :param version: The version to match against this instance.\n        :type version: String or :class:`Version` instance.\n        \"\"\"\n        if isinstance(version, string_types):\n            version = self.version_class(version)\n        for operator, constraint, prefix in self._parts:\n            f = self._operators.get(operator)\n            if isinstance(f, string_types):\n                f = getattr(self, f)\n            if not f:\n                msg = ('%r not implemented '\n                       'for %s' % (operator, self.__class__.__name__))\n                raise NotImplementedError(msg)\n            if not f(version, constraint, prefix):\n                return False\n        return True\n\n"
    }
  ],
  "assertions": [
    "assert TOKEN_RE.fullmatch('GET')",
    "assert TOKEN_RE.fullmatch('MKCALENDAR')",
    "assert not TOKEN_RE.fullmatch('GET:')",
    "assert not TOKEN_RE.fullmatch('GET;')",
    "assert not TOKEN_RE.match(bad_char)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_method_pattern():\n    assert TOKEN_RE.fullmatch(\"GET\")\n    assert TOKEN_RE.fullmatch(\"MKCALENDAR\")\n    assert not TOKEN_RE.fullmatch(\"GET:\")\n    assert not TOKEN_RE.fullmatch(\"GET;\")\n    RFC9110_5_6_2_TOKEN_DELIM = r'\"(),/:;<=>?@[\\]{}'\n    for bad_char in RFC9110_5_6_2_TOKEN_DELIM:\n        assert not TOKEN_RE.match(bad_char)"
}