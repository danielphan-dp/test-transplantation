{
  "test_name": "test_post_request",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "config.Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "c.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "c.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "c.post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line_number": 1934
    },
    {
      "name": "c.post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line_number": 1934
    },
    {
      "name": "c.post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n    default = staticmethod(post_request)\n    desc = \"\"\"\\\n        Called after a worker processes the request.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line_number": 1934
    }
  ],
  "dynamic_methods": [
    {
      "function": "config.Config",
      "filename": "",
      "line": 0,
      "caller": "test_post_request",
      "source_code": ""
    },
    {
      "function": "c.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_post_request",
      "source_code": ""
    },
    {
      "function": "c.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_post_request",
      "source_code": ""
    },
    {
      "function": "c.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_post_request",
      "source_code": ""
    },
    {
      "function": "c.post_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line": 1934,
      "caller": "test_post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
    },
    {
      "function": "c.post_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line": 1934,
      "caller": "test_post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
    },
    {
      "function": "c.post_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/config.py",
      "line": 1934,
      "caller": "test_post_request",
      "source_code": "    def post_request(worker, req, environ, resp):\n        pass\n"
    }
  ],
  "assertions": [
    "assert c.post_request(1, 2, 3, 4) == 4",
    "assert c.post_request(1, 2, 3, 4) == 3",
    "assert c.post_request(1, 2, 3, 4) == 2"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_post_request():\n    c = config.Config()\n\n    def post_request_4(worker, req, environ, resp):\n        return 4\n\n    def post_request_3(worker, req, environ):\n        return 3\n\n    def post_request_2(worker, req):\n        return 2\n\n    c.set(\"post_request\", post_request_4)\n    assert c.post_request(1, 2, 3, 4) == 4\n\n    c.set(\"post_request\", post_request_3)\n    assert c.post_request(1, 2, 3, 4) == 3\n\n    c.set(\"post_request\", post_request_2)\n    assert c.post_request(1, 2, 3, 4) == 2"
}