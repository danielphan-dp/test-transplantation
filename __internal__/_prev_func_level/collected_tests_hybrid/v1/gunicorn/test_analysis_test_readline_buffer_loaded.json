{
  "test_name": "test_readline_buffer_loaded",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
  "static_methods": [
    {
      "name": "Body",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "body.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "reader.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "reader.seek",
      "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 38
    },
    {
      "name": "body.readline",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 32
    },
    {
      "name": "body.readline",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 32
    },
    {
      "name": "body.readline",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 32
    }
  ],
  "dynamic_methods": [
    {
      "function": "Body",
      "filename": "",
      "line": 0,
      "caller": "test_readline_buffer_loaded",
      "source_code": ""
    },
    {
      "function": "body.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_readline_buffer_loaded",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "reader.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_readline_buffer_loaded",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "reader.seek",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 38,
      "caller": "test_readline_buffer_loaded",
      "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0\n\n"
    },
    {
      "function": "body.readline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 32,
      "caller": "test_readline_buffer_loaded",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
    },
    {
      "function": "body.readline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 32,
      "caller": "test_readline_buffer_loaded",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
    },
    {
      "function": "body.readline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 32,
      "caller": "test_readline_buffer_loaded",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
    }
  ],
  "assertions": [
    "assert body.readline() == b'bc\\n'",
    "assert body.readline() == b'defg\\n'",
    "assert body.readline() == b'hi'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_readline_buffer_loaded():\n    reader = io.BytesIO(b\"abc\\ndef\")\n    body = Body(reader)\n    body.read(1) # load internal buffer\n    reader.write(b\"g\\nhi\")\n    reader.seek(7)\n    assert body.readline() == b\"bc\\n\"\n    assert body.readline() == b\"defg\\n\"\n    assert body.readline() == b\"hi\""
}