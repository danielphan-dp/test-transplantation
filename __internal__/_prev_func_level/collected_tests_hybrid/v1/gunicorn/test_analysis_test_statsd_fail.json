{
  "test_name": "test_statsd_fail",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
  "static_methods": [
    {
      "name": "Statsd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MockSocket",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.info",
      "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 287
    },
    {
      "name": "logger.debug",
      "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
      "line_number": 906
    },
    {
      "name": "logger.critical",
      "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line_number": 267
    },
    {
      "name": "logger.error",
      "source_code": "    def error() -> None:",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/traceback.py",
      "line_number": 667
    },
    {
      "name": "logger.warning",
      "source_code": "    def warning(self, response):\n        \"\"\"\n        Return a valid 1xx warning header value describing the cache\n        adjustments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
      "line_number": 26
    },
    {
      "name": "logger.exception",
      "source_code": "    def exception(self, msg, *args, **kwargs):\n        self.error_log.exception(msg, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line_number": 282
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Statsd",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_fail",
      "source_code": ""
    },
    {
      "function": "MockSocket",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_fail",
      "source_code": ""
    },
    {
      "function": "logger.info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 287,
      "caller": "test_statsd_fail",
      "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
    },
    {
      "function": "logger.debug",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
      "line": 906,
      "caller": "test_statsd_fail",
      "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)\n\n"
    },
    {
      "function": "logger.critical",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line": 267,
      "caller": "test_statsd_fail",
      "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)\n\n"
    },
    {
      "function": "logger.error",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/traceback.py",
      "line": 667,
      "caller": "test_statsd_fail",
      "source_code": "    def error() -> None:\n\n        try:\n            try:\n                foo(0)\n            except:\n                slfkjsldkfj  # type: ignore[name-defined]\n        except:\n            console.print_exception(show_locals=True)\n\n"
    },
    {
      "function": "logger.warning",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
      "line": 26,
      "caller": "test_statsd_fail",
      "source_code": "    def warning(self, response):\n        \"\"\"\n        Return a valid 1xx warning header value describing the cache\n        adjustments.\n\n        The response is provided too allow warnings like 113\n        http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need\n        to explicitly say response is over 24 hours old.\n        \"\"\"\n        return '110 - \"Response is Stale\"'\n\n"
    },
    {
      "function": "logger.exception",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line": 282,
      "caller": "test_statsd_fail",
      "source_code": "    def exception(self, msg, *args, **kwargs):\n        self.error_log.exception(msg, *args, **kwargs)\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_fail",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_statsd_fail():\n    \"UDP socket fails\"\n    logger = Statsd(Config())\n    logger.sock = MockSocket(True)\n    logger.info(\"No impact on logging\")\n    logger.debug(\"No impact on logging\")\n    logger.critical(\"No impact on logging\")\n    logger.error(\"No impact on logging\")\n    logger.warning(\"No impact on logging\")\n    logger.exception(\"No impact on logging\")"
}