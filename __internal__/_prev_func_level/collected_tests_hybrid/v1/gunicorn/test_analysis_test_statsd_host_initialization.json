{
  "test_name": "test_statsd_host_initialization",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
  "static_methods": [
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Statsd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.info",
      "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 287
    },
    {
      "name": "c.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Statsd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.info",
      "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 287
    }
  ],
  "dynamic_methods": [
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_host_initialization",
      "source_code": ""
    },
    {
      "function": "c.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_statsd_host_initialization",
      "source_code": ""
    },
    {
      "function": "Statsd",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_host_initialization",
      "source_code": ""
    },
    {
      "function": "logger.info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 287,
      "caller": "test_statsd_host_initialization",
      "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
    },
    {
      "function": "c.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_statsd_host_initialization",
      "source_code": ""
    },
    {
      "function": "Statsd",
      "filename": "",
      "line": 0,
      "caller": "test_statsd_host_initialization",
      "source_code": ""
    },
    {
      "function": "logger.info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 287,
      "caller": "test_statsd_host_initialization",
      "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_statsd_host_initialization():\n    c = Config()\n    c.set('statsd_host', 'unix:test.sock')\n    logger = Statsd(c)\n    logger.info(\"Can be initialized and used with a UDS socket\")\n\n    # Can be initialized and used with a UDP address\n    c.set('statsd_host', 'host:8080')\n    logger = Statsd(c)\n    logger.info(\"Can be initialized and used with a UDP socket\")"
}