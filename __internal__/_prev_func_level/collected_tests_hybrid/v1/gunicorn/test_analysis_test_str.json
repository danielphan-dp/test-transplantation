{
  "test_name": "test_str",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "config.Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "enumerate",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "o.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "m.group",
      "source_code": "def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:\n    \"\"\"A decorator that turns an iterable of renderables in to a group.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line_number": 495
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "OUTPUT_MATCH.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    },
    {
      "name": "OUTPUT_MATCH.keys",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 745
    }
  ],
  "dynamic_methods": [
    {
      "function": "config.Config",
      "filename": "",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "enumerate",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "o.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "m.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line": 495,
      "caller": "test_str",
      "source_code": "def group(fit: bool = True) -> Callable[..., Callable[..., Group]]:\n    \"\"\"A decorator that turns an iterable of renderables in to a group.\n\n    Args:\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    \"\"\"\n\n    def decorator(\n        method: Callable[..., Iterable[RenderableType]]\n    ) -> Callable[..., Group]:\n        \"\"\"Convert a method that returns an iterable of renderables in to a Group.\"\"\"\n\n        @wraps(method)\n        def _replace(*args: Any, **kwargs: Any) -> Group:\n            renderables = method(*args, **kwargs)\n            return Group(*renderables, fit=fit)\n\n        return _replace\n\n    return decorator\n\n\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_str",
      "source_code": ""
    },
    {
      "function": "OUTPUT_MATCH.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_str",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    },
    {
      "function": "OUTPUT_MATCH.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 745,
      "caller": "test_str",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)\n\n"
    }
  ],
  "assertions": [
    "assert m, \"Line {} didn't match expected format: {!r}\".format(i, line)",
    "assert re.match(line_re, line), '{!r} != {!r}'.format(line_re, line)",
    "assert False, 'missing expected setting lines? {}'.format(OUTPUT_MATCH.keys())"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_str():\n    c = config.Config()\n    o = str(c)\n\n    # match the first few lines, some different types, but don't go OTT\n    # to avoid needless test fails with changes\n    OUTPUT_MATCH = {\n        'access_log_format': '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\"',\n        'accesslog': 'None',\n        'backlog': '2048',\n        'bind': \"['127.0.0.1:8000']\",\n        'capture_output': 'False',\n        'child_exit': '<ChildExit.child_exit()>',\n    }\n    for i, line in enumerate(o.splitlines()):\n        m = re.match(r'^(\\w+)\\s+= ', line)\n        assert m, \"Line {} didn't match expected format: {!r}\".format(i, line)\n\n        key = m.group(1)\n        try:\n            s = OUTPUT_MATCH.pop(key)\n        except KeyError:\n            continue\n\n        line_re = r'^{}\\s+= {}$'.format(key, re.escape(s))\n        assert re.match(line_re, line), '{!r} != {!r}'.format(line_re, line)\n\n        if not OUTPUT_MATCH:\n            break\n    else:\n        assert False, 'missing expected setting lines? {}'.format(\n            OUTPUT_MATCH.keys()\n        )"
}