{
  "test_name": "test_ExtendedPathIndex_implement_thing_implementedby_super",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_Based",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_Based",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_Based",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_Based",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.getMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "_Based",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "_Based",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "_Based",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "_Based",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "record.getMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_ExtendedPathIndex_implement_thing_implementedby_super",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_ExtendedPathIndex_implement_thing_implementedby_super(self):\n        # See\n        # https://github.com/zopefoundation/zope.interface/pull/182#issuecomment-598754056\n        from zope.interface import ro\n\n        # pylint:disable=inherit-non-class\n        class _Based:\n            __bases__ = ()\n\n            def __init__(self, name, bases=(), attrs=None):\n                self.__name__ = name\n                self.__bases__ = bases\n\n            def __repr__(self):\n                return self.__name__\n\n        Interface = _Based('Interface', (), {})\n\n        class IPluggableIndex(Interface):\n            pass\n\n        class ILimitedResultIndex(IPluggableIndex):\n            pass\n\n        class IQueryIndex(IPluggableIndex):\n            pass\n\n        class IPathIndex(Interface):\n            pass\n\n        # A parent class who implements two distinct interfaces whose\n        # only common ancestor is Interface. An easy case.\n        # @implementer(IPathIndex, IQueryIndex)\n        # class PathIndex(object):\n        #     pass\n        obj = _Based('object')\n        PathIndex = _Based('PathIndex', (IPathIndex, IQueryIndex, obj))\n\n        # Child class that tries to put an interface the parent declares\n        # later ahead of the parent.\n        # @implementer(ILimitedResultIndex, IQueryIndex)\n        # class ExtendedPathIndex(PathIndex):\n        #     pass\n        ExtendedPathIndex = _Based(\n            'ExtendedPathIndex',\n            (ILimitedResultIndex, IQueryIndex, PathIndex)\n        )\n\n        # We were able to resolve it, and in exactly the same way as\n        # the legacy RO did, even though it is inconsistent.\n        result = self._callFUT(\n            ExtendedPathIndex, log_changed_ro=True, strict=False\n        )\n        self.assertEqual(result, [\n            ExtendedPathIndex,\n            ILimitedResultIndex,\n            PathIndex,\n            IPathIndex,\n            IQueryIndex,\n            IPluggableIndex,\n            Interface,\n            obj])\n\n        record, = self.log_handler.records\n        self.assertIn('used the legacy', record.getMessage())\n\n        with self.assertRaises(ro.InconsistentResolutionOrderError):\n            self._callFUT(ExtendedPathIndex, strict=True)"
}