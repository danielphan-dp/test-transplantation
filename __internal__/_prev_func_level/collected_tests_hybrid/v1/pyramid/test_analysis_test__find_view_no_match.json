{
  "test_name": "test__find_view_no_match",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pviews.py",
  "static_methods": [
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._register_mapper",
      "source_code": "    def _register_mapper(self, registry, routes):\n        from pyramid.interfaces import IRoutesMapper",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pviews.py",
      "line_number": 26
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "command._find_view",
      "source_code": "    def _find_view(self, request):\n        \"\"\"\n        Accept ``url`` and ``registry``; create a :term:`request` and\n        find a :app:`Pyramid` view based on introspection of :term:`view\n        configuration` within the application registry; return the view.\n        \"\"\"\n        from zope.interface import implementer, providedBy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripts/pviews.py",
      "line_number": 82
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test__find_view_no_match",
      "source_code": ""
    },
    {
      "function": "self._register_mapper",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pviews.py",
      "line": 26,
      "caller": "test__find_view_no_match",
      "source_code": "    def _register_mapper(self, registry, routes):\n        from pyramid.interfaces import IRoutesMapper\n\n        mapper = dummy.DummyMapper(*routes)\n        registry.registerUtility(mapper, IRoutesMapper)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test__find_view_no_match",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test__find_view_no_match",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "command._find_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripts/pviews.py",
      "line": 82,
      "caller": "test__find_view_no_match",
      "source_code": "    def _find_view(self, request):\n        \"\"\"\n        Accept ``url`` and ``registry``; create a :term:`request` and\n        find a :app:`Pyramid` view based on introspection of :term:`view\n        configuration` within the application registry; return the view.\n        \"\"\"\n        from zope.interface import implementer, providedBy\n\n        from pyramid.interfaces import (\n            IRequest,\n            IRootFactory,\n            IRouteRequest,\n            IRoutesMapper,\n            ITraverser,\n        )\n        from pyramid.traversal import DefaultRootFactory, ResourceTreeTraverser\n\n        registry = request.registry\n        q = registry.queryUtility\n        root_factory = q(IRootFactory, default=DefaultRootFactory)\n        routes_mapper = q(IRoutesMapper)\n\n        adapters = registry.adapters\n\n        @implementer(IMultiView)\n        class RoutesMultiView:\n            def __init__(self, infos, context_iface, root_factory, request):\n                self.views = []\n                for info in infos:\n                    match, route = info['match'], info['route']\n                    if route is not None:\n                        request_iface = registry.queryUtility(\n                            IRouteRequest, name=route.name, default=IRequest\n                        )\n                        views = _find_views(\n                            request.registry, request_iface, context_iface, ''\n                        )\n                        if not views:\n                            continue\n                        view = views[0]\n                        view.__request_attrs__ = {}\n                        view.__request_attrs__['matchdict'] = match\n                        view.__request_attrs__['matched_route'] = route\n                        root_factory = route.factory or root_factory\n                        root = root_factory(request)\n                        traverser = adapters.queryAdapter(root, ITraverser)\n                        if traverser is None:\n                            traverser = ResourceTreeTraverser(root)\n                        tdict = traverser(request)\n                        view.__request_attrs__.update(tdict)\n                        if not hasattr(view, '__view_attr__'):\n                            view.__view_attr__ = ''\n                        self.views.append((None, view, None))\n\n        context = None\n        routes_multiview = None\n        attrs = request.__dict__\n        request_iface = IRequest\n\n        # find the root object\n        if routes_mapper is not None:\n            infos = self._find_multi_routes(routes_mapper, request)\n            if len(infos) == 1:\n                info = infos[0]\n                match, route = info['match'], info['route']\n                if route is not None:\n                    attrs['matchdict'] = match\n                    attrs['matched_route'] = route\n                    request.environ['bfg.routes.matchdict'] = match\n                    request_iface = registry.queryUtility(\n                        IRouteRequest, name=route.name, default=IRequest\n                    )\n                    root_factory = route.factory or root_factory\n            if len(infos) > 1:\n                routes_multiview = infos\n\n        root = root_factory(request)\n        attrs['root'] = root\n\n        # find a context\n        traverser = adapters.queryAdapter(root, ITraverser)\n        if traverser is None:\n            traverser = ResourceTreeTraverser(root)\n        tdict = traverser(request)\n        context, view_name = (tdict['context'], tdict['view_name'])\n\n        attrs.update(tdict)\n\n        # find a view callable\n        context_iface = providedBy(context)\n        if routes_multiview is None:\n            views = _find_views(\n                request.registry, request_iface, context_iface, view_name\n            )\n            if views:\n                view = views[0]\n            else:\n                view = None\n        else:\n            view = RoutesMultiView(infos, context_iface, root_factory, request)\n\n        # routes are not registered with a view name\n        if view is None:\n            views = _find_views(\n                request.registry, request_iface, context_iface, ''\n            )\n            if views:\n                view = views[0]\n            else:\n                view = None\n            # we don't want a multiview here\n            if IMultiView.providedBy(view):\n                view = None\n\n        if view is not None:\n            view.__request_attrs__ = attrs\n\n        return view\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test__find_view_no_match",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test__find_view_no_match(self):\n        from pyramid.registry import Registry\n\n        registry = Registry()\n        self._register_mapper(registry, [])\n        command = self._makeOne(registry)\n        request = self._makeRequest('/a', registry)\n        result = command._find_view(request)\n        self.assertEqual(result, None)"
}