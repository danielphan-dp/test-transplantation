{
  "test_name": "test_add_forbidden_view_no_view_argument",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.setup_registry",
      "source_code": "    def setup_registry(\n        self,\n        settings=None,\n        root_factory=None,\n        security_policy=None,\n        authentication_policy=None,\n        authorization_policy=None,\n        renderers=None,\n        debug_logger=None,\n        locale_negotiator=None,\n        request_factory=None,\n        response_factory=None,\n        default_permission=None,\n        session_factory=None,\n        default_view_mapper=None,\n        exceptionresponse_view=default_exceptionresponse_view,\n    ):\n        \"\"\"When you pass a non-``None`` ``registry`` argument to the\n        :term:`Configurator` constructor, no initial setup is performed\n        against the registry.  This is because the registry you pass in may\n        have already been initialized for use under :app:`Pyramid` via a\n        different configurator.  However, in some circumstances (such as when\n        you want to use a global registry instead of a registry created as a\n        result of the Configurator constructor), or when you want to reset\n        the initial setup of a registry, you *do* want to explicitly\n        initialize the registry associated with a Configurator for use under\n        :app:`Pyramid`.  Use ``setup_registry`` to do this initialization.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 320
    },
    {
      "name": "config.add_forbidden_view",
      "source_code": "    def add_forbidden_view(\n        self,\n        view=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        route_name=None,\n        request_type=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        decorator=None,\n        mapper=None,\n        match_param=None,\n        **view_options,\n    ):\n        \"\"\"Add a forbidden view to the current configuration state.  The\n        view will be called when Pyramid or application code raises a\n        :exc:`pyramid.httpexceptions.HTTPForbidden` exception and the set of\n        circumstances implied by the predicates provided are matched.  The\n        simplest example is:",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1595
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "self._getViewCallable",
      "source_code": "    def _getViewCallable(\n        self, config, ctx_iface=None, request_iface=None, name=''\n    ):\n        from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 1985
    },
    {
      "name": "HTTPForbidden",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "view",
      "source_code": "                def view(context, request):\n                    return {}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 826
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "implementedBy",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 165
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.setup_registry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 320,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "    def setup_registry(\n        self,\n        settings=None,\n        root_factory=None,\n        security_policy=None,\n        authentication_policy=None,\n        authorization_policy=None,\n        renderers=None,\n        debug_logger=None,\n        locale_negotiator=None,\n        request_factory=None,\n        response_factory=None,\n        default_permission=None,\n        session_factory=None,\n        default_view_mapper=None,\n        exceptionresponse_view=default_exceptionresponse_view,\n"
    },
    {
      "function": "config.add_forbidden_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1595,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_forbidden_view(\n        self,\n        view=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        route_name=None,\n        request_type=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        decorator=None,\n        mapper=None,\n        match_param=None,\n        **view_options,\n"
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "self._getViewCallable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 1985,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "    def _getViewCallable(\n        self, config, ctx_iface=None, request_iface=None, name=''\n"
    },
    {
      "function": "HTTPForbidden",
      "filename": "",
      "line": 0,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": ""
    },
    {
      "function": "view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 826,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "                def view(context, request):\n                    return {}\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": ""
    },
    {
      "function": "implementedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 165,
      "caller": "test_add_forbidden_view_no_view_argument",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.\n\n        Raise TypeError if argument is neither a class nor a callable.\n        \"\"\"\n        spec = implementedBy(cls)\n        return self in spec._implied\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_forbidden_view_no_view_argument(self):\n        from zope.interface import implementedBy\n\n        from pyramid.httpexceptions import HTTPForbidden\n        from pyramid.interfaces import IRequest\n\n        config = self._makeOne(autocommit=True)\n        config.setup_registry()\n        config.add_forbidden_view()\n        request = self._makeRequest(config)\n        view = self._getViewCallable(\n            config,\n            exc_iface=implementedBy(HTTPForbidden),\n            request_iface=IRequest,\n        )\n        context = HTTPForbidden()\n        result = view(context, request)\n        self.assertEqual(result, context)"
}