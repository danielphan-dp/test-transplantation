{
  "test_name": "test_add_permission",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_security.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.add_permission",
      "source_code": "    def add_permission(self, permission_name):\n        \"\"\"\n        A configurator directive which registers a free-standing\n        permission without associating it with a view callable.  This can be\n        used so that the permission shows up in the introspectable data under\n        the ``permissions`` category (permissions mentioned via ``add_view``\n        already end up in there).  For example::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 240
    },
    {
      "name": "config.registry.introspector.get_category",
      "source_code": "    def get_category(category_name, default=None, sort_key=None):\n        \"\"\"Get a sequence of dictionaries in the form\n        ``[{'introspectable':IIntrospectable, 'related':[sequence of related\n        IIntrospectables]}, ...]`` where each introspectable is part of the\n        category associated with ``category_name`` .",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 1253
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_permission",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.add_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 240,
      "caller": "test_add_permission",
      "source_code": "    def add_permission(self, permission_name):\n        \"\"\"\n        A configurator directive which registers a free-standing\n        permission without associating it with a view callable.  This can be\n        used so that the permission shows up in the introspectable data under\n        the ``permissions`` category (permissions mentioned via ``add_view``\n        already end up in there).  For example::\n\n          config = Configurator()\n          config.add_permission('view')\n        \"\"\"\n        intr = self.introspectable(\n            'permissions', permission_name, permission_name, 'permission'\n        )\n        intr['value'] = permission_name\n        self.action(None, introspectables=(intr,))\n\n"
    },
    {
      "function": "config.registry.introspector.get_category",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 1253,
      "caller": "test_add_permission",
      "source_code": "    def get_category(category_name, default=None, sort_key=None):\n        \"\"\"Get a sequence of dictionaries in the form\n        ``[{'introspectable':IIntrospectable, 'related':[sequence of related\n        IIntrospectables]}, ...]`` where each introspectable is part of the\n        category associated with ``category_name`` .\n\n        If the category named ``category_name`` does not exist in the\n        introspector the value passed as ``default`` will be returned.\n\n        If ``sort_key`` is ``None``, the sequence will be returned in the\n        order the introspectables were added to the introspector.  Otherwise,\n        sort_key should be a function that accepts an IIntrospectable and\n        returns a value from it (ala the ``key`` function of Python's\n        ``sorted`` callable).\"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_permission",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_permission",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_permission",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_permission(self):\n        config = self._makeOne(autocommit=True)\n        config.add_permission('perm')\n        cat = config.registry.introspector.get_category('permissions')\n        self.assertEqual(len(cat), 1)\n        D = cat[0]\n        intr = D['introspectable']\n        self.assertEqual(intr['value'], 'perm')"
}