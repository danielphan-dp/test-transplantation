{
  "test_name": "test_add_property",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_util.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "helper.add_property",
      "source_code": "    def add_property(self, callable, name=None, reify=False):\n        \"\"\"Add a new property configuration.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line_number": 175
    },
    {
      "name": "helper.add_property",
      "source_code": "    def add_property(self, callable, name=None, reify=False):\n        \"\"\"Add a new property configuration.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line_number": 175
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Dummy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helper.apply",
      "source_code": "    def apply(self, response):\n        updated_headers = self.update_headers(response)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
      "line_number": 46
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_property",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "helper.add_property",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line": 175,
      "caller": "test_add_property",
      "source_code": "    def add_property(self, callable, name=None, reify=False):\n        \"\"\"Add a new property configuration.\n\n        This should be used in combination with :meth:`.apply` as a\n        more efficient version of :meth:`.set_property`.\n        \"\"\"\n        name, fn = self.make_property(callable, name=name, reify=reify)\n        self.properties[name] = fn\n\n"
    },
    {
      "function": "helper.add_property",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line": 175,
      "caller": "test_add_property",
      "source_code": "    def add_property(self, callable, name=None, reify=False):\n        \"\"\"Add a new property configuration.\n\n        This should be used in combination with :meth:`.apply` as a\n        more efficient version of :meth:`.set_property`.\n        \"\"\"\n        name, fn = self.make_property(callable, name=name, reify=reify)\n        self.properties[name] = fn\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "Dummy",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "helper.apply",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/heuristics.py",
      "line": 46,
      "caller": "test_add_property",
      "source_code": "    def apply(self, response):\n        updated_headers = self.update_headers(response)\n\n        if updated_headers:\n            response.headers.update(updated_headers)\n            warning_header_value = self.warning(response)\n            if warning_header_value is not None:\n                response.headers.update({\"Warning\": warning_header_value})\n\n        return response\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_property",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_property(self):\n        helper = self._makeOne()\n        helper.add_property(lambda obj: obj.bar, name='x', reify=True)\n        helper.add_property(lambda obj: obj.bar, name='y')\n        self.assertEqual(len(helper.properties), 2)\n        foo = Dummy()\n        helper.apply(foo)\n        foo.bar = 1\n        self.assertEqual(foo.x, 1)\n        self.assertEqual(foo.y, 1)\n        foo.bar = 2\n        self.assertEqual(foo.x, 1)\n        self.assertEqual(foo.y, 2)"
}