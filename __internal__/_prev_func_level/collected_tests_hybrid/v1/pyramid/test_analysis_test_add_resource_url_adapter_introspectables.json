{
  "test_name": "test_add_resource_url_adapter_introspectables",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.add_resource_url_adapter",
      "source_code": "    def add_resource_url_adapter(self, adapter, resource_iface=None):\n        \"\"\"\n        .. versionadded:: 1.3",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/adapters.py",
      "line_number": 276
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.add_resource_url_adapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/adapters.py",
      "line": 276,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": "    @action_method\n    def add_resource_url_adapter(self, adapter, resource_iface=None):\n        \"\"\"\n        .. versionadded:: 1.3\n\n        When you add a traverser as described in\n        :ref:`changing_the_traverser`, it's convenient to continue to use the\n        :meth:`pyramid.request.Request.resource_url` API.  However, since the\n        way traversal is done may have been modified, the URLs that\n        ``resource_url`` generates by default may be incorrect when resources\n        are returned by a custom traverser.\n\n        If you've added a traverser, you can change how\n        :meth:`~pyramid.request.Request.resource_url` generates a URL for a\n        specific type of resource by calling this method.\n\n        The ``adapter`` argument represents a class that implements the\n        :class:`~pyramid.interfaces.IResourceURL` interface.  The class\n        constructor should accept two arguments in its constructor (the\n        resource and the request) and the resulting instance should provide\n        the attributes detailed in that interface (``virtual_path`` and\n        ``physical_path``, in particular).\n\n        The ``resource_iface`` argument represents a class or interface that\n        the resource should possess for this url adapter to be used when\n        :meth:`pyramid.request.Request.resource_url` looks up a resource url\n        adapter.  If ``resource_iface`` is not passed, or it is passed as\n        ``None``, the url adapter will be used for every type of resource.\n\n        See :ref:`changing_resource_url` for more information.\n        \"\"\"\n        adapter = self.maybe_dotted(adapter)\n        resource_iface = self.maybe_dotted(resource_iface)\n\n        def register(resource_iface=resource_iface):\n            if resource_iface is None:\n                resource_iface = Interface\n            self.registry.registerAdapter(\n                adapter, (resource_iface, Interface), IResourceURL\n            )\n\n        discriminator = ('resource url adapter', resource_iface)\n        intr = self.introspectable(\n            'resource url adapters',\n            discriminator,\n            'resource url adapter for resource iface %r' % resource_iface,\n            'resource url adapter',\n        )\n        intr['adapter'] = adapter\n        intr['resource_iface'] = resource_iface\n        self.action(discriminator, register, introspectables=(intr,))\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_resource_url_adapter_introspectables",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_resource_url_adapter_introspectables(self):\n        config = self._makeOne()\n        config.add_resource_url_adapter(DummyResourceURL, DummyIface)\n        actions = config.action_state.actions\n        self.assertEqual(len(actions), 1)\n        intrs = actions[0]['introspectables']\n        self.assertEqual(len(intrs), 1)\n        intr = intrs[0]\n        self.assertEqual(intr.type_name, 'resource url adapter')\n        self.assertEqual(\n            intr.discriminator, ('resource url adapter', DummyIface)\n        )\n        self.assertEqual(intr.category_name, 'resource url adapters')\n        self.assertEqual(\n            intr.title,\n            \"resource url adapter for resource iface \"\n            \"<class 'tests.test_config.test_adapters.DummyIface'>\",\n        )\n        self.assertEqual(intr['adapter'], DummyResourceURL)\n        self.assertEqual(intr['resource_iface'], DummyIface)"
}