{
  "test_name": "test_add_subscriber_with_specific_type_and_predicates_True",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
  "static_methods": [
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.get_predlist",
      "source_code": "    def get_predlist(self, name):\n        predlist = self.registry.queryUtility(IPredicateList, name=name)\n        if predlist is None:\n            predlist = PredicateList()\n            self.registry.registerUtility(predlist, IPredicateList, name=name)\n        return predlist",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/predicates.py",
      "line_number": 15
    },
    {
      "name": "predicate_maker",
      "source_code": "def predicate_maker(name):\n    class Predicate:\n        def __init__(self, val, config):\n            self.val = val",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
      "line_number": 408
    },
    {
      "name": "predicate_maker",
      "source_code": "def predicate_maker(name):\n    class Predicate:\n        def __init__(self, val, config):\n            self.val = val",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
      "line_number": 408
    },
    {
      "name": "predlist.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "predlist.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "config.add_subscriber",
      "source_code": "    def add_subscriber(self, subscriber, iface=None, **predicates):\n        \"\"\"Add an event :term:`subscriber` for the event stream\n        implied by the supplied ``iface`` interface.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/adapters.py",
      "line_number": 12
    },
    {
      "name": "Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.registry.notify",
      "source_code": "    def notify(*arg, **kw):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.registry.notify",
      "source_code": "    def notify(*arg, **kw):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "L.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.get_predlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/predicates.py",
      "line": 15,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def get_predlist(self, name):\n        predlist = self.registry.queryUtility(IPredicateList, name=name)\n        if predlist is None:\n            predlist = PredicateList()\n            self.registry.registerUtility(predlist, IPredicateList, name=name)\n        return predlist\n\n"
    },
    {
      "function": "predicate_maker",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
      "line": 408,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "def predicate_maker(name):\n    class Predicate:\n        def __init__(self, val, config):\n            self.val = val\n\n        def phash(self):\n            return 'phash'\n\n        text = phash\n\n        def __call__(self, event):\n            return getattr(event, name, None) == self.val\n\n    return Predicate\n"
    },
    {
      "function": "predicate_maker",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_adapters.py",
      "line": 408,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "def predicate_maker(name):\n    class Predicate:\n        def __init__(self, val, config):\n            self.val = val\n\n        def phash(self):\n            return 'phash'\n\n        text = phash\n\n        def __call__(self, event):\n            return getattr(event, name, None) == self.val\n\n    return Predicate\n"
    },
    {
      "function": "predlist.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "predlist.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "config.add_subscriber",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/adapters.py",
      "line": 12,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    @action_method\n    def add_subscriber(self, subscriber, iface=None, **predicates):\n        \"\"\"Add an event :term:`subscriber` for the event stream\n        implied by the supplied ``iface`` interface.\n\n        The ``subscriber`` argument represents a callable object (or a\n        :term:`dotted Python name` which identifies a callable); it will be\n        called with a single object ``event`` whenever :app:`Pyramid` emits\n        an :term:`event` associated with the ``iface``, which may be an\n        :term:`interface` or a class or a :term:`dotted Python name` to a\n        global object representing an interface or a class.\n\n        Using the default ``iface`` value, ``None`` will cause the subscriber\n        to be registered for all event types. See :ref:`events_chapter` for\n        more information about events and subscribers.\n\n        Any number of predicate keyword arguments may be passed in\n        ``**predicates``.  Each predicate named will narrow the set of\n        circumstances in which the subscriber will be invoked.  Each named\n        predicate must have been registered via\n        :meth:`pyramid.config.Configurator.add_subscriber_predicate` before it\n        can be used.  See :ref:`subscriber_predicates` for more information.\n\n        .. versionadded:: 1.4\n           The ``**predicates`` argument.\n        \"\"\"\n        dotted = self.maybe_dotted\n        subscriber, iface = dotted(subscriber), dotted(iface)\n        if iface is None:\n            iface = (Interface,)\n        if not isinstance(iface, (tuple, list)):\n            iface = (iface,)\n\n        def register():\n            predlist = self.get_predlist('subscriber')\n            order, preds, phash = predlist.make(self, **predicates)\n\n            derived_predicates = [self._derive_predicate(p) for p in preds]\n            derived_subscriber = self._derive_subscriber(\n                subscriber, derived_predicates\n            )\n\n            intr.update(\n                {\n                    'phash': phash,\n                    'order': order,\n                    'predicates': preds,\n                    'derived_predicates': derived_predicates,\n                    'derived_subscriber': derived_subscriber,\n                }\n            )\n\n            self.registry.registerHandler(derived_subscriber, iface)\n\n        intr = self.introspectable(\n            'subscribers',\n            id(subscriber),\n            self.object_description(subscriber),\n            'subscriber',\n        )\n\n        intr['subscriber'] = subscriber\n        intr['interfaces'] = iface\n\n        self.action(None, register, introspectables=(intr,))\n        return subscriber\n\n"
    },
    {
      "function": "Event",
      "filename": "",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "config.registry.notify",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 22,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def notify(*arg, **kw):\n        pass\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "config.registry.notify",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 22,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def notify(*arg, **kw):\n        pass\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "L.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_subscriber_with_specific_type_and_predicates_True",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_subscriber_with_specific_type_and_predicates_True(self):\n        from zope.interface import Interface, implementer\n\n        class IEvent(Interface):\n            pass\n\n        @implementer(IEvent)\n        class Event:\n            pass\n\n        L = []\n\n        def subscriber(event):\n            L.append(event)\n\n        config = self._makeOne(autocommit=True)\n        predlist = config.get_predlist('subscriber')\n        jam_predicate = predicate_maker('jam')\n        jim_predicate = predicate_maker('jim')\n        predlist.add('jam', jam_predicate)\n        predlist.add('jim', jim_predicate)\n        config.add_subscriber(subscriber, IEvent, jam=True, jim=True)\n        event = Event()\n        event.jam = True\n        event.jim = True\n        config.registry.notify(event)\n        self.assertEqual(len(L), 1)\n        self.assertEqual(L[0], event)\n        config.registry.notify(object())\n        self.assertEqual(len(L), 1)"
}