{
  "test_name": "test_add_view_same_phash_overrides_existing_single_view",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "sha256",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "phash.update",
      "source_code": "    def update(self, curval):\n        assert self.min <= curval\n        assert self.max is None or curval <= self.max\n        self.cur = curval\n        now = time.time()\n        if self.started is None:\n            self.started = now\n        else:\n            self.elapsed = now - self.started",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1290
    },
    {
      "name": "phash.hexdigest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.registry.registerAdapter",
      "source_code": "    def registerAdapter(factory, required=None, provided=None, name='',\n                        info=''):\n        \"\"\"Register an adapter factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1257
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self._getViewCallable",
      "source_code": "    def _getViewCallable(\n        self, config, ctx_iface=None, request_iface=None, name=''\n    ):\n        from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 1985
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IMultiView.providedBy",
      "source_code": "    def providedBy(self, ob):\n        \"\"\"Is the interface implemented by an object\n        \"\"\"\n        spec = providedBy(ob)\n        return self in spec._implied",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 159
    },
    {
      "name": "wrapper",
      "source_code": "    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)\n        orig_vars.pop('__dict__', None)\n        orig_vars.pop('__weakref__', None)\n        if hasattr(cls, '__qualname__'):\n            orig_vars['__qualname__'] = cls.__qualname__\n        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n    return wrapper",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 882
    }
  ],
  "dynamic_methods": [
    {
      "function": "sha256",
      "filename": "",
      "line": 0,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": ""
    },
    {
      "function": "phash.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1290,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def update(self, curval):\n        assert self.min <= curval\n        assert self.max is None or curval <= self.max\n        self.cur = curval\n        now = time.time()\n        if self.started is None:\n            self.started = now\n        else:\n            self.elapsed = now - self.started\n\n"
    },
    {
      "function": "phash.hexdigest",
      "filename": "",
      "line": 0,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.registry.registerAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1257,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def registerAdapter(factory, required=None, provided=None, name='',\n                        info=''):\n        \"\"\"Register an adapter factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set in class definitions using\n            the `.adapter`\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory\n            implements a single interface, then this argument is\n            optional and the factory-implemented interface will be\n            used.\n\n        :param name:\n            The adapter name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an `IAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self._getViewCallable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 1985,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def _getViewCallable(\n        self, config, ctx_iface=None, request_iface=None, name=''\n"
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": ""
    },
    {
      "function": "IMultiView.providedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 159,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def providedBy(self, ob):\n        \"\"\"Is the interface implemented by an object\n        \"\"\"\n        spec = providedBy(ob)\n        return self in spec._implied\n\n"
    },
    {
      "function": "wrapper",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 882,
      "caller": "test_add_view_same_phash_overrides_existing_single_view",
      "source_code": "    def wrapper(cls):\n        orig_vars = cls.__dict__.copy()\n        slots = orig_vars.get('__slots__')\n        if slots is not None:\n            if isinstance(slots, str):\n                slots = [slots]\n            for slots_var in slots:\n                orig_vars.pop(slots_var)\n        orig_vars.pop('__dict__', None)\n        orig_vars.pop('__weakref__', None)\n        if hasattr(cls, '__qualname__'):\n            orig_vars['__qualname__'] = cls.__qualname__\n        return metaclass(cls.__name__, cls.__bases__, orig_vars)\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_view_same_phash_overrides_existing_single_view(self):\n        from hashlib import sha256\n        from zope.interface import Interface\n\n        from pyramid.interfaces import (\n            IMultiView,\n            IRequest,\n            IView,\n            IViewClassifier,\n        )\n        from pyramid.renderers import null_renderer\n\n        phash = sha256()\n        phash.update(b'xhr = True')\n        view = lambda *arg: 'NOT OK'\n        view.__phash__ = phash.hexdigest()\n        config = self._makeOne(autocommit=True)\n        config.registry.registerAdapter(\n            view, (IViewClassifier, IRequest, Interface), IView, name=''\n        )\n\n        def newview(context, request):\n            return 'OK'\n\n        config.add_view(view=newview, xhr=True, renderer=null_renderer)\n        wrapper = self._getViewCallable(config)\n        self.assertFalse(IMultiView.providedBy(wrapper))\n        request = DummyRequest()\n        request.is_xhr = True\n        self.assertEqual(wrapper(None, request), 'OK')"
}