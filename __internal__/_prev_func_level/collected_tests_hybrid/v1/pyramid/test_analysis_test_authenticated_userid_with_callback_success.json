{
  "test_name": "test_authenticated_userid_with_callback_success",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_authentication.py",
  "static_methods": [
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "policy.authenticated_userid",
      "source_code": "    def authenticated_userid(self, request):\n        return self.userid",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 57
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": ""
    },
    {
      "function": "policy.authenticated_userid",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 57,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": "    def authenticated_userid(self, request):\n        return self.userid\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_authenticated_userid_with_callback_success",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_authenticated_userid_with_callback_success(self):\n        request = DummyRequest(registry=self.config.registry)\n\n        def callback(userid, request):\n            return []\n\n        policy = self._makeOne(userid='fred', callback=callback)\n        self.assertEqual(policy.authenticated_userid(request), 'fred')\n        self.assertEqual(len(self.messages), 1)\n        self.assertEqual(\n            self.messages[0],\n            \"tests.test_authentication.MyAuthenticationPolicy.\"\n            \"authenticated_userid: groupfinder callback returned []; \"\n            \"returning 'fred'\",\n        )"
}