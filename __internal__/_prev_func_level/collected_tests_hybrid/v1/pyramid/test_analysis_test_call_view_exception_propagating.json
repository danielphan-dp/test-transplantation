{
  "test_name": "test_call_view_exception_propagating",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "self.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "Request.blank",
      "source_code": "    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line_number": 1330
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "directlyProvides",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n    ):  # pylint:disable=redefined-builtin\n        \"\"\"\n        Declare interfaces declared directly for an object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 684
    },
    {
      "name": "self._registerTraverserFactory",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n    ):\n        from pyramid.interfaces import ITraverser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 50
    },
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RuntimeError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "DummyView",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeEnviron",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 24
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyStartResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "Request.blank",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line": 1330,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    @classmethod\n    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.\n\n        The path will become path_info, with any query string split\n        off and used.\n\n        All necessary keys will be added to the environ, but the\n        values you pass in will take precedence.  If you pass in\n        base_url then wsgi.url_scheme, HTTP_HOST, and SCRIPT_NAME will\n        be filled in from that value.\n\n        Any extra keyword will be passed to ``__init__``.\n        \"\"\"\n        env = environ_from_url(path)\n        if base_url:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(base_url)\n            if query or fragment:\n                raise ValueError(\n                    \"base_url (%r) cannot have a query or fragment\"\n                    % base_url)\n            if scheme:\n                env['wsgi.url_scheme'] = scheme\n            if netloc:\n                if ':' not in netloc:\n                    if scheme == 'http':\n                        netloc += ':80'\n                    elif scheme == 'https':\n                        netloc += ':443'\n                    else:\n                        raise ValueError(\n                            \"Unknown scheme: %r\" % scheme)\n                host, port = netloc.split(':', 1)\n                env['SERVER_PORT'] = port\n                env['SERVER_NAME'] = host\n                env['HTTP_HOST'] = netloc\n            if path:\n                env['SCRIPT_NAME'] = url_unquote(path)\n        if environ:\n            env.update(environ)\n        content_type = kw.get('content_type', env.get('CONTENT_TYPE'))\n        if headers and 'Content-Type' in headers:\n            content_type = headers['Content-Type']\n        if content_type is not None:\n            kw['content_type'] = content_type\n        environ_add_POST(env, POST, content_type=content_type)\n        obj = cls(env, **kw)\n        if headers is not None:\n            obj.headers.update(headers)\n        return obj\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "directlyProvides",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 684,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n"
    },
    {
      "function": "self._registerTraverserFactory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 50,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n"
    },
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "RuntimeError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "DummyView",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "self._makeEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 24,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ\n\n"
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_view_exception_propagating",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyStartResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "router",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_exception_propagating",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_view_exception_propagating(self):\n        from zope.interface import Interface, directlyProvides\n\n        class IContext(Interface):\n            pass\n\n        from pyramid.interfaces import (\n            IExceptionViewClassifier,\n            IRequest,\n            IRequestFactory,\n            IViewClassifier,\n        )\n\n        def rfactory(environ):\n            return request\n\n        self.registry.registerUtility(rfactory, IRequestFactory)\n        from pyramid.request import Request\n\n        request = Request.blank('/')\n        context = DummyContext()\n        directlyProvides(context, IContext)\n        self._registerTraverserFactory(context, subpath=[''])\n        response = DummyResponse()\n        response.app_iter = ['OK']\n        error = RuntimeError()\n        view = DummyView(response, raise_exception=error)\n        environ = self._makeEnviron()\n\n        def exception_view(context, request):\n            self.assertEqual(request.exc_info[0], RuntimeError)\n            return response\n\n        self._registerView(view, '', IViewClassifier, IRequest, IContext)\n        self._registerView(\n            exception_view,\n            '',\n            IExceptionViewClassifier,\n            IRequest,\n            RuntimeError,\n        )\n        router = self._makeOne()\n        start_response = DummyStartResponse()\n        result = router(environ, start_response)\n        self.assertEqual(result, ['OK'])\n        # exc_info and exception should still be around on the request after\n        # the excview tween has run (see\n        # https://github.com/Pylons/pyramid/issues/1223)\n        self.assertEqual(request.exception, error)\n        self.assertEqual(request.exc_info[:2], (RuntimeError, error))"
}