{
  "test_name": "test_call_view_raises_super_exception_sub_exception_view",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeEnviron",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 24
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyStartResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    },
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    },
    {
      "function": "DummyView",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    },
    {
      "function": "DummyView",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    },
    {
      "function": "self._makeEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 24,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ\n\n"
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyStartResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_call_view_raises_super_exception_sub_exception_view",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_view_raises_super_exception_sub_exception_view(self):\n        from pyramid.interfaces import (\n            IExceptionViewClassifier,\n            IRequest,\n            IViewClassifier,\n        )\n\n        class SuperException(Exception):\n            pass\n\n        class SubException(SuperException):\n            pass\n\n        response = DummyResponse()\n        exception_response = DummyResponse()\n        exception_response.app_iter = [\"Hello, world\"]\n        view = DummyView(response, raise_exception=SuperException)\n        exception_view = DummyView(exception_response)\n        environ = self._makeEnviron()\n        self._registerView(view, '', IViewClassifier, IRequest, None)\n        self._registerView(\n            exception_view,\n            '',\n            IExceptionViewClassifier,\n            IRequest,\n            SubException,\n        )\n        router = self._makeOne()\n        start_response = DummyStartResponse()\n        self.assertRaises(SuperException, router, environ, start_response)"
}