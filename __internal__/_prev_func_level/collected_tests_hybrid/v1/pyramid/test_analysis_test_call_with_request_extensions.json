{
  "test_name": "test_call_with_request_extensions",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._registerTraverserFactory",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n    ):\n        from pyramid.interfaces import ITraverser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 50
    },
    {
      "name": "Extensions",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InstancePropertyHelper.make_property",
      "source_code": "    def make_property(cls, callable, name=None, reify=False):\n        \"\"\"Convert a callable into one suitable for adding to the\n        instance. This will return a 2-tuple containing the computed\n        (name, property) pair.\n        \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line_number": 104
    },
    {
      "name": "Request.blank",
      "source_code": "    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line_number": 1330
    },
    {
      "name": "self.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "self._makeEnviron",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 24
    },
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyStartResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.config.derive_view",
      "source_code": "    def derive_view(self, view, attr=None, renderer=None):\n        \"\"\"\n        Create a :term:`view callable` using the function, instance,\n        or class (or :term:`dotted Python name` referring to the same)\n        provided as ``view`` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1446
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "self._registerTraverserFactory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 50,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n"
    },
    {
      "function": "Extensions",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "InstancePropertyHelper.make_property",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line": 104,
      "caller": "test_call_with_request_extensions",
      "source_code": "    @classmethod\n    def make_property(cls, callable, name=None, reify=False):\n        \"\"\"Convert a callable into one suitable for adding to the\n        instance. This will return a 2-tuple containing the computed\n        (name, property) pair.\n        \"\"\"\n\n        if name is None:\n            if not hasattr(callable, '__name__'):\n                raise ValueError(\n                    'missing __name__, must specify \"name\" for property'\n                )\n            name = callable.__name__\n        name = get_callable_name(name)\n        is_data_descriptor = inspect.isdatadescriptor(callable)\n        if reify and is_data_descriptor:\n            raise ValueError('cannot reify a data descriptor')\n        if is_data_descriptor:\n            fn = callable\n        else:\n            wrapped = lambda this: callable(this)\n            wrapped.__name__ = name\n            wrapped.__doc__ = callable.__doc__\n\n            if reify:\n                import pyramid.decorator  # avoid circular import\n\n                fn = pyramid.decorator.reify(wrapped)\n            else:\n                fn = SettableProperty(wrapped)\n\n        return name, fn\n\n"
    },
    {
      "function": "Request.blank",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line": 1330,
      "caller": "test_call_with_request_extensions",
      "source_code": "    @classmethod\n    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.\n\n        The path will become path_info, with any query string split\n        off and used.\n\n        All necessary keys will be added to the environ, but the\n        values you pass in will take precedence.  If you pass in\n        base_url then wsgi.url_scheme, HTTP_HOST, and SCRIPT_NAME will\n        be filled in from that value.\n\n        Any extra keyword will be passed to ``__init__``.\n        \"\"\"\n        env = environ_from_url(path)\n        if base_url:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(base_url)\n            if query or fragment:\n                raise ValueError(\n                    \"base_url (%r) cannot have a query or fragment\"\n                    % base_url)\n            if scheme:\n                env['wsgi.url_scheme'] = scheme\n            if netloc:\n                if ':' not in netloc:\n                    if scheme == 'http':\n                        netloc += ':80'\n                    elif scheme == 'https':\n                        netloc += ':443'\n                    else:\n                        raise ValueError(\n                            \"Unknown scheme: %r\" % scheme)\n                host, port = netloc.split(':', 1)\n                env['SERVER_PORT'] = port\n                env['SERVER_NAME'] = host\n                env['HTTP_HOST'] = netloc\n            if path:\n                env['SCRIPT_NAME'] = url_unquote(path)\n        if environ:\n            env.update(environ)\n        content_type = kw.get('content_type', env.get('CONTENT_TYPE'))\n        if headers and 'Content-Type' in headers:\n            content_type = headers['Content-Type']\n        if content_type is not None:\n            kw['content_type'] = content_type\n        environ_add_POST(env, POST, content_type=content_type)\n        obj = cls(env, **kw)\n        if headers is not None:\n            obj.headers.update(headers)\n        return obj\n\n"
    },
    {
      "function": "self.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "self._makeEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 24,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ\n\n"
    },
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "DummyView",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyStartResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "router",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_request_extensions",
      "source_code": ""
    },
    {
      "function": "self.config.derive_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1446,
      "caller": "test_call_with_request_extensions",
      "source_code": "    def derive_view(self, view, attr=None, renderer=None):\n        \"\"\"\n        Create a :term:`view callable` using the function, instance,\n        or class (or :term:`dotted Python name` referring to the same)\n        provided as ``view`` object.\n\n        .. warning::\n\n           This method is typically only used by :app:`Pyramid` framework\n           extension authors, not by :app:`Pyramid` application developers.\n\n        This is API is useful to framework extenders who create\n        pluggable systems which need to register 'proxy' view\n        callables for functions, instances, or classes which meet the\n        requirements of being a :app:`Pyramid` view callable.  For\n        example, a ``some_other_framework`` function in another\n        framework may want to allow a user to supply a view callable,\n        but he may want to wrap the view callable in his own before\n        registering the wrapper as a :app:`Pyramid` view callable.\n        Because a :app:`Pyramid` view callable can be any of a\n        number of valid objects, the framework extender will not know\n        how to call the user-supplied object.  Running it through\n        ``derive_view`` normalizes it to a callable which accepts two\n        arguments: ``context`` and ``request``.\n\n        For example:\n\n        .. code-block:: python\n\n           def some_other_framework(user_supplied_view):\n               config = Configurator(reg)\n               proxy_view = config.derive_view(user_supplied_view)\n               def my_wrapper(context, request):\n                   do_something_that_mutates(request)\n                   return proxy_view(context, request)\n               config.add_view(my_wrapper)\n\n        The ``view`` object provided should be one of the following:\n\n        - A function or another non-class callable object that accepts\n          a :term:`request` as a single positional argument and which\n          returns a :term:`response` object.\n\n        - A function or other non-class callable object that accepts\n          two positional arguments, ``context, request`` and which\n          returns a :term:`response` object.\n\n        - A class which accepts a single positional argument in its\n          constructor named ``request``, and which has a ``__call__``\n          method that accepts no arguments that returns a\n          :term:`response` object.\n\n        - A class which accepts two positional arguments named\n          ``context, request``, and which has a ``__call__`` method\n          that accepts no arguments that returns a :term:`response`\n          object.\n\n        - A :term:`dotted Python name` which refers to any of the\n          kinds of objects above.\n\n        This API returns a callable which accepts the arguments\n        ``context, request`` and which returns the result of calling\n        the provided ``view`` object.\n\n        The ``attr`` keyword argument is most useful when the view\n        object is a class.  It names the method that should be used as\n        the callable.  If ``attr`` is not provided, the attribute\n        effectively defaults to ``__call__``.  See\n        :ref:`class_as_view` for more information.\n\n        The ``renderer`` keyword argument should be a renderer\n        name. If supplied, it will cause the returned callable to use\n        a :term:`renderer` to convert the user-supplied view result to\n        a :term:`response` object.  If a ``renderer`` argument is not\n        supplied, the user-supplied view must itself return a\n        :term:`response` object.\"\"\"\n        return self._derive_view(view, attr=attr, renderer=renderer)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_with_request_extensions(self):\n        from pyramid.interfaces import (\n            IRequest,\n            IRequestExtensions,\n            IViewClassifier,\n        )\n        from pyramid.request import Request\n        from pyramid.util import InstancePropertyHelper\n\n        context = DummyContext()\n        self._registerTraverserFactory(context)\n\n        class Extensions:\n            def __init__(self):\n                self.methods = {}\n                self.descriptors = {}\n\n        extensions = Extensions()\n        ext_method = lambda r: 'bar'\n        name, fn = InstancePropertyHelper.make_property(ext_method, name='foo')\n        extensions.descriptors[name] = fn\n        request = Request.blank('/')\n        request.request_iface = IRequest\n        request.registry = self.registry\n\n        def request_factory(environ):\n            return request\n\n        self.registry.registerUtility(extensions, IRequestExtensions)\n        environ = self._makeEnviron()\n        response = DummyResponse()\n        response.app_iter = ['Hello world']\n        view = DummyView(response)\n        self._registerView(\n            self.config.derive_view(view), '', IViewClassifier, None, None\n        )\n        router = self._makeOne()\n        router.request_factory = request_factory\n        start_response = DummyStartResponse()\n        router(environ, start_response)\n        self.assertEqual(view.request.foo, 'bar')"
}