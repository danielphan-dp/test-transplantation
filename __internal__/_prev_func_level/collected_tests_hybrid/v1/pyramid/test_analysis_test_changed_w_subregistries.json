{
  "test_name": "test_changed_w_subregistries",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "base._addSubregistry",
      "source_code": "    def _addSubregistry(self, r):\n        self._v_subregistries[r] = 1",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line_number": 948
    },
    {
      "name": "base._addSubregistry",
      "source_code": "    def _addSubregistry(self, r):\n        self._v_subregistries[r] = 1",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line_number": 948
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "base.changed",
      "source_code": "    def changed(self, originally_changed):\n        \"\"\"\n        We, or something we depend on, have changed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 484
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Derived",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Derived",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_changed_w_subregistries",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "base._addSubregistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line": 948,
      "caller": "test_changed_w_subregistries",
      "source_code": "    def _addSubregistry(self, r):\n        self._v_subregistries[r] = 1\n\n"
    },
    {
      "function": "base._addSubregistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line": 948,
      "caller": "test_changed_w_subregistries",
      "source_code": "    def _addSubregistry(self, r):\n        self._v_subregistries[r] = 1\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_changed_w_subregistries",
      "source_code": ""
    },
    {
      "function": "base.changed",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 484,
      "caller": "test_changed_w_subregistries",
      "source_code": "    def changed(self, originally_changed):\n        \"\"\"\n        We, or something we depend on, have changed.\n\n        By the time this is called, the things we depend on,\n        such as our bases, should themselves be stable.\n        \"\"\"\n        self._v_attrs = None\n\n        implied = self._implied\n        implied.clear()\n\n        ancestors = self._calculate_sro()\n        self.__sro__ = tuple(ancestors)\n        self.__iro__ = tuple([ancestor for ancestor in ancestors\n                              if isinstance(ancestor, InterfaceClass)\n                              ])\n\n        for ancestor in ancestors:\n            # We directly imply our ancestors:\n            implied[ancestor] = ()\n\n        # Now, advise our dependents of change\n        # (being careful not to create the WeakKeyDictionary if not needed):\n        for dependent in tuple(\n            self._dependents.keys() if self._dependents else ()\n        ):\n            dependent.changed(originally_changed)\n\n        # Just in case something called get() at some point\n        # during that process and we have a cycle of some sort\n        # make sure we didn't cache incomplete results.\n        self._v_attrs = None\n\n"
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_changed_w_subregistries",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_changed_w_subregistries",
      "source_code": ""
    },
    {
      "function": "Derived",
      "filename": "",
      "line": 0,
      "caller": "test_changed_w_subregistries",
      "source_code": ""
    },
    {
      "function": "Derived",
      "filename": "",
      "line": 0,
      "caller": "test_changed_w_subregistries",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_changed_w_subregistries(self):\n        base = self._makeOne()\n\n        class Derived:\n            _changed = None\n\n            def changed(self, originally_changed):\n                self._changed = originally_changed\n\n        derived1, derived2 = Derived(), Derived()\n        base._addSubregistry(derived1)\n        base._addSubregistry(derived2)\n        orig = object()\n        base.changed(orig)\n        self.assertIs(derived1._changed, orig)\n        self.assertIs(derived2._changed, orig)"
}