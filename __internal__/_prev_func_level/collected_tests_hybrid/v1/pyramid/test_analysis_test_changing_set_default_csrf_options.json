{
  "test_name": "test_changing_set_default_csrf_options",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_security.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.set_default_csrf_options",
      "source_code": "    def set_default_csrf_options(\n        self,\n        require_csrf=True,\n        token='csrf_token',\n        header='X-CSRF-Token',\n        safe_methods=('GET', 'HEAD', 'OPTIONS', 'TRACE'),\n        check_origin=True,\n        allow_no_origin=False,\n        callback=None,\n    ):\n        \"\"\"\n        Set the default CSRF options used by subsequent view registrations.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 258
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.set_default_csrf_options",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 258,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": "    @action_method\n    def set_default_csrf_options(\n        self,\n        require_csrf=True,\n        token='csrf_token',\n        header='X-CSRF-Token',\n        safe_methods=('GET', 'HEAD', 'OPTIONS', 'TRACE'),\n        check_origin=True,\n        allow_no_origin=False,\n        callback=None,\n"
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_changing_set_default_csrf_options",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_changing_set_default_csrf_options(self):\n        from pyramid.interfaces import IDefaultCSRFOptions\n\n        config = self._makeOne(autocommit=True)\n\n        def callback(request):  # pragma: no cover\n            return True\n\n        config.set_default_csrf_options(\n            require_csrf=False,\n            token='DUMMY',\n            header=None,\n            safe_methods=('PUT',),\n            check_origin=False,\n            allow_no_origin=False,\n            callback=callback,\n        )\n        result = config.registry.getUtility(IDefaultCSRFOptions)\n        self.assertEqual(result.require_csrf, False)\n        self.assertEqual(result.token, 'DUMMY')\n        self.assertEqual(result.header, None)\n        self.assertEqual(list(sorted(result.safe_methods)), ['PUT'])\n        self.assertFalse(result.check_origin)\n        self.assertFalse(result.allow_no_origin)\n        self.assertTrue(result.callback is callback)"
}