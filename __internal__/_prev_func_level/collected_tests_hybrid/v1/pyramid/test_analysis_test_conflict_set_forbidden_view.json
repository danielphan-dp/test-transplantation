{
  "test_name": "test_conflict_set_forbidden_view",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.set_forbidden_view",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.set_forbidden_view",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.commit",
      "source_code": "    def commit(self):\n        \"\"\"\n        Commit recorded changes, turn off recording, return\n        changes.\n        \"\"\"\n        assert self.record\n        result = self.files_written, self.dirs_created\n        self._init_record()\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 639
    },
    {
      "name": "_conflictFunctions",
      "source_code": "def _conflictFunctions(e):\n    conflicts = e._conflicts.values()\n    for conflict in conflicts:\n        for confinst in conflict:\n            yield confinst.function",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
      "line_number": 1073
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.set_forbidden_view",
      "filename": "",
      "line": 0,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": ""
    },
    {
      "function": "config.set_forbidden_view",
      "filename": "",
      "line": 0,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": ""
    },
    {
      "function": "config.commit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 639,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": "    def commit(self):\n        \"\"\"\n        Commit recorded changes, turn off recording, return\n        changes.\n        \"\"\"\n        assert self.record\n        result = self.files_written, self.dirs_created\n        self._init_record()\n        return result\n\n"
    },
    {
      "function": "_conflictFunctions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
      "line": 1073,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": "def _conflictFunctions(e):\n    conflicts = e._conflicts.values()\n    for conflict in conflicts:\n        for confinst in conflict:\n            yield confinst.function\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_conflict_set_forbidden_view",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_conflict_set_forbidden_view(self):\n        config = self._makeOne()\n\n        def view1(request):  # pragma: no cover\n            pass\n\n        def view2(request):  # pragma: no cover\n            pass\n\n        config.set_forbidden_view(view1)\n        config.set_forbidden_view(view2)\n        try:\n            config.commit()\n        except ConfigurationConflictError as why:\n            c1, c2 = _conflictFunctions(why)\n            self.assertEqual(c1, 'test_conflict_set_forbidden_view')\n            self.assertEqual(c2, 'test_conflict_set_forbidden_view')\n        else:  # pragma: no cover\n            raise AssertionError"
}