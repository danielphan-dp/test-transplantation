{
  "test_name": "test_ctor_with_empty_body",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_httpexceptions.py",
  "static_methods": [
    {
      "name": "self._getTargetSubclass",
      "source_code": "    def _getTargetSubclass(\n        self,\n        code='200',\n        title='OK',\n        explanation='explanation',\n        empty_body=False,\n    ):\n        cls = self._getTargetClass()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_httpexceptions.py",
      "line_number": 91
    },
    {
      "name": "cls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getTargetSubclass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_httpexceptions.py",
      "line": 91,
      "caller": "test_ctor_with_empty_body",
      "source_code": "    def _getTargetSubclass(\n        self,\n        code='200',\n        title='OK',\n        explanation='explanation',\n        empty_body=False,\n"
    },
    {
      "function": "cls",
      "filename": "",
      "line": 0,
      "caller": "test_ctor_with_empty_body",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ctor_with_empty_body",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ctor_with_empty_body",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_ctor_with_empty_body(self):\n        cls = self._getTargetSubclass(empty_body=True)\n        exc = cls()\n        self.assertEqual(exc.content_type, None)\n        self.assertEqual(exc.content_length, None)"
}