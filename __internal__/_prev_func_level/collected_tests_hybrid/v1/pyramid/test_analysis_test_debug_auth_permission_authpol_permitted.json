{
  "test_name": "test_debug_auth_permission_authpol_permitted",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
  "static_methods": [
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._registerLogger",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 23
    },
    {
      "name": "self._registerSecurityPolicy",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 30
    },
    {
      "name": "self.config._derive_view",
      "source_code": "    def _derive_view(\n        self,\n        view,\n        permission=None,\n        predicates=(),\n        attr=None,\n        renderer=None,\n        wrapper_viewname=None,\n        viewname=None,\n        accept=None,\n        order=MAX_ORDER,\n        phash=DEFAULT_PHASH,\n        decorator=None,\n        route_name=None,\n        mapper=None,\n        http_cache=None,\n        context=None,\n        require_csrf=None,\n        exception_only=False,\n        extra_options=None,\n    ):\n        view = self.maybe_dotted(view)\n        mapper = self.maybe_dotted(mapper)\n        if isinstance(renderer, str):\n            renderer = renderers.RendererHelper(\n                name=renderer, package=self.package, registry=self.registry\n            )\n        if renderer is None:\n            # use default renderer if one exists\n            if self.registry.queryUtility(IRendererFactory) is not None:\n                renderer = renderers.RendererHelper(\n                    name=None, package=self.package, registry=self.registry\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1525
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "result",
      "source_code": "    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 3480
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self._registerLogger",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 23,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger\n\n        logger = DummyLogger()\n        self.config.registry.registerUtility(logger, IDebugLogger)\n        return logger\n\n"
    },
    {
      "function": "self._registerSecurityPolicy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 30,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy\n\n        policy = DummySecurityPolicy(permissive)\n        self.config.registry.registerUtility(policy, ISecurityPolicy)\n        return policy\n\n"
    },
    {
      "function": "self.config._derive_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1525,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": "    def _derive_view(\n        self,\n        view,\n        permission=None,\n        predicates=(),\n        attr=None,\n        renderer=None,\n        wrapper_viewname=None,\n        viewname=None,\n        accept=None,\n        order=MAX_ORDER,\n        phash=DEFAULT_PHASH,\n        decorator=None,\n        route_name=None,\n        mapper=None,\n        http_cache=None,\n        context=None,\n        require_csrf=None,\n        exception_only=False,\n        extra_options=None,\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    },
    {
      "function": "result",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 3480,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": "    @property\n    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')\n\n        return self._future.result()\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_debug_auth_permission_authpol_permitted",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_debug_auth_permission_authpol_permitted(self):\n        response = DummyResponse()\n        view = lambda *arg: response\n        self.config.registry.settings = dict(\n            debug_authorization=True, reload_templates=True\n        )\n        logger = self._registerLogger()\n        self._registerSecurityPolicy(True)\n        result = self.config._derive_view(view, permission='view')\n        self.assertEqual(view.__module__, result.__module__)\n        self.assertEqual(view.__doc__, result.__doc__)\n        self.assertEqual(view.__name__, result.__name__)\n        self.assertEqual(result.__call_permissive__.__wraps__, view)\n        request = self._makeRequest()\n        request.view_name = 'view_name'\n        request.url = 'url'\n        self.assertEqual(result(None, request), response)\n        self.assertEqual(len(logger.messages), 1)\n        self.assertEqual(\n            logger.messages[0],\n            \"debug_authorization of url url (view name \"\n            \"'view_name' against context None): True\",\n        )"
}