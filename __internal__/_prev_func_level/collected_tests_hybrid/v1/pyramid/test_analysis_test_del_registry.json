{
  "test_name": "test_del_registry",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_testing.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Configurator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.begin",
      "source_code": "    def begin(self) -> None:\n        self.statistics.clear()\n        self.statistics[\"start_time\"] = time.monotonic()\n        self.statistics[\"attempt_number\"] = 1\n        self.statistics[\"idle_for\"] = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/__init__.py",
      "line_number": 338
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.end",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 289
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_del_registry",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_del_registry",
      "source_code": ""
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_del_registry",
      "source_code": ""
    },
    {
      "function": "Configurator",
      "filename": "",
      "line": 0,
      "caller": "test_del_registry",
      "source_code": ""
    },
    {
      "function": "config.begin",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/__init__.py",
      "line": 338,
      "caller": "test_del_registry",
      "source_code": "    def begin(self) -> None:\n        self.statistics.clear()\n        self.statistics[\"start_time\"] = time.monotonic()\n        self.statistics[\"attempt_number\"] = 1\n        self.statistics[\"idle_for\"] = 0\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_del_registry",
      "source_code": ""
    },
    {
      "function": "config.end",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 289,
      "caller": "test_del_registry",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_del_registry(self):\n        # see https://github.com/Pylons/pyramid/issues/165\n        from pyramid.config import Configurator\n        from pyramid.registry import Registry\n\n        request = self._makeOne()\n        request.registry = 'abc'\n        self.assertEqual(request.registry, 'abc')\n        del request.registry\n        try:\n            registry = Registry('this_test')\n            config = Configurator(registry=registry)\n            config.begin()\n            self.assertTrue(request.registry is registry)\n        finally:\n            config.end()"
}