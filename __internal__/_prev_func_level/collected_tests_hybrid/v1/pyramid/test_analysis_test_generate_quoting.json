{
  "test_name": "test_generate_quoting",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "testing.setUp",
      "source_code": "    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/initialise_test.py",
      "line_number": 21
    },
    {
      "name": "config.add_static_view",
      "source_code": "    def add_static_view(self, name, path, **kw):\n        \"\"\"Add a view used to render static assets such as images\n        and CSS files.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1940
    },
    {
      "name": "testing.DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    },
    {
      "name": "inst.generate",
      "source_code": "        def generate():\n            # Special case for urllib3.\n            if hasattr(self.raw, \"stream\"):\n                try:\n                    yield from self.raw.stream(chunk_size, decode_content=True)\n                except ProtocolError as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except ReadTimeoutError as e:\n                    raise ConnectionError(e)\n                except SSLError as e:\n                    raise RequestsSSLError(e)\n            else:\n                # Standard file-like object.\n                while True:\n                    chunk = self.raw.read(chunk_size)\n                    if not chunk:\n                        break\n                    yield chunk",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 812
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "testing.tearDown",
      "source_code": "    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/initialise_test.py",
      "line_number": 25
    }
  ],
  "dynamic_methods": [
    {
      "function": "testing.setUp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/initialise_test.py",
      "line": 21,
      "caller": "test_generate_quoting",
      "source_code": "    @skipUnless(sys.stdout.isatty(), \"sys.stdout is not a tty\")\n    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()\n\n"
    },
    {
      "function": "config.add_static_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1940,
      "caller": "test_generate_quoting",
      "source_code": "    @action_method\n    def add_static_view(self, name, path, **kw):\n        \"\"\"Add a view used to render static assets such as images\n        and CSS files.\n\n        The ``name`` argument is a string representing an\n        application-relative local URL prefix.  It may alternately be a full\n        URL.\n\n        The ``path`` argument is the path on disk where the static files\n        reside.  This can be an absolute path, a package-relative path, or a\n        :term:`asset specification`.\n\n        The ``cache_max_age`` keyword argument is input to set the\n        ``Expires`` and ``Cache-Control`` headers for static assets served.\n        Note that this argument has no effect when the ``name`` is a *url\n        prefix*.  By default, this argument is ``None``, meaning that no\n        particular Expires or Cache-Control headers are set in the response.\n\n        The ``content_encodings`` keyword argument is a list of alternative\n        file encodings supported in the ``Accept-Encoding`` HTTP Header.\n        Alternative files are found using file extensions defined in\n        :attr:`mimetypes.encodings_map`. An encoded asset will be returned\n        with the ``Content-Encoding`` header set to the selected encoding.\n        If the asset contains alternative encodings then the\n        ``Accept-Encoding`` value will be added to the response's ``Vary``\n        header. By default, the list is empty and no alternatives will be\n        supported.\n\n        The ``permission`` keyword argument is used to specify the\n        :term:`permission` required by a user to execute the static view.  By\n        default, it is the string\n        :data:`pyramid.security.NO_PERMISSION_REQUIRED`, a special sentinel\n        which indicates that, even if a :term:`default permission` exists for\n        the current application, the static view should be renderered to\n        completely anonymous users.  This default value is permissive\n        because, in most web apps, static assets seldom need protection from\n        viewing.  If ``permission`` is specified, the security checking will\n        be performed against the default root factory ACL.\n\n        Any other keyword arguments sent to ``add_static_view`` are passed on\n        to :meth:`pyramid.config.Configurator.add_route` (e.g. ``factory``,\n        perhaps to define a custom factory with a custom ACL for this static\n        view).\n\n        *Usage*\n\n        The ``add_static_view`` function is typically used in conjunction\n        with the :meth:`pyramid.request.Request.static_url` method.\n        ``add_static_view`` adds a view which renders a static asset when\n        some URL is visited; :meth:`pyramid.request.Request.static_url`\n        generates a URL to that asset.\n\n        The ``name`` argument to ``add_static_view`` is usually a simple URL\n        prefix (e.g. ``'images'``).  When this is the case, the\n        :meth:`pyramid.request.Request.static_url` API will generate a URL\n        which points to a Pyramid view, which will serve up a set of assets\n        that live in the package itself. For example:\n\n        .. code-block:: python\n\n           add_static_view('images', 'mypackage:images/')\n\n        Code that registers such a view can generate URLs to the view via\n        :meth:`pyramid.request.Request.static_url`:\n\n        .. code-block:: python\n\n           request.static_url('mypackage:images/logo.png')\n\n        When ``add_static_view`` is called with a ``name`` argument that\n        represents a URL prefix, as it is above, subsequent calls to\n        :meth:`pyramid.request.Request.static_url` with paths that start with\n        the ``path`` argument passed to ``add_static_view`` will generate a\n        URL something like ``http://<Pyramid app URL>/images/logo.png``,\n        which will cause the ``logo.png`` file in the ``images`` subdirectory\n        of the ``mypackage`` package to be served.\n\n        ``add_static_view`` can alternately be used with a ``name`` argument\n        which is a *URL*, causing static assets to be served from an external\n        webserver.  This happens when the ``name`` argument is a fully\n        qualified URL (e.g. starts with ``http://`` or similar).  In this\n        mode, the ``name`` is used as the prefix of the full URL when\n        generating a URL using :meth:`pyramid.request.Request.static_url`.\n        Furthermore, if a protocol-relative URL (e.g. ``//example.com/images``)\n        is used as the ``name`` argument, the generated URL will use the\n        protocol of the request (http or https, respectively).\n\n        For example, if ``add_static_view`` is called like so:\n\n        .. code-block:: python\n\n           add_static_view('http://example.com/images', 'mypackage:images/')\n\n        Subsequently, the URLs generated by\n        :meth:`pyramid.request.Request.static_url` for that static view will\n        be prefixed with ``http://example.com/images`` (the external webserver\n        listening on ``example.com`` must be itself configured to respond\n        properly to such a request.):\n\n        .. code-block:: python\n\n           static_url('mypackage:images/logo.png', request)\n\n        See :ref:`static_assets_section` for more information.\n\n        .. versionchanged:: 2.0\n\n           Added the ``content_encodings`` argument.\n\n        \"\"\"\n        spec = self._make_spec(path)\n        info = self._get_static_info()\n        info.add(self, name, spec, **kw)\n\n"
    },
    {
      "function": "testing.DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_generate_quoting",
      "source_code": ""
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_generate_quoting",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    },
    {
      "function": "inst.generate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 812,
      "caller": "test_generate_quoting",
      "source_code": "        def generate():\n            # Special case for urllib3.\n            if hasattr(self.raw, \"stream\"):\n                try:\n                    yield from self.raw.stream(chunk_size, decode_content=True)\n                except ProtocolError as e:\n                    raise ChunkedEncodingError(e)\n                except DecodeError as e:\n                    raise ContentDecodingError(e)\n                except ReadTimeoutError as e:\n                    raise ConnectionError(e)\n                except SSLError as e:\n                    raise RequestsSSLError(e)\n            else:\n                # Standard file-like object.\n                while True:\n                    chunk = self.raw.read(chunk_size)\n                    if not chunk:\n                        break\n                    yield chunk\n\n            self._content_consumed = True\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_generate_quoting",
      "source_code": ""
    },
    {
      "function": "testing.tearDown",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/initialise_test.py",
      "line": 25,
      "caller": "test_generate_quoting",
      "source_code": "    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_generate_quoting(self):\n        from pyramid.interfaces import IStaticURLInfo\n\n        config = testing.setUp()\n        try:\n            config.add_static_view('images', path='mypkg:templates')\n            request = testing.DummyRequest()\n            request.registry = config.registry\n            inst = config.registry.getUtility(IStaticURLInfo)\n            result = inst.generate('mypkg:templates/foo%2Fbar', request)\n            self.assertEqual(result, 'http://example.com/images/foo%252Fbar')\n        finally:\n            testing.tearDown()"
}