{
  "test_name": "test_getTaggedValue_follows__iro__",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "self._make_taggedValue_tree",
      "source_code": "    def _make_taggedValue_tree(self, base):\n        from zope.interface import Attribute\n        from zope.interface import taggedValue",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 2139
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._make_taggedValue_tree",
      "source_code": "    def _make_taggedValue_tree(self, base):\n        from zope.interface import Attribute\n        from zope.interface import taggedValue",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 2139
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "iface_A.__bases__.setTaggedValue",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "iface_A.getTaggedValue",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 104
    },
    {
      "name": "iface_A.queryTaggedValue",
      "source_code": "    def queryTaggedValue(self, tag, default=None):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        return self.__tagged_values.get(\n            tag, default,\n        ) if self.__tagged_values else default",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 110
    },
    {
      "name": "iface_A.getTaggedValue",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 104
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._make_taggedValue_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 2139,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def _make_taggedValue_tree(self, base):\n        from zope.interface import Attribute\n        from zope.interface import taggedValue\n\n        class F(base):\n            taggedValue('tag', 'F')\n            tag = Attribute('F')\n\n        class E(base):\n            taggedValue('tag', 'E')\n            tag = Attribute('E')\n\n        class D(base):\n            taggedValue('tag', 'D')\n            tag = Attribute('D')\n\n        class C(D, F):\n            taggedValue('tag', 'C')\n            tag = Attribute('C')\n\n        class B(D, E):\n            pass\n\n        class A(B, C):\n            pass\n\n        return A\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": ""
    },
    {
      "function": "self._make_taggedValue_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 2139,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def _make_taggedValue_tree(self, base):\n        from zope.interface import Attribute\n        from zope.interface import taggedValue\n\n        class F(base):\n            taggedValue('tag', 'F')\n            tag = Attribute('F')\n\n        class E(base):\n            taggedValue('tag', 'E')\n            tag = Attribute('E')\n\n        class D(base):\n            taggedValue('tag', 'D')\n            tag = Attribute('D')\n\n        class C(D, F):\n            taggedValue('tag', 'C')\n            tag = Attribute('C')\n\n        class B(D, E):\n            pass\n\n        class A(B, C):\n            pass\n\n        return A\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": ""
    },
    {
      "function": "iface_A.__bases__.setTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 120,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": ""
    },
    {
      "function": "iface_A.getTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 104,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]\n\n"
    },
    {
      "function": "iface_A.queryTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 110,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def queryTaggedValue(self, tag, default=None):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        return self.__tagged_values.get(\n            tag, default,\n        ) if self.__tagged_values else default\n\n"
    },
    {
      "function": "iface_A.getTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 104,
      "caller": "test_getTaggedValue_follows__iro__",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]\n\n"
    }
  ],
  "assertions": [
    "assert iface_A.__bases__[0].__name__ == 'B'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_getTaggedValue_follows__iro__(self):\n        # And not just looks at __bases__.\n        # https://github.com/zopefoundation/zope.interface/issues/190\n        from zope.interface import Interface\n\n        # First, confirm that looking at a true class\n        # hierarchy follows the __mro__.\n        class_A = self._make_taggedValue_tree(object)\n        self.assertEqual(class_A.tag.__name__, 'C')\n\n        # Now check that Interface does, both for attributes...\n        iface_A = self._make_taggedValue_tree(Interface)\n        self.assertEqual(iface_A['tag'].__name__, 'C')\n        # ... and for tagged values.\n        self.assertEqual(iface_A.getTaggedValue('tag'), 'C')\n        self.assertEqual(iface_A.queryTaggedValue('tag'), 'C')\n        # Of course setting something lower overrides it.\n        assert iface_A.__bases__[0].__name__ == 'B'\n        iface_A.__bases__[0].setTaggedValue('tag', 'B')\n        self.assertEqual(iface_A.getTaggedValue('tag'), 'B')"
}