{
  "test_name": "test_http_cached_view_integer",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
  "static_methods": [
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.config._derive_view",
      "source_code": "    def _derive_view(\n        self,\n        view,\n        permission=None,\n        predicates=(),\n        attr=None,\n        renderer=None,\n        wrapper_viewname=None,\n        viewname=None,\n        accept=None,\n        order=MAX_ORDER,\n        phash=DEFAULT_PHASH,\n        decorator=None,\n        route_name=None,\n        mapper=None,\n        http_cache=None,\n        context=None,\n        require_csrf=None,\n        exception_only=False,\n        extra_options=None,\n    ):\n        view = self.maybe_dotted(view)\n        mapper = self.maybe_dotted(mapper)\n        if isinstance(renderer, str):\n            renderer = renderers.RendererHelper(\n                name=renderer, package=self.package, registry=self.registry\n            )\n        if renderer is None:\n            # use default renderer if one exists\n            if self.registry.queryUtility(IRendererFactory) is not None:\n                renderer = renderers.RendererHelper(\n                    name=None, package=self.package, registry=self.registry\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1525
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "result",
      "source_code": "    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 3480
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "parse_httpdate",
      "source_code": "def parse_httpdate(s):\n    import datetime",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 2096
    },
    {
      "name": "assert_similar_datetime",
      "source_code": "def assert_similar_datetime(one, two):\n    for attr in ('year', 'month', 'day', 'hour', 'minute'):\n        one_attr = getattr(one, attr)\n        two_attr = getattr(two, attr)\n        if not one_attr == two_attr:  # pragma: no cover\n            raise AssertionError(f'{one_attr!r} != {two_attr!r} in {attr}')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 2104
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "self.config._derive_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1525,
      "caller": "test_http_cached_view_integer",
      "source_code": "    def _derive_view(\n        self,\n        view,\n        permission=None,\n        predicates=(),\n        attr=None,\n        renderer=None,\n        wrapper_viewname=None,\n        viewname=None,\n        accept=None,\n        order=MAX_ORDER,\n        phash=DEFAULT_PHASH,\n        decorator=None,\n        route_name=None,\n        mapper=None,\n        http_cache=None,\n        context=None,\n        require_csrf=None,\n        exception_only=False,\n        extra_options=None,\n"
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_http_cached_view_integer",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "result",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 3480,
      "caller": "test_http_cached_view_integer",
      "source_code": "    @property\n    def result(self):\n        if not self.done:\n            raise RuntimeError('Function has not yet completed')\n\n        return self._future.result()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    },
    {
      "function": "parse_httpdate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 2096,
      "caller": "test_http_cached_view_integer",
      "source_code": "def parse_httpdate(s):\n    import datetime\n\n    # cannot use %Z, must use literal GMT; Jython honors timezone\n    # but CPython does not\n    return datetime.datetime.strptime(s, \"%a, %d %b %Y %H:%M:%S GMT\")\n\n\n"
    },
    {
      "function": "assert_similar_datetime",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 2104,
      "caller": "test_http_cached_view_integer",
      "source_code": "def assert_similar_datetime(one, two):\n    for attr in ('year', 'month', 'day', 'hour', 'minute'):\n        one_attr = getattr(one, attr)\n        two_attr = getattr(two, attr)\n        if not one_attr == two_attr:  # pragma: no cover\n            raise AssertionError(f'{one_attr!r} != {two_attr!r} in {attr}')\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_http_cached_view_integer",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert_similar_datetime(expires, when)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_http_cached_view_integer(self):\n        import datetime\n\n        from pyramid.response import Response\n\n        response = Response('OK')\n\n        def inner_view(context, request):\n            return response\n\n        result = self.config._derive_view(inner_view, http_cache=3600)\n        self.assertFalse(result is inner_view)\n        self.assertEqual(inner_view.__module__, result.__module__)\n        self.assertEqual(inner_view.__doc__, result.__doc__)\n        request = self._makeRequest()\n        when = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\n        result = result(None, request)\n        self.assertEqual(result, response)\n        headers = dict(result.headerlist)\n        expires = parse_httpdate(headers['Expires'])\n        assert_similar_datetime(expires, when)\n        self.assertEqual(headers['Cache-Control'], 'max-age=3600')"
}