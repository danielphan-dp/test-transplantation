{
  "test_name": "test_interpolate_subsitution_more_than_once",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/tests/test__init__.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "inst.interpolate",
      "source_code": "    def interpolate(self, translated=None):\n        \"\"\" Interpolate the value ``translated`` which is assumed to\n        be a Unicode object containing zero or more *replacement\n        markers* (``$foo`` or ``${bar}``) using the ``mapping``\n        dictionary attached to this instance.  If the ``mapping``\n        dictionary is empty or ``None``, no interpolation is\n        performed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/__init__.py",
      "line_number": 109
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "u",
      "source_code": "    def u(s):\n        return s\n    unichr = chr\n    import struct\n    int2byte = struct.Struct(\">B\").pack\n    del struct\n    byte2int = operator.itemgetter(0)\n    indexbytes = operator.getitem\n    iterbytes = iter\n    import io\n    StringIO = io.StringIO\n    BytesIO = io.BytesIO\n    del io\n    _assertCountEqual = \"assertCountEqual\"\n    if sys.version_info[1] <= 1:\n        _assertRaisesRegex = \"assertRaisesRegexp\"\n        _assertRegex = \"assertRegexpMatches\"\n        _assertNotRegex = \"assertNotRegexpMatches\"\n    else:\n        _assertRaisesRegex = \"assertRaisesRegex\"\n        _assertRegex = \"assertRegex\"\n        _assertNotRegex = \"assertNotRegex\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 646
    },
    {
      "name": "u",
      "source_code": "    def u(s):\n        return s\n    unichr = chr\n    import struct\n    int2byte = struct.Struct(\">B\").pack\n    del struct\n    byte2int = operator.itemgetter(0)\n    indexbytes = operator.getitem\n    iterbytes = iter\n    import io\n    StringIO = io.StringIO\n    BytesIO = io.BytesIO\n    del io\n    _assertCountEqual = \"assertCountEqual\"\n    if sys.version_info[1] <= 1:\n        _assertRaisesRegex = \"assertRaisesRegexp\"\n        _assertRegex = \"assertRegexpMatches\"\n        _assertNotRegex = \"assertNotRegexpMatches\"\n    else:\n        _assertRaisesRegex = \"assertRaisesRegex\"\n        _assertRegex = \"assertRegex\"\n        _assertNotRegex = \"assertNotRegex\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 646
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_interpolate_subsitution_more_than_once",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "inst.interpolate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/__init__.py",
      "line": 109,
      "caller": "test_interpolate_subsitution_more_than_once",
      "source_code": "    def interpolate(self, translated=None):\n        \"\"\" Interpolate the value ``translated`` which is assumed to\n        be a Unicode object containing zero or more *replacement\n        markers* (``$foo`` or ``${bar}``) using the ``mapping``\n        dictionary attached to this instance.  If the ``mapping``\n        dictionary is empty or ``None``, no interpolation is\n        performed.\n\n        If ``translated`` is ``None``, interpolation will be performed\n        against the ``default`` value.\n        \"\"\"\n        if translated is None:\n            translated = self.default\n\n        # NB: this function should never never lose the *original\n        # identity* of a non-``None`` but empty ``default`` value it\n        # is provided.  If (translated == default) , it should return the\n        # *original* default, not a derivation.  See the comment below in\n        # ChameleonTranslate.\n\n        if self.mapping and translated:\n            def replace(match):\n                whole, param1, param2 = match.groups()\n                return text_type(self.mapping.get(param1 or param2, whole))\n            translated = _interp_regex.sub(replace, translated)\n\n        return translated\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_interpolate_subsitution_more_than_once",
      "source_code": ""
    },
    {
      "function": "u",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 646,
      "caller": "test_interpolate_subsitution_more_than_once",
      "source_code": "    def u(s):\n        return s\n"
    },
    {
      "function": "u",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 646,
      "caller": "test_interpolate_subsitution_more_than_once",
      "source_code": "    def u(s):\n        return s\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_interpolate_subsitution_more_than_once(self):\n        mapping = {\"name\": \"Zope\", \"version\": 3}\n        inst = self._makeOne(\n            u(\"This is $name version ${version}. ${name} $version!\"),\n            mapping=mapping)\n        result = inst.interpolate()\n        self.assertEqual(result, u('This is Zope version 3. Zope 3!'))"
}