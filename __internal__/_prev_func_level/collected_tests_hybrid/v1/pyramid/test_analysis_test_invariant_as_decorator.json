{
  "test_name": "test_invariant_as_decorator",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "IRange.validateInvariants",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 895
    },
    {
      "name": "IRange.validateInvariants",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 895
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Range",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Range",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IRange.validateInvariants",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 895
    },
    {
      "name": "Range",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Invalid",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_invariant_as_decorator",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "IRange.validateInvariants",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 895,
      "caller": "test_invariant_as_decorator",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"\n\n        for iface in self.__iro__:\n            for invariant in iface.queryDirectTaggedValue('invariants', ()):\n                try:\n                    invariant(obj)\n                except Invalid as error:\n                    if errors is not None:\n                        errors.append(error)\n                    else:\n                        raise\n\n        if errors:\n            raise Invalid(errors)\n\n"
    },
    {
      "function": "IRange.validateInvariants",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 895,
      "caller": "test_invariant_as_decorator",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"\n\n        for iface in self.__iro__:\n            for invariant in iface.queryDirectTaggedValue('invariants', ()):\n                try:\n                    invariant(obj)\n                except Invalid as error:\n                    if errors is not None:\n                        errors.append(error)\n                    else:\n                        raise\n\n        if errors:\n            raise Invalid(errors)\n\n"
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "Range",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "Range",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "IRange.validateInvariants",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 895,
      "caller": "test_invariant_as_decorator",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"\n\n        for iface in self.__iro__:\n            for invariant in iface.queryDirectTaggedValue('invariants', ()):\n                try:\n                    invariant(obj)\n                except Invalid as error:\n                    if errors is not None:\n                        errors.append(error)\n                    else:\n                        raise\n\n        if errors:\n            raise Invalid(errors)\n\n"
    },
    {
      "function": "Range",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "Invalid",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_invariant_as_decorator",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_invariant_as_decorator(self):\n        from zope.interface import Attribute\n        from zope.interface import Interface\n        from zope.interface import implementer\n        from zope.interface import invariant\n        from zope.interface.exceptions import Invalid\n\n        class IRange(Interface):\n            min = Attribute(\"Lower bound\")\n            max = Attribute(\"Upper bound\")\n\n            @invariant\n            def range_invariant(ob):\n                if ob.max < ob.min:\n                    raise Invalid('max < min')\n\n        @implementer(IRange)\n        class Range:\n\n            def __init__(self, min, max):\n                self.min, self.max = min, max\n\n        IRange.validateInvariants(Range(1, 2))\n        IRange.validateInvariants(Range(1, 1))\n        try:\n            IRange.validateInvariants(Range(2, 1))\n        except Invalid as e:\n            self.assertEqual(str(e), 'max < min')"
}