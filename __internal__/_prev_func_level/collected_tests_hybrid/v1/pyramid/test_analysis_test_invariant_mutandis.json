{
  "test_name": "test_invariant_mutandis",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "HasInvariant",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "directlyProvides",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n    ):  # pylint:disable=redefined-builtin\n        \"\"\"\n        Declare interfaces declared directly for an object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 684
    },
    {
      "name": "IInvariant.getTaggedValue",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 104
    },
    {
      "name": "invariants.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "IInvariant.setTaggedValue",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 120
    },
    {
      "name": "self._errorsEqual",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 1917
    },
    {
      "name": "self._errorsEqual",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 1917
    },
    {
      "name": "self._errorsEqual",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 1917
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IInvariant.setTaggedValue",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 120
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "invariant",
      "source_code": "def invariant(call):\n    f_locals = sys._getframe(1).f_locals\n    tags = f_locals.setdefault(TAGGED_DATA, {})\n    invariants = tags.setdefault('invariants', [])\n    invariants.append(call)\n    return _decorator_non_return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 50
    },
    {
      "name": "IInvariant.validateInvariants",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 895
    }
  ],
  "dynamic_methods": [
    {
      "function": "HasInvariant",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_mutandis",
      "source_code": ""
    },
    {
      "function": "directlyProvides",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 684,
      "caller": "test_invariant_mutandis",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n"
    },
    {
      "function": "IInvariant.getTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 104,
      "caller": "test_invariant_mutandis",
      "source_code": "    def getTaggedValue(self, tag):\n        \"\"\" Returns the value associated with 'tag'. \"\"\"\n        if not self.__tagged_values:\n            raise KeyError(tag)\n        return self.__tagged_values[tag]\n\n"
    },
    {
      "function": "invariants.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_invariant_mutandis",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "IInvariant.setTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 120,
      "caller": "test_invariant_mutandis",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value\n\n"
    },
    {
      "function": "self._errorsEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 1917,
      "caller": "test_invariant_mutandis",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)\n\n        self.assertEqual(len(e), error_len)\n        msgs = [error.args[0] for error in e]\n        msgs.sort()\n        for msg in msgs:\n            self.assertEqual(msg, error_msgs.pop(0))\n\n"
    },
    {
      "function": "self._errorsEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 1917,
      "caller": "test_invariant_mutandis",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)\n\n        self.assertEqual(len(e), error_len)\n        msgs = [error.args[0] for error in e]\n        msgs.sort()\n        for msg in msgs:\n            self.assertEqual(msg, error_msgs.pop(0))\n\n"
    },
    {
      "function": "self._errorsEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 1917,
      "caller": "test_invariant_mutandis",
      "source_code": "    def _errorsEqual(self, has_invariant, error_len, error_msgs, iface):\n        from zope.interface.exceptions import Invalid\n        self.assertRaises(Invalid, iface.validateInvariants, has_invariant)\n        e = []\n        try:\n            iface.validateInvariants(has_invariant, e)\n            self.fail(\"validateInvariants should always raise\")\n        except Invalid as error:\n            self.assertEqual(error.args[0], e)\n\n        self.assertEqual(len(e), error_len)\n        msgs = [error.args[0] for error in e]\n        msgs.sort()\n        for msg in msgs:\n            self.assertEqual(msg, error_msgs.pop(0))\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_mutandis",
      "source_code": ""
    },
    {
      "function": "IInvariant.setTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 120,
      "caller": "test_invariant_mutandis",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value\n\n"
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_mutandis",
      "source_code": ""
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_invariant_mutandis",
      "source_code": ""
    },
    {
      "function": "invariant",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 50,
      "caller": "test_invariant_mutandis",
      "source_code": "def invariant(call):\n    f_locals = sys._getframe(1).f_locals\n    tags = f_locals.setdefault(TAGGED_DATA, {})\n    invariants = tags.setdefault('invariants', [])\n    invariants.append(call)\n    return _decorator_non_return\n\n\n"
    },
    {
      "function": "IInvariant.validateInvariants",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 895,
      "caller": "test_invariant_mutandis",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"\n\n        for iface in self.__iro__:\n            for invariant in iface.queryDirectTaggedValue('invariants', ()):\n                try:\n                    invariant(obj)\n                except Invalid as error:\n                    if errors is not None:\n                        errors.append(error)\n                    else:\n                        raise\n\n        if errors:\n            raise Invalid(errors)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_invariant_mutandis(self):\n        from zope.interface import Attribute\n        from zope.interface import Interface\n        from zope.interface import directlyProvides\n        from zope.interface import invariant\n\n        class IInvariant(Interface):\n            foo = Attribute('foo')\n            bar = Attribute('bar; must eval to Boolean True if foo does')\n            invariant(_ifFooThenBar)\n\n        class HasInvariant:\n            pass\n\n        # now we'll do two invariants on the same interface,\n        # just to make sure that a small\n        # multi-invariant interface is at least minimally tested.\n        has_invariant = HasInvariant()\n        directlyProvides(has_invariant, IInvariant)\n        has_invariant.foo = 42\n\n        # if you really need to mutate, then this would be the way to do it.\n        # Probably a bad idea, though. :-)\n        old_invariants = IInvariant.getTaggedValue('invariants')\n        invariants = old_invariants[:]\n        invariants.append(_barGreaterThanFoo)\n        IInvariant.setTaggedValue('invariants', invariants)\n\n        # even though the interface has changed, we should still only have one\n        # error.\n        self._errorsEqual(has_invariant, 1, ['If Foo, then Bar!'],\n                          IInvariant)\n        # however, if we set foo to 0 (Boolean False) and bar to a negative\n        # number then we'll get the new error\n        has_invariant.foo = 2\n        has_invariant.bar = 1\n        self._errorsEqual(\n            has_invariant,\n            1,\n            ['Please, Boo MUST be greater than Foo!'],\n            IInvariant\n        )\n        # and if we set foo to a positive number and boo to 0, we'll\n        # get both errors!\n        has_invariant.foo = 1\n        has_invariant.bar = 0\n        self._errorsEqual(has_invariant, 2,\n                          ['If Foo, then Bar!',\n                           'Please, Boo MUST be greater than Foo!'],\n                          IInvariant)\n        # for another happy ending, we'll make the invariants happy again\n        has_invariant.foo = 1\n        has_invariant.bar = 2\n        self.assertEqual(IInvariant.validateInvariants(has_invariant), None)\n        # clean up\n        IInvariant.setTaggedValue('invariants', old_invariants)"
}