{
  "test_name": "test_it_call_authentication_policy_provides_superset_implicit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_predicates.py",
  "static_methods": [
    {
      "name": "testing.DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._testing_authn_policy",
      "source_code": "    def _testing_authn_policy(self, userid, groupids=tuple()):\n        from pyramid.authorization import Authenticated, Everyone\n        from pyramid.interfaces import IAuthenticationPolicy, ISecurityPolicy\n        from pyramid.security import LegacySecurityPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_predicates.py",
      "line_number": 455
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "Dummy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "testing.DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": ""
    },
    {
      "function": "self._testing_authn_policy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_predicates.py",
      "line": 455,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": "    def _testing_authn_policy(self, userid, groupids=tuple()):\n        from pyramid.authorization import Authenticated, Everyone\n        from pyramid.interfaces import IAuthenticationPolicy, ISecurityPolicy\n        from pyramid.security import LegacySecurityPolicy\n\n        class DummyPolicy:\n            def effective_principals(self, request):\n                p = [Everyone]\n                if userid:\n                    p.append(Authenticated)\n                    p.append(userid)\n                    p.extend(groupids)\n                return p\n\n        registry = self.config.registry\n        registry.registerUtility(DummyPolicy(), IAuthenticationPolicy)\n        registry.registerUtility(LegacySecurityPolicy(), ISecurityPolicy)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "Dummy",
      "filename": "",
      "line": 0,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": ""
    },
    {
      "function": "inst",
      "filename": "",
      "line": 0,
      "caller": "test_it_call_authentication_policy_provides_superset_implicit",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_call_authentication_policy_provides_superset_implicit(self):\n        from pyramid.authorization import Authenticated\n\n        request = testing.DummyRequest()\n        self._testing_authn_policy('fred', groupids=('verna', 'bambi'))\n        inst = self._makeOne(Authenticated, None)\n        context = Dummy()\n        self.assertTrue(inst(context, request))"
}