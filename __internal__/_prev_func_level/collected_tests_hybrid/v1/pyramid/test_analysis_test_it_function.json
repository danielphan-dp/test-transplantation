{
  "test_name": "test_it_function",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyVenusian",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "decorator",
      "source_code": "        def decorator(cls_or_fn):\n            cls_or_fn.__dataclass_transform__ = {\n                \"eq_default\": eq_default,\n                \"order_default\": order_default,\n                \"kw_only_default\": kw_only_default,\n                \"field_specifiers\": field_specifiers,\n                \"kwargs\": kwargs,\n            }\n            return cls_or_fn\n        return decorator",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/typing_extensions.py",
      "line_number": 2069
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call_venusian",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 1286
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_it_function",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyVenusian",
      "filename": "",
      "line": 0,
      "caller": "test_it_function",
      "source_code": ""
    },
    {
      "function": "decorator",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/typing_extensions.py",
      "line": 2069,
      "caller": "test_it_function",
      "source_code": "        def decorator(cls_or_fn):\n            cls_or_fn.__dataclass_transform__ = {\n                \"eq_default\": eq_default,\n                \"order_default\": order_default,\n                \"kw_only_default\": kw_only_default,\n                \"field_specifiers\": field_specifiers,\n                \"kwargs\": kwargs,\n            }\n            return cls_or_fn\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_function",
      "source_code": ""
    },
    {
      "function": "call_venusian",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 1286,
      "caller": "test_it_function",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_function",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_function(self):\n        def view(request):  # pragma: no cover\n            pass\n\n        decorator = self._makeOne(context=Exception, renderer='renderer')\n        venusian = DummyVenusian()\n        decorator.venusian = venusian\n        wrapped = decorator(view)\n        self.assertTrue(wrapped is view)\n        config = call_venusian(venusian)\n        settings = config.settings\n        self.assertEqual(\n            settings,\n            [\n                {\n                    'venusian': venusian,\n                    'context': Exception,\n                    'renderer': 'renderer',\n                    '_info': 'codeinfo',\n                    'view': None,\n                }\n            ],\n        )"
}