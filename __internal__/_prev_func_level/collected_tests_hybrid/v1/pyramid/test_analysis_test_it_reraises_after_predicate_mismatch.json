{
  "test_name": "test_it_reraises_after_predicate_mismatch",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
  "static_methods": [
    {
      "name": "self.config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "RuntimeError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.fail",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.invoke_exception_view",
      "source_code": "    def invoke_exception_view(\n        self, exc_info=None, request=None, secure=True, reraise=False\n    ):\n        \"\"\"Executes an exception view related to the request it's called upon.\n        The arguments it takes are these:",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/view.py",
      "line_number": 689
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "RuntimeError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": ""
    },
    {
      "function": "self.fail",
      "filename": "",
      "line": 0,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": ""
    },
    {
      "function": "request.invoke_exception_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/view.py",
      "line": 689,
      "caller": "test_it_reraises_after_predicate_mismatch",
      "source_code": "    def invoke_exception_view(\n        self, exc_info=None, request=None, secure=True, reraise=False\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_reraises_after_predicate_mismatch(self):\n        def exc_view(exc, request):  # pragma: no cover\n            pass\n\n        self.config.add_view(\n            exc_view, context=Exception, request_method='POST'\n        )\n        request = self._makeOne()\n        request.method = 'GET'\n        dummy_exc = RuntimeError()\n        try:\n            raise dummy_exc\n        except RuntimeError:\n            self.assertRaises(\n                RuntimeError,\n                lambda: request.invoke_exception_view(reraise=True),\n            )\n        else:  # pragma: no cover\n            self.fail()"
}