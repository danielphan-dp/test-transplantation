{
  "test_name": "test_non_orderable",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._make_IOErr",
      "source_code": "    def _make_IOErr(self):\n        # This can't be done in the standard C3 ordering.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
      "line_number": 146
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C3Setting",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "super.test_non_orderable",
      "source_code": "    def test_non_orderable(self):\n        IOErr, bases = self._make_IOErr()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
      "line_number": 168
    },
    {
      "name": "super",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self._make_IOErr",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
      "line": 146,
      "caller": "test_non_orderable",
      "source_code": "    def _make_IOErr(self):\n        # This can't be done in the standard C3 ordering.\n\n        class Foo:\n            def __init__(self, name, *bases):\n                self.__name__ = name\n                self.__bases__ = bases\n\n            def __repr__(self):  # pragma: no cover\n                return self.__name__\n\n        # Mimic what classImplements(IOError, IIOError)\n        # does.\n        IEx = Foo('IEx')\n        IStdErr = Foo('IStdErr', IEx)\n        IEnvErr = Foo('IEnvErr', IStdErr)\n        IIOErr = Foo('IIOErr', IEnvErr)\n        IOSErr = Foo('IOSErr', IEnvErr)\n\n        IOErr = Foo('IOErr', IEnvErr, IIOErr, IOSErr)\n        return IOErr, [IOErr, IIOErr, IOSErr, IEnvErr, IStdErr, IEx]\n\n"
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_non_orderable",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_non_orderable",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_non_orderable",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "C3Setting",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_non_orderable",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    },
    {
      "function": "super.test_non_orderable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_ro.py",
      "line": 168,
      "caller": "test_non_orderable",
      "source_code": "    def test_non_orderable(self):\n        IOErr, bases = self._make_IOErr()\n\n        self.assertEqual(self._callFUT(IOErr), bases)\n\n"
    },
    {
      "function": "super",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_non_orderable",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_non_orderable(self):\n        import warnings\n\n        from zope.interface import ro\n        try:\n            # If we've already warned, we must reset that state.\n            del ro.__warningregistry__\n        except AttributeError:\n            pass\n\n        with warnings.catch_warnings():\n            warnings.simplefilter('error')\n            with C3Setting(\n                ro.C3.WARN_BAD_IRO, True\n            ), C3Setting(\n                ro.C3.STRICT_IRO, False\n            ):\n                with self.assertRaises(ro.InconsistentResolutionOrderWarning):\n                    super().test_non_orderable()\n\n        IOErr, _ = self._make_IOErr()\n        with self.assertRaises(ro.InconsistentResolutionOrderError):\n            self._callFUT(IOErr, strict=True)\n\n        with C3Setting(\n            ro.C3.TRACK_BAD_IRO, True\n        ), C3Setting(\n            ro.C3.STRICT_IRO, False\n        ):\n            with warnings.catch_warnings():\n                warnings.simplefilter('ignore')\n                self._callFUT(IOErr)\n            self.assertIn(IOErr, ro.C3.BAD_IROS)\n\n        iro = self._callFUT(IOErr, strict=False)\n        legacy_iro = self._callFUT(IOErr, use_legacy_ro=True, strict=False)\n        self.assertEqual(iro, legacy_iro)"
}