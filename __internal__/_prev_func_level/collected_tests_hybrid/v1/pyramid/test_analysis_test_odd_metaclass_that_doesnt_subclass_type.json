{
  "test_name": "test_odd_metaclass_that_doesnt_subclass_type",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_odd_declarations.py",
  "static_methods": [
    {
      "name": "odd.MetaClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "odd.MetaClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "A",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "A",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "C",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "odd.MetaClass",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "odd.MetaClass",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "A",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "A",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "C",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_odd_metaclass_that_doesnt_subclass_type",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_odd_metaclass_that_doesnt_subclass_type(self):\n        # This was originally a doctest in odd.py.\n        # It verifies that the metaclass the rest of these tests use\n        # works as expected.\n\n        # This is used for testing support for ExtensionClass in new\n        # interfaces.\n\n        class A:\n            a = 1\n\n        A = odd.MetaClass('A', A.__bases__, A.__dict__)\n\n        class B:\n            b = 1\n\n        B = odd.MetaClass('B', B.__bases__, B.__dict__)\n\n        class C(A, B):\n            pass\n\n        self.assertEqual(C.__bases__, (A, B))\n\n        a = A()\n        aa = A()\n        self.assertEqual(a.a, 1)\n        self.assertEqual(aa.a, 1)\n\n        aa.a = 2\n        self.assertEqual(a.a, 1)\n        self.assertEqual(aa.a, 2)\n\n        c = C()\n        self.assertEqual(c.a, 1)\n        self.assertEqual(c.b, 1)\n\n        c.b = 2\n        self.assertEqual(c.b, 2)\n\n        C.c = 1\n        self.assertEqual(c.c, 1)\n        c.c\n\n        self.assertIs(C.__class__.__class__, C.__class__)"
}