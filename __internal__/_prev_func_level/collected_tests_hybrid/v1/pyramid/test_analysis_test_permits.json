{
  "test_name": "test_permits",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_security.py",
  "static_methods": [
    {
      "name": "_makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "LegacySecurityPolicy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_registerAuthenticationPolicy",
      "source_code": "def _registerAuthenticationPolicy(reg, result):\n    from pyramid.interfaces import IAuthenticationPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_security.py",
      "line_number": 629
    },
    {
      "name": "_registerAuthorizationPolicy",
      "source_code": "def _registerAuthorizationPolicy(reg, result):\n    from pyramid.interfaces import IAuthorizationPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_security.py",
      "line_number": 637
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "policy.permits",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 60
    }
  ],
  "dynamic_methods": [
    {
      "function": "_makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_permits",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "LegacySecurityPolicy",
      "filename": "",
      "line": 0,
      "caller": "test_permits",
      "source_code": ""
    },
    {
      "function": "_registerAuthenticationPolicy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_security.py",
      "line": 629,
      "caller": "test_permits",
      "source_code": "def _registerAuthenticationPolicy(reg, result):\n    from pyramid.interfaces import IAuthenticationPolicy\n\n    policy = DummyAuthenticationPolicy(result)\n    reg.registerUtility(policy, IAuthenticationPolicy)\n    return policy\n\n\n"
    },
    {
      "function": "_registerAuthorizationPolicy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_security.py",
      "line": 637,
      "caller": "test_permits",
      "source_code": "def _registerAuthorizationPolicy(reg, result):\n    from pyramid.interfaces import IAuthorizationPolicy\n\n    policy = DummyAuthorizationPolicy(result)\n    reg.registerUtility(policy, IAuthorizationPolicy)\n    return policy\n\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_permits",
      "source_code": ""
    },
    {
      "function": "policy.permits",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 60,
      "caller": "test_permits",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_permits(self):\n        from pyramid.security import LegacySecurityPolicy\n\n        request = _makeRequest()\n        policy = LegacySecurityPolicy()\n        _registerAuthenticationPolicy(request.registry, ['p1', 'p2'])\n        _registerAuthorizationPolicy(request.registry, True)\n\n        self.assertTrue(policy.permits(request, request.context, 'permission'))"
}