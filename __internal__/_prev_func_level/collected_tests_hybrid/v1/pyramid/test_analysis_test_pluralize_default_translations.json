{
  "test_name": "test_pluralize_default_translations",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_i18n.py",
  "static_methods": [
    {
      "name": "Translations",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "localizer.pluralize",
      "source_code": "    def pluralize(self, singular, plural, n, domain=None, mapping=None):\n        \"\"\"\n        Return a string translation by using two\n        :term:`message identifier` objects as a singular/plural pair\n        and an ``n`` value representing the number that appears in the\n        message using gettext plural forms support.  The ``singular``\n        and ``plural`` objects should be strings. There is no\n        reason to use translation string objects as arguments as all\n        metadata is ignored.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line_number": 68
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Translations",
      "filename": "",
      "line": 0,
      "caller": "test_pluralize_default_translations",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_pluralize_default_translations",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "localizer.pluralize",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line": 68,
      "caller": "test_pluralize_default_translations",
      "source_code": "    def pluralize(self, singular, plural, n, domain=None, mapping=None):\n        \"\"\"\n        Return a string translation by using two\n        :term:`message identifier` objects as a singular/plural pair\n        and an ``n`` value representing the number that appears in the\n        message using gettext plural forms support.  The ``singular``\n        and ``plural`` objects should be strings. There is no\n        reason to use translation string objects as arguments as all\n        metadata is ignored.\n\n        ``n`` represents the number of elements. ``domain`` is the\n        translation domain to use to do the pluralization, and ``mapping``\n        is the interpolation mapping that should be used on the result. If\n        the ``domain`` is not supplied, a default domain is used (usually\n        ``messages``).\n\n        Example::\n\n           num = 1\n           translated = localizer.pluralize('Add ${num} item',\n                                            'Add ${num} items',\n                                            num,\n                                            mapping={'num':num})\n\n        If using the gettext plural support, which is required for\n        languages that have pluralisation rules other than n != 1, the\n        ``singular`` argument must be the message_id defined in the\n        translation file. The plural argument is not used in this case.\n\n        Example::\n\n           num = 1\n           translated = localizer.pluralize('item_plural',\n                                            '',\n                                            num,\n                                            mapping={'num':num})\n\n\n        \"\"\"\n        if self.pluralizer is None:\n            self.pluralizer = Pluralizer(self.translations)\n        return self.pluralizer(\n            singular, plural, n, domain=domain, mapping=mapping\n        )\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_pluralize_default_translations",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pluralize_default_translations(self):\n        # test that even without message ids loaded that\n        # \"localizer.pluralize\" \"works\" instead of raising an inscrutable\n        # \"translations object has no attr 'plural' error; see\n        # see https://github.com/Pylons/pyramid/issues/235\n        from pyramid.i18n import Translations\n\n        translations = Translations()\n        translations._catalog = {}\n        localizer = self._makeOne(None, translations)\n        result = localizer.pluralize(\n            'singular', 'plural', 2, domain='1', mapping={}\n        )\n        self.assertEqual(result, 'plural')"
}