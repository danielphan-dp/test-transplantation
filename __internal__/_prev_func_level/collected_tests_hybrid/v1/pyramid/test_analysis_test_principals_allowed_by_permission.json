{
  "test_name": "test_principals_allowed_by_permission",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_authorization.py",
  "static_methods": [
    {
      "name": "ACLHelper",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helper.principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 614
    },
    {
      "name": "helper.principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 614
    },
    {
      "name": "helper.principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 614
    },
    {
      "name": "helper.principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 614
    }
  ],
  "dynamic_methods": [
    {
      "function": "ACLHelper",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_principals_allowed_by_permission",
      "source_code": ""
    },
    {
      "function": "helper.principals_allowed_by_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 614,
      "caller": "test_principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"\n\n\n"
    },
    {
      "function": "helper.principals_allowed_by_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 614,
      "caller": "test_principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"\n\n\n"
    },
    {
      "function": "helper.principals_allowed_by_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 614,
      "caller": "test_principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"\n\n\n"
    },
    {
      "function": "helper.principals_allowed_by_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 614,
      "caller": "test_principals_allowed_by_permission",
      "source_code": "    def principals_allowed_by_permission(context, permission):\n        \"\"\"Return a set of principal identifiers allowed by the\n        ``permission`` in ``context``.  This behavior is optional; if you\n        choose to not implement it you should define this method as\n        something which raises a ``NotImplementedError``.  This method\n        will only be called when the\n        ``pyramid.security.principals_allowed_by_permission`` API is\n        used.\"\"\"\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_principals_allowed_by_permission(self):\n        from pyramid.authorization import (\n            ALL_PERMISSIONS,\n            DENY_ALL,\n            ACLHelper,\n            Allow,\n            Deny,\n        )\n\n        helper = ACLHelper()\n        root = DummyContext(__name__='', __parent__=None)\n        community = DummyContext(__name__='community', __parent__=root)\n        blog = DummyContext(__name__='blog', __parent__=community)\n        root.__acl__ = [\n            (Allow, 'chrism', ('read', 'write')),\n            (Allow, 'other', ('read',)),\n            (Allow, 'jim', ALL_PERMISSIONS),\n        ]\n        community.__acl__ = [\n            (Deny, 'flooz', 'read'),\n            (Allow, 'flooz', 'read'),\n            (Allow, 'mork', 'read'),\n            (Deny, 'jim', 'read'),\n            (Allow, 'someguy', 'manage'),\n        ]\n        blog.__acl__ = [(Allow, 'fred', 'read'), DENY_ALL]\n\n        result = sorted(helper.principals_allowed_by_permission(blog, 'read'))\n        self.assertEqual(result, ['fred'])\n        result = sorted(\n            helper.principals_allowed_by_permission(community, 'read')\n        )\n        self.assertEqual(result, ['chrism', 'mork', 'other'])\n        result = sorted(\n            helper.principals_allowed_by_permission(community, 'read')\n        )\n        result = sorted(helper.principals_allowed_by_permission(root, 'read'))\n        self.assertEqual(result, ['chrism', 'jim', 'other'])"
}