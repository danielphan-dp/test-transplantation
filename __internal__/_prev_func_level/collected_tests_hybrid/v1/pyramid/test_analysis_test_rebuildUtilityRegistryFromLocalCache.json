{
  "test_name": "test_rebuildUtilityRegistryFromLocalCache",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "new_adapters.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "new_subs.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "comps.rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 518
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comps.rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 518
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comps.rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 518
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comps.rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 518
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comps.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "UtilityImplementingFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "new_adapters.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "new_subs.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "comps.rebuildUtilityRegistryFromLocalCache",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 518,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.\n\n        Most users will never need to call this, but it can be helpful\n        in the event of suspected corruption.\n\n        By default, this method only checks for corruption. To make it\n        actually rebuild the registry, pass `True` for *rebuild*.\n\n        :param bool rebuild: If set to `True` (not the default),\n           this method will actually register and subscribe utilities\n           in the registry as needed to synchronize with the local cache.\n\n        :return: A dictionary that's meant as diagnostic data. The keys\n           and values may change over time. When called with a false\n           *rebuild*, the keys ``\"needed_registered\"`` and\n           ``\"needed_subscribed\"`` will be non-zero if any corruption was\n           detected, but that will not be corrected.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        regs = dict(self._utility_registrations)\n        utils = self.utilities\n        needed_registered = 0\n        did_not_register = 0\n        needed_subscribed = 0\n        did_not_subscribe = 0\n\n        # Avoid the expensive change process during this; we'll call\n        # it once at the end if needed.\n        assert 'changed' not in utils.__dict__\n        utils.changed = lambda _: None\n\n        if rebuild:\n            register = utils.register\n            subscribe = utils.subscribe\n        else:\n            register = subscribe = lambda *args: None\n\n        try:\n            for (provided, name), (value, _info, _factory) in regs.items():\n                if utils.registered((), provided, name) != value:\n                    register((), provided, name, value)\n                    needed_registered += 1\n                else:\n                    did_not_register += 1\n\n                if utils.subscribed((), provided, value) is None:\n                    needed_subscribed += 1\n                    subscribe((), provided, value)\n                else:\n                    did_not_subscribe += 1\n        finally:\n            del utils.changed\n            if rebuild and (needed_subscribed or needed_registered):\n                utils.changed(utils)\n\n        return {\n            'needed_registered': needed_registered,\n            'did_not_register': did_not_register,\n            'needed_subscribed': needed_subscribed,\n            'did_not_subscribe': did_not_subscribe\n        }\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "comps.rebuildUtilityRegistryFromLocalCache",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 518,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.\n\n        Most users will never need to call this, but it can be helpful\n        in the event of suspected corruption.\n\n        By default, this method only checks for corruption. To make it\n        actually rebuild the registry, pass `True` for *rebuild*.\n\n        :param bool rebuild: If set to `True` (not the default),\n           this method will actually register and subscribe utilities\n           in the registry as needed to synchronize with the local cache.\n\n        :return: A dictionary that's meant as diagnostic data. The keys\n           and values may change over time. When called with a false\n           *rebuild*, the keys ``\"needed_registered\"`` and\n           ``\"needed_subscribed\"`` will be non-zero if any corruption was\n           detected, but that will not be corrected.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        regs = dict(self._utility_registrations)\n        utils = self.utilities\n        needed_registered = 0\n        did_not_register = 0\n        needed_subscribed = 0\n        did_not_subscribe = 0\n\n        # Avoid the expensive change process during this; we'll call\n        # it once at the end if needed.\n        assert 'changed' not in utils.__dict__\n        utils.changed = lambda _: None\n\n        if rebuild:\n            register = utils.register\n            subscribe = utils.subscribe\n        else:\n            register = subscribe = lambda *args: None\n\n        try:\n            for (provided, name), (value, _info, _factory) in regs.items():\n                if utils.registered((), provided, name) != value:\n                    register((), provided, name, value)\n                    needed_registered += 1\n                else:\n                    did_not_register += 1\n\n                if utils.subscribed((), provided, value) is None:\n                    needed_subscribed += 1\n                    subscribe((), provided, value)\n                else:\n                    did_not_subscribe += 1\n        finally:\n            del utils.changed\n            if rebuild and (needed_subscribed or needed_registered):\n                utils.changed(utils)\n\n        return {\n            'needed_registered': needed_registered,\n            'did_not_register': did_not_register,\n            'needed_subscribed': needed_subscribed,\n            'did_not_subscribe': did_not_subscribe\n        }\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "comps.rebuildUtilityRegistryFromLocalCache",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 518,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.\n\n        Most users will never need to call this, but it can be helpful\n        in the event of suspected corruption.\n\n        By default, this method only checks for corruption. To make it\n        actually rebuild the registry, pass `True` for *rebuild*.\n\n        :param bool rebuild: If set to `True` (not the default),\n           this method will actually register and subscribe utilities\n           in the registry as needed to synchronize with the local cache.\n\n        :return: A dictionary that's meant as diagnostic data. The keys\n           and values may change over time. When called with a false\n           *rebuild*, the keys ``\"needed_registered\"`` and\n           ``\"needed_subscribed\"`` will be non-zero if any corruption was\n           detected, but that will not be corrected.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        regs = dict(self._utility_registrations)\n        utils = self.utilities\n        needed_registered = 0\n        did_not_register = 0\n        needed_subscribed = 0\n        did_not_subscribe = 0\n\n        # Avoid the expensive change process during this; we'll call\n        # it once at the end if needed.\n        assert 'changed' not in utils.__dict__\n        utils.changed = lambda _: None\n\n        if rebuild:\n            register = utils.register\n            subscribe = utils.subscribe\n        else:\n            register = subscribe = lambda *args: None\n\n        try:\n            for (provided, name), (value, _info, _factory) in regs.items():\n                if utils.registered((), provided, name) != value:\n                    register((), provided, name, value)\n                    needed_registered += 1\n                else:\n                    did_not_register += 1\n\n                if utils.subscribed((), provided, value) is None:\n                    needed_subscribed += 1\n                    subscribe((), provided, value)\n                else:\n                    did_not_subscribe += 1\n        finally:\n            del utils.changed\n            if rebuild and (needed_subscribed or needed_registered):\n                utils.changed(utils)\n\n        return {\n            'needed_registered': needed_registered,\n            'did_not_register': did_not_register,\n            'needed_subscribed': needed_subscribed,\n            'did_not_subscribe': did_not_subscribe\n        }\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "comps.rebuildUtilityRegistryFromLocalCache",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 518,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def rebuildUtilityRegistryFromLocalCache(self, rebuild=False):\n        \"\"\"\n        Emergency maintenance method to rebuild the ``.utilities``\n        registry from the local copy maintained in this object, or\n        detect the need to do so.\n\n        Most users will never need to call this, but it can be helpful\n        in the event of suspected corruption.\n\n        By default, this method only checks for corruption. To make it\n        actually rebuild the registry, pass `True` for *rebuild*.\n\n        :param bool rebuild: If set to `True` (not the default),\n           this method will actually register and subscribe utilities\n           in the registry as needed to synchronize with the local cache.\n\n        :return: A dictionary that's meant as diagnostic data. The keys\n           and values may change over time. When called with a false\n           *rebuild*, the keys ``\"needed_registered\"`` and\n           ``\"needed_subscribed\"`` will be non-zero if any corruption was\n           detected, but that will not be corrected.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        regs = dict(self._utility_registrations)\n        utils = self.utilities\n        needed_registered = 0\n        did_not_register = 0\n        needed_subscribed = 0\n        did_not_subscribe = 0\n\n        # Avoid the expensive change process during this; we'll call\n        # it once at the end if needed.\n        assert 'changed' not in utils.__dict__\n        utils.changed = lambda _: None\n\n        if rebuild:\n            register = utils.register\n            subscribe = utils.subscribe\n        else:\n            register = subscribe = lambda *args: None\n\n        try:\n            for (provided, name), (value, _info, _factory) in regs.items():\n                if utils.registered((), provided, name) != value:\n                    register((), provided, name, value)\n                    needed_registered += 1\n                else:\n                    did_not_register += 1\n\n                if utils.subscribed((), provided, value) is None:\n                    needed_subscribed += 1\n                    subscribe((), provided, value)\n                else:\n                    did_not_subscribe += 1\n        finally:\n            del utils.changed\n            if rebuild and (needed_subscribed or needed_registered):\n                utils.changed(utils)\n\n        return {\n            'needed_registered': needed_registered,\n            'did_not_register': did_not_register,\n            'needed_subscribed': needed_subscribed,\n            'did_not_subscribe': did_not_subscribe\n        }\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "comps.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "UtilityImplementingFoo",
      "filename": "",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rebuildUtilityRegistryFromLocalCache",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_rebuildUtilityRegistryFromLocalCache(self):\n\n        class IFoo(Interface):\n            \"Does nothing\"\n\n        class UtilityImplementingFoo:\n            \"Does nothing\"\n\n        comps = self._makeOne()\n\n        for i in range(30):\n            comps.registerUtility(\n                UtilityImplementingFoo(), IFoo, name=f'{i}'\n            )\n\n        orig_generation = comps.utilities._generation\n\n        orig_adapters = comps.utilities._adapters\n        self.assertEqual(len(orig_adapters), 1)\n        self.assertEqual(len(orig_adapters[0]), 1)\n        self.assertEqual(len(orig_adapters[0][IFoo]), 30)\n\n        orig_subscribers = comps.utilities._subscribers\n        self.assertEqual(len(orig_subscribers), 1)\n        self.assertEqual(len(orig_subscribers[0]), 1)\n        self.assertEqual(len(orig_subscribers[0][IFoo]), 1)\n        self.assertEqual(len(orig_subscribers[0][IFoo]['']), 30)\n\n        # Blow a bunch of them away, creating artificial corruption\n        new_adapters = comps.utilities._adapters = type(orig_adapters)()\n        new_adapters.append({})\n        d = new_adapters[0][IFoo] = {}\n        for name in range(10):\n            name = str(str(name))\n            d[name] = orig_adapters[0][IFoo][name]\n\n        self.assertNotEqual(orig_adapters, new_adapters)\n\n        new_subs = comps.utilities._subscribers = type(orig_subscribers)()\n        new_subs.append({})\n        d = new_subs[0][IFoo] = {}\n        d[''] = ()\n\n        for name in range(5, 12):  # 12 - 5 = 7\n            name = str(str(name))\n            comp = orig_adapters[0][IFoo][name]\n            d[''] += (comp,)\n\n        # We can preflight (by default) and nothing changes\n        rebuild_preflight = comps.rebuildUtilityRegistryFromLocalCache()\n\n        self.assertEqual(comps.utilities._generation, orig_generation)\n        self.assertEqual(rebuild_preflight, {\n            'did_not_register': 10,\n            'needed_registered': 20,\n\n            'did_not_subscribe': 7,\n            'needed_subscribed': 23,\n        })\n\n        # Now for real\n        rebuild_results = comps.rebuildUtilityRegistryFromLocalCache(\n            rebuild=True,\n        )\n\n        # The generation only got incremented once\n        self.assertEqual(comps.utilities._generation, orig_generation + 1)\n        # The result was the same\n        self.assertEqual(rebuild_preflight, rebuild_results)\n        self.assertEqual(new_adapters, orig_adapters)\n        self.assertEqual(\n            len(new_subs[0][IFoo]['']),\n            len(orig_subscribers[0][IFoo]['']))\n\n        for orig_subscriber in orig_subscribers[0][IFoo]['']:\n            self.assertIn(orig_subscriber, new_subs[0][IFoo][''])\n\n        # Preflighting, rebuilding again produce no changes.\n        preflight_after = comps.rebuildUtilityRegistryFromLocalCache()\n        self.assertEqual(preflight_after, {\n            'did_not_register': 30,\n            'needed_registered': 0,\n\n            'did_not_subscribe': 30,\n            'needed_subscribed': 0,\n        })\n\n        rebuild_after = comps.rebuildUtilityRegistryFromLocalCache(\n            rebuild=True,\n        )\n        self.assertEqual(rebuild_after, preflight_after)\n        self.assertEqual(comps.utilities._generation, orig_generation + 1)"
}