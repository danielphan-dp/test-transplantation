{
  "test_name": "test_registerHandler_and_notify",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_registry.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.registerHandler",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1432
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyEvent",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.notify",
      "source_code": "    def notify(*arg, **kw):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "L.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registerHandler_and_notify",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerHandler_and_notify",
      "source_code": ""
    },
    {
      "function": "registry.registerHandler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1432,
      "caller": "test_registerHandler_and_notify",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.\n\n        A handler is a subscriber that doesn't compute an adapter\n        but performs some function when called.\n\n        :param handler:\n            The object used to handle some event represented by\n            the objects passed to it.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param name:\n            The handler name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named handlers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n\n        A `IRegistered` event is generated with an `IHandlerRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerHandler_and_notify",
      "source_code": ""
    },
    {
      "function": "DummyEvent",
      "filename": "",
      "line": 0,
      "caller": "test_registerHandler_and_notify",
      "source_code": ""
    },
    {
      "function": "registry.notify",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 22,
      "caller": "test_registerHandler_and_notify",
      "source_code": "    def notify(*arg, **kw):\n        pass\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerHandler_and_notify",
      "source_code": ""
    },
    {
      "function": "L.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_registerHandler_and_notify",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registerHandler_and_notify(self):\n        registry = self._makeOne()\n        self.assertEqual(registry.has_listeners, False)\n        L = []\n\n        def f(event):\n            L.append(event)\n\n        registry.registerHandler(f, [IDummyEvent])\n        self.assertEqual(registry.has_listeners, True)\n        event = DummyEvent()\n        registry.notify(event)\n        self.assertEqual(L, [event])"
}