{
  "test_name": "test_register_multiple_allRegistrations",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "_makeInterfaces",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 24
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.rebuild",
      "source_code": "    def rebuild(self):\n        \"\"\"\n        Rebuild (and replace) all the internal data structures of this\n        object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line_number": 546
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "L",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "build_adapters",
      "source_code": "        def build_adapters(L, MT):\n            return L([\n                # 0\n                MT({\n                    IR0: MT({\n                        '': 'A1',\n                        'name1': 'A2'\n                    })\n                }),\n                # 1\n                MT({\n                    IB0: MT({\n                        IR0: MT({\n                            '': 'A1',\n                            'name2': 'A2'\n                        }),\n                        IR1: MT({\n                            '': 'A3',\n                            'name3': 'A4'\n                        })\n                    })\n                }),\n                # 3\n                MT({\n                    IB0: MT({\n                        IB1: MT({\n                            IR0: MT({'': 'A1'})\n                        }),\n                        IB2: MT({\n                            IR0: MT({'name2': 'A2'}),\n                            IR1: MT({'name4': 'A4'}),\n                        }),\n                        IB3: MT({\n                            IR1: MT({'': 'A3'})\n                        })\n                    }),\n                }),\n            ])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 265
    },
    {
      "name": "registry.allRegistrations",
      "source_code": "    def allRegistrations(self):\n        \"\"\"\n        Yields tuples ``(required, provided, name, value)`` for all\n        the registrations that this object holds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line_number": 363
    },
    {
      "name": "registry2.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "existing.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "build_adapters",
      "source_code": "        def build_adapters(L, MT):\n            return L([\n                # 0\n                MT({\n                    IR0: MT({\n                        '': 'A1',\n                        'name1': 'A2'\n                    })\n                }),\n                # 1\n                MT({\n                    IB0: MT({\n                        IR0: MT({\n                            '': 'A1',\n                            'name2': 'A2'\n                        }),\n                        IR1: MT({\n                            '': 'A3',\n                            'name3': 'A4'\n                        })\n                    })\n                }),\n                # 3\n                MT({\n                    IB0: MT({\n                        IB1: MT({\n                            IR0: MT({'': 'A1'})\n                        }),\n                        IB2: MT({\n                            IR0: MT({'name2': 'A2'}),\n                            IR1: MT({'name4': 'A4'}),\n                        }),\n                        IB3: MT({\n                            IR1: MT({'': 'A3'})\n                        })\n                    }),\n                }),\n            ])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 265
    },
    {
      "name": "CustomLeafSequence",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._getMutableListType",
      "source_code": "    def _getMutableListType(self):\n        return list",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 157
    },
    {
      "name": "self._getMappingType",
      "source_code": "    def _getMappingType(self):\n        return dict",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 151
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_makeInterfaces",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 24,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface\n\n    class IB0(Interface):\n        pass\n\n    class IB1(IB0):\n        pass\n\n    class IB2(IB0):\n        pass\n\n    class IB3(IB2, IB1):\n        pass\n\n    class IB4(IB1, IB2):\n        pass\n\n    class IF0(Interface):\n        pass\n\n    class IF1(IF0):\n        pass\n\n    class IR0(Interface):\n        pass\n\n    class IR1(IR0):\n        pass\n\n    return IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1\n\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "registry.rebuild",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line": 546,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def rebuild(self):\n        \"\"\"\n        Rebuild (and replace) all the internal data structures of this\n        object.\n\n        This is useful, especially for persistent implementations, if\n        you suspect an issue with reference counts keeping interfaces\n        alive even though they are no longer used.\n\n        It is also useful if you or a subclass change the data types\n        (``_mappingType`` and friends) that are to be used.\n\n        This method replaces all internal data structures with new objects;\n        it specifically does not re-use any storage.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n\n        # Grab the iterators, we're about to discard their data.\n        registrations = self.allRegistrations()\n        subscriptions = self.allSubscriptions()\n\n        def buffer(it):\n            # The generator doesn't actually start running until we\n            # ask for its next(), by which time the attributes will change\n            # unless we do so before calling __init__.\n            try:\n                first = next(it)\n            except StopIteration:\n                return iter(())\n\n            return itertools.chain((first,), it)\n\n        registrations = buffer(registrations)\n        subscriptions = buffer(subscriptions)\n\n        # Replace the base data structures as well as _v_lookup.\n        self.__init__(self.__bases__)\n        # Re-register everything previously registered and subscribed.\n        #\n        # XXX: This is going to call ``self.changed()`` a lot, all of\n        # which is unnecessary (because ``self.__init__`` just\n        # re-created those dependent objects and also called\n        # ``self.changed()``). Is this a bottleneck that needs fixed?\n        # (We could do ``self.changed = lambda _: None`` before\n        # beginning and remove it after to disable the presumably expensive\n        # part of passing that notification to the change of objects.)\n        for args in registrations:\n            self.register(*args)\n\n        for args in subscriptions:\n            self.subscribe(*args)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "L",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "build_adapters",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 265,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "        def build_adapters(L, MT):\n            return L([\n                # 0\n                MT({\n                    IR0: MT({\n                        '': 'A1',\n                        'name1': 'A2'\n                    })\n                }),\n                # 1\n                MT({\n                    IB0: MT({\n                        IR0: MT({\n                            '': 'A1',\n                            'name2': 'A2'\n                        }),\n                        IR1: MT({\n                            '': 'A3',\n                            'name3': 'A4'\n                        })\n                    })\n                }),\n                # 3\n                MT({\n                    IB0: MT({\n                        IB1: MT({\n                            IR0: MT({'': 'A1'})\n                        }),\n                        IB2: MT({\n                            IR0: MT({'name2': 'A2'}),\n                            IR1: MT({'name4': 'A4'}),\n                        }),\n                        IB3: MT({\n                            IR1: MT({'': 'A3'})\n                        })\n                    }),\n                }),\n            ])\n\n"
    },
    {
      "function": "registry.allRegistrations",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line": 363,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def allRegistrations(self):\n        \"\"\"\n        Yields tuples ``(required, provided, name, value)`` for all\n        the registrations that this object holds.\n\n        These tuples could be passed as the arguments to the\n        :meth:`register` method on another adapter registry to\n        duplicate the registrations this object holds.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        yield from self._all_entries(self._adapters)\n\n"
    },
    {
      "function": "registry2.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "existing.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "build_adapters",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 265,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "        def build_adapters(L, MT):\n            return L([\n                # 0\n                MT({\n                    IR0: MT({\n                        '': 'A1',\n                        'name1': 'A2'\n                    })\n                }),\n                # 1\n                MT({\n                    IB0: MT({\n                        IR0: MT({\n                            '': 'A1',\n                            'name2': 'A2'\n                        }),\n                        IR1: MT({\n                            '': 'A3',\n                            'name3': 'A4'\n                        })\n                    })\n                }),\n                # 3\n                MT({\n                    IB0: MT({\n                        IB1: MT({\n                            IR0: MT({'': 'A1'})\n                        }),\n                        IB2: MT({\n                            IR0: MT({'name2': 'A2'}),\n                            IR1: MT({'name4': 'A4'}),\n                        }),\n                        IB3: MT({\n                            IR1: MT({'': 'A3'})\n                        })\n                    }),\n                }),\n            ])\n\n"
    },
    {
      "function": "CustomLeafSequence",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "self._getMutableListType",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 157,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def _getMutableListType(self):\n        return list\n\n"
    },
    {
      "function": "self._getMappingType",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 151,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": "    def _getMappingType(self):\n        return dict\n\n"
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_register_multiple_allRegistrations",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_register_multiple_allRegistrations(self):\n        (\n            IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1,\n        ) = _makeInterfaces()  # pylint:disable=unused-variable\n        registry = self._makeOne()\n        # Use several different depths and several different names\n        registry.register([], IR0, '', 'A1')\n        registry.register([], IR0, 'name1', 'A2')\n\n        registry.register([IB0], IR0, '', 'A1')\n        registry.register([IB0], IR0, 'name2', 'A2')\n        registry.register([IB0], IR1, '', 'A3')\n        registry.register([IB0], IR1, 'name3', 'A4')\n\n        registry.register([IB0, IB1], IR0, '', 'A1')\n        registry.register([IB0, IB2], IR0, 'name2', 'A2')\n        registry.register([IB0, IB2], IR1, 'name4', 'A4')\n        registry.register([IB0, IB3], IR1, '', 'A3')\n\n        def build_adapters(L, MT):\n            return L([\n                # 0\n                MT({\n                    IR0: MT({\n                        '': 'A1',\n                        'name1': 'A2'\n                    })\n                }),\n                # 1\n                MT({\n                    IB0: MT({\n                        IR0: MT({\n                            '': 'A1',\n                            'name2': 'A2'\n                        }),\n                        IR1: MT({\n                            '': 'A3',\n                            'name3': 'A4'\n                        })\n                    })\n                }),\n                # 3\n                MT({\n                    IB0: MT({\n                        IB1: MT({\n                            IR0: MT({'': 'A1'})\n                        }),\n                        IB2: MT({\n                            IR0: MT({'name2': 'A2'}),\n                            IR1: MT({'name4': 'A4'}),\n                        }),\n                        IB3: MT({\n                            IR1: MT({'': 'A3'})\n                        })\n                    }),\n                }),\n            ])\n\n        self.assertEqual(registry._adapters,\n                         build_adapters(L=self._getMutableListType(),\n                                        MT=self._getMappingType()))\n\n        registered = sorted(registry.allRegistrations())\n        self.assertEqual(registered, [\n            ((), IR0, '', 'A1'),\n            ((), IR0, 'name1', 'A2'),\n            ((IB0,), IR0, '', 'A1'),\n            ((IB0,), IR0, 'name2', 'A2'),\n            ((IB0,), IR1, '', 'A3'),\n            ((IB0,), IR1, 'name3', 'A4'),\n            ((IB0, IB1), IR0, '', 'A1'),\n            ((IB0, IB2), IR0, 'name2', 'A2'),\n            ((IB0, IB2), IR1, 'name4', 'A4'),\n            ((IB0, IB3), IR1, '', 'A3')\n        ])\n\n        # We can duplicate to another object.\n        registry2 = self._makeOne()\n        for args in registered:\n            registry2.register(*args)\n\n        self.assertEqual(registry2._adapters, registry._adapters)\n        self.assertEqual(registry2._provided, registry._provided)\n\n        # We can change the types and rebuild the data structures.\n        registry._mappingType = CustomMapping\n        registry._leafSequenceType = CustomLeafSequence\n        registry._sequenceType = CustomSequence\n        registry._providedType = CustomProvided\n\n        def addValue(existing, new):\n            existing = (\n                existing if existing is not None else CustomLeafSequence()\n            )\n            existing.append(new)\n            return existing\n\n        registry._addValueToLeaf = addValue\n\n        registry.rebuild()\n\n        self.assertEqual(registry._adapters,\n                         build_adapters(\n                             L=CustomSequence,\n                             MT=CustomMapping\n                         ))"
}