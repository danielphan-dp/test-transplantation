{
  "test_name": "test_registeredSubscriptionAdapters_notempty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "comp.registerSubscriptionAdapter",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1341
    },
    {
      "name": "comp.registerSubscriptionAdapter",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1341
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.registeredSubscriptionAdapters",
      "source_code": "    def registeredSubscriptionAdapters():\n        \"\"\"Return an iterable of `ISubscriptionAdapterRegistration` instances.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1425
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "comp.registerSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1341,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory implements\n            a single interface, then this argument is optional and\n            the factory-implemented interface will be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "comp.registerSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1341,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory implements\n            a single interface, then this argument is optional and\n            the factory-implemented interface will be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    },
    {
      "function": "comp.registeredSubscriptionAdapters",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1425,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": "    def registeredSubscriptionAdapters():\n        \"\"\"Return an iterable of `ISubscriptionAdapterRegistration` instances.\n\n        These registrations describe the current subscription adapter\n        registrations in the object.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredSubscriptionAdapters_notempty",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registeredSubscriptionAdapters_notempty(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.registry import SubscriptionRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IFoo')\n        _info = 'info'\n        _blank = ''\n\n        class _Factory:\n            pass\n\n        comp = self._makeOne()\n        comp.registerSubscriptionAdapter(_Factory, (ibar,), ifoo, info=_info)\n        comp.registerSubscriptionAdapter(_Factory, (ibar,), ifoo, info=_info)\n        reg = list(comp.registeredSubscriptionAdapters())\n        self.assertEqual(len(reg), 2)\n        self.assertIsInstance(reg[0], SubscriptionRegistration)\n        self.assertIs(reg[0].registry, comp)\n        self.assertIs(reg[0].provided, ifoo)\n        self.assertEqual(reg[0].required, (ibar,))\n        self.assertEqual(reg[0].name, _blank)\n        self.assertIs(reg[0].info, _info)\n        self.assertIs(reg[0].factory, _Factory)\n        self.assertIsInstance(reg[1], SubscriptionRegistration)\n        self.assertIs(reg[1].registry, comp)\n        self.assertIs(reg[1].provided, ifoo)\n        self.assertEqual(reg[1].required, (ibar,))\n        self.assertEqual(reg[1].name, _blank)\n        self.assertIs(reg[1].info, _info)\n        self.assertIs(reg[1].factory, _Factory)"
}