{
  "test_name": "test_registered_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.registered",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 835
    },
    {
      "name": "registry.allRegistrations",
      "source_code": "    def allRegistrations(self):\n        \"\"\"\n        Yields tuples ``(required, provided, name, value)`` for all\n        the registrations that this object holds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line_number": 363
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registered_empty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registered_empty",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registered_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registered_empty",
      "source_code": ""
    },
    {
      "function": "registry.registered",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 835,
      "caller": "test_registered_empty",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name\n\n        name must be text.\n\n        Unlike the lookup method, this methods won't retrieve\n        components registered for more specific required interfaces or\n        less specific provided interfaces.\n\n        If no component was registered exactly for the given\n        interfaces and name, then None is returned.\n\n        \"\"\"\n\n"
    },
    {
      "function": "registry.allRegistrations",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/adapter.py",
      "line": 363,
      "caller": "test_registered_empty",
      "source_code": "    def allRegistrations(self):\n        \"\"\"\n        Yields tuples ``(required, provided, name, value)`` for all\n        the registrations that this object holds.\n\n        These tuples could be passed as the arguments to the\n        :meth:`register` method on another adapter registry to\n        duplicate the registrations this object holds.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n        yield from self._all_entries(self._adapters)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registered_empty(self):\n        registry = self._makeOne()\n        self.assertEqual(registry.registered([None], None, ''), None)\n        registered = list(registry.allRegistrations())\n        self.assertEqual(registered, [])"
}