{
  "test_name": "test_related",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_registry.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyIntrospectable",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyIntrospectable",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "inst.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "inst.relate",
      "source_code": "    def relate(*pairs):\n        \"\"\"Given any number of ``(category_name, discriminator)`` pairs\n        passed as positional arguments, relate the associated introspectables\n        to each other. The introspectable related to each pair must have\n        already been added via ``.add`` or ``.add_intr``; a :exc:`KeyError`\n        will result if this is not true.  An error will not be raised if any\n        pair has already been associated with another.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 1303
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.related",
      "source_code": "    def related(intr):\n        \"\"\"Return a sequence of IIntrospectables related to the\n        IIntrospectable ``intr``. Return the empty sequence if no relations\n        for exist.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 1289
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_related",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyIntrospectable",
      "filename": "",
      "line": 0,
      "caller": "test_related",
      "source_code": ""
    },
    {
      "function": "DummyIntrospectable",
      "filename": "",
      "line": 0,
      "caller": "test_related",
      "source_code": ""
    },
    {
      "function": "inst.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_related",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "inst.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_related",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "inst.relate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 1303,
      "caller": "test_related",
      "source_code": "    def relate(*pairs):\n        \"\"\"Given any number of ``(category_name, discriminator)`` pairs\n        passed as positional arguments, relate the associated introspectables\n        to each other. The introspectable related to each pair must have\n        already been added via ``.add`` or ``.add_intr``; a :exc:`KeyError`\n        will result if this is not true.  An error will not be raised if any\n        pair has already been associated with another.\n\n        This method is not typically called directly, instead it's called\n        indirectly by :meth:`pyramid.interfaces.IIntrospector.register`\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_related",
      "source_code": ""
    },
    {
      "function": "inst.related",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 1289,
      "caller": "test_related",
      "source_code": "    def related(intr):\n        \"\"\"Return a sequence of IIntrospectables related to the\n        IIntrospectable ``intr``. Return the empty sequence if no relations\n        for exist.\"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_related(self):\n        inst = self._makeOne()\n        intr = DummyIntrospectable()\n        intr2 = DummyIntrospectable()\n        intr2.category_name = 'category2'\n        intr2.discriminator = 'discriminator2'\n        intr2.discriminator_hash = 'discriminator2_hash'\n        inst.add(intr)\n        inst.add(intr2)\n        inst.relate(\n            ('category', 'discriminator'), ('category2', 'discriminator2')\n        )\n        self.assertEqual(inst.related(intr), [intr2])"
}