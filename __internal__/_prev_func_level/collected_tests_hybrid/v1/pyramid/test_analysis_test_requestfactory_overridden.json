{
  "test_name": "test_requestfactory_overridden",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
  "static_methods": [
    {
      "name": "get_current_registry",
      "source_code": "def get_current_registry(\n    context=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line_number": 57
    },
    {
      "name": "reg.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "make_traverser",
      "source_code": "def make_traverser(result):\n    class DummyTraverser:\n        def __init__(self, context):\n            self.context = context\n            context.wascontext = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1241
    },
    {
      "name": "self._registerTraverser",
      "source_code": "    def _registerTraverser(self, traverser):\n        from pyramid.threadlocal import get_current_registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 552
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "get_current_registry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line": 57,
      "caller": "test_requestfactory_overridden",
      "source_code": "def get_current_registry(\n    context=None,\n"
    },
    {
      "function": "reg.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_requestfactory_overridden",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_requestfactory_overridden",
      "source_code": ""
    },
    {
      "function": "make_traverser",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1241,
      "caller": "test_requestfactory_overridden",
      "source_code": "def make_traverser(result):\n    class DummyTraverser:\n        def __init__(self, context):\n            self.context = context\n            context.wascontext = True\n\n        def __call__(self, request):\n            self.context.request = request\n            return result\n\n    return DummyTraverser\n\n\n"
    },
    {
      "function": "self._registerTraverser",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 552,
      "caller": "test_requestfactory_overridden",
      "source_code": "    def _registerTraverser(self, traverser):\n        from pyramid.threadlocal import get_current_registry\n\n        reg = get_current_registry()\n        from zope.interface import Interface\n\n        from pyramid.interfaces import ITraverser\n\n        reg.registerAdapter(traverser, (Interface,), ITraverser)\n\n"
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_requestfactory_overridden",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_requestfactory_overridden",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_requestfactory_overridden(self):\n        from pyramid.interfaces import IRequestFactory\n        from pyramid.request import Request\n        from pyramid.threadlocal import get_current_registry\n\n        reg = get_current_registry()\n\n        class MyRequest(Request):\n            pass\n\n        reg.registerUtility(MyRequest, IRequestFactory)\n        resource = DummyContext()\n        traverser = make_traverser({'context': resource, 'view_name': ''})\n        self._registerTraverser(traverser)\n        self._callFUT(resource, [''])\n        self.assertEqual(resource.request.__class__, MyRequest)"
}