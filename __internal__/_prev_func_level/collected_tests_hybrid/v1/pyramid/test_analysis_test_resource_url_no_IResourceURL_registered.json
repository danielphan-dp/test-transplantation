{
  "test_name": "test_resource_url_no_IResourceURL_registered",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_url.py",
  "static_methods": [
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "request.resource_url",
      "source_code": "def resource_url(resource, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line_number": 807
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_no_IResourceURL_registered",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_resource_url_no_IResourceURL_registered",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "request.resource_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line": 807,
      "caller": "test_resource_url_no_IResourceURL_registered",
      "source_code": "def resource_url(resource, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::\n\n        request.resource_url(resource, *elements, **kw)\n\n    See :meth:`pyramid.request.Request.resource_url` for more information.\n    \"\"\"\n    return request.resource_url(resource, *elements, **kw)\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_no_IResourceURL_registered",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_resource_url_no_IResourceURL_registered(self):\n        # falls back to ResourceURL\n        root = DummyContext()\n        root.__name__ = ''\n        root.__parent__ = None\n        request = self._makeOne()\n        request.environ = {}\n        result = request.resource_url(root)\n        self.assertEqual(result, 'http://example.com:5432/')"
}