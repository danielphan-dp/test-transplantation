{
  "test_name": "test_resource_url_with_route_name_and_route_kwargs",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_url.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._registerResourceURL",
      "source_code": "    def _registerResourceURL(self, reg):\n        from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_url.py",
      "line_number": 33
    },
    {
      "name": "DummyRoute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRoutesMapper",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.resource_url",
      "source_code": "def resource_url(resource, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line_number": 807
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._registerResourceURL",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_url.py",
      "line": 33,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": "    def _registerResourceURL(self, reg):\n        from zope.interface import Interface\n\n        from pyramid.interfaces import IResourceURL\n\n        class DummyResourceURL:\n            physical_path = '/context/'\n            virtual_path = '/context/'\n\n            def __init__(self, context, request):\n                pass\n\n        reg.registerAdapter(\n            DummyResourceURL, (Interface, Interface), IResourceURL\n        )\n        return DummyResourceURL\n\n"
    },
    {
      "function": "DummyRoute",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": ""
    },
    {
      "function": "DummyRoutesMapper",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": ""
    },
    {
      "function": "request.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": ""
    },
    {
      "function": "request.resource_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line": 807,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": "def resource_url(resource, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::\n\n        request.resource_url(resource, *elements, **kw)\n\n    See :meth:`pyramid.request.Request.resource_url` for more information.\n    \"\"\"\n    return request.resource_url(resource, *elements, **kw)\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_resource_url_with_route_name_and_route_kwargs",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_resource_url_with_route_name_and_route_kwargs(self):\n        from pyramid.interfaces import IRoutesMapper\n\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'SERVER_PORT': '8080',\n            'SERVER_NAME': 'example.com',\n        }\n        request = self._makeOne(environ)\n        adapter = self._registerResourceURL(request.registry)\n        # virtual_path_tuple on adapter\n        adapter.virtual_path_tuple = ('', 'a', 'b', 'c', '')\n        route = DummyRoute('/1/2/3')\n        mapper = DummyRoutesMapper(route)\n        request.registry.registerUtility(mapper, IRoutesMapper)\n        root = DummyContext()\n        result = request.resource_url(\n            root, route_name='foo', route_kw={'a': '1', 'b': '2'}\n        )\n        self.assertEqual(result, 'http://example.com:5432/1/2/3')\n        self.assertEqual(\n            route.kw, {'traverse': ('', 'a', 'b', 'c', ''), 'a': '1', 'b': '2'}\n        )"
}