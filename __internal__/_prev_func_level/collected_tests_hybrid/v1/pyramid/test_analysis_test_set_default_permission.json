{
  "test_name": "test_set_default_permission",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_security.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.set_default_permission",
      "source_code": "    def set_default_permission(self, permission):\n        \"\"\"\n        Set the default permission to be used by all subsequent\n        :term:`view configuration` registrations.  ``permission``\n        should be a :term:`permission` string to be used as the\n        default permission.  An example of a permission\n        string:``'view'``.  Adding a default permission makes it\n        unnecessary to protect each view configuration with an\n        explicit permission, unless your application policy requires\n        some exception for a particular view.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 180
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_set_default_permission",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.set_default_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 180,
      "caller": "test_set_default_permission",
      "source_code": "    @action_method\n    def set_default_permission(self, permission):\n        \"\"\"\n        Set the default permission to be used by all subsequent\n        :term:`view configuration` registrations.  ``permission``\n        should be a :term:`permission` string to be used as the\n        default permission.  An example of a permission\n        string:``'view'``.  Adding a default permission makes it\n        unnecessary to protect each view configuration with an\n        explicit permission, unless your application policy requires\n        some exception for a particular view.\n\n        If a default permission is *not* set, views represented by\n        view configuration registrations which do not explicitly\n        declare a permission will be executable by entirely anonymous\n        users (any authorization policy is ignored).\n\n        Later calls to this method override will conflict with earlier calls;\n        there can be only one default permission active at a time within an\n        application.\n\n        .. warning::\n\n          If a default permission is in effect, view configurations meant to\n          create a truly anonymously accessible view (even :term:`exception\n          view` views) *must* use the value of the permission importable as\n          :data:`pyramid.security.NO_PERMISSION_REQUIRED`.  When this string\n          is used as the ``permission`` for a view configuration, the default\n          permission is ignored, and the view is registered, making it\n          available to all callers regardless of their credentials.\n\n        .. seealso::\n\n            See also :ref:`setting_a_default_permission`.\n\n        .. note::\n\n           Using the ``default_permission`` argument to the\n           :class:`pyramid.config.Configurator` constructor can be used to\n           achieve the same purpose.\n        \"\"\"\n\n        def register():\n            self.registry.registerUtility(permission, IDefaultPermission)\n\n        intr = self.introspectable(\n            'default permission', None, permission, 'default permission'\n        )\n        intr['value'] = permission\n        perm_intr = self.introspectable(\n            'permissions', permission, permission, 'permission'\n        )\n        perm_intr['value'] = permission\n        # default permission used during view registration (phase 3)\n        self.action(\n            IDefaultPermission,\n            register,\n            order=PHASE1_CONFIG,\n            introspectables=(intr, perm_intr),\n        )\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_set_default_permission",
      "source_code": ""
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_set_default_permission",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_set_default_permission(self):\n        from pyramid.interfaces import IDefaultPermission\n\n        config = self._makeOne(autocommit=True)\n        config.set_default_permission('view')\n        self.assertEqual(\n            config.registry.getUtility(IDefaultPermission), 'view'\n        )"
}