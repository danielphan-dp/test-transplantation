{
  "test_name": "test_set_view_mapper",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config.set_view_mapper",
      "source_code": "    def set_view_mapper(self, mapper):\n        \"\"\"\n        Setting a :term:`view mapper` makes it possible to make use of\n        :term:`view callable` objects which implement different call\n        signatures than the ones supported by :app:`Pyramid` as described in\n        its narrative documentation.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 1895
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_set_view_mapper",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_set_view_mapper",
      "source_code": ""
    },
    {
      "function": "config.set_view_mapper",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 1895,
      "caller": "test_set_view_mapper",
      "source_code": "    @action_method\n    def set_view_mapper(self, mapper):\n        \"\"\"\n        Setting a :term:`view mapper` makes it possible to make use of\n        :term:`view callable` objects which implement different call\n        signatures than the ones supported by :app:`Pyramid` as described in\n        its narrative documentation.\n\n        The ``mapper`` argument should be an object implementing\n        :class:`pyramid.interfaces.IViewMapperFactory` or a :term:`dotted\n        Python name` to such an object.  The provided ``mapper`` will become\n        the default view mapper to be used by all subsequent :term:`view\n        configuration` registrations.\n\n        .. seealso::\n\n            See also :ref:`using_a_view_mapper`.\n\n        .. note::\n\n           Using the ``default_view_mapper`` argument to the\n           :class:`pyramid.config.Configurator` constructor\n           can be used to achieve the same purpose.\n        \"\"\"\n        mapper = self.maybe_dotted(mapper)\n\n        def register():\n            self.registry.registerUtility(mapper, IViewMapperFactory)\n\n        # IViewMapperFactory is looked up as the result of view config\n        # in phase 3\n        intr = self.introspectable(\n            'view mappers',\n            IViewMapperFactory,\n            self.object_description(mapper),\n            'default view mapper',\n        )\n        intr['mapper'] = mapper\n        self.action(\n            IViewMapperFactory,\n            register,\n            order=PHASE1_CONFIG,\n            introspectables=(intr,),\n        )\n\n"
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_set_view_mapper",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_set_view_mapper",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_set_view_mapper(self):\n        from pyramid.interfaces import IViewMapperFactory\n\n        config = self._makeOne(autocommit=True)\n        mapper = object()\n        config.set_view_mapper(mapper)\n        result = config.registry.getUtility(IViewMapperFactory)\n        self.assertEqual(result, mapper)"
}