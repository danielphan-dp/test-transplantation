{
  "test_name": "test_setup_registry_registers_default_exceptionresponse_views",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
  "static_methods": [
    {
      "name": "DummyRegistry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.setup_registry",
      "source_code": "    def setup_registry(\n        self,\n        settings=None,\n        root_factory=None,\n        security_policy=None,\n        authentication_policy=None,\n        authorization_policy=None,\n        renderers=None,\n        debug_logger=None,\n        locale_negotiator=None,\n        request_factory=None,\n        response_factory=None,\n        default_permission=None,\n        session_factory=None,\n        default_view_mapper=None,\n        exceptionresponse_view=default_exceptionresponse_view,\n    ):\n        \"\"\"When you pass a non-``None`` ``registry`` argument to the\n        :term:`Configurator` constructor, no initial setup is performed\n        against the registry.  This is because the registry you pass in may\n        have already been initialized for use under :app:`Pyramid` via a\n        different configurator.  However, in some circumstances (such as when\n        you want to use a global registry instead of a registry created as a\n        result of the Configurator constructor), or when you want to reset\n        the initial setup of a registry, you *do* want to explicitly\n        initialize the registry associated with a Configurator for use under\n        :app:`Pyramid`.  Use ``setup_registry`` to do this initialization.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 320
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "views.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyRegistry",
      "filename": "",
      "line": 0,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.setup_registry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 320,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": "    def setup_registry(\n        self,\n        settings=None,\n        root_factory=None,\n        security_policy=None,\n        authentication_policy=None,\n        authorization_policy=None,\n        renderers=None,\n        debug_logger=None,\n        locale_negotiator=None,\n        request_factory=None,\n        response_factory=None,\n        default_permission=None,\n        session_factory=None,\n        default_view_mapper=None,\n        exceptionresponse_view=default_exceptionresponse_view,\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": ""
    },
    {
      "function": "views.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_setup_registry_registers_default_exceptionresponse_views",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_registry_registers_default_exceptionresponse_views(self):\n        from webob.exc import WSGIHTTPException\n\n        from pyramid.interfaces import IExceptionResponse\n        from pyramid.view import default_exceptionresponse_view\n\n        reg = DummyRegistry()\n        config = self._makeOne(reg)\n        views = []\n        config.add_view = lambda *arg, **kw: views.append((arg, kw))\n        config.add_default_view_predicates = lambda *arg: None\n        config._add_tween = lambda *arg, **kw: False\n        config.setup_registry()\n        self.assertEqual(\n            views[0],\n            (\n                (default_exceptionresponse_view,),\n                {'context': IExceptionResponse},\n            ),\n        )\n        self.assertEqual(\n            views[1],\n            (\n                (default_exceptionresponse_view,),\n                {'context': WSGIHTTPException},\n            ),\n        )"
}