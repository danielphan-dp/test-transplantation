{
  "test_name": "test_subscribers_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "Bar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "comp.subscribers",
      "source_code": "    def subscribers(objects, provided):\n        \"\"\"\n        Get a sequence of subscription **adapters**.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 944
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_empty",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_empty",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_subscribers_empty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_subscribers_empty",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "Bar",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_empty",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscribers_empty",
      "source_code": ""
    },
    {
      "function": "comp.subscribers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 944,
      "caller": "test_subscribers_empty",
      "source_code": "    def subscribers(objects, provided):\n        \"\"\"\n        Get a sequence of subscription **adapters**.\n\n        This is like :meth:`subscriptions`, but calls the returned\n        subscribers with *objects* (and optionally returns the results\n        of those calls), instead of returning the subscribers directly.\n\n        :param objects: A sequence of objects; they will be used to\n            determine the *required* argument to :meth:`subscriptions`.\n        :param provided: A single interface, or ``None``, to pass\n            as the *provided* parameter to :meth:`subscriptions`.\n            If an interface is given, the results of calling each returned\n            subscriber with the the *objects* are collected and returned\n            from this method; each result should be an object implementing\n            the *provided* interface. If ``None``, the resulting subscribers\n            are still called, but the results are ignored.\n        :return: A sequence of the results of calling the subscribers\n            if *provided* is not ``None``. If there are no registered\n            subscribers, or *provided* is ``None``, this will be an empty\n            sequence.\n\n        .. versionchanged:: 5.1.1\n           Correct the method signature to remove the ``name`` parameter.\n           Subscribers have no names.\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscribers_empty(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.declarations import implementer\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IBar')\n        comp = self._makeOne()\n\n        @implementer(ibar)\n        class Bar:\n            pass\n\n        bar = Bar()\n        self.assertEqual(list(comp.subscribers((bar,), ifoo)), [])"
}