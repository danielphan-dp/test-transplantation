{
  "test_name": "test_subscribers_non_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "comp.registerSubscriptionAdapter",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1341
    },
    {
      "name": "comp.registerSubscriptionAdapter",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1341
    },
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "Bar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.subscribers",
      "source_code": "    def subscribers(objects, provided):\n        \"\"\"\n        Get a sequence of subscription **adapters**.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 944
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_subscribers_non_empty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "comp.registerSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1341,
      "caller": "test_subscribers_non_empty",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory implements\n            a single interface, then this argument is optional and\n            the factory-implemented interface will be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "comp.registerSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1341,
      "caller": "test_subscribers_non_empty",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory implements\n            a single interface, then this argument is optional and\n            the factory-implemented interface will be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_subscribers_non_empty",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "Bar",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "comp.subscribers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 944,
      "caller": "test_subscribers_non_empty",
      "source_code": "    def subscribers(objects, provided):\n        \"\"\"\n        Get a sequence of subscription **adapters**.\n\n        This is like :meth:`subscriptions`, but calls the returned\n        subscribers with *objects* (and optionally returns the results\n        of those calls), instead of returning the subscribers directly.\n\n        :param objects: A sequence of objects; they will be used to\n            determine the *required* argument to :meth:`subscriptions`.\n        :param provided: A single interface, or ``None``, to pass\n            as the *provided* parameter to :meth:`subscriptions`.\n            If an interface is given, the results of calling each returned\n            subscriber with the the *objects* are collected and returned\n            from this method; each result should be an object implementing\n            the *provided* interface. If ``None``, the resulting subscribers\n            are still called, but the results are ignored.\n        :return: A sequence of the results of calling the subscribers\n            if *provided* is not ``None``. If there are no registered\n            subscribers, or *provided* is ``None``, this will be an empty\n            sequence.\n\n        .. versionchanged:: 5.1.1\n           Correct the method signature to remove the ``name`` parameter.\n           Subscribers have no names.\n        \"\"\"\n\n"
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscribers_non_empty",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscribers_non_empty(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.declarations import implementer\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IBar')\n\n        class _Factory:\n            __component_adapts__ = (ibar,)\n\n            def __init__(self, context):\n                self._context = context\n\n        class _Derived(_Factory):\n            pass\n\n        comp = self._makeOne()\n        comp.registerSubscriptionAdapter(_Factory, (ibar,), ifoo)\n        comp.registerSubscriptionAdapter(_Derived, (ibar,), ifoo)\n\n        @implementer(ibar)\n        class Bar:\n            pass\n\n        bar = Bar()\n        subscribers = comp.subscribers((bar,), ifoo)\n\n        def _klassname(x):\n            return x.__class__.__name__\n\n        subscribers = sorted(subscribers, key=_klassname)\n        self.assertEqual(len(subscribers), 2)\n        self.assertIsInstance(subscribers[0], _Derived)\n        self.assertIsInstance(subscribers[1], _Factory)"
}