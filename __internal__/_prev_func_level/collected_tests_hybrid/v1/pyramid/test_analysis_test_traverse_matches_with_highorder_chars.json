{
  "test_name": "test_traverse_matches_with_highorder_chars",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_predicates.py",
  "static_methods": [
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pred",
      "source_code": "        def pred(info, request):\n            self.assertEqual(info['match'], {'action': 'action1'})\n            self.assertEqual(info['route'], mapper.routes['foo'])\n            return True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_urldispatch.py",
      "line_number": 200
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": ""
    },
    {
      "function": "pred",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_urldispatch.py",
      "line": 200,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "        def pred(info, request):\n            self.assertEqual(info['match'], {'action': 'action1'})\n            self.assertEqual(info['route'], mapper.routes['foo'])\n            return True\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": ""
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_traverse_matches_with_highorder_chars",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_traverse_matches_with_highorder_chars(self):\n        order, predicates, phash = self._callFUT(\n            traverse=text_(b'/La Pe\\xc3\\xb1a/{x}', 'utf-8')\n        )\n        self.assertEqual(len(predicates), 1)\n        pred = predicates[0]\n        info = {'match': {'x': text_(b'Qu\\xc3\\xa9bec', 'utf-8')}}\n        request = DummyRequest()\n        result = pred(info, request)\n        self.assertEqual(result, True)\n        self.assertEqual(\n            info['match']['traverse'],\n            (\n                text_(b'La Pe\\xc3\\xb1a', 'utf-8'),\n                text_(b'Qu\\xc3\\xa9bec', 'utf-8'),\n            ),\n        )"
}