{
  "test_name": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "comp.registerAdapter",
      "source_code": "    def registerAdapter(factory, required=None, provided=None, name='',\n                        info=''):\n        \"\"\"Register an adapter factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1257
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.unregisterAdapter",
      "source_code": "    def unregisterAdapter(factory=None, required=None,\n                          provided=None, name=''):\n        \"\"\"Unregister an adapter factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1292
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "comp.registerAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1257,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": "    def registerAdapter(factory, required=None, provided=None, name='',\n                        info=''):\n        \"\"\"Register an adapter factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set in class definitions using\n            the `.adapter`\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory\n            implements a single interface, then this argument is\n            optional and the factory-implemented interface will be\n            used.\n\n        :param name:\n            The adapter name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an `IAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    },
    {
      "function": "comp.unregisterAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1292,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": "    def unregisterAdapter(factory=None, required=None,\n                          provided=None, name=''):\n        \"\"\"Unregister an adapter factory\n\n        :returns:\n            A boolean is returned indicating whether the registry was\n            changed.  If the given component is None and there is no\n            component registered, or if the given component is not\n            None and is not registered, then the function returns\n            False, otherwise it returns True.\n\n        :param factory:\n            This is the object used to compute the adapter. The\n            factory can be None, in which case any factory\n            registered to implement the given provided interface\n            for the given required specifications with the given\n            name is unregistered.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If the factory is not None and the required\n            arguments is omitted, then the value of the factory's\n            __component_adapts__ attribute will be used.  The\n            __component_adapts__ attribute attribute is normally\n            set in class definitions using adapts function, or for\n            callables using the adapter decorator.  If the factory\n            is None or doesn't have a __component_adapts__ adapts\n            attribute, then this argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory is not\n            None and implements a single interface, then this\n            argument is optional and the factory-implemented\n            interface will be used.\n\n        :param name:\n            The adapter name.\n\n        An `IUnregistered` event is generated with an `IAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unregisterAdapter_hit_w_explicit_provided_and_required",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unregisterAdapter_hit_w_explicit_provided_and_required(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.interfaces import Unregistered\n        from zope.interface.registry import AdapterRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IBar')\n\n        class _Factory:\n            pass\n\n        comp = self._makeOne()\n        comp.registerAdapter(_Factory, (ibar,), ifoo)\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            unreg = comp.unregisterAdapter(_Factory, (ibar,), ifoo)\n        self.assertTrue(unreg)\n        self.assertFalse(comp.adapters._adapters)\n        self.assertFalse(comp._adapter_registrations)\n        self.assertEqual(len(_events), 1)\n        args, kw = _events[0]\n        event, = args\n        self.assertEqual(kw, {})\n        self.assertIsInstance(event, Unregistered)\n        self.assertIsInstance(event.object, AdapterRegistration)\n        self.assertIs(event.object.registry, comp)\n        self.assertIs(event.object.provided, ifoo)\n        self.assertEqual(event.object.required, (ibar,))\n        self.assertEqual(event.object.name, '')\n        self.assertEqual(event.object.info, '')\n        self.assertIs(event.object.factory, _Factory)"
}