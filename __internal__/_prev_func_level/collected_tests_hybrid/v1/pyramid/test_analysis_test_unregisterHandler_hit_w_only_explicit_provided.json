{
  "test_name": "test_unregisterHandler_hit_w_only_explicit_provided",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "comp.registerHandler",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1432
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsNone",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NotImplementedError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "comp.unregisterHandler",
      "source_code": "    def unregisterHandler(handler=None, required=None, name=''):\n        \"\"\"Unregister a handler.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1467
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "comp.registerHandler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1432,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.\n\n        A handler is a subscriber that doesn't compute an adapter\n        but performs some function when called.\n\n        :param handler:\n            The object used to handle some event represented by\n            the objects passed to it.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param name:\n            The handler name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named handlers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n\n        A `IRegistered` event is generated with an `IHandlerRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsNone",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "NotImplementedError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    },
    {
      "function": "comp.unregisterHandler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1467,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": "    def unregisterHandler(handler=None, required=None, name=''):\n        \"\"\"Unregister a handler.\n\n        A handler is a subscriber that doesn't compute an adapter\n        but performs some function when called.\n\n        :returns: A boolean is returned indicating whether the registry was\n            changed.\n\n        :param handler:\n            This is the object used to handle some event\n            represented by the objects passed to it. The handler\n            can be None, in which case any handlers registered for\n            the given required specifications with the given are\n            unregistered.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param name:\n            The handler name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named handlers is added.\n\n        An `IUnregistered` event is generated with an `IHandlerRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unregisterHandler_hit_w_only_explicit_provided",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unregisterHandler_hit_w_only_explicit_provided(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.interfaces import Unregistered\n        from zope.interface.registry import HandlerRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        comp = self._makeOne()\n\n        def _factory(context):\n            raise NotImplementedError()\n\n        comp = self._makeOne()\n        comp.registerHandler(_factory, (ifoo,))\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            unreg = comp.unregisterHandler(required=(ifoo,))\n        self.assertTrue(unreg)\n        self.assertEqual(len(_events), 1)\n        args, kw = _events[0]\n        event, = args\n        self.assertEqual(kw, {})\n        self.assertIsInstance(event, Unregistered)\n        self.assertIsInstance(event.object, HandlerRegistration)\n        self.assertIs(event.object.registry, comp)\n        self.assertEqual(event.object.required, (ifoo,))\n        self.assertEqual(event.object.name, '')\n        self.assertIsNone(event.object.factory)"
}