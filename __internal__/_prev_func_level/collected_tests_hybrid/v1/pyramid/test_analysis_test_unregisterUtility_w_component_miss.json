{
  "test_name": "test_unregisterUtility_w_component_miss",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.unregisterUtility",
      "source_code": "    def unregisterUtility(component=None, provided=None, name='',\n                          factory=None):\n        \"\"\"Unregister a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1217
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": ""
    },
    {
      "function": "comp.unregisterUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1217,
      "caller": "test_unregisterUtility_w_component_miss",
      "source_code": "    def unregisterUtility(component=None, provided=None, name='',\n                          factory=None):\n        \"\"\"Unregister a utility\n\n        :returns:\n            A boolean is returned indicating whether the registry was\n            changed.  If the given *component* is None and there is no\n            component registered, or if the given *component* is not\n            None and is not registered, then the function returns\n            False, otherwise it returns True.\n\n        :param factory:\n           Factory for the component to be unregistered.\n\n        :param component:\n           The registered component The given component can be\n           None, in which case any component registered to provide\n           the given provided interface with the given name is\n           unregistered.\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component is not None and provides a single interface,\n           then this argument is optional and the\n           component-implemented interface will be used.\n\n        :param name:\n           The utility name.\n\n        Only one of *component* and *factory* can be used.\n        An `IUnregistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unregisterUtility_w_component_miss(self):\n        from zope.interface.declarations import InterfaceClass\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        _name = 'name'\n        _to_reg = object()\n        comp = self._makeOne()\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            unreg = comp.unregisterUtility(_to_reg, ifoo, _name)\n        self.assertFalse(unreg)\n        self.assertFalse(_events)"
}