{
  "test_name": "test_unsubscribe_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "registry.unsubscribe",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 393
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._check_basic_types_of_subscribers",
      "source_code": "    def _check_basic_types_of_subscribers(self, registry, expected_order=2):\n        self.assertEqual(\n            len(registry._subscribers), expected_order,\n        )  # order 0 and order 1\n        self.assertIsInstance(\n            registry._subscribers, self._getMutableListType(),\n        )\n        MT = self._getMappingType()\n        for mapping in registry._subscribers:\n            self.assertIsInstance(mapping, MT)\n        if expected_order:\n            self.assertEqual(registry._subscribers[0], MT())\n            self.assertIsInstance(registry._subscribers[1], MT)\n            self.assertEqual(len(registry._subscribers[expected_order - 1]), 1)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 203
    },
    {
      "name": "registry.registered",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 835
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unsubscribe_empty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "registry.unsubscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 393,
      "caller": "test_unsubscribe_empty",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unsubscribe_empty",
      "source_code": ""
    },
    {
      "function": "self._check_basic_types_of_subscribers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 203,
      "caller": "test_unsubscribe_empty",
      "source_code": "    def _check_basic_types_of_subscribers(self, registry, expected_order=2):\n        self.assertEqual(\n            len(registry._subscribers), expected_order,\n        )  # order 0 and order 1\n        self.assertIsInstance(\n            registry._subscribers, self._getMutableListType(),\n        )\n        MT = self._getMappingType()\n        for mapping in registry._subscribers:\n            self.assertIsInstance(mapping, MT)\n        if expected_order:\n            self.assertEqual(registry._subscribers[0], MT())\n            self.assertIsInstance(registry._subscribers[1], MT)\n            self.assertEqual(len(registry._subscribers[expected_order - 1]), 1)\n\n"
    },
    {
      "function": "registry.registered",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 835,
      "caller": "test_unsubscribe_empty",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name\n\n        name must be text.\n\n        Unlike the lookup method, this methods won't retrieve\n        components registered for more specific required interfaces or\n        less specific provided interfaces.\n\n        If no component was registered exactly for the given\n        interfaces and name, then None is returned.\n\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unsubscribe_empty(self):\n        registry = self._makeOne()\n        registry.unsubscribe([None], None, '')  # doesn't raise\n        self.assertEqual(registry.registered([None], None, ''), None)\n        self._check_basic_types_of_subscribers(registry, expected_order=0)"
}