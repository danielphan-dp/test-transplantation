{
  "test_name": "test_validateInvariants_inherited_not_called_multiple_times",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "base.setTaggedValue",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 120
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "derived.validateInvariants",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 895
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_passable_called_with.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "base.setTaggedValue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 120,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": "    def setTaggedValue(self, tag, value):\n        \"\"\" Associates 'value' with 'key'. \"\"\"\n        if self.__tagged_values is None:\n            self.__tagged_values = {}\n        self.__tagged_values[tag] = value\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "derived.validateInvariants",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 895,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": "    def validateInvariants(self, obj, errors=None):\n        \"\"\"validate object to defined invariants.\"\"\"\n\n        for iface in self.__iro__:\n            for invariant in iface.queryDirectTaggedValue('invariants', ()):\n                try:\n                    invariant(obj)\n                except Invalid as error:\n                    if errors is not None:\n                        errors.append(error)\n                    else:\n                        raise\n\n        if errors:\n            raise Invalid(errors)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": ""
    },
    {
      "function": "_passable_called_with.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_validateInvariants_inherited_not_called_multiple_times",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_validateInvariants_inherited_not_called_multiple_times(self):\n        _passable_called_with = []\n\n        def _passable(*args, **kw):\n            _passable_called_with.append((args, kw))\n            return True\n\n        obj = object()\n        base = self._makeOne('IBase')\n        base.setTaggedValue('invariants', [_passable])\n        derived = self._makeOne('IDerived', (base,))\n        derived.validateInvariants(obj)\n        self.assertEqual(1, len(_passable_called_with))"
}