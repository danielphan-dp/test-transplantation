{
  "test_name": "test_view_with_most_specific_predicate_with_mismatch",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.add_route",
      "source_code": "    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n    ):\n        \"\"\"Add a :term:`route configuration` to the current configuration\n        state.  Arguments to ``add_route`` are divided into *predicate*\n        and *non-predicate* types.  :term:`Route predicate` arguments\n        narrow the circumstances in which a route will match a\n        request; non-predicate arguments are informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line_number": 22
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "Router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "router.handle_request",
      "source_code": "    def handle_request(self, request):\n        attrs = request.__dict__\n        registry = attrs['registry']",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/router.py",
      "line_number": 55
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.add_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line": 22,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    @action_method\n    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n"
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "Router",
      "filename": "",
      "line": 0,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": ""
    },
    {
      "function": "router.handle_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/router.py",
      "line": 55,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": "    def handle_request(self, request):\n        attrs = request.__dict__\n        registry = attrs['registry']\n\n        request.request_iface = IRequest\n        context = None\n        routes_mapper = self.routes_mapper\n        debug_routematch = self.debug_routematch\n        adapters = registry.adapters\n        has_listeners = registry.has_listeners\n        notify = registry.notify\n        logger = self.logger\n\n        has_listeners and notify(NewRequest(request))\n        # find the root object\n        root_factory = self.root_factory\n        if routes_mapper is not None:\n            info = routes_mapper(request)\n            match, route = info['match'], info['route']\n            if route is None:\n                if debug_routematch:\n                    msg = 'no route matched for url %s' % request.url\n                    logger and logger.debug(msg)\n            else:\n                attrs['matchdict'] = match\n                attrs['matched_route'] = route\n\n                if debug_routematch:\n                    msg = (\n                        'route matched for url %s; '\n                        'route_name: %r, '\n                        'path_info: %r, '\n                        'pattern: %r, '\n                        'matchdict: %r, '\n                        'predicates: %r'\n                        % (\n                            request.url,\n                            route.name,\n                            request.path_info,\n                            route.pattern,\n                            match,\n                            ', '.join([p.text() for p in route.predicates]),\n                        )\n                    )\n                    logger and logger.debug(msg)\n\n                request.request_iface = registry.queryUtility(\n                    IRouteRequest, name=route.name, default=IRequest\n                )\n\n                root_factory = route.factory or self.root_factory\n\n        # Notify anyone listening that we are about to start traversal\n        #\n        # Notify before creating root_factory in case we want to do something\n        # special on a route we may have matched. See\n        # https://github.com/Pylons/pyramid/pull/1876 for ideas of what is\n        # possible.\n        has_listeners and notify(BeforeTraversal(request))\n\n        # Create the root factory\n        root = root_factory(request)\n        attrs['root'] = root\n\n        # We are about to traverse and find a context\n        traverser = adapters.queryAdapter(root, ITraverser)\n        if traverser is None:\n            traverser = ResourceTreeTraverser(root)\n        tdict = traverser(request)\n\n        context, view_name, subpath, traversed, vroot, vroot_path = (\n            tdict['context'],\n            tdict['view_name'],\n            tdict['subpath'],\n            tdict['traversed'],\n            tdict['virtual_root'],\n            tdict['virtual_root_path'],\n        )\n\n        attrs.update(tdict)\n\n        # Notify anyone listening that we have a context and traversal is\n        # complete\n        has_listeners and notify(ContextFound(request))\n\n        # find a view callable\n        context_iface = providedBy(context)\n        response = _call_view(\n            registry, request, context, context_iface, view_name\n        )\n\n        if response is None:\n            if self.debug_notfound:\n                msg = (\n                    'debug_notfound of url %s; path_info: %r, '\n                    'context: %r, view_name: %r, subpath: %r, '\n                    'traversed: %r, root: %r, vroot: %r, '\n                    'vroot_path: %r'\n                    % (\n                        request.url,\n                        request.path_info,\n                        context,\n                        view_name,\n                        subpath,\n                        traversed,\n                        root,\n                        vroot,\n                        vroot_path,\n                    )\n                )\n                logger and logger.debug(msg)\n            else:\n                msg = request.path_info\n            raise HTTPNotFound(msg)\n\n        return response\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_view_with_most_specific_predicate_with_mismatch",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_view_with_most_specific_predicate_with_mismatch(self):\n        from pyramid.renderers import null_renderer as nr\n        from pyramid.router import Router\n\n        class OtherBase:\n            pass\n\n        class Int1:\n            pass\n\n        class Int2:\n            pass\n\n        class Resource(OtherBase, Int1, Int2):\n            def __init__(self, request):\n                pass\n\n        def unknown(context, request):  # pragma: no cover\n            return 'unknown'\n\n        def view(context, request):\n            return 'hello'\n\n        config = self._makeOne(autocommit=True)\n        config.add_route('root', '/', factory=Resource)\n\n        config.add_view(\n            unknown,\n            route_name='root',\n            renderer=nr,\n            request_method=('POST',),\n            xhr=True,\n        )\n\n        config.add_view(\n            view,\n            renderer=nr,\n            route_name='root',\n            context=Int1,\n            request_method='GET',\n        )\n        config.add_view(\n            view=view,\n            renderer=nr,\n            route_name='root',\n            context=Int2,\n            request_method='POST',\n        )\n        request = self._makeRequest(config)\n        request.path_info = '/'\n        request.method = 'POST'\n        request.params = {}\n        router = Router(config.registry)\n        response = router.handle_request(request)\n        self.assertEqual(response, 'hello')"
}