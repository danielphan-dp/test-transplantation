{
  "test_name": "test_w_existing_Implements_w_bases",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
  "static_methods": [
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Implements.named",
      "source_code": "    def named(cls, name, *bases):\n        # Implementation method: Produce an Implements interface with a fully\n        # fleshed out __name__ before calling the constructor, which sets\n        # bases to the given interfaces and which may pass this object to\n        # other objects (e.g., to adjust dependents). If they're sorting or\n        # comparing by name, this needs to be set.\n        inst = cls.__new__(cls)\n        inst.__name__ = name\n        inst.__init__(*bases)\n        return inst",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/declarations.py",
      "line_number": 323
    },
    {
      "name": "Implements.named",
      "source_code": "    def named(cls, name, *bases):\n        # Implementation method: Produce an Implements interface with a fully\n        # fleshed out __name__ before calling the constructor, which sets\n        # bases to the given interfaces and which may pass this object to\n        # other objects (e.g., to adjust dependents). If they're sorting or\n        # comparing by name, this needs to be set.\n        inst = cls.__new__(cls)\n        inst.__name__ = name\n        inst.__init__(*bases)\n        return inst",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/declarations.py",
      "line_number": 323
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._order_for_two",
      "source_code": "    def _order_for_two(self, applied_first, applied_second):\n        return (applied_first, applied_second)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
      "line_number": 1051
    },
    {
      "name": "self._order_for_two",
      "source_code": "    def _order_for_two(self, applied_first, applied_second):\n        return (applied_first, applied_second)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
      "line_number": 1051
    }
  ],
  "dynamic_methods": [
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "Implements.named",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/declarations.py",
      "line": 323,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": "    @classmethod\n    def named(cls, name, *bases):\n        # Implementation method: Produce an Implements interface with a fully\n        # fleshed out __name__ before calling the constructor, which sets\n        # bases to the given interfaces and which may pass this object to\n        # other objects (e.g., to adjust dependents). If they're sorting or\n        # comparing by name, this needs to be set.\n        inst = cls.__new__(cls)\n        inst.__name__ = name\n        inst.__init__(*bases)\n        return inst\n\n"
    },
    {
      "function": "Implements.named",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/declarations.py",
      "line": 323,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": "    @classmethod\n    def named(cls, name, *bases):\n        # Implementation method: Produce an Implements interface with a fully\n        # fleshed out __name__ before calling the constructor, which sets\n        # bases to the given interfaces and which may pass this object to\n        # other objects (e.g., to adjust dependents). If they're sorting or\n        # comparing by name, this needs to be set.\n        inst = cls.__new__(cls)\n        inst.__name__ = name\n        inst.__init__(*bases)\n        return inst\n\n"
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": ""
    },
    {
      "function": "self._order_for_two",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
      "line": 1051,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": "    def _order_for_two(self, applied_first, applied_second):\n        return (applied_first, applied_second)\n\n"
    },
    {
      "function": "self._order_for_two",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
      "line": 1051,
      "caller": "test_w_existing_Implements_w_bases",
      "source_code": "    def _order_for_two(self, applied_first, applied_second):\n        return (applied_first, applied_second)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_w_existing_Implements_w_bases(self):\n        from zope.interface.declarations import Implements\n        from zope.interface.interface import InterfaceClass\n        IRoot = InterfaceClass('IRoot')\n        ISecondRoot = InterfaceClass('ISecondRoot')\n        IExtendsRoot = InterfaceClass('IExtendsRoot', (IRoot,))\n\n        impl_root = Implements.named('Root', IRoot)\n        impl_root.declared = (IRoot,)\n\n        class Root1:\n            __implemented__ = impl_root\n\n        class Root2:\n            __implemented__ = impl_root\n\n        impl_extends_root = Implements.named('ExtendsRoot1', IExtendsRoot)\n        impl_extends_root.declared = (IExtendsRoot,)\n\n        class ExtendsRoot(Root1, Root2):\n            __implemented__ = impl_extends_root\n\n        impl_extends_root.inherit = ExtendsRoot\n\n        self._callFUT(ExtendsRoot, ISecondRoot)\n        # Same spec, now different values\n        self.assertIs(ExtendsRoot.__implemented__, impl_extends_root)\n        self.assertEqual(impl_extends_root.inherit, ExtendsRoot)\n        self.assertEqual(impl_extends_root.declared,\n                         self._order_for_two(IExtendsRoot, ISecondRoot,))\n        self.assertEqual(\n            impl_extends_root.__bases__,\n            self._order_for_two(IExtendsRoot, ISecondRoot) + (impl_root,)\n        )"
}