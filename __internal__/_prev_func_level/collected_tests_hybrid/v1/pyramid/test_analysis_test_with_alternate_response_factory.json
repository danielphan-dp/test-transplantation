{
  "test_name": "test_with_alternate_response_factory",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_renderers.py",
  "static_methods": [
    {
      "name": "self.config.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "testing.DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "helper._make_response",
      "source_code": "    def _make_response(self, result, request):\n        # broken out of render_to_response as a separate method for testing\n        # purposes\n        response = getattr(request, 'response', None)\n        if response is None:\n            # request is None or request is not a pyramid.response.Response\n            registry = self.registry\n            response_factory = _get_response_factory(registry)\n            response = response_factory(request)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/renderers.py",
      "line_number": 469
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ResponseFactory",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.config.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_with_alternate_response_factory",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "testing.DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_with_alternate_response_factory",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_with_alternate_response_factory",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "helper._make_response",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/renderers.py",
      "line": 469,
      "caller": "test_with_alternate_response_factory",
      "source_code": "    def _make_response(self, result, request):\n        # broken out of render_to_response as a separate method for testing\n        # purposes\n        response = getattr(request, 'response', None)\n        if response is None:\n            # request is None or request is not a pyramid.response.Response\n            registry = self.registry\n            response_factory = _get_response_factory(registry)\n            response = response_factory(request)\n\n        if result is not None:\n            if isinstance(result, str):\n                response.text = result\n            elif isinstance(result, bytes):\n                response.body = result\n            elif hasattr(result, '__iter__'):\n                response.app_iter = result\n            else:\n                response.body = result\n\n        return response\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_with_alternate_response_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_with_alternate_response_factory",
      "source_code": ""
    },
    {
      "function": "ResponseFactory",
      "filename": "",
      "line": 0,
      "caller": "test_with_alternate_response_factory",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_with_alternate_response_factory(self):\n        from pyramid.interfaces import IResponseFactory\n\n        class ResponseFactory:\n            def __init__(self):\n                pass\n\n        self.config.registry.registerUtility(\n            lambda r: ResponseFactory(), IResponseFactory\n        )\n        request = testing.DummyRequest()\n        helper = self._makeOne('loo.foo')\n        response = helper._make_response(b'abc', request)\n        self.assertEqual(response.__class__, ResponseFactory)\n        self.assertEqual(response.body, b'abc')"
}