{
  "test_name": "test_add_signal_method_handler",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_signals.py",
  "static_methods": [
    {
      "name": "TestSanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ) -> RouteWrapper:\n        \"\"\"Decorate a function to be registered as a route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 42
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "empty",
      "source_code": "    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line_number": 31
    },
    {
      "name": "super.__init__",
      "source_code": "    def __init__(self, getitem):\n        self._getitem = getitem\n        self._name = getitem.__name__\n        self.__doc__ = getitem.__doc__",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 2050
    },
    {
      "name": "self.add_signal",
      "source_code": "    def add_signal(\n        self,\n        handler: Optional[Callable[..., Any]],\n        event: Union[str, Enum],\n        condition: Optional[Dict[str, Any]] = None,\n        exclusive: bool = True,\n    ) -> Callable[..., Any]:\n        \"\"\"Registers a signal handler for a specific event.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/signals.py",
      "line_number": 70
    },
    {
      "name": "super",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "TestSanic",
      "filename": "",
      "line": 0,
      "caller": "test_add_signal_method_handler",
      "source_code": ""
    },
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 42,
      "caller": "test_add_signal_method_handler",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_add_signal_method_handler",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_signal_method_handler",
      "source_code": ""
    },
    {
      "function": "empty",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line": 31,
      "caller": "test_add_signal_method_handler",
      "source_code": "    @classmethod\n    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())\n\n"
    },
    {
      "function": "super.__init__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 2050,
      "caller": "test_add_signal_method_handler",
      "source_code": "    def __init__(self, getitem):\n        self._getitem = getitem\n        self._name = getitem.__name__\n        self.__doc__ = getitem.__doc__\n\n"
    },
    {
      "function": "self.add_signal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/signals.py",
      "line": 70,
      "caller": "test_add_signal_method_handler",
      "source_code": "    def add_signal(\n        self,\n        handler: Optional[Callable[..., Any]],\n        event: Union[str, Enum],\n        condition: Optional[Dict[str, Any]] = None,\n        exclusive: bool = True,\n"
    },
    {
      "function": "super",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_signal_method_handler",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(app.signal_router.routes) == 1",
    "assert counter == 1"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_add_signal_method_handler(app):\n    counter = 0\n\n    class TestSanic(Sanic):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.add_signal(\n                self.after_routing_signal_handler, \"http.routing.after\"\n            )\n\n        def after_routing_signal_handler(self, *args, **kwargs):\n            nonlocal counter\n            counter += 1\n\n    app = TestSanic(\"Test\")\n    assert len(app.signal_router.routes) == 1\n\n    @app.route(\"/\")\n    async def handler(_):\n        return empty()\n\n    app.test_client.get(\"/\")\n    assert counter == 1"
}