{
  "test_name": "test_app_set_context",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "Sanic.get_app",
      "source_code": "    def get_app(\n        cls, name: Optional[str] = None, *, force_create: bool = False\n    ) -> Sanic:\n        \"\"\"Retrieve an instantiated Sanic instance by name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 2176
    }
  ],
  "dynamic_methods": [
    {
      "function": "Sanic.get_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 2176,
      "caller": "test_app_set_context",
      "source_code": "    @classmethod\n    def get_app(\n        cls, name: Optional[str] = None, *, force_create: bool = False\n"
    }
  ],
  "assertions": [
    "assert retrieved.ctx.foo == 1"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_set_context(app: Sanic):\n    app.ctx.foo = 1\n\n    retrieved = Sanic.get_app(app.name)\n    assert retrieved.ctx.foo == 1"
}