{
  "test_name": "test_apply_pyproject_equivalent_to_setupcfg",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "retrieve_file",
      "source_code": "def retrieve_file(url: str, download_dir: Path = DOWNLOAD_DIR, wait: float = 5) -> Path:\n    path = output_file(url, download_dir)\n    if path.exists():\n        print(f\"Skipping {url} (already exists: {path})\")\n    else:\n        download_dir.mkdir(exist_ok=True, parents=True)\n        print(f\"Downloading {url} to {path}\")\n        try:\n            download(url, path)\n        except HTTPError:\n            time.sleep(wait)  # wait a few seconds and try again.\n            download(url, path)\n    return path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/downloads/__init__.py",
      "line_number": 28
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "setupcfg_example.read_text",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n    ) -> str:\n        with open(where(), encoding=encoding) as data:\n            return data.read()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line_number": 91
    },
    {
      "name": "LiteTranslator.translate",
      "source_code": "    def translate(self, pattern):\n        \"\"\"\n        Given a glob pattern, produce a regex that matches it.\n        \"\"\"\n        return self.extend(self.translate_core(pattern))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/glob.py",
      "line_number": 27
    },
    {
      "name": "pyproject_example.write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "pyprojecttoml.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "setupcfg.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "core_metadata",
      "source_code": "def core_metadata(dist) -> str:\n    with io.StringIO() as buffer:\n        dist.metadata.write_pkg_file(buffer)\n        pkg_file_txt = buffer.getvalue()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 486
    },
    {
      "name": "core_metadata",
      "source_code": "def core_metadata(dist) -> str:\n    with io.StringIO() as buffer:\n        dist.metadata.write_pkg_file(buffer)\n        pkg_file_txt = buffer.getvalue()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 486
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "urls_from_file",
      "source_code": "def urls_from_file(list_file: Path) -> list[str]:\n    \"\"\"``list_file`` should be a text file where each line corresponds to a URL to\n    download.\n    \"\"\"\n    print(f\"file: {list_file}\")\n    content = list_file.read_text(encoding=\"utf-8\")\n    return [url for url in content.splitlines() if not url.startswith(\"#\")]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/downloads/__init__.py",
      "line_number": 43
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "makedist",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 33
    },
    {
      "name": "makedist",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 33
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "LiteTranslator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist_toml.entry_points.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "dist_cfg.entry_points.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "dist_toml.package_data.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "dist_cfg.package_data.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "dist_toml.extras_require.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "dist_cfg.extras_require.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "i.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "i.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "retrieve_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/downloads/__init__.py",
      "line": 28,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def retrieve_file(url: str, download_dir: Path = DOWNLOAD_DIR, wait: float = 5) -> Path:\n    path = output_file(url, download_dir)\n    if path.exists():\n        print(f\"Skipping {url} (already exists: {path})\")\n    else:\n        download_dir.mkdir(exist_ok=True, parents=True)\n        print(f\"Downloading {url} to {path}\")\n        try:\n            download(url, path)\n        except HTTPError:\n            time.sleep(wait)  # wait a few seconds and try again.\n            download(url, path)\n    return path\n\n\n"
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "setupcfg_example.read_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line": 91,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n"
    },
    {
      "function": "LiteTranslator.translate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/glob.py",
      "line": 27,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def translate(self, pattern):\n        \"\"\"\n        Given a glob pattern, produce a regex that matches it.\n        \"\"\"\n        return self.extend(self.translate_core(pattern))\n\n"
    },
    {
      "function": "pyproject_example.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "pyprojecttoml.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "setupcfg.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "core_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 486,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def core_metadata(dist) -> str:\n    with io.StringIO() as buffer:\n        dist.metadata.write_pkg_file(buffer)\n        pkg_file_txt = buffer.getvalue()\n\n    # Make sure core metadata is valid\n    Metadata.from_email(pkg_file_txt, validate=True)  # can raise exceptions\n\n    skip_prefixes: tuple[str, ...] = ()\n    skip_lines = set()\n    # ---- DIFF NORMALISATION ----\n    # PEP 621 is very particular about author/maintainer metadata conversion, so skip\n    skip_prefixes += (\"Author:\", \"Author-email:\", \"Maintainer:\", \"Maintainer-email:\")\n    # May be redundant with Home-page\n    skip_prefixes += (\"Project-URL: Homepage,\", \"Home-page:\")\n    # May be missing in original (relying on default) but backfilled in the TOML\n    skip_prefixes += (\"Description-Content-Type:\",)\n    # Remove empty lines\n    skip_lines.add(\"\")\n\n    result = []\n    for line in pkg_file_txt.splitlines():\n        if line.startswith(skip_prefixes) or line in skip_lines:\n            continue\n        result.append(line + \"\\n\")\n\n    return \"\".join(result)\n"
    },
    {
      "function": "core_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 486,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def core_metadata(dist) -> str:\n    with io.StringIO() as buffer:\n        dist.metadata.write_pkg_file(buffer)\n        pkg_file_txt = buffer.getvalue()\n\n    # Make sure core metadata is valid\n    Metadata.from_email(pkg_file_txt, validate=True)  # can raise exceptions\n\n    skip_prefixes: tuple[str, ...] = ()\n    skip_lines = set()\n    # ---- DIFF NORMALISATION ----\n    # PEP 621 is very particular about author/maintainer metadata conversion, so skip\n    skip_prefixes += (\"Author:\", \"Author-email:\", \"Maintainer:\", \"Maintainer-email:\")\n    # May be redundant with Home-page\n    skip_prefixes += (\"Project-URL: Homepage,\", \"Home-page:\")\n    # May be missing in original (relying on default) but backfilled in the TOML\n    skip_prefixes += (\"Description-Content-Type:\",)\n    # Remove empty lines\n    skip_lines.add(\"\")\n\n    result = []\n    for line in pkg_file_txt.splitlines():\n        if line.startswith(skip_prefixes) or line in skip_lines:\n            continue\n        result.append(line + \"\\n\")\n\n    return \"\".join(result)\n"
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "urls_from_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/downloads/__init__.py",
      "line": 43,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def urls_from_file(list_file: Path) -> list[str]:\n    \"\"\"``list_file`` should be a text file where each line corresponds to a URL to\n    download.\n    \"\"\"\n    print(f\"file: {list_file}\")\n    content = list_file.read_text(encoding=\"utf-8\")\n    return [url for url in content.splitlines() if not url.startswith(\"#\")]\n\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "makedist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 33,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})\n\n\n"
    },
    {
      "function": "makedist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 33,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})\n\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "LiteTranslator",
      "filename": "",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "dist_toml.entry_points.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "dist_cfg.entry_points.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "dist_toml.package_data.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "dist_cfg.package_data.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "dist_toml.extras_require.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "dist_cfg.extras_require.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": ""
    },
    {
      "function": "i.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "i.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_apply_pyproject_equivalent_to_setupcfg",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    }
  ],
  "assertions": [
    "assert pkg_info_toml == pkg_info_cfg",
    "assert set(dist_toml.install_requires) == set(dist_cfg.install_requires)",
    "assert set(dist_toml.license_files) == set(dist_cfg.license_files)",
    "assert ep_toml == ep_cfg",
    "assert pkg_data_toml == pkg_data_cfg",
    "assert data_files_toml == data_files_cfg",
    "assert extra_req_toml == extra_req_cfg"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_apply_pyproject_equivalent_to_setupcfg(url, monkeypatch, tmp_path):\n    monkeypatch.setattr(expand, \"read_attr\", Mock(return_value=\"0.0.1\"))\n    setupcfg_example = retrieve_file(url)\n    pyproject_example = Path(tmp_path, \"pyproject.toml\")\n    setupcfg_text = setupcfg_example.read_text(encoding=\"utf-8\")\n    toml_config = LiteTranslator().translate(setupcfg_text, \"setup.cfg\")\n    pyproject_example.write_text(toml_config, encoding=\"utf-8\")\n\n    dist_toml = pyprojecttoml.apply_configuration(makedist(tmp_path), pyproject_example)\n    dist_cfg = setupcfg.apply_configuration(makedist(tmp_path), setupcfg_example)\n\n    pkg_info_toml = core_metadata(dist_toml)\n    pkg_info_cfg = core_metadata(dist_cfg)\n    assert pkg_info_toml == pkg_info_cfg\n\n    if any(getattr(d, \"license_files\", None) for d in (dist_toml, dist_cfg)):\n        assert set(dist_toml.license_files) == set(dist_cfg.license_files)\n\n    if any(getattr(d, \"entry_points\", None) for d in (dist_toml, dist_cfg)):\n        print(dist_cfg.entry_points)\n        ep_toml = {\n            (k, *sorted(i.replace(\" \", \"\") for i in v))\n            for k, v in dist_toml.entry_points.items()\n        }\n        ep_cfg = {\n            (k, *sorted(i.replace(\" \", \"\") for i in v))\n            for k, v in dist_cfg.entry_points.items()\n        }\n        assert ep_toml == ep_cfg\n\n    if any(getattr(d, \"package_data\", None) for d in (dist_toml, dist_cfg)):\n        pkg_data_toml = {(k, *sorted(v)) for k, v in dist_toml.package_data.items()}\n        pkg_data_cfg = {(k, *sorted(v)) for k, v in dist_cfg.package_data.items()}\n        assert pkg_data_toml == pkg_data_cfg\n\n    if any(getattr(d, \"data_files\", None) for d in (dist_toml, dist_cfg)):\n        data_files_toml = {(k, *sorted(v)) for k, v in dist_toml.data_files}\n        data_files_cfg = {(k, *sorted(v)) for k, v in dist_cfg.data_files}\n        assert data_files_toml == data_files_cfg\n\n    assert set(dist_toml.install_requires) == set(dist_cfg.install_requires)\n    if any(getattr(d, \"extras_require\", None) for d in (dist_toml, dist_cfg)):\n        extra_req_toml = {(k, *sorted(v)) for k, v in dist_toml.extras_require.items()}\n        extra_req_cfg = {(k, *sorted(v)) for k, v in dist_cfg.extras_require.items()}\n        assert extra_req_toml == extra_req_cfg"
}