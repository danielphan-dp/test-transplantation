{
  "test_name": "test_bp_copy",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_blueprint_copy.py",
  "static_methods": [
    {
      "name": "Blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "hasattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bp1.route",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ) -> RouteWrapper:\n        \"\"\"Decorate a function to be registered as a route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 42
    },
    {
      "name": "bp1.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    },
    {
      "name": "app.blueprint",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n    ) -> None:\n        \"\"\"Register a blueprint on the application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 856
    },
    {
      "name": "app.blueprint",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n    ) -> None:\n        \"\"\"Register a blueprint on the application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 856
    },
    {
      "name": "bp1.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    },
    {
      "name": "bp1.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    },
    {
      "name": "bp1.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    },
    {
      "name": "app.blueprint",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n    ) -> None:\n        \"\"\"Register a blueprint on the application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 856
    },
    {
      "name": "bp1.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hasattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hasattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "hasattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "bp1.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 42,
      "caller": "test_bp_copy",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "bp1.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_bp_copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    },
    {
      "function": "app.blueprint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 856,
      "caller": "test_bp_copy",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n"
    },
    {
      "function": "app.blueprint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 856,
      "caller": "test_bp_copy",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n"
    },
    {
      "function": "bp1.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_bp_copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    },
    {
      "function": "bp1.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_bp_copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    },
    {
      "function": "bp1.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_bp_copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    },
    {
      "function": "app.blueprint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 856,
      "caller": "test_bp_copy",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n"
    },
    {
      "function": "bp1.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_bp_copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_bp_copy",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_bp_copy",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "hasattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "hasattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bp_copy",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert hasattr(bp1.ctx, 'test')",
    "assert id(bp1) != id(bp2)",
    "assert bp1._apps == bp2._apps == set()",
    "assert not hasattr(bp2.ctx, 'test')",
    "assert len(bp2._future_exceptions) == len(bp1._future_exceptions)",
    "assert len(bp2._future_listeners) == len(bp1._future_listeners)",
    "assert len(bp2._future_middleware) == len(bp1._future_middleware)",
    "assert len(bp2._future_routes) == len(bp1._future_routes)",
    "assert len(bp2._future_signals) == len(bp1._future_signals)",
    "assert id(bp1) != id(bp3)",
    "assert bp1._apps == bp3._apps and bp3._apps",
    "assert not hasattr(bp3.ctx, 'test')",
    "assert id(bp1) != id(bp4)",
    "assert bp4.ctx.test == 1",
    "assert id(bp1) != id(bp5)",
    "assert not bp5._apps",
    "assert bp1._apps != set()",
    "assert bp6._apps",
    "assert bp6.version_prefix == '/version'",
    "assert 'Hello world!' in response.text",
    "assert 'Hello world!' in response.text",
    "assert 'Hello world!' in response.text",
    "assert 'Hello world!' in response.text",
    "assert 'Hello world!' in response.text",
    "assert 'Hello world!' in response.text",
    "assert 'test_bp_copy.test_bp1.handle_request' in route_names",
    "assert 'test_bp_copy.test_bp2.handle_request' in route_names",
    "assert 'test_bp_copy.test_bp3.handle_request' in route_names",
    "assert 'test_bp_copy.test_bp4.handle_request' in route_names",
    "assert 'test_bp_copy.test_bp5.handle_request' in route_names",
    "assert 'test_bp_copy.test_bp6.handle_request' in route_names"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_bp_copy(app: Sanic):\n    bp1 = Blueprint(\"test_bp1\", version=1)\n    bp1.ctx.test = 1\n    assert hasattr(bp1.ctx, \"test\")\n\n    @bp1.route(\"/page\")\n    def handle_request(request):\n        return text(\"Hello world!\")\n\n    bp2 = bp1.copy(name=\"test_bp2\", version=2)\n    assert id(bp1) != id(bp2)\n    assert bp1._apps == bp2._apps == set()\n    assert not hasattr(bp2.ctx, \"test\")\n    assert len(bp2._future_exceptions) == len(bp1._future_exceptions)\n    assert len(bp2._future_listeners) == len(bp1._future_listeners)\n    assert len(bp2._future_middleware) == len(bp1._future_middleware)\n    assert len(bp2._future_routes) == len(bp1._future_routes)\n    assert len(bp2._future_signals) == len(bp1._future_signals)\n\n    app.blueprint(bp1)\n    app.blueprint(bp2)\n\n    bp3 = bp1.copy(name=\"test_bp3\", version=3, with_registration=True)\n    assert id(bp1) != id(bp3)\n    assert bp1._apps == bp3._apps and bp3._apps\n    assert not hasattr(bp3.ctx, \"test\")\n\n    bp4 = bp1.copy(name=\"test_bp4\", version=4, with_ctx=True)\n    assert id(bp1) != id(bp4)\n    assert bp4.ctx.test == 1\n\n    bp5 = bp1.copy(name=\"test_bp5\", version=5, with_registration=False)\n    assert id(bp1) != id(bp5)\n    assert not bp5._apps\n    assert bp1._apps != set()\n\n    app.blueprint(bp5)\n\n    bp6 = bp1.copy(\n        name=\"test_bp6\",\n        version=6,\n        with_registration=True,\n        version_prefix=\"/version\",\n    )\n    assert bp6._apps\n    assert bp6.version_prefix == \"/version\"\n\n    _, response = app.test_client.get(\"/v1/page\")\n    assert \"Hello world!\" in response.text\n\n    _, response = app.test_client.get(\"/v2/page\")\n    assert \"Hello world!\" in response.text\n\n    _, response = app.test_client.get(\"/v3/page\")\n    assert \"Hello world!\" in response.text\n\n    _, response = app.test_client.get(\"/v4/page\")\n    assert \"Hello world!\" in response.text\n\n    _, response = app.test_client.get(\"/v5/page\")\n    assert \"Hello world!\" in response.text\n\n    _, response = app.test_client.get(\"/version6/page\")\n    assert \"Hello world!\" in response.text\n\n    route_names = [route.name for route in app.router.routes]\n    assert \"test_bp_copy.test_bp1.handle_request\" in route_names\n    assert \"test_bp_copy.test_bp2.handle_request\" in route_names\n    assert \"test_bp_copy.test_bp3.handle_request\" in route_names\n    assert \"test_bp_copy.test_bp4.handle_request\" in route_names\n    assert \"test_bp_copy.test_bp5.handle_request\" in route_names\n    assert \"test_bp_copy.test_bp6.handle_request\" in route_names"
}