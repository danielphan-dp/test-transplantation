{
  "test_name": "test_build_with_pyproject_config",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
  "static_methods": [
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ZipFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.get_build_backend",
      "source_code": "    def get_build_backend(self):\n        return BuildBackend(backend_name=self.backend_name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
      "line_number": 226
    },
    {
      "name": "metadata.strip.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "path.build",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 363
    },
    {
      "name": "build_backend.build_sdist",
      "source_code": "    def build_sdist(self, sdist_directory, config_settings=None):\n        \"\"\"Build an sdist from this project.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line_number": 286
    },
    {
      "name": "build_backend.build_wheel",
      "source_code": "    def build_wheel(\n            self, wheel_directory, config_settings=None,\n            metadata_directory=None):\n        \"\"\"Build a wheel from this project.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line_number": 192
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ZipFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "epoints.strip",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2421
    },
    {
      "name": "tar.getnames",
      "source_code": "    def getnames(self):\n        \"\"\"Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        \"\"\"\n        return [tarinfo.name for tarinfo in self.getmembers()]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line_number": 2022
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "metadata.strip",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2421
    },
    {
      "name": "Requirement",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Requirement",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "ZipFile",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "self.get_build_backend",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
      "line": 226,
      "caller": "test_build_with_pyproject_config",
      "source_code": "    def get_build_backend(self):\n        return BuildBackend(backend_name=self.backend_name)\n\n"
    },
    {
      "function": "metadata.strip.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_build_with_pyproject_config",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_build_with_pyproject_config",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "path.build",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 363,
      "caller": "test_build_with_pyproject_config",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}\n\n        libkey = list(filter(lambda o: o in paths, ('purelib', 'platlib')))[0]\n        if libkey == 'platlib':\n            is_pure = 'false'\n            default_pyver = [IMPVER]\n            default_abi = [ABI]\n            default_arch = [ARCH]\n        else:\n            is_pure = 'true'\n            default_pyver = [PYVER]\n            default_abi = ['none']\n            default_arch = ['any']\n\n        self.pyver = tags.get('pyver', default_pyver)\n        self.abi = tags.get('abi', default_abi)\n        self.arch = tags.get('arch', default_arch)\n\n        libdir = paths[libkey]\n\n        name_ver = '%s-%s' % (self.name, self.version)\n        data_dir = '%s.data' % name_ver\n        info_dir = '%s.dist-info' % name_ver\n\n        archive_paths = []\n\n        # First, stuff which is not in site-packages\n        for key in ('data', 'headers', 'scripts'):\n            if key not in paths:\n                continue\n            path = paths[key]\n            if os.path.isdir(path):\n                for root, dirs, files in os.walk(path):\n                    for fn in files:\n                        p = fsdecode(os.path.join(root, fn))\n                        rp = os.path.relpath(p, path)\n                        ap = to_posix(os.path.join(data_dir, key, rp))\n                        archive_paths.append((ap, p))\n                        if key == 'scripts' and not p.endswith('.exe'):\n                            with open(p, 'rb') as f:\n                                data = f.read()\n                            data = self.process_shebang(data)\n                            with open(p, 'wb') as f:\n                                f.write(data)\n\n        # Now, stuff which is in site-packages, other than the\n        # distinfo stuff.\n        path = libdir\n        distinfo = None\n        for root, dirs, files in os.walk(path):\n            if root == path:\n                # At the top level only, save distinfo for later\n                # and skip it for now\n                for i, dn in enumerate(dirs):\n                    dn = fsdecode(dn)\n                    if dn.endswith('.dist-info'):\n                        distinfo = os.path.join(root, dn)\n                        del dirs[i]\n                        break\n                assert distinfo, '.dist-info directory expected, not found'\n\n            for fn in files:\n                # comment out next suite to leave .pyc files in\n                if fsdecode(fn).endswith(('.pyc', '.pyo')):\n                    continue\n                p = os.path.join(root, fn)\n                rp = to_posix(os.path.relpath(p, path))\n                archive_paths.append((rp, p))\n\n        # Now distinfo. Assumed to be flat, i.e. os.listdir is enough.\n        files = os.listdir(distinfo)\n        for fn in files:\n            if fn not in ('RECORD', 'INSTALLER', 'SHARED', 'WHEEL'):\n                p = fsdecode(os.path.join(distinfo, fn))\n                ap = to_posix(os.path.join(info_dir, fn))\n                archive_paths.append((ap, p))\n\n        wheel_metadata = [\n            'Wheel-Version: %d.%d' % (wheel_version or self.wheel_version),\n            'Generator: distlib %s' % __version__,\n            'Root-Is-Purelib: %s' % is_pure,\n        ]\n        for pyver, abi, arch in self.tags:\n            wheel_metadata.append('Tag: %s-%s-%s' % (pyver, abi, arch))\n        p = os.path.join(distinfo, 'WHEEL')\n        with open(p, 'w') as f:\n            f.write('\\n'.join(wheel_metadata))\n        ap = to_posix(os.path.join(info_dir, 'WHEEL'))\n        archive_paths.append((ap, p))\n\n        # sort the entries by archive path. Not needed by any spec, but it\n        # keeps the archive listing and RECORD tidier than they would otherwise\n        # be. Use the number of path segments to keep directory entries together,\n        # and keep the dist-info stuff at the end.\n        def sorter(t):\n            ap = t[0]\n            n = ap.count('/')\n            if '.dist-info' in ap:\n                n += 10000\n            return (n, ap)\n        archive_paths = sorted(archive_paths, key=sorter)\n\n        # Now, at last, RECORD.\n        # Paths in here are archive paths - nothing else makes sense.\n        self.write_records((distinfo, info_dir), libdir, archive_paths)\n        # Now, ready to build the zip file\n        pathname = os.path.join(self.dirname, self.filename)\n        self.build_zip(pathname, archive_paths)\n        return pathname\n\n"
    },
    {
      "function": "build_backend.build_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line": 286,
      "caller": "test_build_with_pyproject_config",
      "source_code": "    def build_sdist(self, sdist_directory, config_settings=None):\n        \"\"\"Build an sdist from this project.\n\n        :returns:\n            The name of the newly created sdist within ``wheel_directory``.\n        \"\"\"\n        return self._call_hook('build_sdist', {\n            'sdist_directory': abspath(sdist_directory),\n            'config_settings': config_settings,\n        })\n\n"
    },
    {
      "function": "build_backend.build_wheel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line": 192,
      "caller": "test_build_with_pyproject_config",
      "source_code": "    def build_wheel(\n            self, wheel_directory, config_settings=None,\n            metadata_directory=None):\n        \"\"\"Build a wheel from this project.\n\n        :returns:\n            The name of the newly created wheel within ``wheel_directory``.\n\n        .. admonition:: Interaction with fallback\n\n            If the ``build_wheel`` hook was called in the fallback for\n            :meth:`prepare_metadata_for_build_wheel`, the build backend would\n            not be invoked. Instead, the previously built wheel will be copied\n            to ``wheel_directory`` and the name of that file will be returned.\n        \"\"\"\n        if metadata_directory is not None:\n            metadata_directory = abspath(metadata_directory)\n        return self._call_hook('build_wheel', {\n            'wheel_directory': abspath(wheel_directory),\n            'config_settings': config_settings,\n            'metadata_directory': metadata_directory,\n        })\n\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "ZipFile",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "epoints.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2421,
      "caller": "test_build_with_pyproject_config",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.\n\n    For example, to remove a set of items from both ends of an iterable:\n\n        >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n        >>> pred = lambda x: x in {None, False, ''}\n        >>> list(strip(iterable, pred))\n        [1, 2, None, 3]\n\n    This function is analogous to :func:`str.strip`.\n\n    \"\"\"\n    return rstrip(lstrip(iterable, pred), pred)\n\n\n"
    },
    {
      "function": "tar.getnames",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line": 2022,
      "caller": "test_build_with_pyproject_config",
      "source_code": "    def getnames(self):\n        \"\"\"Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        \"\"\"\n        return [tarinfo.name for tarinfo in self.getmembers()]\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "metadata.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2421,
      "caller": "test_build_with_pyproject_config",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.\n\n    For example, to remove a set of items from both ends of an iterable:\n\n        >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n        >>> pred = lambda x: x in {None, False, ''}\n        >>> list(strip(iterable, pred))\n        [1, 2, None, 3]\n\n    This function is analogous to :func:`str.strip`.\n\n    \"\"\"\n    return rstrip(lstrip(iterable, pred), pred)\n\n\n"
    },
    {
      "function": "Requirement",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    },
    {
      "function": "Requirement",
      "filename": "",
      "line": 0,
      "caller": "test_build_with_pyproject_config",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert sdist_contents - {'foo-0.1/setup.py'} == {'foo-0.1', 'foo-0.1/LICENSE.txt', 'foo-0.1/MANIFEST.in', 'foo-0.1/PKG-INFO', 'foo-0.1/README.rst', 'foo-0.1/pyproject.toml', 'foo-0.1/setup.cfg', 'foo-0.1/src', 'foo-0.1/src/foo', 'foo-0.1/src/foo/__init__.py', 'foo-0.1/src/foo/__init__.pyi', 'foo-0.1/src/foo/cli.py', 'foo-0.1/src/foo/data.txt', 'foo-0.1/src/foo/py.typed', 'foo-0.1/src/foo.egg-info', 'foo-0.1/src/foo.egg-info/PKG-INFO', 'foo-0.1/src/foo.egg-info/SOURCES.txt', 'foo-0.1/src/foo.egg-info/dependency_links.txt', 'foo-0.1/src/foo.egg-info/entry_points.txt', 'foo-0.1/src/foo.egg-info/requires.txt', 'foo-0.1/src/foo.egg-info/top_level.txt', 'foo-0.1/src/foo.egg-info/not-zip-safe'}",
    "assert wheel_contents == {'foo/__init__.py', 'foo/__init__.pyi', 'foo/cli.py', 'foo/data.txt', 'foo/py.typed', 'foo-0.1.dist-info/LICENSE.txt', 'foo-0.1.dist-info/METADATA', 'foo-0.1.dist-info/WHEEL', 'foo-0.1.dist-info/entry_points.txt', 'foo-0.1.dist-info/top_level.txt', 'foo-0.1.dist-info/RECORD'}",
    "assert license == '---- placeholder MIT license ----'",
    "assert metadata.strip().endswith('This is a ``README``')",
    "assert epoints.strip() == '[console_scripts]\\nfoo = foo.cli:main'",
    "assert line in metadata, (line, metadata)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_build_with_pyproject_config(self, tmpdir, setup_script):\n        files = {\n            'pyproject.toml': DALS(\n                \"\"\"\n                [build-system]\n                requires = [\"setuptools\", \"wheel\"]\n                build-backend = \"setuptools.build_meta\"\n\n                [project]\n                name = \"foo\"\n                license = {text = \"MIT\"}\n                description = \"This is a Python package\"\n                dynamic = [\"version\", \"readme\"]\n                classifiers = [\n                    \"Development Status :: 5 - Production/Stable\",\n                    \"Intended Audience :: Developers\"\n                ]\n                urls = {Homepage = \"http://github.com\"}\n                dependencies = [\n                    \"appdirs\",\n                ]\n\n                [project.optional-dependencies]\n                all = [\n                    \"tomli>=1\",\n                    \"pyscaffold>=4,<5\",\n                    'importlib; python_version == \"2.6\"',\n                ]\n\n                [project.scripts]\n                foo = \"foo.cli:main\"\n\n                [tool.setuptools]\n                zip-safe = false\n                package-dir = {\"\" = \"src\"}\n                packages = {find = {where = [\"src\"]}}\n                license-files = [\"LICENSE*\"]\n\n                [tool.setuptools.dynamic]\n                version = {attr = \"foo.__version__\"}\n                readme = {file = \"README.rst\"}\n\n                [tool.distutils.sdist]\n                formats = \"gztar\"\n                \"\"\"\n            ),\n            \"MANIFEST.in\": DALS(\n                \"\"\"\n                global-include *.py *.txt\n                global-exclude *.py[cod]\n                \"\"\"\n            ),\n            \"README.rst\": \"This is a ``README``\",\n            \"LICENSE.txt\": \"---- placeholder MIT license ----\",\n            \"src\": {\n                \"foo\": {\n                    \"__init__.py\": \"__version__ = '0.1'\",\n                    \"__init__.pyi\": \"__version__: str\",\n                    \"cli.py\": \"def main(): print('hello world')\",\n                    \"data.txt\": \"def main(): print('hello world')\",\n                    \"py.typed\": \"\",\n                }\n            },\n        }\n        if setup_script:\n            files[\"setup.py\"] = setup_script\n\n        build_backend = self.get_build_backend()\n        with tmpdir.as_cwd():\n            path.build(files)\n            sdist_path = build_backend.build_sdist(\"temp\")\n            wheel_file = build_backend.build_wheel(\"temp\")\n\n        with tarfile.open(os.path.join(tmpdir, \"temp\", sdist_path)) as tar:\n            sdist_contents = set(tar.getnames())\n\n        with ZipFile(os.path.join(tmpdir, \"temp\", wheel_file)) as zipfile:\n            wheel_contents = set(zipfile.namelist())\n            metadata = str(zipfile.read(\"foo-0.1.dist-info/METADATA\"), \"utf-8\")\n            license = str(zipfile.read(\"foo-0.1.dist-info/LICENSE.txt\"), \"utf-8\")\n            epoints = str(zipfile.read(\"foo-0.1.dist-info/entry_points.txt\"), \"utf-8\")\n\n        assert sdist_contents - {\"foo-0.1/setup.py\"} == {\n            'foo-0.1',\n            'foo-0.1/LICENSE.txt',\n            'foo-0.1/MANIFEST.in',\n            'foo-0.1/PKG-INFO',\n            'foo-0.1/README.rst',\n            'foo-0.1/pyproject.toml',\n            'foo-0.1/setup.cfg',\n            'foo-0.1/src',\n            'foo-0.1/src/foo',\n            'foo-0.1/src/foo/__init__.py',\n            'foo-0.1/src/foo/__init__.pyi',\n            'foo-0.1/src/foo/cli.py',\n            'foo-0.1/src/foo/data.txt',\n            'foo-0.1/src/foo/py.typed',\n            'foo-0.1/src/foo.egg-info',\n            'foo-0.1/src/foo.egg-info/PKG-INFO',\n            'foo-0.1/src/foo.egg-info/SOURCES.txt',\n            'foo-0.1/src/foo.egg-info/dependency_links.txt',\n            'foo-0.1/src/foo.egg-info/entry_points.txt',\n            'foo-0.1/src/foo.egg-info/requires.txt',\n            'foo-0.1/src/foo.egg-info/top_level.txt',\n            'foo-0.1/src/foo.egg-info/not-zip-safe',\n        }\n        assert wheel_contents == {\n            \"foo/__init__.py\",\n            \"foo/__init__.pyi\",  # include type information by default\n            \"foo/cli.py\",\n            \"foo/data.txt\",  # include_package_data defaults to True\n            \"foo/py.typed\",  # include type information by default\n            \"foo-0.1.dist-info/LICENSE.txt\",\n            \"foo-0.1.dist-info/METADATA\",\n            \"foo-0.1.dist-info/WHEEL\",\n            \"foo-0.1.dist-info/entry_points.txt\",\n            \"foo-0.1.dist-info/top_level.txt\",\n            \"foo-0.1.dist-info/RECORD\",\n        }\n        assert license == \"---- placeholder MIT license ----\"\n\n        for line in (\n            \"Summary: This is a Python package\",\n            \"License: MIT\",\n            \"Classifier: Intended Audience :: Developers\",\n            \"Requires-Dist: appdirs\",\n            \"Requires-Dist: \" + str(Requirement('tomli>=1 ; extra == \"all\"')),\n            \"Requires-Dist: \"\n            + str(Requirement('importlib; python_version==\"2.6\" and extra ==\"all\"')),\n        ):\n            assert line in metadata, (line, metadata)\n\n        assert metadata.strip().endswith(\"This is a ``README``\")\n        assert epoints.strip() == \"[console_scripts]\\nfoo = foo.cli:main\""
}