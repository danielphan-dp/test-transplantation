{
  "test_name": "test_cert_sni_list",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
  "static_methods": [
    {
      "name": "replace_server_name",
      "source_code": "def replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line_number": 106
    },
    {
      "name": "replace_server_name",
      "source_code": "def replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line_number": 106
    },
    {
      "name": "app.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    },
    {
      "name": "replace_server_name",
      "source_code": "def replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line_number": 106
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "replace_server_name",
      "source_code": "def replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line_number": 106
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "request.conn_info.cert.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    }
  ],
  "dynamic_methods": [
    {
      "function": "replace_server_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line": 106,
      "caller": "test_cert_sni_list",
      "source_code": "@contextmanager\ndef replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"\n\n    def hack_wrap_bio(\n        self,\n        incoming,\n        outgoing,\n        server_side=False,\n        server_hostname=None,\n        session=None,\n    ):\n        return orig_wrap_bio(\n            self, incoming, outgoing, server_side, hostname, session\n        )\n\n    orig_wrap_bio, ssl.SSLContext.wrap_bio = (\n        ssl.SSLContext.wrap_bio,\n        hack_wrap_bio,\n    )\n    try:\n        yield\n    finally:\n        ssl.SSLContext.wrap_bio = orig_wrap_bio\n\n\n"
    },
    {
      "function": "replace_server_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line": 106,
      "caller": "test_cert_sni_list",
      "source_code": "@contextmanager\ndef replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"\n\n    def hack_wrap_bio(\n        self,\n        incoming,\n        outgoing,\n        server_side=False,\n        server_hostname=None,\n        session=None,\n    ):\n        return orig_wrap_bio(\n            self, incoming, outgoing, server_side, hostname, session\n        )\n\n    orig_wrap_bio, ssl.SSLContext.wrap_bio = (\n        ssl.SSLContext.wrap_bio,\n        hack_wrap_bio,\n    )\n    try:\n        yield\n    finally:\n        ssl.SSLContext.wrap_bio = orig_wrap_bio\n\n\n"
    },
    {
      "function": "app.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_cert_sni_list",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_cert_sni_list",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    },
    {
      "function": "replace_server_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line": 106,
      "caller": "test_cert_sni_list",
      "source_code": "@contextmanager\ndef replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"\n\n    def hack_wrap_bio(\n        self,\n        incoming,\n        outgoing,\n        server_side=False,\n        server_hostname=None,\n        session=None,\n    ):\n        return orig_wrap_bio(\n            self, incoming, outgoing, server_side, hostname, session\n        )\n\n    orig_wrap_bio, ssl.SSLContext.wrap_bio = (\n        ssl.SSLContext.wrap_bio,\n        hack_wrap_bio,\n    )\n    try:\n        yield\n    finally:\n        ssl.SSLContext.wrap_bio = orig_wrap_bio\n\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "replace_server_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
      "line": 106,
      "caller": "test_cert_sni_list",
      "source_code": "@contextmanager\ndef replace_server_name(hostname):\n    \"\"\"Temporarily replace the server name sent with all TLS requests with\n    a fake hostname.\"\"\"\n\n    def hack_wrap_bio(\n        self,\n        incoming,\n        outgoing,\n        server_side=False,\n        server_hostname=None,\n        session=None,\n    ):\n        return orig_wrap_bio(\n            self, incoming, outgoing, server_side, hostname, session\n        )\n\n    orig_wrap_bio, ssl.SSLContext.wrap_bio = (\n        ssl.SSLContext.wrap_bio,\n        hack_wrap_bio,\n    )\n    try:\n        yield\n    finally:\n        ssl.SSLContext.wrap_bio = orig_wrap_bio\n\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "request.conn_info.cert.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cert_sni_list",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    }
  ],
  "assertions": [
    "assert response.status == 200",
    "assert response.text == 'localhost'",
    "assert response.status == 200",
    "assert response.text == 'localhost'",
    "assert response.status == 200",
    "assert response.text == 'www.sanic.example'",
    "assert response.status == 200",
    "assert response.text == 'sanic.example'",
    "assert response.status == 200",
    "assert response.text == 'invalid.test'",
    "assert response.status == 200",
    "assert response.text == 'sanic.example'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_cert_sni_list(app):\n    ssl_list = [sanic_dir, localhost_dir]\n\n    @app.get(\"/sni\")\n    async def handler1(request):\n        return text(request.conn_info.server_name)\n\n    @app.get(\"/commonname\")\n    async def handler2(request):\n        return text(request.conn_info.cert.get(\"commonName\"))\n\n    # This test should match the localhost cert\n    port = app.test_client.port\n    _, response = app.test_client.get(\n        f\"https://localhost:{port}/sni\",\n        server_kwargs={\"ssl\": ssl_list},\n    )\n    assert response.status == 200\n    assert response.text == \"localhost\"\n\n    request, response = app.test_client.get(\n        f\"https://localhost:{port}/commonname\",\n        server_kwargs={\"ssl\": ssl_list},\n    )\n    assert response.status == 200\n    assert response.text == \"localhost\"\n\n    # This part should use the sanic.example cert because it matches\n    with replace_server_name(\"www.sanic.example\"):\n        _, response = app.test_client.get(\n            f\"https://127.0.0.1:{port}/sni\",\n            server_kwargs={\"ssl\": ssl_list},\n        )\n        assert response.status == 200\n        assert response.text == \"www.sanic.example\"\n\n        _, response = app.test_client.get(\n            f\"https://127.0.0.1:{port}/commonname\",\n            server_kwargs={\"ssl\": ssl_list},\n        )\n        assert response.status == 200\n        assert response.text == \"sanic.example\"\n\n    # This part should use the sanic.example cert, that being the first listed\n    with replace_server_name(\"invalid.test\"):\n        _, response = app.test_client.get(\n            f\"https://127.0.0.1:{port}/sni\",\n            server_kwargs={\"ssl\": ssl_list},\n        )\n        assert response.status == 200\n        assert response.text == \"invalid.test\"\n\n        _, response = app.test_client.get(\n            f\"https://127.0.0.1:{port}/commonname\",\n            server_kwargs={\"ssl\": ssl_list},\n        )\n        assert response.status == 200\n        assert response.text == \"sanic.example\""
}