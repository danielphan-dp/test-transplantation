{
  "test_name": "test_chained_redirect",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_redirect.py",
  "static_methods": [
    {
      "name": "redirect_app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "request.url.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.url.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.url.path.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "redirect_app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_chained_redirect",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "request.url.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_chained_redirect",
      "source_code": ""
    },
    {
      "function": "response.url.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_chained_redirect",
      "source_code": ""
    },
    {
      "function": "response.url.path.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_chained_redirect",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert request.url.endswith('/1')",
    "assert response.status == 200",
    "assert response.text == 'OK'",
    "assert response.url.endswith('/3')",
    "assert response.url.path.endswith('/3')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_chained_redirect(redirect_app):\n    \"\"\"Test test_client is working for redirection\"\"\"\n    request, response = redirect_app.test_client.get(\"/1\")\n    assert request.url.endswith(\"/1\")\n    assert response.status == 200\n    assert response.text == \"OK\"\n    try:\n        assert response.url.endswith(\"/3\")\n    except AttributeError:\n        assert response.url.path.endswith(\"/3\")"
}