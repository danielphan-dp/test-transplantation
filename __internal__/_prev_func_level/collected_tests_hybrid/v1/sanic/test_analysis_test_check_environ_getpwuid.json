{
  "test_name": "test_check_environ_getpwuid",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_util.py",
  "static_methods": [
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "util.check_environ.cache_clear",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "util.check_environ.cache_clear",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "check_environ",
      "source_code": "def check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 165
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "check_environ",
      "source_code": "def check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 165
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "util.check_environ.cache_clear",
      "filename": "",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "util.check_environ.cache_clear",
      "filename": "",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "check_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 165,
      "caller": "test_check_environ_getpwuid",
      "source_code": "@functools.lru_cache\ndef check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n\n"
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_environ_getpwuid",
      "source_code": ""
    },
    {
      "function": "check_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 165,
      "caller": "test_check_environ_getpwuid",
      "source_code": "@functools.lru_cache\ndef check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n\n"
    }
  ],
  "assertions": [
    "assert os.environ['HOME'] == '/home/distutils'",
    "assert 'HOME' not in os.environ"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_check_environ_getpwuid(self):\n        util.check_environ.cache_clear()\n        os.environ.pop('HOME', None)\n\n        import pwd\n\n        # only set pw_dir field, other fields are not used\n        result = pwd.struct_passwd((\n            None,\n            None,\n            None,\n            None,\n            None,\n            '/home/distutils',\n            None,\n        ))\n        with mock.patch.object(pwd, 'getpwuid', return_value=result):\n            check_environ()\n            assert os.environ['HOME'] == '/home/distutils'\n\n        util.check_environ.cache_clear()\n        os.environ.pop('HOME', None)\n\n        # bpo-10496: Catch pwd.getpwuid() error\n        with mock.patch.object(pwd, 'getpwuid', side_effect=KeyError):\n            check_environ()\n            assert 'HOME' not in os.environ"
}