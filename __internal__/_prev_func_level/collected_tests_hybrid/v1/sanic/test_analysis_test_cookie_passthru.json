{
  "test_name": "test_cookie_passthru",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_cookies.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ) -> RouteWrapper:\n        \"\"\"Decorate a function to be registered as a route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 42
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    },
    {
      "name": "response.add_cookie",
      "source_code": "    def add_cookie(\n        self,\n        key: str,\n        value: str,\n        *,\n        path: str = \"/\",\n        domain: Optional[str] = None,\n        secure: bool = True,\n        max_age: Optional[int] = None,\n        expires: Optional[datetime] = None,\n        httponly: bool = False,\n        samesite: Optional[SameSite] = \"Lax\",\n        partitioned: bool = False,\n        comment: Optional[str] = None,\n        host_prefix: bool = False,\n        secure_prefix: bool = False,\n    ) -> Cookie:\n        \"\"\"Add a cookie to the CookieJar",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/response/types.py",
      "line_number": 127
    },
    {
      "name": "response.delete_cookie",
      "source_code": "    def delete_cookie(\n        self,\n        key: str,\n        *,\n        path: str = \"/\",\n        domain: Optional[str] = None,\n        host_prefix: bool = False,\n        secure_prefix: bool = False,\n    ) -> None:\n        \"\"\"Delete a cookie",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/response/types.py",
      "line_number": 182
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "cookie_jar.get_cookie",
      "source_code": "    def get_cookie(request):\n        response = text(\"There's a cookie up in this response\")\n        response.cookies[\"test\"] = \"Cookie1\"\n        response.cookies[\"test\"][\"httponly\"] = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_asgi.py",
      "line_number": 453
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 42,
      "caller": "test_cookie_passthru",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_cookie_passthru",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_cookie_passthru",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    },
    {
      "function": "response.add_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/response/types.py",
      "line": 127,
      "caller": "test_cookie_passthru",
      "source_code": "    def add_cookie(\n        self,\n        key: str,\n        value: str,\n        *,\n        path: str = \"/\",\n        domain: Optional[str] = None,\n        secure: bool = True,\n        max_age: Optional[int] = None,\n        expires: Optional[datetime] = None,\n        httponly: bool = False,\n        samesite: Optional[SameSite] = \"Lax\",\n        partitioned: bool = False,\n        comment: Optional[str] = None,\n        host_prefix: bool = False,\n        secure_prefix: bool = False,\n"
    },
    {
      "function": "response.delete_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/response/types.py",
      "line": 182,
      "caller": "test_cookie_passthru",
      "source_code": "    def delete_cookie(\n        self,\n        key: str,\n        *,\n        path: str = \"/\",\n        domain: Optional[str] = None,\n        host_prefix: bool = False,\n        secure_prefix: bool = False,\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookie_passthru",
      "source_code": ""
    },
    {
      "function": "cookie_jar.get_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_asgi.py",
      "line": 453,
      "caller": "test_cookie_passthru",
      "source_code": "    @app.get(\"/cookie\")\n    def get_cookie(request):\n        response = text(\"There's a cookie up in this response\")\n        response.cookies[\"test\"] = \"Cookie1\"\n        response.cookies[\"test\"][\"httponly\"] = True\n\n        response.cookies[\"c2\"] = \"Cookie2\"\n        response.cookies[\"c2\"][\"httponly\"] = False\n\n        return response\n\n"
    }
  ],
  "assertions": [
    "assert cookie_jar.get_cookie('two', secure_prefix=True).max_age == 0",
    "assert len(response.cookies) == 1",
    "assert response.cookies['__Host-one'] == '1'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_cookie_passthru(app):\n    cookie_jar = None\n\n    @app.route(\"/\")\n    def handler(request):\n        nonlocal cookie_jar\n        response = text(\"OK\")\n        response.add_cookie(\"one\", \"1\", host_prefix=True)\n        response.delete_cookie(\"two\", secure_prefix=True)\n        cookie_jar = response.cookies\n        return response\n\n    _, response = app.test_client.get(\"/\")\n\n    assert cookie_jar.get_cookie(\"two\", secure_prefix=True).max_age == 0\n    assert len(response.cookies) == 1\n    assert response.cookies[\"__Host-one\"] == \"1\""
}