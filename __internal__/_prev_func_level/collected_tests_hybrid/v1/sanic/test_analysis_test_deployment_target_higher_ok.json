{
  "test_name": "test_deployment_target_higher_ok",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "self._try_compile_deployment_target",
      "source_code": "    def _try_compile_deployment_target(self, operator, target):  # pragma: no cover\n        if target is None:\n            if os.environ.get('MACOSX_DEPLOYMENT_TARGET'):\n                del os.environ['MACOSX_DEPLOYMENT_TARGET']\n        else:\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = target",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 493
    },
    {
      "name": "int",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "deptarget.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_deployment_target_higher_ok",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "self._try_compile_deployment_target",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 493,
      "caller": "test_deployment_target_higher_ok",
      "source_code": "    def _try_compile_deployment_target(self, operator, target):  # pragma: no cover\n        if target is None:\n            if os.environ.get('MACOSX_DEPLOYMENT_TARGET'):\n                del os.environ['MACOSX_DEPLOYMENT_TARGET']\n        else:\n            os.environ['MACOSX_DEPLOYMENT_TARGET'] = target\n\n        jaraco.path.build(\n            {\n                'deptargetmodule.c': textwrap.dedent(f\"\"\"\\\n                    #include <AvailabilityMacros.h>\n\n                    int dummy;\n\n                    #if TARGET {operator} MAC_OS_X_VERSION_MIN_REQUIRED\n                    #else\n                    #error \"Unexpected target\"\n                    #endif\n\n                    \"\"\"),\n            },\n            self.tmp_path,\n        )\n\n        # get the deployment target that the interpreter was built with\n        target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')\n        target = tuple(map(int, target.split('.')[0:2]))\n        # format the target value as defined in the Apple\n        # Availability Macros.  We can't use the macro names since\n        # at least one value we test with will not exist yet.\n        if target[:2] < (10, 10):\n            # for 10.1 through 10.9.x -> \"10n0\"\n            target = '%02d%01d0' % target\n        else:\n            # for 10.10 and beyond -> \"10nn00\"\n            if len(target) >= 2:\n                target = '%02d%02d00' % target\n            else:\n                # 11 and later can have no minor version (11 instead of 11.0)\n                target = '%02d0000' % target\n        deptarget_ext = Extension(\n            'deptarget',\n            [self.tmp_path / 'deptargetmodule.c'],\n            extra_compile_args=[f'-DTARGET={target}'],\n        )\n        dist = Distribution({'name': 'deptarget', 'ext_modules': [deptarget_ext]})\n        dist.package_dir = self.tmp_dir\n        cmd = self.build_ext(dist)\n        cmd.build_lib = self.tmp_dir\n        cmd.build_temp = self.tmp_dir\n\n        try:\n            old_stdout = sys.stdout\n            if not support.verbose:\n                # silence compiler output\n                sys.stdout = StringIO()\n            try:\n                cmd.ensure_finalized()\n                cmd.run()\n            finally:\n                sys.stdout = old_stdout\n\n        except CompileError:\n            self.fail(\"Wrong deployment target during compilation\")\n\n\n"
    },
    {
      "function": "int",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_deployment_target_higher_ok",
      "source_code": ""
    },
    {
      "function": "deptarget.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_deployment_target_higher_ok",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_deployment_target_higher_ok",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_deployment_target_higher_ok(self):  # pragma: no cover\n        # Issue 9516: Test that an extension module can be compiled with a\n        # deployment target higher than that of the interpreter: the ext\n        # module may depend on some newer OS feature.\n        deptarget = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')\n        if deptarget:\n            # increment the minor version number (i.e. 10.6 -> 10.7)\n            deptarget = [int(x) for x in deptarget.split('.')]\n            deptarget[-1] += 1\n            deptarget = '.'.join(str(i) for i in deptarget)\n            self._try_compile_deployment_target('<', deptarget)"
}