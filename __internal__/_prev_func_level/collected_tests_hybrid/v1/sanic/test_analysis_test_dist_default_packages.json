{
  "test_name": "test_dist_default_packages",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
  "static_methods": [
    {
      "name": "ensure_files",
      "source_code": "def ensure_files(root_path, files):\n    for file in files:\n        path = root_path / file\n        path.parent.mkdir(parents=True, exist_ok=True)\n        path.touch()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_find_packages.py",
      "line_number": 214
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dist.set_defaults",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dist.set_defaults",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dist.set_defaults",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ensure_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_find_packages.py",
      "line": 214,
      "caller": "test_dist_default_packages",
      "source_code": "def ensure_files(root_path, files):\n    for file in files:\n        path = root_path / file\n        path.parent.mkdir(parents=True, exist_ok=True)\n        path.touch()\n"
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_dist_default_packages",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_dist_default_packages",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "dist.set_defaults",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "dist.set_defaults",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "dist.set_defaults",
      "filename": "",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_default_packages",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not dist.py_modules",
    "assert not dist.py_modules",
    "assert set(dist.packages) == set(packages)",
    "assert not dist.packages",
    "assert set(dist.py_modules) == {'explicit_py_module'}",
    "assert not dist.py_modules",
    "assert set(dist.packages) == {'explicit_package'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dist_default_packages(\n    tmp_path, dist_name, package_dir, package_files, packages\n):\n    ensure_files(tmp_path, package_files)\n\n    (tmp_path / \"setup.py\").touch()\n    (tmp_path / \"noxfile.py\").touch()\n    # ^-- should not be included by default\n\n    attrs = {\n        **EXAMPLE_BASE_INFO,\n        \"name\": dist_name,\n        \"src_root\": str(tmp_path),\n        \"package_dir\": package_dir,\n    }\n    # Find `packages` either corresponding to dist_name or inside src\n    dist = Distribution(attrs)\n    dist.set_defaults()\n    assert not dist.py_modules\n    assert not dist.py_modules\n    assert set(dist.packages) == set(packages)\n    # When `py_modules` is given, don't do anything\n    dist = Distribution({**attrs, \"py_modules\": [\"explicit_py_module\"]})\n    dist.set_defaults()\n    assert not dist.packages\n    assert set(dist.py_modules) == {\"explicit_py_module\"}\n    # When `packages` is given, don't do anything\n    dist = Distribution({**attrs, \"packages\": [\"explicit_package\"]})\n    dist.set_defaults()\n    assert not dist.py_modules\n    assert set(dist.packages) == {\"explicit_package\"}"
}