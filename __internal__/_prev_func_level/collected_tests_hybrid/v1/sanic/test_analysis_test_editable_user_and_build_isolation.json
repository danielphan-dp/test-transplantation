{
  "test_name": "test_editable_user_and_build_isolation",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "user_site.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "sys_prefix.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "run_setup",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 257
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sys_prefix.glob",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line_number": 23
    },
    {
      "name": "user_site.glob",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line_number": 23
    },
    {
      "name": "sys_prefix.glob",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line_number": 23
    },
    {
      "name": "user_site.glob",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line_number": 23
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "user_site.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "sys_prefix.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "run_setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 257,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())\n\n            with DirectorySandbox(setup_dir):\n                ns = dict(__file__=setup_script, __name__='__main__')\n                _execfile(setup_script, ns)\n        except SystemExit as v:\n            if v.args and v.args[0]:\n                raise\n            # Normal exit, just return\n\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": ""
    },
    {
      "function": "sys_prefix.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line": 23,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))\n\n\n"
    },
    {
      "function": "user_site.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line": 23,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))\n\n\n"
    },
    {
      "function": "sys_prefix.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line": 23,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))\n\n\n"
    },
    {
      "function": "user_site.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line": 23,
      "caller": "test_editable_user_and_build_isolation",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))\n\n\n"
    }
  ],
  "assertions": [
    "assert list(sys_prefix.glob('*')) == []",
    "assert list(user_site.glob('*')) == []",
    "assert list(sys_prefix.glob('*')) == []",
    "assert installed == {'aproj.egg-link'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_editable_user_and_build_isolation(setup_context, monkeypatch, tmp_path):\n    \"\"\"`setup.py develop` should honor `--user` even under build isolation\"\"\"\n\n    # == Arrange ==\n    # Pretend that build isolation was enabled\n    # e.g pip sets the environment variable PYTHONNOUSERSITE=1\n    monkeypatch.setattr('site.ENABLE_USER_SITE', False)\n\n    # Patching $HOME for 2 reasons:\n    # 1. setuptools/command/easy_install.py:create_home_path\n    #    tries creating directories in $HOME.\n    #    Given::\n    #        self.config_vars['DESTDIRS'] = (\n    #            \"/home/user/.pyenv/versions/3.9.10 \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib/python3.9 \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib/python3.9/lib-dynload\")\n    #    `create_home_path` will::\n    #        makedirs(\n    #            \"/home/user/.pyenv/versions/3.9.10 \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib/python3.9 \"\n    #            \"/home/user/.pyenv/versions/3.9.10/lib/python3.9/lib-dynload\")\n    #\n    # 2. We are going to force `site` to update site.USER_BASE and site.USER_SITE\n    #    To point inside our new home\n    monkeypatch.setenv('HOME', str(tmp_path / '.home'))\n    monkeypatch.setenv('USERPROFILE', str(tmp_path / '.home'))\n    monkeypatch.setenv('APPDATA', str(tmp_path / '.home'))\n    monkeypatch.setattr('site.USER_BASE', None)\n    monkeypatch.setattr('site.USER_SITE', None)\n    user_site = Path(site.getusersitepackages())\n    user_site.mkdir(parents=True, exist_ok=True)\n\n    sys_prefix = tmp_path / '.sys_prefix'\n    sys_prefix.mkdir(parents=True, exist_ok=True)\n    monkeypatch.setattr('sys.prefix', str(sys_prefix))\n\n    setup_script = (\n        \"__import__('setuptools').setup(name='aproj', version=42, packages=[])\\n\"\n    )\n    (tmp_path / \"setup.py\").write_text(setup_script, encoding=\"utf-8\")\n\n    # == Sanity check ==\n    assert list(sys_prefix.glob(\"*\")) == []\n    assert list(user_site.glob(\"*\")) == []\n\n    # == Act ==\n    run_setup('setup.py', ['develop', '--user'])\n\n    # == Assert ==\n    # Should not install to sys.prefix\n    assert list(sys_prefix.glob(\"*\")) == []\n    # Should install to user site\n    installed = {f.name for f in user_site.glob(\"*\")}\n    # sometimes easy-install.pth is created and sometimes not\n    installed = installed - {\"easy-install.pth\"}\n    assert installed == {'aproj.egg-link'}"
}