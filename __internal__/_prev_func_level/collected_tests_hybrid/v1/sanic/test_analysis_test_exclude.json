{
  "test_name": "test_exclude",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
  "static_methods": [
    {
      "name": "caplog.set_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.process_template_line",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line_number": 334
    },
    {
      "name": "file_list.sort",
      "source_code": "    def sort(self):\n        # Not a strict lexical sort!\n        sortable_files = sorted(map(os.path.split, self.files))\n        self.files = []\n        for sort_tuple in sortable_files:\n            self.files.append(os.path.join(*sort_tuple))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 61
    },
    {
      "name": "self.assertNoWarnings",
      "source_code": "    def assertNoWarnings(self, caplog):\n        assert self.get_records(caplog, log.WARN) == []\n        caplog.clear()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 358
    },
    {
      "name": "file_list.process_template_line",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line_number": 334
    },
    {
      "name": "file_list.sort",
      "source_code": "    def sort(self):\n        # Not a strict lexical sort!\n        sortable_files = sorted(map(os.path.split, self.files))\n        self.files = []\n        for sort_tuple in sortable_files:\n            self.files.append(os.path.join(*sort_tuple))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 61
    },
    {
      "name": "self.assertWarnings",
      "source_code": "    def assertWarnings(self, caplog):\n        if IS_PYPY and not caplog.records:\n            pytest.xfail(\"caplog checks may not work well in PyPy\")\n        else:\n            assert len(self.get_records(caplog, log.WARN)) > 0\n            caplog.clear()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 362
    },
    {
      "name": "ml",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ml",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ml",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.set_level",
      "filename": "",
      "line": 0,
      "caller": "test_exclude",
      "source_code": ""
    },
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_exclude",
      "source_code": ""
    },
    {
      "function": "file_list.process_template_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line": 334,
      "caller": "test_exclude",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)\n\n        action_map: dict[str, Callable] = {\n            'include': self.include,\n            'exclude': self.exclude,\n            'global-include': self.global_include,\n            'global-exclude': self.global_exclude,\n            'recursive-include': functools.partial(\n                self.recursive_include,\n                dir,\n            ),\n            'recursive-exclude': functools.partial(\n                self.recursive_exclude,\n                dir,\n            ),\n            'graft': self.graft,\n            'prune': self.prune,\n        }\n        log_map = {\n            'include': \"warning: no files found matching '%s'\",\n            'exclude': (\"warning: no previously-included files found matching '%s'\"),\n            'global-include': (\n                \"warning: no files found matching '%s' anywhere in distribution\"\n            ),\n            'global-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found anywhere in distribution\"\n            ),\n            'recursive-include': (\n                \"warning: no files found matching '%s' under directory '%s'\"\n            ),\n            'recursive-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found under directory '%s'\"\n            ),\n            'graft': \"warning: no directories found matching '%s'\",\n            'prune': \"no previously-included directories found matching '%s'\",\n        }\n\n        try:\n            process_action = action_map[action]\n        except KeyError:\n            msg = f\"Invalid MANIFEST.in: unknown action {action!r} in {line!r}\"\n            raise DistutilsInternalError(msg) from None\n\n        # OK, now we know that the action is valid and we have the\n        # right number of words on the line for that action -- so we\n        # can proceed with minimal error-checking.\n\n        action_is_recursive = action.startswith('recursive-')\n        if action in {'graft', 'prune'}:\n            patterns = [dir_pattern]\n        extra_log_args = (dir,) if action_is_recursive else ()\n        log_tmpl = log_map[action]\n\n        self.debug_print(\n            ' '.join(\n                [action] + ([dir] if action_is_recursive else []) + patterns,\n            )\n        )\n        for pattern in patterns:\n            if not process_action(pattern):\n                log.warn(log_tmpl, pattern, *extra_log_args)\n\n"
    },
    {
      "function": "file_list.sort",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 61,
      "caller": "test_exclude",
      "source_code": "    def sort(self):\n        # Not a strict lexical sort!\n        sortable_files = sorted(map(os.path.split, self.files))\n        self.files = []\n        for sort_tuple in sortable_files:\n            self.files.append(os.path.join(*sort_tuple))\n\n"
    },
    {
      "function": "self.assertNoWarnings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 358,
      "caller": "test_exclude",
      "source_code": "    def assertNoWarnings(self, caplog):\n        assert self.get_records(caplog, log.WARN) == []\n        caplog.clear()\n\n"
    },
    {
      "function": "file_list.process_template_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line": 334,
      "caller": "test_exclude",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)\n\n        action_map: dict[str, Callable] = {\n            'include': self.include,\n            'exclude': self.exclude,\n            'global-include': self.global_include,\n            'global-exclude': self.global_exclude,\n            'recursive-include': functools.partial(\n                self.recursive_include,\n                dir,\n            ),\n            'recursive-exclude': functools.partial(\n                self.recursive_exclude,\n                dir,\n            ),\n            'graft': self.graft,\n            'prune': self.prune,\n        }\n        log_map = {\n            'include': \"warning: no files found matching '%s'\",\n            'exclude': (\"warning: no previously-included files found matching '%s'\"),\n            'global-include': (\n                \"warning: no files found matching '%s' anywhere in distribution\"\n            ),\n            'global-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found anywhere in distribution\"\n            ),\n            'recursive-include': (\n                \"warning: no files found matching '%s' under directory '%s'\"\n            ),\n            'recursive-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found under directory '%s'\"\n            ),\n            'graft': \"warning: no directories found matching '%s'\",\n            'prune': \"no previously-included directories found matching '%s'\",\n        }\n\n        try:\n            process_action = action_map[action]\n        except KeyError:\n            msg = f\"Invalid MANIFEST.in: unknown action {action!r} in {line!r}\"\n            raise DistutilsInternalError(msg) from None\n\n        # OK, now we know that the action is valid and we have the\n        # right number of words on the line for that action -- so we\n        # can proceed with minimal error-checking.\n\n        action_is_recursive = action.startswith('recursive-')\n        if action in {'graft', 'prune'}:\n            patterns = [dir_pattern]\n        extra_log_args = (dir,) if action_is_recursive else ()\n        log_tmpl = log_map[action]\n\n        self.debug_print(\n            ' '.join(\n                [action] + ([dir] if action_is_recursive else []) + patterns,\n            )\n        )\n        for pattern in patterns:\n            if not process_action(pattern):\n                log.warn(log_tmpl, pattern, *extra_log_args)\n\n"
    },
    {
      "function": "file_list.sort",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 61,
      "caller": "test_exclude",
      "source_code": "    def sort(self):\n        # Not a strict lexical sort!\n        sortable_files = sorted(map(os.path.split, self.files))\n        self.files = []\n        for sort_tuple in sortable_files:\n            self.files.append(os.path.join(*sort_tuple))\n\n"
    },
    {
      "function": "self.assertWarnings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 362,
      "caller": "test_exclude",
      "source_code": "    def assertWarnings(self, caplog):\n        if IS_PYPY and not caplog.records:\n            pytest.xfail(\"caplog checks may not work well in PyPy\")\n        else:\n            assert len(self.get_records(caplog, log.WARN)) > 0\n            caplog.clear()\n\n"
    },
    {
      "function": "ml",
      "filename": "",
      "line": 0,
      "caller": "test_exclude",
      "source_code": ""
    },
    {
      "function": "ml",
      "filename": "",
      "line": 0,
      "caller": "test_exclude",
      "source_code": ""
    },
    {
      "function": "ml",
      "filename": "",
      "line": 0,
      "caller": "test_exclude",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert file_list.files == ['b.txt', ml('d/c.py')]",
    "assert file_list.files == ['b.txt', ml('d/c.py')]"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_exclude(self, caplog):\n        caplog.set_level(logging.DEBUG)\n        ml = make_local_path\n        # exclude\n        file_list = FileList()\n        file_list.files = ['a.py', 'b.txt', ml('d/c.py')]\n\n        file_list.process_template_line('exclude *.py')\n        file_list.sort()\n        assert file_list.files == ['b.txt', ml('d/c.py')]\n        self.assertNoWarnings(caplog)\n\n        file_list.process_template_line('exclude *.rb')\n        file_list.sort()\n        assert file_list.files == ['b.txt', ml('d/c.py')]\n        self.assertWarnings(caplog)"
}