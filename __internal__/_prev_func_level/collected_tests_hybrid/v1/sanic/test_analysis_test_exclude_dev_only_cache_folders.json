{
  "test_name": "test_exclude_dev_only_cache_folders",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
  "static_methods": [
    {
      "name": "items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "self.setup_with_extension",
      "source_code": "    def setup_with_extension(self):\n        setup_attrs = {**SETUP_ATTRS, 'ext_modules': [EXTENSION]}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line_number": 165
    },
    {
      "name": "self.assert_package_data_in_manifest",
      "source_code": "    def assert_package_data_in_manifest(self, cmd):\n        manifest = cmd.filelist.files\n        assert os.path.join('sdist_test', 'a.txt') in manifest\n        assert os.path.join('sdist_test', 'b.txt') in manifest\n        assert os.path.join('sdist_test', 'c.rst') not in manifest\n        assert os.path.join('d', 'e.dat') in manifest",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line_number": 158
    },
    {
      "name": "Path.parent.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "Path.write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "f.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "self.setup_with_extension",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line": 165,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "    def setup_with_extension(self):\n        setup_attrs = {**SETUP_ATTRS, 'ext_modules': [EXTENSION]}\n\n        dist = Distribution(setup_attrs)\n        dist.script_name = 'setup.py'\n        cmd = sdist(dist)\n        cmd.ensure_finalized()\n\n        with quiet():\n            cmd.run()\n\n        return cmd\n\n"
    },
    {
      "function": "self.assert_package_data_in_manifest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line": 158,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "    def assert_package_data_in_manifest(self, cmd):\n        manifest = cmd.filelist.files\n        assert os.path.join('sdist_test', 'a.txt') in manifest\n        assert os.path.join('sdist_test', 'b.txt') in manifest\n        assert os.path.join('sdist_test', 'c.rst') not in manifest\n        assert os.path.join('d', 'e.dat') in manifest\n\n"
    },
    {
      "function": "Path.parent.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "Path.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "f.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_exclude_dev_only_cache_folders",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert os.path.exists(path)",
    "assert path not in manifest, (path, manifest)",
    "assert os.path.exists(path)",
    "assert path in manifest, (path, manifest)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_exclude_dev_only_cache_folders(self, source_dir):\n        included = {\n            # Emulate problem in https://github.com/pypa/setuptools/issues/4601\n            \"MANIFEST.in\": (\n                \"global-include LICEN[CS]E* COPYING* NOTICE* AUTHORS*\\n\"\n                \"global-include *.txt\\n\"\n            ),\n            # For the sake of being conservative and limiting unforeseen side-effects\n            # we just exclude dev-only cache folders at the root of the repository:\n            \"test/.venv/lib/python3.9/site-packages/bar-2.dist-info/AUTHORS.rst\": \"\",\n            \"src/.nox/py/lib/python3.12/site-packages/bar-2.dist-info/COPYING.txt\": \"\",\n            \"doc/.tox/default/lib/python3.11/site-packages/foo-4.dist-info/LICENSE\": \"\",\n            # Let's test against false positives with similarly named files:\n            \".venv-requirements.txt\": \"\",\n            \".tox-coveragerc.txt\": \"\",\n            \".noxy/coveragerc.txt\": \"\",\n        }\n\n        excluded = {\n            # .tox/.nox/.venv are well-know folders present at the root of Python repos\n            # and therefore should be excluded\n            \".tox/release/lib/python3.11/site-packages/foo-4.dist-info/LICENSE\": \"\",\n            \".nox/py/lib/python3.12/site-packages/bar-2.dist-info/COPYING.txt\": \"\",\n            \".venv/lib/python3.9/site-packages/bar-2.dist-info/AUTHORS.rst\": \"\",\n        }\n\n        for file, content in {**excluded, **included}.items():\n            Path(source_dir, file).parent.mkdir(parents=True, exist_ok=True)\n            Path(source_dir, file).write_text(content, encoding=\"utf-8\")\n\n        cmd = self.setup_with_extension()\n        self.assert_package_data_in_manifest(cmd)\n        manifest = {f.replace(os.sep, '/') for f in cmd.filelist.files}\n        for path in excluded:\n            assert os.path.exists(path)\n            assert path not in manifest, (path, manifest)\n        for path in included:\n            assert os.path.exists(path)\n            assert path in manifest, (path, manifest)"
}