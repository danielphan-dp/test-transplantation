{
  "test_name": "test_executable_arg_escaping_win32",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_install_scripts.py",
  "static_methods": [
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._run_install_scripts",
      "source_code": "    def _run_install_scripts(self, install_dir, executable=None):\n        dist = Distribution(self.settings)\n        dist.script_name = 'setup.py'\n        cmd = install_scripts(dist)\n        cmd.install_dir = install_dir\n        if executable is not None:\n            bs = cmd.get_finalized_command('build_scripts')\n            bs.executable = executable\n        cmd.ensure_finalized()\n        with contexts.quiet():\n            cmd.run()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_install_scripts.py",
      "line_number": 23
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.readline",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 32
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tmpdir.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    }
  ],
  "dynamic_methods": [
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "self._run_install_scripts",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_install_scripts.py",
      "line": 23,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": "    def _run_install_scripts(self, install_dir, executable=None):\n        dist = Distribution(self.settings)\n        dist.script_name = 'setup.py'\n        cmd = install_scripts(dist)\n        cmd.install_dir = install_dir\n        if executable is not None:\n            bs = cmd.get_finalized_command('build_scripts')\n            bs.executable = executable\n        cmd.ensure_finalized()\n        with contexts.quiet():\n            cmd.run()\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "f.readline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 32,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": "    def readline(self, __limit: int = 1) -> str:\n        return \"\"\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": ""
    },
    {
      "function": "tmpdir.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_executable_arg_escaping_win32",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    }
  ],
  "assertions": [
    "assert actual == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_executable_arg_escaping_win32(self, tmpdir):\n        \"\"\"\n        Ensure that shebang on Windows is quoted when\n        getting a path with spaces\n        from --executable, that is itself properly quoted.\n        \"\"\"\n        expected = '#!\"%s\"\\n' % self.win32_exe\n        with tmpdir.as_cwd():\n            self._run_install_scripts(str(tmpdir), '\"' + self.win32_exe + '\"')\n            with open(str(tmpdir.join('foo-script.py')), 'r', encoding=\"utf-8\") as f:\n                actual = f.readline()\n        assert actual == expected"
}