{
  "test_name": "test_file_stream_head_response",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_response.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ) -> RouteWrapper:\n        \"\"\"Decorate a function to be registered as a route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 42
    },
    {
      "name": "app.test_client.head",
      "source_code": "    def head(self, url, **kwargs):\n        r\"\"\"Sends a HEAD request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 613
    },
    {
      "name": "int",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "unquote",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "HTTPResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_stream",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_file_content",
      "source_code": "def get_file_content(url: str, session: PipSession) -> Tuple[str, str]:\n    \"\"\"Gets the content of a file; it may be a filename, file: URL, or\n    http: URL.  Returns (location, content).  Content is unicode.\n    Respects # -*- coding: declarations on the retrieved files.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/req/req_file.py",
      "line_number": 522
    },
    {
      "name": "async_os.stat",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "guess_type",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "guess_type",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 42,
      "caller": "test_file_stream_head_response",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.head",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 613,
      "caller": "test_file_stream_head_response",
      "source_code": "    def head(self, url, **kwargs):\n        r\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        kwargs.setdefault(\"allow_redirects\", False)\n        return self.request(\"HEAD\", url, **kwargs)\n\n"
    },
    {
      "function": "int",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "unquote",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "HTTPResponse",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "file_stream",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "get_file_content",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/req/req_file.py",
      "line": 522,
      "caller": "test_file_stream_head_response",
      "source_code": "def get_file_content(url: str, session: PipSession) -> Tuple[str, str]:\n    \"\"\"Gets the content of a file; it may be a filename, file: URL, or\n    http: URL.  Returns (location, content).  Content is unicode.\n    Respects # -*- coding: declarations on the retrieved files.\n\n    :param url:         File path or url.\n    :param session:     PipSession instance.\n    \"\"\"\n    scheme = get_url_scheme(url)\n\n    # Pip has special support for file:// URLs (LocalFSAdapter).\n    if scheme in [\"http\", \"https\", \"file\"]:\n        resp = session.get(url)\n        raise_for_status(resp)\n        return resp.url, resp.text\n\n    # Assume this is a bare path.\n    try:\n        with open(url, \"rb\") as f:\n            content = auto_decode(f.read())\n    except OSError as exc:\n        raise InstallationError(f\"Could not open requirements file: {exc}\")\n    return url, content\n"
    },
    {
      "function": "async_os.stat",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "guess_type",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    },
    {
      "function": "guess_type",
      "filename": "",
      "line": 0,
      "caller": "test_file_stream_head_response",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.status == 200",
    "assert 'Accept-Ranges' in response.headers",
    "assert 'Content-Length' in response.headers",
    "assert int(response.headers['Content-Length']) == len(get_file_content(static_file_directory, file_name))",
    "assert response.headers['Transfer-Encoding'] != 'chunked'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_file_stream_head_response(\n    app: Sanic, file_name, static_file_directory\n):\n    @app.route(\"/files/<filename>\", methods=[\"GET\", \"HEAD\"])\n    async def file_route(request, filename):\n        file_path = os.path.join(static_file_directory, filename)\n        file_path = os.path.abspath(unquote(file_path))\n        headers = {}\n        headers[\"Accept-Ranges\"] = \"bytes\"\n        if request.method == \"HEAD\":\n            # Return a normal HTTPResponse, not a\n            # StreamingHTTPResponse for a HEAD request\n            stats = await async_os.stat(file_path)\n            headers[\"Content-Length\"] = str(stats.st_size)\n            return HTTPResponse(\n                headers=headers,\n                content_type=guess_type(file_path)[0] or \"text/plain\",\n            )\n        else:\n            return file_stream(\n                file_path,\n                chunk_size=32,\n                headers=headers,\n                mime_type=guess_type(file_path)[0] or \"text/plain\",\n            )\n\n    request, response = app.test_client.head(f\"/files/{file_name}\")\n    assert response.status == 200\n    # A HEAD request should never be streamed/chunked.\n    if \"Transfer-Encoding\" in response.headers:\n        assert response.headers[\"Transfer-Encoding\"] != \"chunked\"\n    assert \"Accept-Ranges\" in response.headers\n    # A HEAD request should get the Content-Length too\n    assert \"Content-Length\" in response.headers\n    assert int(response.headers[\"Content-Length\"]) == len(\n        get_file_content(static_file_directory, file_name)\n    )"
}