{
  "test_name": "test_formats",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_bdist.py",
  "static_methods": [
    {
      "name": "bdist",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.create_dist",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 38
    }
  ],
  "dynamic_methods": [
    {
      "function": "bdist",
      "filename": "",
      "line": 0,
      "caller": "test_formats",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_formats",
      "source_code": ""
    },
    {
      "function": "self.create_dist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 38,
      "caller": "test_formats",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.\n\n        This function creates:\n         - a Distribution instance using keywords\n         - a temporary directory with a package structure\n\n        It returns the package directory and the distribution\n        instance.\n        \"\"\"\n        tmp_dir = self.mkdtemp()\n        pkg_dir = os.path.join(tmp_dir, pkg_name)\n        os.mkdir(pkg_dir)\n        dist = Distribution(attrs=kw)\n\n        return pkg_dir, dist\n\n\n"
    }
  ],
  "assertions": [
    "assert cmd.formats == ['gztar']",
    "assert found == formats"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_formats(self):\n        # let's create a command and make sure\n        # we can set the format\n        dist = self.create_dist()[1]\n        cmd = bdist(dist)\n        cmd.formats = ['gztar']\n        cmd.ensure_finalized()\n        assert cmd.formats == ['gztar']\n\n        # what formats does bdist offer?\n        formats = [\n            'bztar',\n            'gztar',\n            'rpm',\n            'tar',\n            'xztar',\n            'zip',\n            'ztar',\n        ]\n        found = sorted(cmd.format_commands)\n        assert found == formats"
}