{
  "test_name": "test_get_output_mapping_with_stub",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.dist_with_example",
      "source_code": "    def dist_with_example(self):\n        files = {\n            \"src\": {\"mypkg\": {\"subpkg\": {\"ext2.c\": \"\"}}},\n            \"c-extensions\": {\"ext1\": {\"main.c\": \"\"}},\n        }",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 89
    },
    {
      "name": "dist.get_command_obj",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 832
    },
    {
      "name": "build_ext.ensure_finalized",
      "source_code": "    def ensure_finalized(self):\n        if not self.finalized:\n            self.finalize_options()\n        self.finalized = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line_number": 109
    },
    {
      "name": "build_ext.build_lib.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "example_stub.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "example_stub.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "k.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "v.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "_compiled_file_name.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "build_ext.get_output_mapping.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "C",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line_number": 156
    },
    {
      "name": "_compiled_file_name",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "build_ext.get_output_mapping",
      "source_code": "    def get_output_mapping(self) -> dict[str, str]:\n        \"\"\"\n        Return a mapping between destination files as they would be produced by the\n        build (dict keys) into the respective existing (source) files (dict values).\n        Existing (source) files should be represented as strings relative to the project\n        root directory.\n        Destination files should be strings in the form of\n        ``\"{build_lib}/destination/file/path\"``.\n        \"\"\"\n        ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/build.py",
      "line_number": 126
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "self.dist_with_example",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 89,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    def dist_with_example(self):\n        files = {\n            \"src\": {\"mypkg\": {\"subpkg\": {\"ext2.c\": \"\"}}},\n            \"c-extensions\": {\"ext1\": {\"main.c\": \"\"}},\n        }\n\n        ext1 = Extension(\"mypkg.ext1\", [\"c-extensions/ext1/main.c\"])\n        ext2 = Extension(\"mypkg.subpkg.ext2\", [\"src/mypkg/subpkg/ext2.c\"])\n        ext3 = Extension(\"ext3\", [\"c-extension/ext3.c\"])\n\n        path.build(files)\n        return Distribution({\n            \"script_name\": \"%test%\",\n            \"ext_modules\": [ext1, ext2, ext3],\n            \"package_dir\": {\"\": \"src\"},\n        })\n\n"
    },
    {
      "function": "dist.get_command_obj",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 832,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )\n\n            klass = self.get_command_class(command)\n            cmd_obj = self.command_obj[command] = klass(self)\n            self.have_run[command] = False\n\n            # Set any options that were supplied in config files\n            # or on the command line.  (NB. support for error\n            # reporting is lame here: any errors aren't reported\n            # until 'finalize_options()' is called, which means\n            # we won't report the source of the error.)\n            options = self.command_options.get(command)\n            if options:\n                self._set_command_options(cmd_obj, options)\n\n        return cmd_obj\n\n"
    },
    {
      "function": "build_ext.ensure_finalized",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line": 109,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    def ensure_finalized(self):\n        if not self.finalized:\n            self.finalize_options()\n        self.finalized = True\n\n"
    },
    {
      "function": "build_ext.build_lib.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "example_stub.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "example_stub.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "k.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "v.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "_compiled_file_name.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "build_ext.get_output_mapping.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "C",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_ext.py",
      "line": 156,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n"
    },
    {
      "function": "_compiled_file_name",
      "filename": "",
      "line": 0,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": ""
    },
    {
      "function": "build_ext.get_output_mapping",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/build.py",
      "line": 126,
      "caller": "test_get_output_mapping_with_stub",
      "source_code": "    def get_output_mapping(self) -> dict[str, str]:\n        \"\"\"\n        Return a mapping between destination files as they would be produced by the\n        build (dict keys) into the respective existing (source) files (dict values).\n        Existing (source) files should be represented as strings relative to the project\n        root directory.\n        Destination files should be strings in the form of\n        ``\"{build_lib}/destination/file/path\"``.\n        \"\"\"\n        ...\n"
    }
  ],
  "assertions": [
    "assert mapping == {C(f'{build_lib}/ext3.py'): C('src/ext3.py'), f'{build_lib}/ext3.mp3': 'src/ext3.mp3', C(f'{build_lib}/mypkg/ext1.py'): C('src/mypkg/ext1.py'), f'{build_lib}/mypkg/ext1.mp3': 'src/mypkg/ext1.mp3', C(f'{build_lib}/mypkg/subpkg/ext2.py'): C('src/mypkg/subpkg/ext2.py'), f'{build_lib}/mypkg/subpkg/ext2.mp3': 'src/mypkg/subpkg/ext2.mp3'}",
    "assert f'{build_lib}/mypkg/ext1.py' not in mapping",
    "assert f'{build_lib}/mypkg/subpkg/ext2.py' not in mapping",
    "assert example_stub in mapping",
    "assert example_stub.startswith(f'{build_lib}/mypkg/__pycache__/ext1')",
    "assert example_stub.endswith('.pyc')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_output_mapping_with_stub(self, tmpdir_cwd, monkeypatch):\n        monkeypatch.setenv('SETUPTOOLS_EXT_SUFFIX', '.mp3')  # make test OS-independent\n        monkeypatch.setattr('setuptools.command.build_ext.use_stubs', True)\n        dist = self.dist_with_example()\n\n        # Editable build should create compiled stubs (.pyc files only, no .py)\n        build_ext = dist.get_command_obj(\"build_ext\")\n        build_ext.editable_mode = True\n        build_ext.ensure_finalized()\n        for ext in build_ext.extensions:\n            monkeypatch.setattr(ext, \"_needs_stub\", True)\n\n        build_lib = build_ext.build_lib.replace(os.sep, \"/\")\n        mapping = {\n            k.replace(os.sep, \"/\"): v.replace(os.sep, \"/\")\n            for k, v in build_ext.get_output_mapping().items()\n        }\n\n        def C(file):\n            \"\"\"Make it possible to do comparisons and tests in a OS-independent way\"\"\"\n            return _compiled_file_name(file).replace(os.sep, \"/\")\n\n        assert mapping == {\n            C(f\"{build_lib}/ext3.py\"): C(\"src/ext3.py\"),\n            f\"{build_lib}/ext3.mp3\": \"src/ext3.mp3\",\n            C(f\"{build_lib}/mypkg/ext1.py\"): C(\"src/mypkg/ext1.py\"),\n            f\"{build_lib}/mypkg/ext1.mp3\": \"src/mypkg/ext1.mp3\",\n            C(f\"{build_lib}/mypkg/subpkg/ext2.py\"): C(\"src/mypkg/subpkg/ext2.py\"),\n            f\"{build_lib}/mypkg/subpkg/ext2.mp3\": \"src/mypkg/subpkg/ext2.mp3\",\n        }\n\n        # Ensure only the compiled stubs are present not the raw .py stub\n        assert f\"{build_lib}/mypkg/ext1.py\" not in mapping\n        assert f\"{build_lib}/mypkg/subpkg/ext2.py\" not in mapping\n\n        # Visualize what the cached stub files look like\n        example_stub = C(f\"{build_lib}/mypkg/ext1.py\")\n        assert example_stub in mapping\n        assert example_stub.startswith(f\"{build_lib}/mypkg/__pycache__/ext1\")\n        assert example_stub.endswith(\".pyc\")"
}