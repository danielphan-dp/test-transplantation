{
  "test_name": "test_get_requires_for_build_wheel",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
  "static_methods": [
    {
      "name": "build_backend.get_requires_for_build_wheel",
      "source_code": "    def get_requires_for_build_wheel(self, config_settings=None):\n        \"\"\"Get additional dependencies required for building a wheel.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line_number": 155
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "build_backend.get_requires_for_build_wheel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line": 155,
      "caller": "test_get_requires_for_build_wheel",
      "source_code": "    def get_requires_for_build_wheel(self, config_settings=None):\n        \"\"\"Get additional dependencies required for building a wheel.\n\n        :returns: A list of :pep:`dependency specifiers <508>`.\n        :rtype: list[str]\n\n        .. admonition:: Fallback\n\n            If the build backend does not defined a hook with this name, an\n            empty list will be returned.\n        \"\"\"\n        return self._call_hook('get_requires_for_build_wheel', {\n            'config_settings': config_settings\n        })\n\n"
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_requires_for_build_wheel",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_requires_for_build_wheel",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert sorted(actual) == sorted(expected)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_requires_for_build_wheel(self, build_backend):\n        actual = build_backend.get_requires_for_build_wheel()\n        expected = ['six']\n        assert sorted(actual) == sorted(expected)"
}