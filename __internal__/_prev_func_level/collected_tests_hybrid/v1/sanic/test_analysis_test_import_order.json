{
  "test_name": "test_import_order",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_expand.py",
  "static_methods": [
    {
      "name": "write_files",
      "source_code": "    def write_files(self, base_dir):\n        log.info(f\"creating '{self.filename}' and adding '{base_dir}' to it\")\n        deferred = []\n        for root, dirnames, filenames in os.walk(base_dir):\n            # Sort the directory names so that `os.walk` will walk them in a\n            # defined order on the next iteration.\n            dirnames.sort()\n            for name in sorted(filenames):\n                path = os.path.normpath(os.path.join(root, name))\n                if os.path.isfile(path):\n                    arcname = os.path.relpath(path, base_dir).replace(os.path.sep, \"/\")\n                    if arcname == self.record_path:\n                        pass\n                    elif root.endswith(\".dist-info\"):\n                        deferred.append((path, arcname))\n                    else:\n                        self.write(path, arcname)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/wheelfile.py",
      "line_number": 122
    },
    {
      "name": "expand.read_attr",
      "source_code": "def read_attr(\n    attr_desc: str,\n    package_dir: Mapping[str, str] | None = None,\n    root_dir: StrPath | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/expand.py",
      "line_number": 153
    }
  ],
  "dynamic_methods": [
    {
      "function": "write_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/wheelfile.py",
      "line": 122,
      "caller": "test_import_order",
      "source_code": "    def write_files(self, base_dir):\n        log.info(f\"creating '{self.filename}' and adding '{base_dir}' to it\")\n        deferred = []\n        for root, dirnames, filenames in os.walk(base_dir):\n            # Sort the directory names so that `os.walk` will walk them in a\n            # defined order on the next iteration.\n            dirnames.sort()\n            for name in sorted(filenames):\n                path = os.path.normpath(os.path.join(root, name))\n                if os.path.isfile(path):\n                    arcname = os.path.relpath(path, base_dir).replace(os.path.sep, \"/\")\n                    if arcname == self.record_path:\n                        pass\n                    elif root.endswith(\".dist-info\"):\n                        deferred.append((path, arcname))\n                    else:\n                        self.write(path, arcname)\n\n        deferred.sort()\n        for path, arcname in deferred:\n            self.write(path, arcname)\n\n"
    },
    {
      "function": "expand.read_attr",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/expand.py",
      "line": 153,
      "caller": "test_import_order",
      "source_code": "def read_attr(\n    attr_desc: str,\n    package_dir: Mapping[str, str] | None = None,\n    root_dir: StrPath | None = None,\n"
    }
  ],
  "assertions": [
    "assert expand.read_attr(attr_desc, package_dir, tmp_path) == '42'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_import_order(self, tmp_path):\n        \"\"\"\n        Sometimes the import machinery will import the parent package of a nested\n        module, which triggers side-effects and might create problems (see issue #3176)\n\n        ``read_attr`` should bypass these limitations by resolving modules statically\n        (via ast.literal_eval).\n        \"\"\"\n        files = {\n            \"src/pkg/__init__.py\": \"from .main import func\\nfrom .about import version\",\n            \"src/pkg/main.py\": \"import super_complicated_dep\\ndef func(): return 42\",\n            \"src/pkg/about.py\": \"version = '42'\",\n        }\n        write_files(files, tmp_path)\n        attr_desc = \"pkg.about.version\"\n        package_dir = {\"\": \"src\"}\n        # `import super_complicated_dep` should not run, otherwise the build fails\n        assert expand.read_attr(attr_desc, package_dir, tmp_path) == \"42\""
}