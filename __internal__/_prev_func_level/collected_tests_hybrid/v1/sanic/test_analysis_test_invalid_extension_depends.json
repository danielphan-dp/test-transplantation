{
  "test_name": "test_invalid_extension_depends",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
  "static_methods": [
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._INVALID_PATHS",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sdist",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assert_package_data_in_manifest",
      "source_code": "    def assert_package_data_in_manifest(self, cmd):\n        manifest = cmd.filelist.files\n        assert os.path.join('sdist_test', 'a.txt') in manifest\n        assert os.path.join('sdist_test', 'b.txt') in manifest\n        assert os.path.join('sdist_test', 'c.rst') not in manifest\n        assert os.path.join('d', 'e.dat') in manifest",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line_number": 158
    },
    {
      "name": "_INVALID_PATHS.keys",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 101
    },
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "skip_under_stdlib_distutils",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_invalid_extension_depends",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "self._INVALID_PATHS",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "sdist",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "self.assert_package_data_in_manifest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line": 158,
      "caller": "test_invalid_extension_depends",
      "source_code": "    def assert_package_data_in_manifest(self, cmd):\n        manifest = cmd.filelist.files\n        assert os.path.join('sdist_test', 'a.txt') in manifest\n        assert os.path.join('sdist_test', 'b.txt') in manifest\n        assert os.path.join('sdist_test', 'c.rst') not in manifest\n        assert os.path.join('d', 'e.dat') in manifest\n\n"
    },
    {
      "function": "_INVALID_PATHS.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 101,
      "caller": "test_invalid_extension_depends",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)\n\n"
    },
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_invalid_extension_depends",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    },
    {
      "function": "skip_under_stdlib_distutils",
      "filename": "",
      "line": 0,
      "caller": "test_invalid_extension_depends",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert invalid_path not in manifest",
    "assert len(expected_message) == 1",
    "assert reason in expected_message"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_invalid_extension_depends(self, reason, caplog):\n        \"\"\"\n        Due to backwards compatibility reasons, `Extension.depends` should accept\n        invalid/weird paths, but then ignore them when building a sdist.\n\n        This test verifies that the source distribution is still built\n        successfully with such paths, but that instead of adding these paths to\n        the manifest, we emit an informational message, notifying the user that\n        the invalid path won't be automatically included.\n        \"\"\"\n        invalid_path = self._INVALID_PATHS[reason]()\n        extension = Extension(\n            name=\"sdist_test.f\",\n            sources=[],\n            depends=[invalid_path],\n        )\n        setup_attrs = {**SETUP_ATTRS, 'ext_modules': [extension]}\n\n        dist = Distribution(setup_attrs)\n        dist.script_name = 'setup.py'\n        cmd = sdist(dist)\n        cmd.ensure_finalized()\n\n        with quiet(), caplog.at_level(logging.INFO):\n            cmd.run()\n\n        self.assert_package_data_in_manifest(cmd)\n        manifest = cmd.filelist.files\n        assert invalid_path not in manifest\n\n        expected_message = [\n            message\n            for (logger, level, message) in caplog.record_tuples\n            if (\n                logger == \"root\"  #\n                and level == logging.INFO  #\n                and invalid_path in message  #\n            )\n        ]\n        assert len(expected_message) == 1\n        (expected_message,) = expected_message\n        assert reason in expected_message"
}