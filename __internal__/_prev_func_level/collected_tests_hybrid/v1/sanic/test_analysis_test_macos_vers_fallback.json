{
  "test_name": "test_macos_vers_fallback",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/tests/test_pkg_resources.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "m.assert_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "orig_open",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "pkg_resources._macos_vers.cache_clear",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pkg_resources._macos_vers.cache_clear",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pkg_resources._macos_vers",
      "source_code": "def _macos_vers():\n    version = platform.mac_ver()[0]\n    # fallback for MacPorts\n    if version == '':\n        plist = '/System/Library/CoreServices/SystemVersion.plist'\n        if os.path.exists(plist):\n            with open(plist, 'rb') as fh:\n                plist_content = plistlib.load(fh)\n            if 'ProductVersion' in plist_content:\n                version = plist_content['ProductVersion']\n    return version.split('.')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/__init__.py",
      "line_number": 423
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_macos_vers_fallback",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "m.assert_called",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "orig_open",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_macos_vers_fallback",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "pkg_resources._macos_vers.cache_clear",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "pkg_resources._macos_vers.cache_clear",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_macos_vers_fallback",
      "source_code": ""
    },
    {
      "function": "pkg_resources._macos_vers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/__init__.py",
      "line": 423,
      "caller": "test_macos_vers_fallback",
      "source_code": "@functools.cache\ndef _macos_vers():\n    version = platform.mac_ver()[0]\n    # fallback for MacPorts\n    if version == '':\n        plist = '/System/Library/CoreServices/SystemVersion.plist'\n        if os.path.exists(plist):\n            with open(plist, 'rb') as fh:\n                plist_content = plistlib.load(fh)\n            if 'ProductVersion' in plist_content:\n                version = plist_content['ProductVersion']\n    return version.split('.')\n\n\n"
    }
  ],
  "assertions": [
    "assert pkg_resources._macos_vers() == ['11', '4']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_macos_vers_fallback(monkeypatch, tmp_path):\n    \"\"\"Regression test for pkg_resources._macos_vers\"\"\"\n    orig_open = builtins.open\n\n    # Pretend we need to use the plist file\n    monkeypatch.setattr('platform.mac_ver', mock.Mock(return_value=('', (), '')))\n\n    # Create fake content for the fake plist file\n    with open(tmp_path / 'fake.plist', 'wb') as fake_file:\n        plistlib.dump({\"ProductVersion\": \"11.4\"}, fake_file)\n\n    # Pretend the fake file exists\n    monkeypatch.setattr('os.path.exists', mock.Mock(return_value=True))\n\n    def fake_open(file, *args, **kwargs):\n        return orig_open(tmp_path / 'fake.plist', *args, **kwargs)\n\n    # Ensure that the _macos_vers works correctly\n    with mock.patch('builtins.open', mock.Mock(side_effect=fake_open)) as m:\n        pkg_resources._macos_vers.cache_clear()\n        assert pkg_resources._macos_vers() == [\"11\", \"4\"]\n        pkg_resources._macos_vers.cache_clear()\n\n    m.assert_called()"
}