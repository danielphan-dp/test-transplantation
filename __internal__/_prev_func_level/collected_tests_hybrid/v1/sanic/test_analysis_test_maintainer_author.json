{
  "test_name": "test_maintainer_author",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tmpdir.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist.metadata.write_pkg_info",
      "source_code": "def write_pkg_info(self, base_dir):\n    \"\"\"Write the PKG-INFO file into the release tree.\"\"\"\n    temp = \"\"\n    final = os.path.join(base_dir, 'PKG-INFO')\n    try:\n        # Use a temporary file while writing to avoid race conditions\n        # (e.g. `importlib.metadata` reading `.egg-info/PKG-INFO`):\n        with NamedTemporaryFile(\"w\", encoding=\"utf-8\", dir=base_dir, delete=False) as f:\n            temp = f.name\n            self.write_pkg_file(f)\n        permissions = stat.S_IMODE(os.lstat(temp).st_mode)\n        os.chmod(temp, permissions | stat.S_IRGRP | stat.S_IROTH)\n        os.replace(temp, final)  # atomic operation.\n    finally:\n        if temp and os.path.exists(temp):\n            os.remove(temp)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line_number": 129
    },
    {
      "name": "_valid_metadata",
      "source_code": "def _valid_metadata(text: str) -> bool:\n    metadata = Metadata.from_email(text, validate=True)  # can raise exceptions\n    return metadata is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 482
    },
    {
      "name": "pkg_info.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tested_keys.items",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 105
    },
    {
      "name": "__maintainer_test_cases",
      "source_code": "def __maintainer_test_cases():\n    attrs = {\"name\": \"package\", \"version\": \"1.0\", \"description\": \"xxx\"}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 210
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.read",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line_number": 89
    },
    {
      "name": "filter",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "fn.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "line.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "tmpdir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_maintainer_author",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "dist.metadata.write_pkg_info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line": 129,
      "caller": "test_maintainer_author",
      "source_code": "def write_pkg_info(self, base_dir):\n    \"\"\"Write the PKG-INFO file into the release tree.\"\"\"\n    temp = \"\"\n    final = os.path.join(base_dir, 'PKG-INFO')\n    try:\n        # Use a temporary file while writing to avoid race conditions\n        # (e.g. `importlib.metadata` reading `.egg-info/PKG-INFO`):\n        with NamedTemporaryFile(\"w\", encoding=\"utf-8\", dir=base_dir, delete=False) as f:\n            temp = f.name\n            self.write_pkg_file(f)\n        permissions = stat.S_IMODE(os.lstat(temp).st_mode)\n        os.chmod(temp, permissions | stat.S_IRGRP | stat.S_IROTH)\n        os.replace(temp, final)  # atomic operation.\n    finally:\n        if temp and os.path.exists(temp):\n            os.remove(temp)\n\n\n"
    },
    {
      "function": "_valid_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 482,
      "caller": "test_maintainer_author",
      "source_code": "def _valid_metadata(text: str) -> bool:\n    metadata = Metadata.from_email(text, validate=True)  # can raise exceptions\n    return metadata is not None\n"
    },
    {
      "function": "pkg_info.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "tested_keys.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 105,
      "caller": "test_maintainer_author",
      "source_code": "    def items(self):\n        \"\"\"Return a new view of the dictionary's items *(key, value) pairs).\"\"\"\n        return _ItemsView(self._impl)\n\n"
    },
    {
      "function": "__maintainer_test_cases",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 210,
      "caller": "test_maintainer_author",
      "source_code": "def __maintainer_test_cases():\n    attrs = {\"name\": \"package\", \"version\": \"1.0\", \"description\": \"xxx\"}\n\n    def merge_dicts(d1, d2):\n        d1 = d1.copy()\n        d1.update(d2)\n\n        return d1\n\n    return [\n        ('No author, no maintainer', attrs.copy()),\n        (\n            'Author (no e-mail), no maintainer',\n            merge_dicts(attrs, {'author': 'Author Name'}),\n        ),\n        (\n            'Author (e-mail), no maintainer',\n            merge_dicts(\n                attrs, {'author': 'Author Name', 'author_email': 'author@name.com'}\n            ),\n        ),\n        (\n            'No author, maintainer (no e-mail)',\n            merge_dicts(attrs, {'maintainer': 'Maintainer Name'}),\n        ),\n        (\n            'No author, maintainer (e-mail)',\n            merge_dicts(\n                attrs,\n                {\n                    'maintainer': 'Maintainer Name',\n                    'maintainer_email': 'maintainer@name.com',\n                },\n            ),\n        ),\n        (\n            'Author (no e-mail), Maintainer (no-email)',\n            merge_dicts(\n                attrs, {'author': 'Author Name', 'maintainer': 'Maintainer Name'}\n            ),\n        ),\n        (\n            'Author (e-mail), Maintainer (e-mail)',\n            merge_dicts(\n                attrs,\n                {\n                    'author': 'Author Name',\n                    'author_email': 'author@name.com',\n                    'maintainer': 'Maintainer Name',\n                    'maintainer_email': 'maintainer@name.com',\n                },\n            ),\n        ),\n        (\n            'No author (e-mail), no maintainer (e-mail)',\n            merge_dicts(\n                attrs,\n                {\n                    'author_email': 'author@name.com',\n                    'maintainer_email': 'maintainer@name.com',\n                },\n            ),\n        ),\n        ('Author unicode', merge_dicts(attrs, {'author': '\u9244\u6ca2\u5bdb'})),\n        ('Maintainer unicode', merge_dicts(attrs, {'maintainer': 'Jan \u0141ukasiewicz'})),\n    ]\n\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line": 89,
      "caller": "test_maintainer_author",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()\n\n        return data\n\n"
    },
    {
      "function": "filter",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    },
    {
      "function": "fn.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_maintainer_author",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "line.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_maintainer_author",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert _valid_metadata(pkg_info)",
    "assert len(pkg_lines) == len(pkg_lines_set)",
    "assert line in pkg_lines_set",
    "assert not line.startswith(fkey + ':')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_maintainer_author(name, attrs, tmpdir):\n    tested_keys = {\n        'author': 'Author',\n        'author_email': 'Author-email',\n        'maintainer': 'Maintainer',\n        'maintainer_email': 'Maintainer-email',\n    }\n\n    # Generate a PKG-INFO file\n    dist = Distribution(attrs)\n    fn = tmpdir.mkdir('pkg_info')\n    fn_s = str(fn)\n\n    dist.metadata.write_pkg_info(fn_s)\n\n    with open(str(fn.join('PKG-INFO')), 'r', encoding='utf-8') as f:\n        pkg_info = f.read()\n\n    assert _valid_metadata(pkg_info)\n\n    # Drop blank lines and strip lines from default description\n    raw_pkg_lines = pkg_info.splitlines()\n    pkg_lines = list(filter(None, raw_pkg_lines[:-2]))\n\n    pkg_lines_set = set(pkg_lines)\n\n    # Duplicate lines should not be generated\n    assert len(pkg_lines) == len(pkg_lines_set)\n\n    for fkey, dkey in tested_keys.items():\n        val = attrs.get(dkey, None)\n        if val is None:\n            for line in pkg_lines:\n                assert not line.startswith(fkey + ':')\n        else:\n            line = '%s: %s' % (fkey, val)\n            assert line in pkg_lines_set"
}