{
  "test_name": "test_make_zipfile_no_zlib",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
  "static_methods": [
    {
      "name": "path.Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "self._create_files",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line_number": 123
    },
    {
      "name": "zipfile_class",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "path.Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "make_zipfile",
      "source_code": "def make_zipfile(\n    zip_filename: StrPathT,\n    base_dir,\n    verbose: bool = False,\n    dry_run: bool = False,\n    compress=True,\n    mode: _ZipFileMode = 'w',",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/bdist_egg.py",
      "line_number": 442
    },
    {
      "name": "kw.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "called.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "zf.namelist",
      "source_code": "    def namelist(self):\n        return list(map(self._sanitize, super().namelist()))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line_number": 94
    }
  ],
  "dynamic_methods": [
    {
      "function": "path.Path",
      "filename": "",
      "line": 0,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "self._create_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line": 123,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir\n\n"
    },
    {
      "function": "zipfile_class",
      "filename": "",
      "line": 0,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": ""
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "path.Path",
      "filename": "",
      "line": 0,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": ""
    },
    {
      "function": "make_zipfile",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/bdist_egg.py",
      "line": 442,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "def make_zipfile(\n    zip_filename: StrPathT,\n    base_dir,\n    verbose: bool = False,\n    dry_run: bool = False,\n    compress=True,\n    mode: _ZipFileMode = 'w',\n"
    },
    {
      "function": "kw.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "called.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": ""
    },
    {
      "function": "zf.namelist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line": 94,
      "caller": "test_make_zipfile_no_zlib",
      "source_code": "    def namelist(self):\n        return list(map(self._sanitize, super().namelist()))\n\n"
    }
  ],
  "assertions": [
    "assert called == [((tarball, 'w'), {'compression': zipfile.ZIP_STORED})]",
    "assert os.path.exists(tarball)",
    "assert sorted(zf.namelist()) == self._zip_created_files"
  ],
  "mocks": [
    "patch(self, archive_util.zipfile, 'zlib', None)",
    "patch(self, archive_util.zipfile, 'ZipFile', fake_zipfile)"
  ],
  "success": false,
  "test_source_code": "def test_make_zipfile_no_zlib(self):\n        zipfile = pytest.importorskip('zipfile')\n        patch(self, archive_util.zipfile, 'zlib', None)  # force zlib ImportError\n\n        called = []\n        zipfile_class = zipfile.ZipFile\n\n        def fake_zipfile(*a, **kw):\n            if kw.get('compression', None) == zipfile.ZIP_STORED:\n                called.append((a, kw))\n            return zipfile_class(*a, **kw)\n\n        patch(self, archive_util.zipfile, 'ZipFile', fake_zipfile)\n\n        # create something to tar and compress\n        tmpdir = self._create_files()\n        base_name = os.path.join(self.mkdtemp(), 'archive')\n        with path.Path(tmpdir):\n            make_zipfile(base_name, 'dist')\n\n        tarball = base_name + '.zip'\n        assert called == [((tarball, \"w\"), {'compression': zipfile.ZIP_STORED})]\n        assert os.path.exists(tarball)\n        with zipfile.ZipFile(tarball) as zf:\n            assert sorted(zf.namelist()) == self._zip_created_files"
}