{
  "test_name": "test_mkpath_exception_uncached",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
  "static_methods": [
    {
      "name": "mkpath",
      "source_code": "def mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 48
    },
    {
      "name": "target.exists",
      "source_code": "    def exists(self):\n        path = os.path.join(self.dirname, self.filename)\n        return os.path.isfile(path)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 234
    },
    {
      "name": "mkpath",
      "source_code": "def mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 48
    },
    {
      "name": "target.exists",
      "source_code": "    def exists(self):\n        path = os.path.join(self.dirname, self.filename)\n        return os.path.isfile(path)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 234
    },
    {
      "name": "OSError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "FailPath",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "mkpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 48,
      "caller": "test_mkpath_exception_uncached",
      "source_code": "@functools.singledispatch\n@wrapper\ndef mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, log the directory created.\n    \"\"\"\n    if verbose and not name.is_dir():\n        log.info(\"creating %s\", name)\n\n    try:\n        dry_run or name.mkdir(mode=mode, parents=True, exist_ok=True)\n    except OSError as exc:\n        raise DistutilsFileError(f\"could not create '{name}': {exc.args[-1]}\")\n\n\n"
    },
    {
      "function": "target.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 234,
      "caller": "test_mkpath_exception_uncached",
      "source_code": "    @property\n    def exists(self):\n        path = os.path.join(self.dirname, self.filename)\n        return os.path.isfile(path)\n\n"
    },
    {
      "function": "mkpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 48,
      "caller": "test_mkpath_exception_uncached",
      "source_code": "@functools.singledispatch\n@wrapper\ndef mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, log the directory created.\n    \"\"\"\n    if verbose and not name.is_dir():\n        log.info(\"creating %s\", name)\n\n    try:\n        dry_run or name.mkdir(mode=mode, parents=True, exist_ok=True)\n    except OSError as exc:\n        raise DistutilsFileError(f\"could not create '{name}': {exc.args[-1]}\")\n\n\n"
    },
    {
      "function": "target.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 234,
      "caller": "test_mkpath_exception_uncached",
      "source_code": "    @property\n    def exists(self):\n        path = os.path.join(self.dirname, self.filename)\n        return os.path.isfile(path)\n\n"
    },
    {
      "function": "OSError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_mkpath_exception_uncached",
      "source_code": ""
    },
    {
      "function": "FailPath",
      "filename": "",
      "line": 0,
      "caller": "test_mkpath_exception_uncached",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not target.exists()",
    "assert target.exists()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_mkpath_exception_uncached(self, monkeypatch, tmp_path):\n        \"\"\"\n        Caching should not remember failed attempts.\n\n        pypa/distutils#304\n        \"\"\"\n\n        class FailPath(pathlib.Path):\n            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n        target = tmp_path / 'foodir'\n\n        with pytest.raises(errors.DistutilsFileError):\n            mkpath(FailPath(target))\n\n        assert not target.exists()\n\n        mkpath(target)\n        assert target.exists()"
}