{
  "test_name": "test_no_compiler",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_msvccompiler.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_msvccompiler._get_vc_env",
      "source_code": "def _get_vc_env(plat_spec):\n    if os.getenv(\"DISTUTILS_USE_SDK\"):\n        return {key.lower(): value for key, value in os.environ.items()}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/_msvccompiler.py",
      "line_number": 144
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_no_compiler",
      "source_code": ""
    },
    {
      "function": "_msvccompiler._get_vc_env",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/_msvccompiler.py",
      "line": 144,
      "caller": "test_no_compiler",
      "source_code": "def _get_vc_env(plat_spec):\n    if os.getenv(\"DISTUTILS_USE_SDK\"):\n        return {key.lower(): value for key, value in os.environ.items()}\n\n    vcvarsall, _ = _find_vcvarsall(plat_spec)\n    if not vcvarsall:\n        raise DistutilsPlatformError(\n            'Microsoft Visual C++ 14.0 or greater is required. '\n            'Get it with \"Microsoft C++ Build Tools\": '\n            'https://visualstudio.microsoft.com/visual-cpp-build-tools/'\n        )\n\n    try:\n        out = subprocess.check_output(\n            f'cmd /u /c \"{vcvarsall}\" {plat_spec} && set',\n            stderr=subprocess.STDOUT,\n        ).decode('utf-16le', errors='replace')\n    except subprocess.CalledProcessError as exc:\n        log.error(exc.output)\n        raise DistutilsPlatformError(f\"Error executing {exc.cmd}\")\n\n    env = {\n        key.lower(): value\n        for key, _, value in (line.partition('=') for line in out.splitlines())\n        if key and value\n    }\n\n    return env\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_no_compiler(self, monkeypatch):\n        # makes sure query_vcvarsall raises\n        # a DistutilsPlatformError if the compiler\n        # is not found\n        def _find_vcvarsall(plat_spec):\n            return None, None\n\n        monkeypatch.setattr(_msvccompiler, '_find_vcvarsall', _find_vcvarsall)\n\n        with pytest.raises(DistutilsPlatformError):\n            _msvccompiler._get_vc_env(\n                'wont find this version',\n            )"
}