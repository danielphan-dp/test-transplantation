{
  "test_name": "test_no_stack_trace_on_not_found",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_static.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.static",
      "source_code": "    def static(\n        self,\n        uri: str,\n        file_or_directory: Union[PathLike, str],\n        pattern: str = r\"/?.+\",\n        use_modified_since: bool = True,\n        use_content_range: bool = False,\n        stream_large_files: Union[bool, int] = False,\n        name: str = \"static\",\n        host: Optional[str] = None,\n        strict_slashes: Optional[bool] = None,\n        content_type: Optional[str] = None,\n        apply: bool = True,\n        resource_type: Optional[str] = None,\n        index: Optional[Union[str, Sequence[str]]] = None,\n        directory_view: bool = False,\n        directory_handler: Optional[DirectoryHandler] = None,\n    ):\n        \"\"\"Register a root to serve files from. The input can either be a file or a directory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/static.py",
      "line_number": 31
    },
    {
      "name": "app.exception",
      "source_code": "    def exception(self) -> Exception | None:  # pragma: no cover\n        warnings.warn(  # deprecated in 10.3 - 2022-04-17\n            \"Request.exception is deprecated; \"\n            \"use ServerProtocol.handshake_exc instead\",\n            DeprecationWarning,\n        )\n        return self._exception",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/http11.py",
      "line_number": 90
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": ""
    },
    {
      "function": "app.static",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/static.py",
      "line": 31,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": "    def static(\n        self,\n        uri: str,\n        file_or_directory: Union[PathLike, str],\n        pattern: str = r\"/?.+\",\n        use_modified_since: bool = True,\n        use_content_range: bool = False,\n        stream_large_files: Union[bool, int] = False,\n        name: str = \"static\",\n        host: Optional[str] = None,\n        strict_slashes: Optional[bool] = None,\n        content_type: Optional[str] = None,\n        apply: bool = True,\n        resource_type: Optional[str] = None,\n        index: Optional[Union[str, Sequence[str]]] = None,\n        directory_view: bool = False,\n        directory_handler: Optional[DirectoryHandler] = None,\n"
    },
    {
      "function": "app.exception",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/http11.py",
      "line": 90,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": "    @property\n    def exception(self) -> Exception | None:  # pragma: no cover\n        warnings.warn(  # deprecated in 10.3 - 2022-04-17\n            \"Request.exception is deprecated; \"\n            \"use ServerProtocol.handshake_exc instead\",\n            DeprecationWarning,\n        )\n        return self._exception\n\n"
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": ""
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": ""
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_no_stack_trace_on_not_found",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    }
  ],
  "assertions": [
    "assert response.status == 404",
    "assert counter['sanic.root', logging.INFO] == 10",
    "assert counter['sanic.root', logging.ERROR] == 0",
    "assert counter['sanic.error', logging.ERROR] == 0",
    "assert counter['sanic.server', logging.INFO] == 3",
    "assert response.text == 'No file: /static/non_existing_file.file'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_no_stack_trace_on_not_found(app, static_file_directory, caplog):\n    app.static(\"/static\", static_file_directory)\n\n    @app.exception(FileNotFound)\n    async def file_not_found(request, exception):\n        return text(f\"No file: {request.path}\", status=404)\n\n    with caplog.at_level(logging.INFO):\n        _, response = app.test_client.get(\"/static/non_existing_file.file\")\n\n    counter = Counter([(r[0], r[1]) for r in caplog.record_tuples])\n\n    assert response.status == 404\n    assert counter[(\"sanic.root\", logging.INFO)] == 10\n    assert counter[(\"sanic.root\", logging.ERROR)] == 0\n    assert counter[(\"sanic.error\", logging.ERROR)] == 0\n    assert counter[(\"sanic.server\", logging.INFO)] == 3\n    assert response.text == \"No file: /static/non_existing_file.file\""
}