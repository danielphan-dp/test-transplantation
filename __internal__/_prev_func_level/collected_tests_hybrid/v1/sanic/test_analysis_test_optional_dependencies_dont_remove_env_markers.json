{
  "test_name": "test_optional_dependencies_dont_remove_env_markers",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
  "static_methods": [
    {
      "name": "self.pyproject",
      "source_code": "    def pyproject(self, dynamic=None):\n        project = {\"dynamic\": dynamic or [\"scripts\", \"gui-scripts\", \"entry-points\"]}\n        tool = {\"dynamic\": {\"entry-points\": {\"file\": \"entry-points.txt\"}}}\n        return {\"project\": project, \"tool\": {\"setuptools\": tool}}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_pyprojecttoml.py",
      "line_number": 188
    },
    {
      "name": "makedist",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 33
    },
    {
      "name": "pyprojecttoml.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "dist.get_command_obj",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 832
    },
    {
      "name": "write_requirements",
      "source_code": "def write_requirements(cmd, basename, filename):\n    dist = cmd.distribution\n    data = io.StringIO()\n    install_requires, extras_require = _prepare(\n        dist.install_requires or (), dist.extras_require or {}\n    )\n    _write_requirements(data, install_requires)\n    for extra in sorted(extras_require):\n        data.write('\\n[{extra}]\\n'.format(**vars()))\n        _write_requirements(data, extras_require[extra])\n    cmd.write_or_delete_file(\"requirements\", filename, data.getvalue())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/_requirestxt.py",
      "line_number": 115
    },
    {
      "name": "read_text",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n    ) -> str:\n        with open(where(), encoding=encoding) as data:\n            return data.read()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line_number": 91
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.pyproject",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_pyprojecttoml.py",
      "line": 188,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "    def pyproject(self, dynamic=None):\n        project = {\"dynamic\": dynamic or [\"scripts\", \"gui-scripts\", \"entry-points\"]}\n        tool = {\"dynamic\": {\"entry-points\": {\"file\": \"entry-points.txt\"}}}\n        return {\"project\": project, \"tool\": {\"setuptools\": tool}}\n\n"
    },
    {
      "function": "makedist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 33,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})\n\n\n"
    },
    {
      "function": "pyprojecttoml.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "dist.get_command_obj",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 832,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )\n\n            klass = self.get_command_class(command)\n            cmd_obj = self.command_obj[command] = klass(self)\n            self.have_run[command] = False\n\n            # Set any options that were supplied in config files\n            # or on the command line.  (NB. support for error\n            # reporting is lame here: any errors aren't reported\n            # until 'finalize_options()' is called, which means\n            # we won't report the source of the error.)\n            options = self.command_options.get(command)\n            if options:\n                self._set_command_options(cmd_obj, options)\n\n        return cmd_obj\n\n"
    },
    {
      "function": "write_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/_requirestxt.py",
      "line": 115,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "def write_requirements(cmd, basename, filename):\n    dist = cmd.distribution\n    data = io.StringIO()\n    install_requires, extras_require = _prepare(\n        dist.install_requires or (), dist.extras_require or {}\n    )\n    _write_requirements(data, install_requires)\n    for extra in sorted(extras_require):\n        data.write('\\n[{extra}]\\n'.format(**vars()))\n        _write_requirements(data, extras_require[extra])\n    cmd.write_or_delete_file(\"requirements\", filename, data.getvalue())\n\n\n"
    },
    {
      "function": "read_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line": 91,
      "caller": "test_optional_dependencies_dont_remove_env_markers",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n"
    }
  ],
  "assertions": [
    "assert 'foo' in dist.extras_require",
    "assert 'importlib-resources' in reqs",
    "assert 'bar' in reqs",
    "assert ':python_version < \"3.7\"' in reqs"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_optional_dependencies_dont_remove_env_markers(self, tmp_path):\n        \"\"\"\n        Internally setuptools converts dependencies with markers to \"extras\".\n        If ``install_requires`` is given by ``setup.py``, we have to ensure that\n        applying ``optional-dependencies`` does not overwrite the mandatory\n        dependencies with markers (see #3204).\n        \"\"\"\n        # If setuptools replace its internal mechanism that uses `requires.txt`\n        # this test has to be rewritten to adapt accordingly\n        extra = \"\\n[project.optional-dependencies]\\nfoo = ['bar>1']\\n\"\n        pyproject = self.pyproject(tmp_path, [\"dependencies\"], extra)\n        install_req = ['importlib-resources (>=3.0.0) ; python_version < \"3.7\"']\n        dist = makedist(tmp_path, install_requires=install_req)\n        dist = pyprojecttoml.apply_configuration(dist, pyproject)\n        assert \"foo\" in dist.extras_require\n        egg_info = dist.get_command_obj(\"egg_info\")\n        write_requirements(egg_info, tmp_path, tmp_path / \"requires.txt\")\n        reqs = (tmp_path / \"requires.txt\").read_text(encoding=\"utf-8\")\n        assert \"importlib-resources\" in reqs\n        assert \"bar\" in reqs\n        assert ':python_version < \"3.7\"' in reqs"
}