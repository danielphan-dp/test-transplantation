{
  "test_name": "test_optional_extension",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_optional_extension",
      "source_code": ""
    },
    {
      "function": "self.build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_optional_extension",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_optional_extension",
      "source_code": ""
    },
    {
      "function": "self.build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_optional_extension",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_optional_extension",
      "source_code": ""
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_optional_extension",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_optional_extension(self):\n        # this extension will fail, but let's ignore this failure\n        # with the optional argument.\n        modules = [Extension('foo', ['xxx'], optional=False)]\n        dist = Distribution({'name': 'xx', 'ext_modules': modules})\n        cmd = self.build_ext(dist)\n        cmd.ensure_finalized()\n        with pytest.raises((UnknownFileError, CompileError)):\n            cmd.run()  # should raise an error\n\n        modules = [Extension('foo', ['xxx'], optional=True)]\n        dist = Distribution({'name': 'xx', 'ext_modules': modules})\n        cmd = self.build_ext(dist)\n        cmd.ensure_finalized()\n        cmd.run()"
}