{
  "test_name": "test_priority_ordering",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
  "static_methods": [
    {
      "name": "Blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app.before_server_start",
      "source_code": "    def before_server_start(\n        self,\n        listener: Optional[ListenerType[Sanic]] = None,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]:\n        \"\"\"Decorator for registering a listener for the before_server_start event.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 320
    },
    {
      "name": "bp.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "bp.before_server_start",
      "source_code": "    def before_server_start(\n        self,\n        listener: Optional[ListenerType[Sanic]] = None,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]:\n        \"\"\"Decorator for registering a listener for the before_server_start event.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 320
    },
    {
      "name": "app.blueprint",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n    ) -> None:\n        \"\"\"Register a blueprint on the application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 856
    },
    {
      "name": "start_stop_app",
      "source_code": "def start_stop_app(random_name_app, **run_kwargs):\n    @random_name_app.after_server_start\n    async def shutdown(app):\n        await asyncio.sleep(1.1)\n        app.stop()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line_number": 41
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "output.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    }
  ],
  "dynamic_methods": [
    {
      "function": "Blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_priority_ordering",
      "source_code": ""
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_priority_ordering",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.before_server_start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 320,
      "caller": "test_priority_ordering",
      "source_code": "    def before_server_start(\n        self,\n        listener: Optional[ListenerType[Sanic]] = None,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "bp.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_priority_ordering",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "bp.before_server_start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 320,
      "caller": "test_priority_ordering",
      "source_code": "    def before_server_start(\n        self,\n        listener: Optional[ListenerType[Sanic]] = None,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.blueprint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 856,
      "caller": "test_priority_ordering",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n"
    },
    {
      "function": "start_stop_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line": 41,
      "caller": "test_priority_ordering",
      "source_code": "def start_stop_app(random_name_app, **run_kwargs):\n    @random_name_app.after_server_start\n    async def shutdown(app):\n        await asyncio.sleep(1.1)\n        app.stop()\n\n    try:\n        random_name_app.run(\n            HOST, get_port(), single_process=True, **run_kwargs\n        )\n    except KeyboardInterrupt:\n        pass\n\n\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "output.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_priority_ordering",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    }
  ],
  "assertions": [
    "assert output == ['third', 'bp_third', 'second', 'bp_second', 'first', 'fourth', 'bp_first']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_priority_ordering(app):\n    output = []\n    bp = Blueprint(\"bp\")\n\n    @app.before_server_start\n    async def first(app):\n        output.append(\"first\")\n\n    @app.listener(\"before_server_start\", priority=2)\n    async def second(app):\n        output.append(\"second\")\n\n    @app.before_server_start(priority=3)\n    async def third(app):\n        output.append(\"third\")\n\n    @bp.before_server_start\n    async def bp_first(app):\n        output.append(\"bp_first\")\n\n    @bp.listener(\"before_server_start\", priority=2)\n    async def bp_second(app):\n        output.append(\"bp_second\")\n\n    @bp.before_server_start(priority=3)\n    async def bp_third(app):\n        output.append(\"bp_third\")\n\n    @app.before_server_start\n    async def fourth(app):\n        output.append(\"fourth\")\n\n    app.blueprint(bp)\n    start_stop_app(app)\n\n    # The order of the listeners is:\n    # priority descending, app before bp, definition order ascending\n    assert output == [\n        \"third\",\n        \"bp_third\",\n        \"second\",\n        \"bp_second\",\n        \"first\",\n        \"fourth\",\n        \"bp_first\",\n    ]"
}