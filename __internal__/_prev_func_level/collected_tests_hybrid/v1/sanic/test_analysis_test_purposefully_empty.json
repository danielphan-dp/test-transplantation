{
  "test_name": "test_purposefully_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
  "static_methods": [
    {
      "name": "_populate_project_dir",
      "source_code": "def _populate_project_dir(root, files, options):\n    # NOTE: Currently pypa/build will refuse to build the project if no\n    # `pyproject.toml` or `setup.py` is found. So it is impossible to do\n    # completely \"config-less\" projects.\n    basic = {\n        \"setup.py\": \"import setuptools\\nsetuptools.setup()\",\n        \"README.md\": \"# Example Package\",\n        \"LICENSE\": \"Copyright (c) 2018\",\n    }\n    jaraco.path.build(basic, prefix=root)\n    _write_setupcfg(root, options)\n    paths = (root / f for f in files)\n    for path in paths:\n        path.parent.mkdir(exist_ok=True, parents=True)\n        path.touch()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 571
    },
    {
      "name": "self.PURPOSEFULLY_EMPY.format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "_get_dist",
      "source_code": "def _get_dist(dist_path, attrs):\n    root = \"/\".join(os.path.split(dist_path))  # POSIX-style",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 616
    },
    {
      "name": "product",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "param.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "FILES.keys",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 101
    }
  ],
  "dynamic_methods": [
    {
      "function": "_populate_project_dir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 571,
      "caller": "test_purposefully_empty",
      "source_code": "def _populate_project_dir(root, files, options):\n    # NOTE: Currently pypa/build will refuse to build the project if no\n    # `pyproject.toml` or `setup.py` is found. So it is impossible to do\n    # completely \"config-less\" projects.\n    basic = {\n        \"setup.py\": \"import setuptools\\nsetuptools.setup()\",\n        \"README.md\": \"# Example Package\",\n        \"LICENSE\": \"Copyright (c) 2018\",\n    }\n    jaraco.path.build(basic, prefix=root)\n    _write_setupcfg(root, options)\n    paths = (root / f for f in files)\n    for path in paths:\n        path.parent.mkdir(exist_ok=True, parents=True)\n        path.touch()\n\n\n"
    },
    {
      "function": "self.PURPOSEFULLY_EMPY.format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_purposefully_empty",
      "source_code": ""
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_purposefully_empty",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "_get_dist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 616,
      "caller": "test_purposefully_empty",
      "source_code": "def _get_dist(dist_path, attrs):\n    root = \"/\".join(os.path.split(dist_path))  # POSIX-style\n\n    script = dist_path / 'setup.py'\n    if script.exists():\n        with Path(dist_path):\n            dist = cast(\n                Distribution,\n                distutils.core.run_setup(\"setup.py\", {}, stop_after=\"init\"),\n            )\n    else:\n        dist = Distribution(attrs)\n\n    dist.src_root = root\n    dist.script_name = \"setup.py\"\n    with Path(dist_path):\n        dist.parse_config_files()\n\n    dist.set_defaults()\n    return dist\n\n\n"
    },
    {
      "function": "product",
      "filename": "",
      "line": 0,
      "caller": "test_purposefully_empty",
      "source_code": ""
    },
    {
      "function": "param.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_purposefully_empty",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_purposefully_empty",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_purposefully_empty",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_purposefully_empty",
      "source_code": ""
    },
    {
      "function": "FILES.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 101,
      "caller": "test_purposefully_empty",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)\n\n"
    }
  ],
  "assertions": [
    "assert getattr(dist, param) == []",
    "assert getattr(dist, other) is None"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_purposefully_empty(self, tmp_path, config_file, param, circumstance):\n        files = self.FILES[circumstance] + [\"mod.py\", \"other.py\", \"src/pkg/__init__.py\"]\n        _populate_project_dir(tmp_path, files, {})\n\n        if config_file == \"pyproject.toml\":\n            template_param = param.replace(\"_\", \"-\")\n        else:\n            # Make sure build works with or without setup.cfg\n            pyproject = self.PURPOSEFULLY_EMPY[\"template-pyproject.toml\"]\n            (tmp_path / \"pyproject.toml\").write_text(pyproject, encoding=\"utf-8\")\n            template_param = param\n\n        config = self.PURPOSEFULLY_EMPY[config_file].format(param=template_param)\n        (tmp_path / config_file).write_text(config, encoding=\"utf-8\")\n\n        dist = _get_dist(tmp_path, {})\n        # When either parameter package or py_modules is an empty list,\n        # then there should be no discovery\n        assert getattr(dist, param) == []\n        other = {\"py_modules\": \"packages\", \"packages\": \"py_modules\"}[param]\n        assert getattr(dist, other) is None"
}