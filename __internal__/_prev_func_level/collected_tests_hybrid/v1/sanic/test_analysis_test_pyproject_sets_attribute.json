{
  "test_name": "test_pyproject_sets_attribute",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
  "static_methods": [
    {
      "name": "monkeypatch.chdir",
      "source_code": "def chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 424
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pyproject.write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "cleandoc",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pyprojecttoml.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.chdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 424,
      "caller": "test_pyproject_sets_attribute",
      "source_code": "@contextlib.contextmanager\ndef chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)\n\n\n"
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_pyproject_sets_attribute",
      "source_code": ""
    },
    {
      "function": "pyproject.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_pyproject_sets_attribute",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "cleandoc",
      "filename": "",
      "line": 0,
      "caller": "test_pyproject_sets_attribute",
      "source_code": ""
    },
    {
      "function": "pyprojecttoml.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_pyproject_sets_attribute",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_pyproject_sets_attribute",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_pyproject_sets_attribute",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_pyproject_sets_attribute",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(dist.ext_modules) == 1",
    "assert dist.ext_modules[0].name == 'my.ext'",
    "assert set(dist.ext_modules[0].sources) == {'hello.c', 'world.c'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pyproject_sets_attribute(self, tmp_path, monkeypatch):\n        monkeypatch.chdir(tmp_path)\n        pyproject = Path(\"pyproject.toml\")\n        toml_config = \"\"\"\n        [project]\n        name = \"test\"\n        version = \"42.0\"\n        [tool.setuptools]\n        ext-modules = [\n          {name = \"my.ext\", sources = [\"hello.c\", \"world.c\"]}\n        ]\n        \"\"\"\n        pyproject.write_text(cleandoc(toml_config), encoding=\"utf-8\")\n        with pytest.warns(pyprojecttoml._ExperimentalConfiguration):\n            dist = pyprojecttoml.apply_configuration(Distribution({}), pyproject)\n        assert len(dist.ext_modules) == 1\n        assert dist.ext_modules[0].name == \"my.ext\"\n        assert set(dist.ext_modules[0].sources) == {\"hello.c\", \"world.c\"}"
}