{
  "test_name": "test_reload_dirs",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_motd.py",
  "static_methods": [
    {
      "name": "patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.assert_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reload_dirs",
      "source_code": ""
    },
    {
      "function": "mock.assert_called",
      "filename": "",
      "line": 0,
      "caller": "test_reload_dirs",
      "source_code": ""
    },
    {
      "function": "patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reload_dirs",
      "source_code": ""
    },
    {
      "function": "app.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_reload_dirs",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    }
  ],
  "assertions": [
    "assert mock.call_args.args[2]['auto-reload'] == f'enabled, {os.getcwd()}'",
    "assert mock.call_args.args[3] == {'foo': 'bar'}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_reload_dirs(app):\n    app.config.LOGO = None\n    app.config.MOTD = True\n    app.config.AUTO_RELOAD = True\n\n    with patch.object(MOTD, \"output\") as mock:\n        app.prepare(\n            reload_dir=\"./\", auto_reload=True, motd_display={\"foo\": \"bar\"}\n        )\n    mock.assert_called()\n    assert mock.call_args.args[2][\"auto-reload\"] == f\"enabled, {os.getcwd()}\"\n    assert mock.call_args.args[3] == {\"foo\": \"bar\"}"
}