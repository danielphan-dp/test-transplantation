{
  "test_name": "test_reload_listeners",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
  "static_methods": [
    {
      "name": "TemporaryDirectory",
      "source_code": "def TemporaryDirectory(suffix=None, prefix=None, dir=None, loop=None, executor=None):\n    \"\"\"Async open a temporary directory\"\"\"\n    return AiofilesContextManagerTempDir(\n        _temporary_directory(\n            suffix=suffix, prefix=prefix, dir=dir, loop=loop, executor=executor\n        )\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/aiofiles/tempfile/__init__.py",
      "line_number": 150
    },
    {
      "name": "TemporaryDirectory",
      "source_code": "def TemporaryDirectory(suffix=None, prefix=None, dir=None, loop=None, executor=None):\n    \"\"\"Async open a temporary directory\"\"\"\n    return AiofilesContextManagerTempDir(\n        _temporary_directory(\n            suffix=suffix, prefix=prefix, dir=dir, loop=loop, executor=executor\n        )\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/aiofiles/tempfile/__init__.py",
      "line_number": 150
    },
    {
      "name": "write_listener_app",
      "source_code": "def write_listener_app(filename, **runargs):\n    start_text = secrets.token_urlsafe()\n    stop_text = secrets.token_urlsafe()\n    with open(filename, \"w\") as f:\n        f.write(\n            dedent(\n                f\"\"\"\\\n            import os\n            from sanic import Sanic",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line_number": 62
    },
    {
      "name": "Popen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "suppress",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 1683
    },
    {
      "name": "Timer",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "timeout.start",
      "source_code": "    def start(self):\n        self.update(self.min)\n        return self",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1304
    },
    {
      "name": "sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "scanner",
      "source_code": "def scanner(proc, trigger=\"complete\"):\n    for line in proc.stdout:\n        line = line.decode().strip()\n        if line.startswith(trigger):\n            yield line",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line_number": 126
    },
    {
      "name": "scanner",
      "source_code": "def scanner(proc, trigger=\"complete\"):\n    for line in proc.stdout:\n        line = line.decode().strip()\n        if line.startswith(trigger):\n            yield line",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line_number": 126
    },
    {
      "name": "timeout.cancel",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "terminate",
      "source_code": "def terminate(proc):\n    if flags:\n        proc.send_signal(CTRL_BREAK_EVENT)\n    else:\n        proc.terminate()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line_number": 30
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "suppress",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 1683
    },
    {
      "name": "proc.wait",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "TemporaryDirectory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/aiofiles/tempfile/__init__.py",
      "line": 150,
      "caller": "test_reload_listeners",
      "source_code": "def TemporaryDirectory(suffix=None, prefix=None, dir=None, loop=None, executor=None):\n    \"\"\"Async open a temporary directory\"\"\"\n    return AiofilesContextManagerTempDir(\n        _temporary_directory(\n            suffix=suffix, prefix=prefix, dir=dir, loop=loop, executor=executor\n        )\n    )\n\n\n"
    },
    {
      "function": "TemporaryDirectory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/aiofiles/tempfile/__init__.py",
      "line": 150,
      "caller": "test_reload_listeners",
      "source_code": "def TemporaryDirectory(suffix=None, prefix=None, dir=None, loop=None, executor=None):\n    \"\"\"Async open a temporary directory\"\"\"\n    return AiofilesContextManagerTempDir(\n        _temporary_directory(\n            suffix=suffix, prefix=prefix, dir=dir, loop=loop, executor=executor\n        )\n    )\n\n\n"
    },
    {
      "function": "write_listener_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line": 62,
      "caller": "test_reload_listeners",
      "source_code": "def write_listener_app(filename, **runargs):\n    start_text = secrets.token_urlsafe()\n    stop_text = secrets.token_urlsafe()\n    with open(filename, \"w\") as f:\n        f.write(\n            dedent(\n                f\"\"\"\\\n            import os\n            from sanic import Sanic\n\n            app = Sanic(__name__)\n\n            app.route(\"/\")(lambda x: x)\n\n            @app.reload_process_start\n            async def reload_start(*_):\n                print(\"reload_start\", os.getpid(), {start_text!r})\n\n            @app.reload_process_stop\n            async def reload_stop(*_):\n                print(\"reload_stop\", os.getpid(), {stop_text!r})\n\n            if __name__ == \"__main__\":\n                app.run(**{runargs!r})\n            \"\"\"\n            )\n        )\n    return start_text, stop_text\n\n\n"
    },
    {
      "function": "Popen",
      "filename": "",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    },
    {
      "function": "suppress",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 1683,
      "caller": "test_reload_listeners",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)\n\n"
    },
    {
      "function": "Timer",
      "filename": "",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    },
    {
      "function": "timeout.start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1304,
      "caller": "test_reload_listeners",
      "source_code": "    def start(self):\n        self.update(self.min)\n        return self\n\n"
    },
    {
      "function": "sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_reload_listeners",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "scanner",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line": 126,
      "caller": "test_reload_listeners",
      "source_code": "def scanner(proc, trigger=\"complete\"):\n    for line in proc.stdout:\n        line = line.decode().strip()\n        if line.startswith(trigger):\n            yield line\n\n\n"
    },
    {
      "function": "scanner",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line": 126,
      "caller": "test_reload_listeners",
      "source_code": "def scanner(proc, trigger=\"complete\"):\n    for line in proc.stdout:\n        line = line.decode().strip()\n        if line.startswith(trigger):\n            yield line\n\n\n"
    },
    {
      "function": "timeout.cancel",
      "filename": "",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    },
    {
      "function": "terminate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_reloader.py",
      "line": 30,
      "caller": "test_reload_listeners",
      "source_code": "def terminate(proc):\n    if flags:\n        proc.send_signal(CTRL_BREAK_EVENT)\n    else:\n        proc.terminate()\n\n\n"
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    },
    {
      "function": "suppress",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 1683,
      "caller": "test_reload_listeners",
      "source_code": "    def suppress(self) -> \"ParserElement\":\n        \"\"\"\n        Suppresses the output of this :class:`ParserElement`; useful to keep punctuation from\n        cluttering up returned output.\n        \"\"\"\n        return Suppress(self)\n\n"
    },
    {
      "function": "proc.wait",
      "filename": "",
      "line": 0,
      "caller": "test_reload_listeners",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert start_text in next(line)",
    "assert stop_text in next(line)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_reload_listeners():\n    with TemporaryDirectory() as tmpdir:\n        filename = os.path.join(tmpdir, \"reloader.py\")\n        start_text, stop_text = write_listener_app(\n            filename, port=42305, auto_reload=True\n        )\n\n        proc = Popen(\n            argv[\"script\"], cwd=tmpdir, stdout=PIPE, creationflags=flags\n        )\n        try:\n            timeout = Timer(TIMER_DELAY, terminate, [proc])\n            timeout.start()\n            # Python apparently keeps using the old source sometimes if\n            # we don't sleep before rewrite (pycache timestamp problem?)\n            sleep(1)\n            line = scanner(proc, \"reload_start\")\n            assert start_text in next(line)\n            line = scanner(proc, \"reload_stop\")\n            assert stop_text in next(line)\n        finally:\n            timeout.cancel()\n            terminate(proc)\n            with suppress(TimeoutExpired):\n                proc.wait(timeout=3)"
}