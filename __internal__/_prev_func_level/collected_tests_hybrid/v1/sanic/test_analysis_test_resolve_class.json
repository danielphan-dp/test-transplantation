{
  "test_name": "test_resolve_class",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_expand.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "write_files",
      "source_code": "    def write_files(self, base_dir):\n        log.info(f\"creating '{self.filename}' and adding '{base_dir}' to it\")\n        deferred = []\n        for root, dirnames, filenames in os.walk(base_dir):\n            # Sort the directory names so that `os.walk` will walk them in a\n            # defined order on the next iteration.\n            dirnames.sort()\n            for name in sorted(filenames):\n                path = os.path.normpath(os.path.join(root, name))\n                if os.path.isfile(path):\n                    arcname = os.path.relpath(path, base_dir).replace(os.path.sep, \"/\")\n                    if arcname == self.record_path:\n                        pass\n                    elif root.endswith(\".dist-info\"):\n                        deferred.append((path, arcname))\n                    else:\n                        self.write(path, arcname)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/wheelfile.py",
      "line_number": 122
    },
    {
      "name": "expand.resolve_class",
      "source_code": "def resolve_class(\n    qualified_class_name: str,\n    package_dir: Mapping[str, str] | None = None,\n    root_dir: StrPath | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/expand.py",
      "line_number": 235
    },
    {
      "name": "cls.testing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_resolve_class",
      "source_code": ""
    },
    {
      "function": "write_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/wheelfile.py",
      "line": 122,
      "caller": "test_resolve_class",
      "source_code": "    def write_files(self, base_dir):\n        log.info(f\"creating '{self.filename}' and adding '{base_dir}' to it\")\n        deferred = []\n        for root, dirnames, filenames in os.walk(base_dir):\n            # Sort the directory names so that `os.walk` will walk them in a\n            # defined order on the next iteration.\n            dirnames.sort()\n            for name in sorted(filenames):\n                path = os.path.normpath(os.path.join(root, name))\n                if os.path.isfile(path):\n                    arcname = os.path.relpath(path, base_dir).replace(os.path.sep, \"/\")\n                    if arcname == self.record_path:\n                        pass\n                    elif root.endswith(\".dist-info\"):\n                        deferred.append((path, arcname))\n                    else:\n                        self.write(path, arcname)\n\n        deferred.sort()\n        for path, arcname in deferred:\n            self.write(path, arcname)\n\n"
    },
    {
      "function": "expand.resolve_class",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/expand.py",
      "line": 235,
      "caller": "test_resolve_class",
      "source_code": "def resolve_class(\n    qualified_class_name: str,\n    package_dir: Mapping[str, str] | None = None,\n    root_dir: StrPath | None = None,\n"
    },
    {
      "function": "cls.testing",
      "filename": "",
      "line": 0,
      "caller": "test_resolve_class",
      "source_code": ""
    },
    {
      "function": "cls",
      "filename": "",
      "line": 0,
      "caller": "test_resolve_class",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert cls().testing() == return_value"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_resolve_class(monkeypatch, tmp_path, package_dir, file, module, return_value):\n    monkeypatch.setattr(sys, \"modules\", {})  # reproducibility\n    files = {file: f\"class Custom:\\n    def testing(self): return {return_value}\"}\n    write_files(files, tmp_path)\n    cls = expand.resolve_class(f\"{module}.Custom\", package_dir, tmp_path)\n    assert cls().testing() == return_value"
}