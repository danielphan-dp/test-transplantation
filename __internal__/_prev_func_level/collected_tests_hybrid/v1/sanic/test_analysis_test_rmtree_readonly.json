{
  "test_name": "test_rmtree_readonly",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_shutil_wrapper.py",
  "static_methods": [
    {
      "name": "tmp_dir.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "tmp_dir.joinpath",
      "source_code": "    def joinpath(self, *other):\n        next = posixpath.join(self.at, *other)\n        return self._next(self.root.resolve_dir(next))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line_number": 488
    },
    {
      "name": "some_file.touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "some_file.chmod",
      "source_code": "    def chmod(*args: object, **kwargs: object) -> None:  # type: ignore[misc] # Mypy reuses the imported definition anyway\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_shutil.py",
      "line_number": 16
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_shutil.rmtree",
      "source_code": "def rmtree(dir: str, ignore_errors: bool = False) -> None:\n    shutil.rmtree(dir, ignore_errors=ignore_errors, onerror=rmtree_errorhandler)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/misc.py",
      "line_number": 128
    },
    {
      "name": "tmp_dir.is_dir",
      "source_code": "    def is_dir(self):\n        return not self.at or self.at.endswith(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line_number": 440
    }
  ],
  "dynamic_methods": [
    {
      "function": "tmp_dir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_rmtree_readonly",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "tmp_dir.joinpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line": 488,
      "caller": "test_rmtree_readonly",
      "source_code": "    def joinpath(self, *other):\n        next = posixpath.join(self.at, *other)\n        return self._next(self.root.resolve_dir(next))\n\n"
    },
    {
      "function": "some_file.touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_rmtree_readonly",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "some_file.chmod",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_shutil.py",
      "line": 16,
      "caller": "test_rmtree_readonly",
      "source_code": "    def chmod(*args: object, **kwargs: object) -> None:  # type: ignore[misc] # Mypy reuses the imported definition anyway\n        pass\n\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_rmtree_readonly",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_rmtree_readonly",
      "source_code": ""
    },
    {
      "function": "_shutil.rmtree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/misc.py",
      "line": 128,
      "caller": "test_rmtree_readonly",
      "source_code": "@retry(reraise=True, stop=stop_after_delay(3), wait=wait_fixed(0.5))\ndef rmtree(dir: str, ignore_errors: bool = False) -> None:\n    shutil.rmtree(dir, ignore_errors=ignore_errors, onerror=rmtree_errorhandler)\n\n\n"
    },
    {
      "function": "tmp_dir.is_dir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line": 440,
      "caller": "test_rmtree_readonly",
      "source_code": "    def is_dir(self):\n        return not self.at or self.at.endswith(\"/\")\n\n"
    }
  ],
  "assertions": [
    "assert chmod_fn.call_count == expected_count",
    "assert not tmp_dir.is_dir()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_rmtree_readonly(monkeypatch, tmp_path):\n    \"\"\"Verify onerr works as expected\"\"\"\n\n    tmp_dir = tmp_path / \"with_readonly\"\n    tmp_dir.mkdir()\n    some_file = tmp_dir.joinpath(\"file.txt\")\n    some_file.touch()\n    some_file.chmod(stat.S_IREAD)\n\n    expected_count = 1 if sys.platform.startswith(\"win\") else 0\n    chmod_fn = Mock(wraps=_shutil.attempt_chmod_verbose)\n    monkeypatch.setattr(_shutil, \"attempt_chmod_verbose\", chmod_fn)\n\n    _shutil.rmtree(tmp_dir)\n    assert chmod_fn.call_count == expected_count\n    assert not tmp_dir.is_dir()"
}