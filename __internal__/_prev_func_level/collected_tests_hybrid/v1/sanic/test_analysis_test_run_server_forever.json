{
  "test_name": "test_run_server_forever",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_runner.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_forever.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete.assert_has_calls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "remove_unix_socket.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.close.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_run_server_forever",
      "source_code": "def _run_server_forever(loop, before_stop, after_stop, cleanup, unix):\n    pid = os.getpid()\n    try:\n        server_logger.info(\"Starting worker [%s]\", pid)\n        loop.run_forever()\n    finally:\n        server_logger.info(\"Stopping worker [%s]\", pid)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/runners.py",
      "line_number": 179
    },
    {
      "name": "cleanup.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cleanup.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "KeyboardInterrupt",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_run_server_forever",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "loop.run_forever.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete.assert_has_calls",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "remove_unix_socket.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "loop.close.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "_run_server_forever",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/runners.py",
      "line": 179,
      "caller": "test_run_server_forever",
      "source_code": "def _run_server_forever(loop, before_stop, after_stop, cleanup, unix):\n    pid = os.getpid()\n    try:\n        server_logger.info(\"Starting worker [%s]\", pid)\n        loop.run_forever()\n    finally:\n        server_logger.info(\"Stopping worker [%s]\", pid)\n\n        loop.run_until_complete(before_stop())\n\n        if cleanup:\n            cleanup()\n\n        loop.run_until_complete(after_stop())\n        remove_unix_socket(unix)\n        loop.close()\n        server_logger.info(\"Worker complete [%s]\", pid)\n\n\n"
    },
    {
      "function": "cleanup.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "cleanup.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "KeyboardInterrupt",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_run_server_forever",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_run_server_forever",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('sanic.server.runners.remove_unix_socket')"
  ],
  "success": true,
  "test_source_code": "def test_run_server_forever(remove_unix_socket: Mock, do_cleanup: bool):\n    loop = Mock()\n    cleanup = Mock()\n    loop.run_forever = Mock(side_effect=KeyboardInterrupt())\n    before_stop = Mock()\n    before_stop.return_value = Mock()\n    after_stop = Mock()\n    after_stop.return_value = Mock()\n    unix = Mock()\n\n    with pytest.raises(KeyboardInterrupt):\n        _run_server_forever(\n            loop,\n            before_stop,\n            after_stop,\n            cleanup if do_cleanup else None,\n            unix,\n        )\n\n    loop.run_forever.assert_called_once_with()\n    loop.run_until_complete.assert_has_calls(\n        [call(before_stop.return_value), call(after_stop.return_value)]\n    )\n\n    if do_cleanup:\n        cleanup.assert_called_once_with()\n    else:\n        cleanup.assert_not_called()\n\n    remove_unix_socket.assert_called_once_with(unix)\n    loop.close.assert_called_once_with()"
}