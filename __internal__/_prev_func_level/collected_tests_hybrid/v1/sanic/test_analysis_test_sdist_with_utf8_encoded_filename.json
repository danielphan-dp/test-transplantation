{
  "test_name": "test_sdist_with_utf8_encoded_filename",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
  "static_methods": [
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sdist",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "self.make_strings",
      "source_code": "    def make_strings(cls, item):\n        if isinstance(item, dict):\n            return {key: cls.make_strings(value) for key, value in item.items()}\n        if isinstance(item, list):\n            return list(map(cls.make_strings, item))\n        return str(item)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line_number": 663
    },
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "decompose",
      "source_code": "def decompose(path):\n    if isinstance(path, str):\n        return unicodedata.normalize('NFD', path)\n    try:\n        path = path.decode('utf-8')\n        path = unicodedata.normalize('NFD', path)\n        path = path.encode('utf-8')\n    except UnicodeError:\n        pass  # Not UTF-8\n    return path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/unicode_utils.py",
      "line_number": 10
    },
    {
      "name": "filename.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "filename.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "filename.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "fail_on_ascii",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "fail_on_latin1_encoded_filenames",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": ""
    },
    {
      "function": "sdist",
      "filename": "",
      "line": 0,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": ""
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "self.make_strings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
      "line": 663,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "    @classmethod\n    def make_strings(cls, item):\n        if isinstance(item, dict):\n            return {key: cls.make_strings(value) for key, value in item.items()}\n        if isinstance(item, list):\n            return list(map(cls.make_strings, item))\n        return str(item)\n\n"
    },
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "decompose",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/unicode_utils.py",
      "line": 10,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "def decompose(path):\n    if isinstance(path, str):\n        return unicodedata.normalize('NFD', path)\n    try:\n        path = path.decode('utf-8')\n        path = unicodedata.normalize('NFD', path)\n        path = path.encode('utf-8')\n    except UnicodeError:\n        pass  # Not UTF-8\n    return path\n\n\n"
    },
    {
      "function": "filename.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "filename.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "filename.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "fail_on_ascii",
      "filename": "",
      "line": 0,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": ""
    },
    {
      "function": "fail_on_latin1_encoded_filenames",
      "filename": "",
      "line": 0,
      "caller": "test_sdist_with_utf8_encoded_filename",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert filename in cmd.filelist.files",
    "assert filename in cmd.filelist.files",
    "assert filename in cmd.filelist.files"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_sdist_with_utf8_encoded_filename(self):\n        # Test for #303.\n        dist = Distribution(self.make_strings(SETUP_ATTRS))\n        dist.script_name = 'setup.py'\n        cmd = sdist(dist)\n        cmd.ensure_finalized()\n\n        filename = os.path.join(b'sdist_test', Filenames.utf_8)\n        touch(filename)\n\n        with quiet():\n            cmd.run()\n\n        if sys.platform == 'darwin':\n            filename = decompose(filename)\n\n        fs_enc = sys.getfilesystemencoding()\n\n        if sys.platform == 'win32':\n            if fs_enc == 'cp1252':\n                # Python mangles the UTF-8 filename\n                filename = filename.decode('cp1252')\n                assert filename in cmd.filelist.files\n            else:\n                filename = filename.decode('mbcs')\n                assert filename in cmd.filelist.files\n        else:\n            filename = filename.decode('utf-8')\n            assert filename in cmd.filelist.files"
}