{
  "test_name": "test_send_inspect",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_inspector.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "FULL_SERIALIZED.encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    },
    {
      "name": "InspectorClient.do",
      "source_code": "    def do(self, action: str, **kwargs: Any) -> None:\n        if action == \"info\":\n            self.info()\n            return\n        result = self.request(action, **kwargs).get(\"result\")\n        if result:\n            out = (\n                dumps(result)\n                if isinstance(result, (list, dict))\n                else str(result)\n            )\n            sys.stdout.write(out + \"\\n\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/cli/inspector_client.py",
      "line_number": 44
    },
    {
      "name": "write.assert_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "write.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "InspectorClient.do",
      "source_code": "    def do(self, action: str, **kwargs: Any) -> None:\n        if action == \"info\":\n            self.info()\n            return\n        result = self.request(action, **kwargs).get(\"result\")\n        if result:\n            out = (\n                dumps(result)\n                if isinstance(result, (list, dict))\n                else str(result)\n            )\n            sys.stdout.write(out + \"\\n\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/cli/inspector_client.py",
      "line_number": 44
    },
    {
      "name": "write.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InspectorClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InspectorClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_send_inspect",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "FULL_SERIALIZED.encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_send_inspect",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    },
    {
      "function": "InspectorClient.do",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/cli/inspector_client.py",
      "line": 44,
      "caller": "test_send_inspect",
      "source_code": "    def do(self, action: str, **kwargs: Any) -> None:\n        if action == \"info\":\n            self.info()\n            return\n        result = self.request(action, **kwargs).get(\"result\")\n        if result:\n            out = (\n                dumps(result)\n                if isinstance(result, (list, dict))\n                else str(result)\n            )\n            sys.stdout.write(out + \"\\n\")\n\n"
    },
    {
      "function": "write.assert_called",
      "filename": "",
      "line": 0,
      "caller": "test_send_inspect",
      "source_code": ""
    },
    {
      "function": "write.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_send_inspect",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "InspectorClient.do",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/cli/inspector_client.py",
      "line": 44,
      "caller": "test_send_inspect",
      "source_code": "    def do(self, action: str, **kwargs: Any) -> None:\n        if action == \"info\":\n            self.info()\n            return\n        result = self.request(action, **kwargs).get(\"result\")\n        if result:\n            out = (\n                dumps(result)\n                if isinstance(result, (list, dict))\n                else str(result)\n            )\n            sys.stdout.write(out + \"\\n\")\n\n"
    },
    {
      "function": "write.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_send_inspect",
      "source_code": ""
    },
    {
      "function": "InspectorClient",
      "filename": "",
      "line": 0,
      "caller": "test_send_inspect",
      "source_code": ""
    },
    {
      "function": "InspectorClient",
      "filename": "",
      "line": 0,
      "caller": "test_send_inspect",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_send_inspect",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('sanic.cli.inspector_client.sys.stdout.write')"
  ],
  "success": true,
  "test_source_code": "def test_send_inspect(write, urlopen, command: str):\n    urlopen.read.return_value = FULL_SERIALIZED.encode()\n    InspectorClient(\"localhost\", 9999, False, False, None).do(command)\n    write.assert_called()\n    write.reset_mock()\n    InspectorClient(\"localhost\", 9999, False, True, None).do(command)\n    write.assert_called_with(OUT_SERIALIZED + \"\\n\")"
}