{
  "test_name": "test_serve_with_inspector",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_worker_serve.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Sanic.serve",
      "source_code": "def serve(\n    handler: Callable[[ServerConnection], None],\n    host: str | None = None,\n    port: int | None = None,\n    *,\n    # TCP/TLS\n    sock: socket.socket | None = None,\n    ssl: ssl_module.SSLContext | None = None,\n    # WebSocket\n    origins: Sequence[Origin | None] | None = None,\n    extensions: Sequence[ServerExtensionFactory] | None = None,\n    subprotocols: Sequence[Subprotocol] | None = None,\n    select_subprotocol: (\n        Callable[\n            [ServerConnection, Sequence[Subprotocol]],\n            Subprotocol | None,\n        ]\n        | None\n    ) = None,\n    process_request: (\n        Callable[\n            [ServerConnection, Request],\n            Response | None,\n        ]\n        | None\n    ) = None,\n    process_response: (\n        Callable[\n            [ServerConnection, Request, Response],\n            Response | None,\n        ]\n        | None\n    ) = None,\n    server_header: str | None = SERVER,\n    compression: str | None = \"deflate\",\n    # Timeouts\n    open_timeout: float | None = 10,\n    close_timeout: float | None = 10,\n    # Limits\n    max_size: int | None = 2**20,\n    max_queue: int | None | tuple[int | None, int | None] = 16,\n    # Logging\n    logger: LoggerLike | None = None,\n    # Escape hatch for advanced customization\n    create_connection: type[ServerConnection] | None = None,\n    **kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/sync/server.py",
      "line_number": 319
    },
    {
      "name": "Inspector.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WorkerManager.manage.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Inspector.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WorkerManager.manage.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_serve_with_inspector",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "Sanic.serve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/sync/server.py",
      "line": 319,
      "caller": "test_serve_with_inspector",
      "source_code": "def serve(\n    handler: Callable[[ServerConnection], None],\n    host: str | None = None,\n    port: int | None = None,\n    *,\n    # TCP/TLS\n    sock: socket.socket | None = None,\n    ssl: ssl_module.SSLContext | None = None,\n    # WebSocket\n    origins: Sequence[Origin | None] | None = None,\n    extensions: Sequence[ServerExtensionFactory] | None = None,\n    subprotocols: Sequence[Subprotocol] | None = None,\n    select_subprotocol: (\n        Callable[\n            [ServerConnection, Sequence[Subprotocol]],\n            Subprotocol | None,\n        ]\n        | None\n    ) = None,\n    process_request: (\n        Callable[\n            [ServerConnection, Request],\n            Response | None,\n        ]\n        | None\n    ) = None,\n    process_response: (\n        Callable[\n            [ServerConnection, Request, Response],\n            Response | None,\n        ]\n        | None\n    ) = None,\n    server_header: str | None = SERVER,\n    compression: str | None = \"deflate\",\n    # Timeouts\n    open_timeout: float | None = 10,\n    close_timeout: float | None = 10,\n    # Limits\n    max_size: int | None = 2**20,\n    max_queue: int | None | tuple[int | None, int | None] = 16,\n    # Logging\n    logger: LoggerLike | None = None,\n    # Escape hatch for advanced customization\n    create_connection: type[ServerConnection] | None = None,\n    **kwargs: Any,\n"
    },
    {
      "function": "Inspector.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "WorkerManager.manage.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "Inspector.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "WorkerManager.manage.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_serve_with_inspector",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_serve_with_inspector",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('sanic.mixins.startup.WorkerManager')"
  ],
  "success": true,
  "test_source_code": "def test_serve_with_inspector(\n    WorkerManager: Mock, mock_app: Mock, config: bool\n):\n    Inspector = Mock()\n    mock_app.config.INSPECTOR = config\n    mock_app.inspector_class = Inspector\n    inspector = Mock()\n    Inspector.return_value = inspector\n    WorkerManager.return_value = WorkerManager\n\n    Sanic.serve(mock_app)\n\n    if config:\n        Inspector.assert_called_once()\n        WorkerManager.manage.assert_called_once_with(\n            \"Inspector\", inspector, {}, transient=False\n        )\n    else:\n        Inspector.assert_not_called()\n        WorkerManager.manage.assert_not_called()"
}