{
  "test_name": "test_server_starts_http1_and_http3",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_server.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    },
    {
      "name": "app.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Sanic.serve_single",
      "source_code": "    def serve_single(cls, primary: Optional[Sanic] = None) -> None:\n        \"\"\"Serve a single process of a Sanic application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/startup.py",
      "line_number": 1209
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": ""
    },
    {
      "function": "app.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    },
    {
      "function": "app.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": ""
    },
    {
      "function": "Sanic.serve_single",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/startup.py",
      "line": 1209,
      "caller": "test_server_starts_http1_and_http3",
      "source_code": "    @classmethod\n    def serve_single(cls, primary: Optional[Sanic] = None) -> None:\n        \"\"\"Serve a single process of a Sanic application.\n\n        Similar to `serve`, but only serves a single process. When used,\n        certain features are disabled, such as `fast`, `workers`,\n        `multiplexer`, `auto_reload`, and the Inspector. It is almost\n        never needed to use this method directly. Instead, you should\n        use the CLI:\n\n        ```sh\n        sanic app.sanic:app --single-process\n        ```\n\n        Or, if you need to do it programmatically, you should use the\n        `single_process` argument of `run`:\n\n        ```python\n        app.run(single_process=True)\n        ```\n\n        Args:\n            primary (Optional[Sanic], optional): The primary Sanic application\n                to serve. Defaults to `None`.\n\n        Raises:\n            RuntimeError: Raised when no applications are found.\n            RuntimeError: Raised when no server information is found for the\n                primary application.\n            RuntimeError: Raised when attempting to serve HTTP/3 as a\n                secondary server.\n            RuntimeError: Raised when attempting to use both `fast` and\n                `workers`.\n            ValueError: Raised when `PROXIES_COUNT` is negative.\n        \"\"\"\n        os.environ[\"SANIC_MOTD_OUTPUT\"] = \"true\"\n        apps = list(cls._app_registry.values())\n\n        if not primary:\n            try:\n                primary = apps[0]\n            except IndexError:\n                raise RuntimeError(\"Did not find any applications.\")\n\n        # This exists primarily for unit testing\n        if not primary.state.server_info:  # no cov\n            for app in apps:\n                app.state.server_info.clear()\n            return\n\n        primary_server_info = primary.state.server_info[0]\n        primary.before_server_start(partial(primary._start_servers, apps=apps))\n        kwargs = {\n            k: v\n            for k, v in primary_server_info.settings.items()\n            if k\n            not in (\n                \"main_start\",\n                \"main_stop\",\n                \"app\",\n            )\n        }\n        kwargs[\"app_name\"] = primary.name\n        kwargs[\"app_loader\"] = None\n        sock = configure_socket(kwargs)\n\n        kwargs[\"server_info\"] = {}\n        kwargs[\"server_info\"][primary.name] = []\n        for server_info in primary.state.server_info:\n            server_info.settings = {\n                k: v\n                for k, v in server_info.settings.items()\n                if k not in (\"main_start\", \"main_stop\", \"app\")\n            }\n            kwargs[\"server_info\"][primary.name].append(server_info)\n\n        try:\n            worker_serve(monitor_publisher=None, **kwargs)\n        except BaseException:\n            error_logger.exception(\n                \"Experienced exception while trying to serve\"\n            )\n            raise\n        finally:\n            logger.info(\"Server Stopped\")\n            for app in apps:\n                app.state.server_info.clear()\n                app.router.reset()\n                app.signal_router.reset()\n\n            if sock:\n                sock.close()\n\n            cls._cleanup_env_vars()\n            cls._cleanup_apps()\n\n"
    }
  ],
  "assertions": [
    "assert ('sanic.root', logging.INFO, 'server: sanic, HTTP/1.1') in caplog.record_tuples",
    "assert ('sanic.root', logging.INFO, 'server: sanic, HTTP/3') in caplog.record_tuples"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_server_starts_http1_and_http3(app: Sanic, caplog):\n    @app.after_server_start\n    def shutdown(*_):\n        app.stop()\n\n    app.prepare(\n        version=3,\n        ssl={\n            \"cert\": localhost_dir / \"fullchain.pem\",\n            \"key\": localhost_dir / \"privkey.pem\",\n        },\n    )\n    app.prepare(\n        version=1,\n        ssl={\n            \"cert\": localhost_dir / \"fullchain.pem\",\n            \"key\": localhost_dir / \"privkey.pem\",\n        },\n    )\n    with caplog.at_level(logging.INFO):\n        Sanic.serve_single()\n\n    assert (\n        \"sanic.root\",\n        logging.INFO,\n        \"server: sanic, HTTP/1.1\",\n    ) in caplog.record_tuples\n    assert (\n        \"sanic.root\",\n        logging.INFO,\n        \"server: sanic, HTTP/3\",\n    ) in caplog.record_tuples"
}