{
  "test_name": "test_setup_install_includes_dependencies",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "project_root.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "install_root.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "self.create_project",
      "source_code": "    def create_project(self, root):\n        config = \"\"\"\n        [metadata]\n        name = project\n        version = 42",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 550
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "cp.stdout.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "project_root.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "install_root.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "self.create_project",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 550,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": "    def create_project(self, root):\n        config = \"\"\"\n        [metadata]\n        name = project\n        version = 42\n\n        [options]\n        install_requires = does-not-exist\n        py_modules = mod\n        \"\"\"\n        (root / 'setup.cfg').write_text(DALS(config), encoding=\"utf-8\")\n        (root / 'mod.py').touch()\n\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    },
    {
      "function": "cp.stdout.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_setup_install_includes_dependencies",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert cp.returncode != 0",
    "assert '/does-not-exist/' in {r.path for r in mock_index.requests}",
    "assert next((line for line in cp.stdout.splitlines() if 'not find suitable distribution for' in line and 'does-not-exist' in line))"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_install_includes_dependencies(self, tmp_path, mock_index):\n        \"\"\"\n        When ``python setup.py install`` is called directly, it will use easy_install\n        to fetch dependencies.\n        \"\"\"\n        # TODO: Remove these tests once `setup.py install` is completely removed\n        project_root = tmp_path / \"project\"\n        project_root.mkdir(exist_ok=True)\n        install_root = tmp_path / \"install\"\n        install_root.mkdir(exist_ok=True)\n\n        self.create_project(project_root)\n        cmd = [\n            sys.executable,\n            '-c',\n            '__import__(\"setuptools\").setup()',\n            'install',\n            '--install-base',\n            str(install_root),\n            '--install-lib',\n            str(install_root),\n            '--install-headers',\n            str(install_root),\n            '--install-scripts',\n            str(install_root),\n            '--install-data',\n            str(install_root),\n            '--install-purelib',\n            str(install_root),\n            '--install-platlib',\n            str(install_root),\n        ]\n        env = {**os.environ, \"__EASYINSTALL_INDEX\": mock_index.url}\n        cp = subprocess.run(\n            cmd,\n            cwd=str(project_root),\n            env=env,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            text=True,\n            encoding=\"utf-8\",\n        )\n        assert cp.returncode != 0\n        try:\n            assert '/does-not-exist/' in {r.path for r in mock_index.requests}\n            assert next(\n                line\n                for line in cp.stdout.splitlines()\n                if \"not find suitable distribution for\" in line\n                and \"does-not-exist\" in line\n            )\n        except Exception:\n            if \"failed to get random numbers\" in cp.stdout:\n                pytest.xfail(f\"{sys.platform} failure - {cp.stdout}\")\n            raise"
}