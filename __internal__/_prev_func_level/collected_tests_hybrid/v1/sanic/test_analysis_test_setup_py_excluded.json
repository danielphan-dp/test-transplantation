{
  "test_name": "test_setup_py_excluded",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sdist.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sdist",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "manifest_file.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_py_excluded",
      "source_code": ""
    },
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_py_excluded",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_setup_py_excluded",
      "source_code": ""
    },
    {
      "function": "sdist",
      "filename": "",
      "line": 0,
      "caller": "test_setup_py_excluded",
      "source_code": ""
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_py_excluded",
      "source_code": ""
    },
    {
      "function": "manifest_file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_setup_py_excluded",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_py_excluded",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    }
  ],
  "assertions": [
    "assert 'setup.py' not in manifest"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_py_excluded(self):\n        with open(\"MANIFEST.in\", \"w\", encoding=\"utf-8\") as manifest_file:\n            manifest_file.write(\"exclude setup.py\")\n\n        dist = Distribution(SETUP_ATTRS)\n        dist.script_name = 'foo.py'\n        cmd = sdist(dist)\n        cmd.ensure_finalized()\n\n        with quiet():\n            cmd.run()\n\n        manifest = cmd.filelist.files\n        assert 'setup.py' not in manifest"
}