{
  "test_name": "test_show_formats",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_sdist.py",
  "static_methods": [
    {
      "name": "show_formats",
      "source_code": "def show_formats():\n    \"\"\"Print all possible values for the 'formats' option (used by\n    the \"--help-formats\" command-line option).\n    \"\"\"\n    from ..archive_util import ARCHIVE_FORMATS\n    from ..fancy_getopt import FancyGetopt",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py",
      "line_number": 19
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ARCHIVE_FORMATS.keys",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 101
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "capsys.readouterr.out.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "line.strip.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "line.strip",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2421
    },
    {
      "name": "capsys.readouterr",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "show_formats",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/command/sdist.py",
      "line": 19,
      "caller": "test_show_formats",
      "source_code": "def show_formats():\n    \"\"\"Print all possible values for the 'formats' option (used by\n    the \"--help-formats\" command-line option).\n    \"\"\"\n    from ..archive_util import ARCHIVE_FORMATS\n    from ..fancy_getopt import FancyGetopt\n\n    formats = sorted(\n        (\"formats=\" + format, None, ARCHIVE_FORMATS[format][2])\n        for format in ARCHIVE_FORMATS.keys()\n    )\n    FancyGetopt(formats).print_help(\"List of available source distribution formats:\")\n\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_show_formats",
      "source_code": ""
    },
    {
      "function": "ARCHIVE_FORMATS.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 101,
      "caller": "test_show_formats",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_show_formats",
      "source_code": ""
    },
    {
      "function": "capsys.readouterr.out.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_show_formats",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "line.strip.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_show_formats",
      "source_code": ""
    },
    {
      "function": "line.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2421,
      "caller": "test_show_formats",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.\n\n    For example, to remove a set of items from both ends of an iterable:\n\n        >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n        >>> pred = lambda x: x in {None, False, ''}\n        >>> list(strip(iterable, pred))\n        [1, 2, None, 3]\n\n    This function is analogous to :func:`str.strip`.\n\n    \"\"\"\n    return rstrip(lstrip(iterable, pred), pred)\n\n\n"
    },
    {
      "function": "capsys.readouterr",
      "filename": "",
      "line": 0,
      "caller": "test_show_formats",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(output) == num_formats"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_show_formats(self, capsys):\n        show_formats()\n\n        # the output should be a header line + one line per format\n        num_formats = len(ARCHIVE_FORMATS.keys())\n        output = [\n            line\n            for line in capsys.readouterr().out.split('\\n')\n            if line.strip().startswith('--formats=')\n        ]\n        assert len(output) == num_formats"
}