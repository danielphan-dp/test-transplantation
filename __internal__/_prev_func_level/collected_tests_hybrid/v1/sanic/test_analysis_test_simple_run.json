{
  "test_name": "test_simple_run",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_install_data.py",
  "static_methods": [
    {
      "name": "self.create_dist",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 38
    },
    {
      "name": "install_data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.create_dist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 38,
      "caller": "test_simple_run",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.\n\n        This function creates:\n         - a Distribution instance using keywords\n         - a temporary directory with a package structure\n\n        It returns the package directory and the distribution\n        instance.\n        \"\"\"\n        tmp_dir = self.mkdtemp()\n        pkg_dir = os.path.join(tmp_dir, pkg_name)\n        os.mkdir(pkg_dir)\n        dist = Distribution(attrs=kw)\n\n        return pkg_dir, dist\n\n\n"
    },
    {
      "function": "install_data",
      "filename": "",
      "line": 0,
      "caller": "test_simple_run",
      "source_code": ""
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_simple_run",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_simple_run",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_simple_run",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_simple_run",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_simple_run",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_simple_run",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_simple_run",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert cmd.get_inputs() == [one, (inst2, [two]), three]",
    "assert len(cmd.get_outputs()) == 3",
    "assert os.path.exists(os.path.join(inst, rthree))",
    "assert os.path.exists(os.path.join(inst2, rtwo))",
    "assert os.path.exists(os.path.join(inst, rone))",
    "assert len(cmd.get_outputs()) == 3",
    "assert os.path.exists(os.path.join(inst, rthree))",
    "assert os.path.exists(os.path.join(inst2, rtwo))",
    "assert os.path.exists(os.path.join(inst, rone))",
    "assert len(cmd.get_outputs()) == 5",
    "assert os.path.exists(os.path.join(inst, rthree))",
    "assert os.path.exists(os.path.join(inst2, rtwo))",
    "assert os.path.exists(os.path.join(inst, rone))"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_simple_run(self):\n        pkg_dir, dist = self.create_dist()\n        cmd = install_data(dist)\n        cmd.install_dir = inst = os.path.join(pkg_dir, 'inst')\n\n        # data_files can contain\n        #  - simple files\n        #  - a Path object\n        #  - a tuple with a path, and a list of file\n        one = os.path.join(pkg_dir, 'one')\n        self.write_file(one, 'xxx')\n        inst2 = os.path.join(pkg_dir, 'inst2')\n        two = os.path.join(pkg_dir, 'two')\n        self.write_file(two, 'xxx')\n        three = pathlib.Path(pkg_dir) / 'three'\n        self.write_file(three, 'xxx')\n\n        cmd.data_files = [one, (inst2, [two]), three]\n        assert cmd.get_inputs() == [one, (inst2, [two]), three]\n\n        # let's run the command\n        cmd.ensure_finalized()\n        cmd.run()\n\n        # let's check the result\n        assert len(cmd.get_outputs()) == 3\n        rthree = os.path.split(one)[-1]\n        assert os.path.exists(os.path.join(inst, rthree))\n        rtwo = os.path.split(two)[-1]\n        assert os.path.exists(os.path.join(inst2, rtwo))\n        rone = os.path.split(one)[-1]\n        assert os.path.exists(os.path.join(inst, rone))\n        cmd.outfiles = []\n\n        # let's try with warn_dir one\n        cmd.warn_dir = True\n        cmd.ensure_finalized()\n        cmd.run()\n\n        # let's check the result\n        assert len(cmd.get_outputs()) == 3\n        assert os.path.exists(os.path.join(inst, rthree))\n        assert os.path.exists(os.path.join(inst2, rtwo))\n        assert os.path.exists(os.path.join(inst, rone))\n        cmd.outfiles = []\n\n        # now using root and empty dir\n        cmd.root = os.path.join(pkg_dir, 'root')\n        inst5 = os.path.join(pkg_dir, 'inst5')\n        four = os.path.join(cmd.install_dir, 'four')\n        self.write_file(four, 'xx')\n        cmd.data_files = [one, (inst2, [two]), three, ('inst5', [four]), (inst5, [])]\n        cmd.ensure_finalized()\n        cmd.run()\n\n        # let's check the result\n        assert len(cmd.get_outputs()) == 5\n        assert os.path.exists(os.path.join(inst, rthree))\n        assert os.path.exists(os.path.join(inst2, rtwo))\n        assert os.path.exists(os.path.join(inst, rone))"
}