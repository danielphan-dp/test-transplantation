{
  "test_name": "test_skip_discovery_with_setupcfg_metadata",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
  "static_methods": [
    {
      "name": "self._simulate_package_with_extension",
      "source_code": "    def _simulate_package_with_extension(self, tmp_path):\n        # This example is based on: https://github.com/nucleic/kiwi/tree/1.4.0\n        files = [\n            \"benchmarks/file.py\",\n            \"docs/Makefile\",\n            \"docs/requirements.txt\",\n            \"docs/source/conf.py\",\n            \"proj/header.h\",\n            \"proj/file.py\",\n            \"py/proj.cpp\",\n            \"py/other.cpp\",\n            \"py/file.py\",\n            \"py/py.typed\",\n            \"py/tests/test_proj.py\",\n            \"README.rst\",\n        ]\n        _populate_project_dir(tmp_path, files, {})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 334
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "_get_dist",
      "source_code": "def _get_dist(dist_path, attrs):\n    root = \"/\".join(os.path.split(dist_path))  # POSIX-style",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 616
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "dist.get_name",
      "source_code": "    def get_name(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/results.py",
      "line_number": 544
    },
    {
      "name": "dist.get_version",
      "source_code": "        def get_version(path_map, info_dir):\n            version = path = None\n            key = '%s/%s' % (info_dir, LEGACY_METADATA_FILENAME)\n            if key not in path_map:\n                key = '%s/PKG-INFO' % info_dir\n            if key in path_map:\n                path = path_map[key]\n                version = Metadata(path=path).version\n            return version, path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 893
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._simulate_package_with_extension",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 334,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "    def _simulate_package_with_extension(self, tmp_path):\n        # This example is based on: https://github.com/nucleic/kiwi/tree/1.4.0\n        files = [\n            \"benchmarks/file.py\",\n            \"docs/Makefile\",\n            \"docs/requirements.txt\",\n            \"docs/source/conf.py\",\n            \"proj/header.h\",\n            \"proj/file.py\",\n            \"py/proj.cpp\",\n            \"py/other.cpp\",\n            \"py/file.py\",\n            \"py/py.typed\",\n            \"py/tests/test_proj.py\",\n            \"README.rst\",\n        ]\n        _populate_project_dir(tmp_path, files, {})\n\n        setup_script = \"\"\"\n            from setuptools import Extension, setup\n\n            ext_modules = [\n                Extension(\n                    \"proj\",\n                    [\"py/proj.cpp\", \"py/other.cpp\"],\n                    include_dirs=[\".\"],\n                    language=\"c++\",\n                ),\n            ]\n            setup(ext_modules=ext_modules)\n        \"\"\"\n        (tmp_path / \"setup.py\").write_text(DALS(setup_script), encoding=\"utf-8\")\n\n"
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "_get_dist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 616,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "def _get_dist(dist_path, attrs):\n    root = \"/\".join(os.path.split(dist_path))  # POSIX-style\n\n    script = dist_path / 'setup.py'\n    if script.exists():\n        with Path(dist_path):\n            dist = cast(\n                Distribution,\n                distutils.core.run_setup(\"setup.py\", {}, stop_after=\"init\"),\n            )\n    else:\n        dist = Distribution(attrs)\n\n    dist.src_root = root\n    dist.script_name = \"setup.py\"\n    with Path(dist_path):\n        dist.parse_config_files()\n\n    dist.set_defaults()\n    return dist\n\n\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "dist.get_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/results.py",
      "line": 544,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "    def get_name(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.\n\n        Example::\n\n            integer = Word(nums)\n            ssn_expr = Regex(r\"\\d\\d\\d-\\d\\d-\\d\\d\\d\\d\")\n            house_number_expr = Suppress('#') + Word(nums, alphanums)\n            user_data = (Group(house_number_expr)(\"house_number\")\n                        | Group(ssn_expr)(\"ssn\")\n                        | Group(integer)(\"age\"))\n            user_info = user_data[1, ...]\n\n            result = user_info.parse_string(\"22 111-22-3333 #221B\")\n            for item in result:\n                print(item.get_name(), ':', item[0])\n\n        prints::\n\n            age : 22\n            ssn : 111-22-3333\n            house_number : 221B\n        \"\"\"\n        if self._name:\n            return self._name\n        elif self._parent:\n            par = self._parent()\n\n            def find_in_parent(sub):\n                return next(\n                    (\n                        k\n                        for k, vlist in par._tokdict.items()\n                        for v, loc in vlist\n                        if sub is v\n                    ),\n                    None,\n                )\n\n            return find_in_parent(self) if par else None\n        elif (\n            len(self) == 1\n            and len(self._tokdict) == 1\n            and next(iter(self._tokdict.values()))[0][1] in (0, -1)\n        ):\n            return next(iter(self._tokdict.keys()))\n        else:\n            return None\n\n"
    },
    {
      "function": "dist.get_version",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 893,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": "        def get_version(path_map, info_dir):\n            version = path = None\n            key = '%s/%s' % (info_dir, LEGACY_METADATA_FILENAME)\n            if key not in path_map:\n                key = '%s/PKG-INFO' % info_dir\n            if key in path_map:\n                path = path_map[key]\n                version = Metadata(path=path).version\n            return version, path\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_skip_discovery_with_setupcfg_metadata",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert dist.get_name() == 'proj'",
    "assert dist.get_version() == '42'",
    "assert dist.py_modules is None",
    "assert dist.packages is None",
    "assert len(dist.ext_modules) == 1",
    "assert dist.ext_modules[0].name == 'proj'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_skip_discovery_with_setupcfg_metadata(self, tmp_path):\n        \"\"\"Ensure that auto-discovery is not triggered when the project is based on\n        C-extensions only, for backward compatibility.\n        \"\"\"\n        self._simulate_package_with_extension(tmp_path)\n\n        pyproject = \"\"\"\n            [build-system]\n            requires = []\n            build-backend = 'setuptools.build_meta'\n        \"\"\"\n        (tmp_path / \"pyproject.toml\").write_text(DALS(pyproject), encoding=\"utf-8\")\n\n        setupcfg = \"\"\"\n            [metadata]\n            name = proj\n            version = 42\n        \"\"\"\n        (tmp_path / \"setup.cfg\").write_text(DALS(setupcfg), encoding=\"utf-8\")\n\n        dist = _get_dist(tmp_path, {})\n        assert dist.get_name() == \"proj\"\n        assert dist.get_version() == \"42\"\n        assert dist.py_modules is None\n        assert dist.packages is None\n        assert len(dist.ext_modules) == 1\n        assert dist.ext_modules[0].name == \"proj\""
}