{
  "test_name": "test_standard_forwarded",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_requests.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ) -> RouteWrapper:\n        \"\"\"Decorate a function to be registered as a route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 42
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 42,
      "caller": "test_standard_forwarded",
      "source_code": "    def route(\n        self,\n        uri: str,\n        methods: Optional[Iterable[str]] = None,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        stream: bool = False,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        ignore_body: bool = False,\n        apply: bool = True,\n        subprotocols: Optional[List[str]] = None,\n        websocket: bool = False,\n        unquote: bool = False,\n        static: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_standard_forwarded",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    }
  ],
  "assertions": [
    "assert response.json == {'for': '127.0.0.2', 'proto': 'ws'}",
    "assert request.remote_addr == '127.0.0.2'",
    "assert request.client_ip == '127.0.0.2'",
    "assert request.scheme == 'ws'",
    "assert request.server_name == 'local.site'",
    "assert request.server_port == 80",
    "assert response.json == {'for': '[::2]', 'proto': 'https', 'host': 'me.tld', 'path': '/app/', 'secret': 'mySecret'}",
    "assert request.remote_addr == '[::2]'",
    "assert request.server_name == 'me.tld'",
    "assert request.scheme == 'https'",
    "assert request.server_port == 443",
    "assert response.json == {'for': '127.0.0.2', 'proto': 'ws'}",
    "assert response.json == {}",
    "assert response.json == {'for': '127.0.0.2'}",
    "assert request.remote_addr == '127.0.0.2'",
    "assert response.json == {'for': '127.0.0.4', 'port': 1234, 'secret': 'mySecret'}",
    "assert response.json == {'for': 'test', 'quoted': '\\\\,x=x;y=\\\\', 'secret': 'mySecret'}",
    "assert response.json == {'for': 'test', 'secret': 'mySecret'}",
    "assert response.json == {'proto': 'wss', 'secret': 'mySecret'}",
    "assert response.json == {'proto': 'wss', 'secret': 'mySecret'}",
    "assert response.json == {'proto': 'wss', 'by': '[cafe::8000]', 'host': 'a:2', 'path': '/With Spaces\"Quoted\"/sanicApp?key=val', 'secret': 'mySecret'}",
    "assert response.json == {'for': '1.2.3.4', 'by': '_proxySecret'}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_standard_forwarded(app):\n    @app.route(\"/\")\n    async def handler(request):\n        return json(request.forwarded)\n\n    # Without configured FORWARDED_SECRET, x-headers should be respected\n    app.config.PROXIES_COUNT = 1\n    app.config.REAL_IP_HEADER = \"x-real-ip\"\n    headers = {\n        \"Forwarded\": (\n            'for=1.1.1.1, for=injected;host=\"'\n            ', for=\"[::2]\";proto=https;host=me.tld;'\n            'path=\"/app/\";secret=mySecret'\n            \",for=broken;;secret=b0rked\"\n            \", for=127.0.0.3;scheme=http;port=1234\"\n        ),\n        \"X-Real-IP\": \"127.0.0.2\",\n        \"X-Forwarded-For\": \"127.0.1.1\",\n        \"X-Scheme\": \"ws\",\n        \"Host\": \"local.site\",\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n    assert request.remote_addr == \"127.0.0.2\"\n    assert request.client_ip == \"127.0.0.2\"\n    assert request.scheme == \"ws\"\n    assert request.server_name == \"local.site\"\n    assert request.server_port == 80\n\n    app.config.FORWARDED_SECRET = \"mySecret\"\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"[::2]\",\n        \"proto\": \"https\",\n        \"host\": \"me.tld\",\n        \"path\": \"/app/\",\n        \"secret\": \"mySecret\",\n    }\n    assert request.remote_addr == \"[::2]\"\n    assert request.server_name == \"me.tld\"\n    assert request.scheme == \"https\"\n    assert request.server_port == 443\n\n    # Empty Forwarded header -> use X-headers\n    headers[\"Forwarded\"] = \"\"\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\", \"proto\": \"ws\"}\n\n    # Header present but not matching anything\n    request, response = app.test_client.get(\"/\", headers={\"Forwarded\": \".\"})\n    assert response.json == {}\n\n    # Forwarded header present but no matching secret -> use X-headers\n    headers = {\n        \"Forwarded\": \"for=1.1.1.1;secret=x, for=127.0.0.1\",\n        \"X-Real-IP\": \"127.0.0.2\",\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"127.0.0.2\"}\n    assert request.remote_addr == \"127.0.0.2\"\n\n    # Different formatting and hitting both ends of the header\n    headers = {\"Forwarded\": 'Secret=\"mySecret\";For=127.0.0.4;Port=1234'}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"127.0.0.4\",\n        \"port\": 1234,\n        \"secret\": \"mySecret\",\n    }\n\n    # Test escapes (modify this if you see anyone implementing quoted-pairs)\n    headers = {\"Forwarded\": 'for=test;quoted=\"\\\\,x=x;y=\\\\\";secret=mySecret'}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"for\": \"test\",\n        \"quoted\": \"\\\\,x=x;y=\\\\\",\n        \"secret\": \"mySecret\",\n    }\n\n    # Secret insulated by malformed field #1\n    headers = {\"Forwarded\": \"for=test;secret=mySecret;b0rked;proto=wss;\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"test\", \"secret\": \"mySecret\"}\n\n    # Secret insulated by malformed field #2\n    headers = {\"Forwarded\": \"for=test;b0rked;secret=mySecret;proto=wss\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Unexpected termination should not lose existing acceptable values\n    headers = {\"Forwarded\": \"b0rked;secret=mySecret;proto=wss\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"proto\": \"wss\", \"secret\": \"mySecret\"}\n\n    # Field normalization\n    headers = {\n        \"Forwarded\": 'PROTO=WSS;BY=\"CAFE::8000\";FOR=unknown;PORT=X;HOST=\"A:2\";'\n        'PATH=\"/With%20Spaces%22Quoted%22/sanicApp?key=val\";SECRET=mySecret'\n    }\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\n        \"proto\": \"wss\",\n        \"by\": \"[cafe::8000]\",\n        \"host\": \"a:2\",\n        \"path\": '/With Spaces\"Quoted\"/sanicApp?key=val',\n        \"secret\": \"mySecret\",\n    }\n\n    # Using \"by\" field as secret\n    app.config.FORWARDED_SECRET = \"_proxySecret\"\n    headers = {\"Forwarded\": \"for=1.2.3.4; by=_proxySecret\"}\n    request, response = app.test_client.get(\"/\", headers=headers)\n    assert response.json == {\"for\": \"1.2.3.4\", \"by\": \"_proxySecret\"}"
}