{
  "test_name": "test_triggered",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
  "static_methods": [
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Reloader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_reloader",
      "source_code": "def run_reloader(reloader):\n    def stop(*_):\n        reloader.stop()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
      "line_number": 39
    },
    {
      "name": "publisher.send.assert_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call_arg.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "call_arg.count",
      "source_code": "    def count(self, value):\n        return int(value in self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2241
    },
    {
      "name": "paths.add",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 214
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "Reloader",
      "filename": "",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "run_reloader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
      "line": 39,
      "caller": "test_triggered",
      "source_code": "def run_reloader(reloader):\n    def stop(*_):\n        reloader.stop()\n\n    signal.signal(signal.SIGALRM, stop)\n    signal.alarm(1)\n    reloader()\n\n\n"
    },
    {
      "function": "publisher.send.assert_called",
      "filename": "",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "call_arg.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "call_arg.count",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2241,
      "caller": "test_triggered",
      "source_code": "    def count(self, value):\n        return int(value in self)\n\n"
    },
    {
      "function": "paths.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 214,
      "caller": "test_triggered",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_triggered",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(paths) == 2",
    "assert call_arg.startswith('__ALL_PROCESSES__:')",
    "assert call_arg.count(',') == 1",
    "assert str(path) in call_arg"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_triggered(app_loader):\n    paths = set()\n\n    def check_file(filename, mtimes):\n        if (isinstance(filename, Path) and (filename.name == \"server.py\")) or (\n            isinstance(filename, str) and \"sanic/app.py\" in filename\n        ):\n            paths.add(str(filename))\n            return True\n        return False\n\n    reload_dir = Path(__file__).parent.parent / \"fake\"\n    publisher = Mock()\n    reloader = Reloader(publisher, 0.1, {reload_dir}, app_loader)\n    reloader.check_file = check_file  # type: ignore\n    run_reloader(reloader)\n\n    assert len(paths) == 2\n\n    publisher.send.assert_called()\n    call_arg = publisher.send.call_args_list[0][0][0]\n    assert call_arg.startswith(\"__ALL_PROCESSES__:\")\n    assert call_arg.count(\",\") == 1\n    for path in paths:\n        assert str(path) in call_arg"
}