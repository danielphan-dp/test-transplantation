{
  "test_name": "test_unicode_module_names",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_unicode_module_names",
      "source_code": ""
    },
    {
      "function": "self.build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_unicode_module_names",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_unicode_module_names",
      "source_code": ""
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_unicode_module_names",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert re.search('foo(_d)?\\\\..*', cmd.get_ext_filename(modules[0].name))",
    "assert re.search('f\u00f6\u00f6(_d)?\\\\..*', cmd.get_ext_filename(modules[1].name))",
    "assert cmd.get_export_symbols(modules[0]) == ['PyInit_foo']",
    "assert cmd.get_export_symbols(modules[1]) == ['PyInitU_f_1gaa']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unicode_module_names(self):\n        modules = [\n            Extension('foo', ['aaa'], optional=False),\n            Extension('f\u00f6\u00f6', ['uuu'], optional=False),\n        ]\n        dist = Distribution({'name': 'xx', 'ext_modules': modules})\n        cmd = self.build_ext(dist)\n        cmd.ensure_finalized()\n        assert re.search(r'foo(_d)?\\..*', cmd.get_ext_filename(modules[0].name))\n        assert re.search(r'f\u00f6\u00f6(_d)?\\..*', cmd.get_ext_filename(modules[1].name))\n        assert cmd.get_export_symbols(modules[0]) == ['PyInit_foo']\n        assert cmd.get_export_symbols(modules[1]) == ['PyInitU_f_1gaa']"
}