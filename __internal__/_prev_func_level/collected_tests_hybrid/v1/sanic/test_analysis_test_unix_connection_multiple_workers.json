{
  "test_name": "test_unix_connection_multiple_workers",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_unix_socket.py",
  "static_methods": [
    {
      "name": "use_context",
      "source_code": "def use_context(method: StartMethod):\n    from sanic import Sanic",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line_number": 65
    },
    {
      "name": "use_context",
      "source_code": "def use_context(method: StartMethod):\n    from sanic import Sanic",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line_number": 65
    },
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app_multi.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app_multi.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app_multi.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "app_multi.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app_multi.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    }
  ],
  "dynamic_methods": [
    {
      "function": "use_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line": 65,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "@contextmanager\ndef use_context(method: StartMethod):\n    from sanic import Sanic\n\n    orig = Sanic.start_method\n    Sanic.start_method = method\n    yield\n    Sanic.start_method = orig\n\n\n"
    },
    {
      "function": "use_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line": 65,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "@contextmanager\ndef use_context(method: StartMethod):\n    from sanic import Sanic\n\n    orig = Sanic.start_method\n    Sanic.start_method = method\n    yield\n    Sanic.start_method = orig\n\n\n"
    },
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": ""
    },
    {
      "function": "app_multi.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app_multi.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app_multi.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "app_multi.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app_multi.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_unix_connection_multiple_workers",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_unix_connection_multiple_workers():\n    with use_context(\"fork\"):\n        app_multi = Sanic(name=\"test\")\n        app_multi.get(\"/\")(handler)\n        app_multi.listener(\"after_server_start\")(client)\n        app_multi.run(host=\"myhost.invalid\", unix=SOCKPATH, workers=2)"
}