{
  "test_name": "test_unpickleable_exception",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_sandbox.py",
  "static_methods": [
    {
      "name": "CantPickleThis",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "saved_exc.resume",
      "source_code": "    def resume(self):\n        \"restore and re-raise any exception\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 147
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "CantPickleThis",
      "filename": "",
      "line": 0,
      "caller": "test_unpickleable_exception",
      "source_code": ""
    },
    {
      "function": "saved_exc.resume",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 147,
      "caller": "test_unpickleable_exception",
      "source_code": "    def resume(self):\n        \"restore and re-raise any exception\"\n\n        if '_saved' not in vars(self):\n            return\n\n        _type, exc = map(pickle.loads, self._saved)\n        raise exc.with_traceback(self._tb)\n\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unpickleable_exception",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(caught.value) == \"CantPickleThis('detail',)\""
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unpickleable_exception(self):\n        class CantPickleThis(Exception):\n            \"This Exception is unpickleable because it's not in globals\"\n\n            def __repr__(self) -> str:\n                return 'CantPickleThis%r' % (self.args,)\n\n        with setuptools.sandbox.ExceptionSaver() as saved_exc:\n            raise CantPickleThis('detail')\n\n        with pytest.raises(setuptools.sandbox.UnpickleableException) as caught:\n            saved_exc.resume()\n\n        assert str(caught.value) == \"CantPickleThis('detail',)\""
}