{
  "test_name": "test_use_correct_python_version_string",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "monkeypatch.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dist.get_command_obj",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 832
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist.get_command_obj",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 832
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "VersionStub",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "patch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "patch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "patch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hasattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.context",
      "filename": "",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "dist.get_command_obj",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 832,
      "caller": "test_use_correct_python_version_string",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )\n\n            klass = self.get_command_class(command)\n            cmd_obj = self.command_obj[command] = klass(self)\n            self.have_run[command] = False\n\n            # Set any options that were supplied in config files\n            # or on the command line.  (NB. support for error\n            # reporting is lame here: any errors aren't reported\n            # until 'finalize_options()' is called, which means\n            # we won't report the source of the error.)\n            options = self.command_options.get(command)\n            if options:\n                self._set_command_options(cmd_obj, options)\n\n        return cmd_obj\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "dist.get_command_obj",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 832,
      "caller": "test_use_correct_python_version_string",
      "source_code": "    def get_command_obj(self, command, create=True):\n        \"\"\"Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        \"\"\"\n        cmd_obj = self.command_obj.get(command)\n        if not cmd_obj and create:\n            if DEBUG:\n                self.announce(\n                    \"Distribution.get_command_obj(): \"\n                    f\"creating '{command}' command object\"\n                )\n\n            klass = self.get_command_class(command)\n            cmd_obj = self.command_obj[command] = klass(self)\n            self.have_run[command] = False\n\n            # Set any options that were supplied in config files\n            # or on the command line.  (NB. support for error\n            # reporting is lame here: any errors aren't reported\n            # until 'finalize_options()' is called, which means\n            # we won't report the source of the error.)\n            options = self.command_options.get(command)\n            if options:\n                self._set_command_options(cmd_obj, options)\n\n        return cmd_obj\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "monkeypatch.context",
      "filename": "",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "VersionStub",
      "filename": "",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "patch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "patch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "patch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "patch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "hasattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_use_correct_python_version_string",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert cmd.config_vars['py_version'] == '3.10.1'",
    "assert cmd.config_vars['py_version_short'] == '3.10'",
    "assert cmd.config_vars['py_version_nodot'] == '310'",
    "assert re.search(name + '3\\\\.?1\\\\d', install_dir)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_use_correct_python_version_string(tmpdir, tmpdir_cwd, monkeypatch):\n    # In issue #3001, easy_install wrongly uses the `python3.1` directory\n    # when the interpreter is `python3.10` and the `--user` option is given.\n    # See pypa/setuptools#3001.\n    dist = Distribution()\n    cmd = dist.get_command_obj('easy_install')\n    cmd.args = ['ok']\n    cmd.optimize = 0\n    cmd.user = True\n    cmd.install_userbase = str(tmpdir)\n    cmd.install_usersite = None\n    install_cmd = dist.get_command_obj('install')\n    install_cmd.install_userbase = str(tmpdir)\n    install_cmd.install_usersite = None\n\n    with monkeypatch.context() as patch, warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\")\n        version = '3.10.1 (main, Dec 21 2021, 09:17:12) [GCC 10.2.1 20210110]'\n        info = VersionStub(3, 10, 1, \"final\", 0)\n        patch.setattr('site.ENABLE_USER_SITE', True)\n        patch.setattr('sys.version', version)\n        patch.setattr('sys.version_info', info)\n        patch.setattr(cmd, 'create_home_path', mock.Mock())\n        cmd.finalize_options()\n\n    name = \"pypy\" if hasattr(sys, 'pypy_version_info') else \"python\"\n    install_dir = cmd.install_dir.lower()\n\n    # In some platforms (e.g. Windows), install_dir is mostly determined\n    # via `sysconfig`, which define constants eagerly at module creation.\n    # This means that monkeypatching `sys.version` to emulate 3.10 for testing\n    # may have no effect.\n    # The safest test here is to rely on the fact that 3.1 is no longer\n    # supported/tested, and make sure that if 'python3.1' ever appears in the string\n    # it is followed by another digit (e.g. 'python3.10').\n    if re.search(name + r'3\\.?1', install_dir):\n        assert re.search(name + r'3\\.?1\\d', install_dir)\n\n    # The following \"variables\" are used for interpolation in distutils\n    # installation schemes, so it should be fair to treat them as \"semi-public\",\n    # or at least public enough so we can have a test to make sure they are correct\n    assert cmd.config_vars['py_version'] == '3.10.1'\n    assert cmd.config_vars['py_version_short'] == '3.10'\n    assert cmd.config_vars['py_version_nodot'] == '310'"
}