{
  "test_name": "test_utf8_maintainer_in_metadata",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_pep621_example_project",
      "source_code": "def _pep621_example_project(\n    tmp_path,\n    readme=\"README.rst\",\n    pyproject_text=PEP621_EXAMPLE,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 159
    },
    {
      "name": "pyprojecttoml.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "pkg_file.read_text",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n    ) -> str:\n        with open(where(), encoding=encoding) as data:\n            return data.read()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line_number": 91
    },
    {
      "name": "makedist",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 33
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist.metadata.write_pkg_file",
      "source_code": "def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME\n    \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n    version = self.get_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line_number": 148
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": ""
    },
    {
      "function": "_pep621_example_project",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 159,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": "def _pep621_example_project(\n    tmp_path,\n    readme=\"README.rst\",\n    pyproject_text=PEP621_EXAMPLE,\n"
    },
    {
      "function": "pyprojecttoml.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "pkg_file.read_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line": 91,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": "    def read_text(\n        package: Package,\n        resource: Resource,\n        encoding: str = 'utf-8',\n        errors: str = 'strict'\n"
    },
    {
      "function": "makedist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 33,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})\n\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": ""
    },
    {
      "function": "dist.metadata.write_pkg_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line": 148,
      "caller": "test_utf8_maintainer_in_metadata",
      "source_code": "def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME\n    \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n    version = self.get_metadata_version()\n\n    def write_field(key, value):\n        file.write(\"%s: %s\\n\" % (key, value))\n\n    write_field('Metadata-Version', str(version))\n    write_field('Name', self.get_name())\n    write_field('Version', self.get_version())\n\n    summary = self.get_description()\n    if summary:\n        write_field('Summary', single_line(summary))\n\n    optional_fields = (\n        ('Home-page', 'url'),\n        ('Download-URL', 'download_url'),\n        ('Author', 'author'),\n        ('Author-email', 'author_email'),\n        ('Maintainer', 'maintainer'),\n        ('Maintainer-email', 'maintainer_email'),\n    )\n\n    for field, attr in optional_fields:\n        attr_val = getattr(self, attr, None)\n        if attr_val is not None:\n            write_field(field, attr_val)\n\n    license = self.get_license()\n    if license:\n        write_field('License', rfc822_escape(license))\n\n    for project_url in self.project_urls.items():\n        write_field('Project-URL', '%s, %s' % project_url)\n\n    keywords = ','.join(self.get_keywords())\n    if keywords:\n        write_field('Keywords', keywords)\n\n    platforms = self.get_platforms() or []\n    for platform in platforms:\n        write_field('Platform', platform)\n\n    self._write_list(file, 'Classifier', self.get_classifiers())\n\n    # PEP 314\n    self._write_list(file, 'Requires', self.get_requires())\n    self._write_list(file, 'Provides', self.get_provides())\n    self._write_list(file, 'Obsoletes', self.get_obsoletes())\n\n    # Setuptools specific for PEP 345\n    if hasattr(self, 'python_requires'):\n        write_field('Requires-Python', self.python_requires)\n\n    # PEP 566\n    if self.long_description_content_type:\n        write_field('Description-Content-Type', self.long_description_content_type)\n\n    self._write_list(file, 'License-File', self.license_files or [])\n    _write_requirements(self, file)\n\n    long_description = self.get_long_description()\n    if long_description:\n        file.write(\"\\n%s\" % long_description)\n        if not long_description.endswith(\"\\n\"):\n            file.write(\"\\n\")\n\n\n"
    }
  ],
  "assertions": [
    "assert dist.metadata.maintainer_email == expected_maintainers_meta_value",
    "assert f'Maintainer-email: {expected_maintainers_meta_value}' in content"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_utf8_maintainer_in_metadata(  # issue-3663\n    expected_maintainers_meta_value,\n    pyproject_text,\n    tmp_path,\n):\n    pyproject = _pep621_example_project(\n        tmp_path,\n        \"README\",\n        pyproject_text=pyproject_text,\n    )\n    dist = pyprojecttoml.apply_configuration(makedist(tmp_path), pyproject)\n    assert dist.metadata.maintainer_email == expected_maintainers_meta_value\n    pkg_file = tmp_path / \"PKG-FILE\"\n    with open(pkg_file, \"w\", encoding=\"utf-8\") as fh:\n        dist.metadata.write_pkg_file(fh)\n    content = pkg_file.read_text(encoding=\"utf-8\")\n    assert f\"Maintainer-email: {expected_maintainers_meta_value}\" in content"
}