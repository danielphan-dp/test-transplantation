{
  "test_name": "test_versioned_routes_get",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_routes.py",
  "static_methods": [
    {
      "name": "method.lower",
      "source_code": "    def lower(self):\n        return super().lower()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/importlib_metadata/_text.py",
      "line_number": 91
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "callable",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "client_method",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "func",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Exception",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    }
  ],
  "dynamic_methods": [
    {
      "function": "method.lower",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/importlib_metadata/_text.py",
      "line": 91,
      "caller": "test_versioned_routes_get",
      "source_code": "    @method_cache\n    def lower(self):\n        return super().lower()\n\n"
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "callable",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "client_method",
      "filename": "",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "func",
      "filename": "",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "Exception",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_versioned_routes_get",
      "source_code": ""
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_versioned_routes_get",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    }
  ],
  "assertions": [
    "assert response.status == 200"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_versioned_routes_get(app, method):\n    method = method.lower()\n\n    func = getattr(app, method)\n    if callable(func):\n\n        @func(f\"/{method}\", version=1)\n        def handler(request):\n            return text(\"OK\")\n\n    else:\n        raise Exception(f\"Method: {method} is not callable\")\n\n    client_method = getattr(app.test_client, method)\n\n    request, response = client_method(f\"/v1/{method}\")\n    assert response.status == 200"
}