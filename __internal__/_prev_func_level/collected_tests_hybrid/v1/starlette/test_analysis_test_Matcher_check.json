{
  "test_name": "test_Matcher_check",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "OSError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "OSError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "OSError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "OSError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "OSError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    },
    {
      "function": "OSError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_Matcher_check",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_Matcher_check() -> None:\n    def check_oserror_and_errno_is_5(e: BaseException) -> bool:\n        return isinstance(e, OSError) and e.errno == 5\n\n    with RaisesGroup(Matcher(check=check_oserror_and_errno_is_5)):\n        raise ExceptionGroup(\"\", (OSError(5, \"\"),))\n\n    # specifying exception_type narrows the parameter type to the callable\n    def check_errno_is_5(e: OSError) -> bool:\n        return e.errno == 5\n\n    with RaisesGroup(Matcher(OSError, check=check_errno_is_5)):\n        raise ExceptionGroup(\"\", (OSError(5, \"\"),))\n\n    with pytest.raises(ExceptionGroup):\n        with RaisesGroup(Matcher(OSError, check=check_errno_is_5)):\n            raise ExceptionGroup(\"\", (OSError(6, \"\"),))"
}