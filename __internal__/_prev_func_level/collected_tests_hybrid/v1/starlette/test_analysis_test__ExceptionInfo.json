{
  "test_name": "test__ExceptionInfo",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "trio.testing.RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.testing.RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "trio.testing.RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    },
    {
      "function": "trio.testing.RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test__ExceptionInfo",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert excinfo.type is ExceptionGroup",
    "assert excinfo.value.exceptions[0].args == ('hello',)",
    "assert isinstance(excinfo.tb, TracebackType)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test__ExceptionInfo(monkeypatch: pytest.MonkeyPatch) -> None:\n    monkeypatch.setattr(\n        trio.testing._raises_group,\n        \"ExceptionInfo\",\n        trio.testing._raises_group._ExceptionInfo,\n    )\n    with trio.testing.RaisesGroup(ValueError) as excinfo:\n        raise ExceptionGroup(\"\", (ValueError(\"hello\"),))\n    assert excinfo.type is ExceptionGroup\n    assert excinfo.value.exceptions[0].args == (\"hello\",)\n    assert isinstance(excinfo.tb, TracebackType)"
}