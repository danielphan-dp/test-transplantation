{
  "test_name": "test__body_framing",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "headers",
      "source_code": "    def headers(cl: Optional[int], te: bool) -> List[Tuple[str, str]]:\n        headers = []\n        if cl is not None:\n            headers.append((\"Content-Length\", str(cl)))\n        if te:\n            headers.append((\"Transfer-Encoding\", \"chunked\"))\n        return headers",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 63
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cast",
      "source_code": "    def cast(type_, value):  # noqa\n        return value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line_number": 47
    },
    {
      "name": "cast",
      "source_code": "    def cast(type_, value):  # noqa\n        return value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line_number": 47
    },
    {
      "name": "_body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 81
    },
    {
      "name": "_body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 81
    },
    {
      "name": "headers.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "headers.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "req",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 76
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "_body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 81
    },
    {
      "name": "req",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 76
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "headers",
      "source_code": "    def headers(cl: Optional[int], te: bool) -> List[Tuple[str, str]]:\n        headers = []\n        if cl is not None:\n            headers.append((\"Content-Length\", str(cl)))\n        if te:\n            headers.append((\"Transfer-Encoding\", \"chunked\"))\n        return headers",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 63
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "_body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 81
    },
    {
      "name": "req",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 76
    },
    {
      "name": "resp",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line_number": 71
    },
    {
      "name": "_body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 81
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test__body_framing",
      "source_code": ""
    },
    {
      "function": "headers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 63,
      "caller": "test__body_framing",
      "source_code": "    def headers(cl: Optional[int], te: bool) -> List[Tuple[str, str]]:\n        headers = []\n        if cl is not None:\n            headers.append((\"Content-Length\", str(cl)))\n        if te:\n            headers.append((\"Transfer-Encoding\", \"chunked\"))\n        return headers\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test__body_framing",
      "source_code": ""
    },
    {
      "function": "cast",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line": 47,
      "caller": "test__body_framing",
      "source_code": "    def cast(type_, value):  # noqa\n        return value\n"
    },
    {
      "function": "cast",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line": 47,
      "caller": "test__body_framing",
      "source_code": "    def cast(type_, value):  # noqa\n        return value\n"
    },
    {
      "function": "_body_framing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 81,
      "caller": "test__body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]\n"
    },
    {
      "function": "_body_framing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 81,
      "caller": "test__body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]\n"
    },
    {
      "function": "headers.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test__body_framing",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "headers.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test__body_framing",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "req",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 76,
      "caller": "test__body_framing",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)\n\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "_body_framing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 81,
      "caller": "test__body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]\n"
    },
    {
      "function": "req",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 76,
      "caller": "test__body_framing",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)\n\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "headers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 63,
      "caller": "test__body_framing",
      "source_code": "    def headers(cl: Optional[int], te: bool) -> List[Tuple[str, str]]:\n        headers = []\n        if cl is not None:\n            headers.append((\"Content-Length\", str(cl)))\n        if te:\n            headers.append((\"Transfer-Encoding\", \"chunked\"))\n        return headers\n\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "_body_framing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 81,
      "caller": "test__body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]\n"
    },
    {
      "function": "req",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 76,
      "caller": "test__body_framing",
      "source_code": "    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)\n\n"
    },
    {
      "function": "resp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
      "line": 71,
      "caller": "test__body_framing",
      "source_code": "    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n"
    },
    {
      "function": "_body_framing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 81,
      "caller": "test__body_framing",
      "source_code": "def _body_framing(\n    request_method: bytes, event: Union[Request, Response]\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test__body_framing",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert _body_framing(None, req()) == ('content-length', (0,))",
    "assert _body_framing(b'GET', resp()) == ('http/1.0', ())",
    "assert _body_framing(meth, r) == ('content-length', (100,))",
    "assert _body_framing(meth, r) == ('content-length', (0,))",
    "assert _body_framing(meth, r) == ('chunked', ())"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test__body_framing() -> None:\n    def headers(cl: Optional[int], te: bool) -> List[Tuple[str, str]]:\n        headers = []\n        if cl is not None:\n            headers.append((\"Content-Length\", str(cl)))\n        if te:\n            headers.append((\"Transfer-Encoding\", \"chunked\"))\n        return headers\n\n    def resp(\n        status_code: int = 200, cl: Optional[int] = None, te: bool = False\n    ) -> Response:\n        return Response(status_code=status_code, headers=headers(cl, te))\n\n    def req(cl: Optional[int] = None, te: bool = False) -> Request:\n        h = headers(cl, te)\n        h += [(\"Host\", \"example.com\")]\n        return Request(method=\"GET\", target=\"/\", headers=h)\n\n    # Special cases where the headers are ignored:\n    for kwargs in [{}, {\"cl\": 100}, {\"te\": True}, {\"cl\": 100, \"te\": True}]:\n        kwargs = cast(Dict[str, Any], kwargs)\n        for meth, r in [\n            (b\"HEAD\", resp(**kwargs)),\n            (b\"GET\", resp(status_code=204, **kwargs)),\n            (b\"GET\", resp(status_code=304, **kwargs)),\n        ]:\n            assert _body_framing(meth, r) == (\"content-length\", (0,))\n\n    # Transfer-encoding\n    for kwargs in [{\"te\": True}, {\"cl\": 100, \"te\": True}]:\n        kwargs = cast(Dict[str, Any], kwargs)\n        for meth, r in [(None, req(**kwargs)), (b\"GET\", resp(**kwargs))]:  # type: ignore\n            assert _body_framing(meth, r) == (\"chunked\", ())\n\n    # Content-Length\n    for meth, r in [(None, req(cl=100)), (b\"GET\", resp(cl=100))]:  # type: ignore\n        assert _body_framing(meth, r) == (\"content-length\", (100,))\n\n    # No headers\n    assert _body_framing(None, req()) == (\"content-length\", (0,))  # type: ignore\n    assert _body_framing(b\"GET\", resp()) == (\"http/1.0\", ())"
}