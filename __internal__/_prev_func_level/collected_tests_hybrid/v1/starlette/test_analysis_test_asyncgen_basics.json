{
  "test_name": "test_asyncgen_basics",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_asyncgen.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "collected.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "_core.wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "collected.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "collected.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "_core.current_effective_deadline",
      "source_code": "def current_effective_deadline() -> float:\n    \"\"\"Returns the current effective deadline for the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2744
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.aclose",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.aclose",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "saved.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "_core.current_effective_deadline",
      "source_code": "def current_effective_deadline() -> float:\n    \"\"\"Returns the current effective deadline for the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2744
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "example.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_asyncgen_basics",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_asyncgen_basics",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_asyncgen_basics",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_asyncgen_basics",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "collected.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_asyncgen_basics",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_asyncgen_basics",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "_core.wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_asyncgen_basics",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "collected.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_asyncgen_basics",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "collected.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_asyncgen_basics",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "_core.current_effective_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2744,
      "caller": "test_asyncgen_basics",
      "source_code": "def current_effective_deadline() -> float:\n    \"\"\"Returns the current effective deadline for the current task.\n\n    This function examines all the cancellation scopes that are currently in\n    effect (taking into account shielding), and returns the deadline that will\n    expire first.\n\n    One example of where this might be is useful is if your code is trying to\n    decide whether to begin an expensive operation like an RPC call, but wants\n    to skip it if it knows that it can't possibly complete in the available\n    time. Another example would be if you're using a protocol like gRPC that\n    `propagates timeout information to the remote peer\n    <http://www.grpc.io/docs/guides/concepts.html#deadlines>`__; this function\n    gives a way to fetch that information so you can send it along.\n\n    If this is called in a context where a cancellation is currently active\n    (i.e., a blocking call will immediately raise :exc:`Cancelled`), then\n    returned deadline is ``-inf``. If it is called in a context where no\n    scopes have a deadline set, it returns ``inf``.\n\n    Returns:\n        float: the effective deadline, as an absolute time.\n\n    \"\"\"\n    return current_task()._cancel_status.effective_deadline()\n\n\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "aiter_.aclose",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "aiter_.aclose",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "saved.asend",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_asyncgen_basics",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.current_effective_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2744,
      "caller": "test_asyncgen_basics",
      "source_code": "def current_effective_deadline() -> float:\n    \"\"\"Returns the current effective deadline for the current task.\n\n    This function examines all the cancellation scopes that are currently in\n    effect (taking into account shielding), and returns the deadline that will\n    expire first.\n\n    One example of where this might be is useful is if your code is trying to\n    decide whether to begin an expensive operation like an RPC call, but wants\n    to skip it if it knows that it can't possibly complete in the available\n    time. Another example would be if you're using a protocol like gRPC that\n    `propagates timeout information to the remote peer\n    <http://www.grpc.io/docs/guides/concepts.html#deadlines>`__; this function\n    gives a way to fetch that information so you can send it along.\n\n    If this is called in a context where a cancellation is currently active\n    (i.e., a blocking call will immediately raise :exc:`Cancelled`), then\n    returned deadline is ``-inf``. If it is called in a context where no\n    scopes have a deadline set, it returns ``inf``.\n\n    Returns:\n        float: the effective deadline, as an absolute time.\n\n    \"\"\"\n    return current_task()._cancel_status.effective_deadline()\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_asyncgen_basics",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "example.asend",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "aiter_.asend",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "aiter_.asend",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_asyncgen_basics",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert collected.pop() == 'outlived run'",
    "assert collected.pop() == 'abandoned'",
    "assert collected.pop() == 'exhausted 1'",
    "assert collected.pop() == 'exhausted 2'",
    "assert collected.pop() == 'exhausted 3'",
    "assert collected.pop() == 'exhausted 4'",
    "assert await saved[-1].asend(None) == 42",
    "assert collected == []",
    "assert agen.ag_frame is None",
    "assert 'async_main' in _core.current_task().name",
    "assert 'exhausted' in cause",
    "assert _core.current_effective_deadline() == inf",
    "assert await example('abandoned').asend(None) == 42",
    "assert await aiter_.asend(None) == 42",
    "assert val == 42",
    "assert await aiter_.asend(None) == 42",
    "assert val == 42",
    "assert 'exhausted' not in cause",
    "assert cause in task_name or task_name == '<init>'",
    "assert _core.current_effective_deadline() == -inf"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_asyncgen_basics() -> None:\n    collected = []\n\n    async def example(cause: str) -> AsyncGenerator[int, None]:\n        try:\n            with contextlib.suppress(GeneratorExit):\n                yield 42\n            await _core.checkpoint()\n        except _core.Cancelled:\n            assert \"exhausted\" not in cause\n            task_name = _core.current_task().name\n            assert cause in task_name or task_name == \"<init>\"\n            assert _core.current_effective_deadline() == -inf\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n            collected.append(cause)\n        else:\n            assert \"async_main\" in _core.current_task().name\n            assert \"exhausted\" in cause\n            assert _core.current_effective_deadline() == inf\n            await _core.checkpoint()\n            collected.append(cause)\n\n    saved = []\n\n    async def async_main() -> None:\n        # GC'ed before exhausted\n        with pytest.warns(\n            ResourceWarning, match=\"Async generator.*collected before.*exhausted\"\n        ):\n            assert await example(\"abandoned\").asend(None) == 42\n            gc_collect_harder()\n        await _core.wait_all_tasks_blocked()\n        assert collected.pop() == \"abandoned\"\n\n        aiter_ = example(\"exhausted 1\")\n        try:\n            assert await aiter_.asend(None) == 42\n        finally:\n            await aiter_.aclose()\n        assert collected.pop() == \"exhausted 1\"\n\n        # Also fine if you exhaust it at point of use\n        async for val in example(\"exhausted 2\"):\n            assert val == 42\n        assert collected.pop() == \"exhausted 2\"\n\n        gc_collect_harder()\n\n        # No problems saving the geniter when using either of these patterns\n        aiter_ = example(\"exhausted 3\")\n        try:\n            saved.append(aiter_)\n            assert await aiter_.asend(None) == 42\n        finally:\n            await aiter_.aclose()\n        assert collected.pop() == \"exhausted 3\"\n\n        # Also fine if you exhaust it at point of use\n        saved.append(example(\"exhausted 4\"))\n        async for val in saved[-1]:\n            assert val == 42\n        assert collected.pop() == \"exhausted 4\"\n\n        # Leave one referenced-but-unexhausted and make sure it gets cleaned up\n        saved.append(example(\"outlived run\"))\n        assert await saved[-1].asend(None) == 42\n        assert collected == []\n\n    _core.run(async_main)\n    assert collected.pop() == \"outlived run\"\n    for agen in saved:\n        assert agen.ag_frame is None"
}