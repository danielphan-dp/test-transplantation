{
  "test_name": "test_calls_context_processors",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_templates.py",
  "static_methods": [
    {
      "name": "path.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Jinja2Templates",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "templates.TemplateResponse",
      "source_code": "    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n    ) -> _TemplateResponse: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line_number": 134
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "response.context.keys",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line_number": 1281
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "path.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_calls_context_processors",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_calls_context_processors",
      "source_code": ""
    },
    {
      "function": "Jinja2Templates",
      "filename": "",
      "line": 0,
      "caller": "test_calls_context_processors",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_calls_context_processors",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_calls_context_processors",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "templates.TemplateResponse",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line": 134,
      "caller": "test_calls_context_processors",
      "source_code": "    @typing.overload\n    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_calls_context_processors",
      "source_code": ""
    },
    {
      "function": "response.context.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line": 1281,
      "caller": "test_calls_context_processors",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())\n\n"
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_calls_context_processors",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.text == '<html>Hello World</html>'",
    "assert response.template.name == 'index.html'",
    "assert set(response.context.keys()) == {'request', 'username'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_calls_context_processors(tmp_path: Path, test_client_factory: TestClientFactory) -> None:\n    path = tmp_path / \"index.html\"\n    path.write_text(\"<html>Hello {{ username }}</html>\")\n\n    async def homepage(request: Request) -> Response:\n        return templates.TemplateResponse(request, \"index.html\")\n\n    def hello_world_processor(request: Request) -> dict[str, str]:\n        return {\"username\": \"World\"}\n\n    app = Starlette(\n        debug=True,\n        routes=[Route(\"/\", endpoint=homepage)],\n    )\n    templates = Jinja2Templates(\n        directory=tmp_path,\n        context_processors=[\n            hello_world_processor,\n        ],\n    )\n\n    client = test_client_factory(app)\n    response = client.get(\"/\")\n    assert response.text == \"<html>Hello World</html>\"\n    assert response.template.name == \"index.html\"  # type: ignore\n    assert set(response.context.keys()) == {\"request\", \"username\"}"
}