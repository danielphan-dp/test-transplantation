{
  "test_name": "test_cancel_points",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "_core.checkpoint_if_cancelled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint_if_cancelled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sleep_forever",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_cancel_points",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_cancel_points",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_cancel_points",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_cancel_points",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_cancel_points",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_cancel_points",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_cancel_points",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_cancel_points",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "_core.checkpoint_if_cancelled",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint_if_cancelled",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "sleep_forever",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_cancel_points",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_cancel_points() -> None:\n    async def main1() -> None:\n        with _core.CancelScope() as scope:\n            await _core.checkpoint_if_cancelled()\n            scope.cancel()\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint_if_cancelled()\n\n    _core.run(main1)\n\n    async def main2() -> None:\n        with _core.CancelScope() as scope:\n            await _core.checkpoint()\n            scope.cancel()\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n\n    _core.run(main2)\n\n    async def main3() -> None:\n        with _core.CancelScope() as scope:\n            scope.cancel()\n            with pytest.raises(_core.Cancelled):\n                await sleep_forever()\n\n    _core.run(main3)\n\n    async def main4() -> None:\n        with _core.CancelScope() as scope:\n            scope.cancel()\n            await _core.cancel_shielded_checkpoint()\n            await _core.cancel_shielded_checkpoint()\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n\n    _core.run(main4)"
}