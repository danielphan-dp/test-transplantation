{
  "test_name": "test_comparison_op",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
  "static_methods": [
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "self.assert_emit",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n    ) -> None:\n        block = BasicBlock(0)\n        block.ops.append(op)\n        value_names = generate_names_for_ir(self.registers, [block])\n        emitter = Emitter(self.context, value_names)\n        declarations = Emitter(self.context, value_names)\n        emitter.fragments = []\n        declarations.fragments = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line_number": 807
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ComparisonOp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "self.assert_emit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
      "line": 807,
      "caller": "test_comparison_op",
      "source_code": "    def assert_emit(\n        self,\n        op: Op,\n        expected: str,\n        next_block: BasicBlock | None = None,\n        *,\n        rare: bool = False,\n        next_branch: Branch | None = None,\n        skip_next: bool = False,\n"
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    },
    {
      "function": "ComparisonOp",
      "filename": "",
      "line": 0,
      "caller": "test_comparison_op",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_comparison_op(self) -> None:\n        # signed\n        self.assert_emit(\n            ComparisonOp(self.s1, self.s2, ComparisonOp.SLT, 1),\n            \"\"\"cpy_r_r0 = (Py_ssize_t)cpy_r_s1 < (Py_ssize_t)cpy_r_s2;\"\"\",\n        )\n        self.assert_emit(\n            ComparisonOp(self.i32, self.i32_1, ComparisonOp.SLT, 1),\n            \"\"\"cpy_r_r0 = cpy_r_i32 < cpy_r_i32_1;\"\"\",\n        )\n        self.assert_emit(\n            ComparisonOp(self.i64, self.i64_1, ComparisonOp.SLT, 1),\n            \"\"\"cpy_r_r0 = cpy_r_i64 < cpy_r_i64_1;\"\"\",\n        )\n        # unsigned\n        self.assert_emit(\n            ComparisonOp(self.s1, self.s2, ComparisonOp.ULT, 1),\n            \"\"\"cpy_r_r0 = cpy_r_s1 < cpy_r_s2;\"\"\",\n        )\n        self.assert_emit(\n            ComparisonOp(self.i32, self.i32_1, ComparisonOp.ULT, 1),\n            \"\"\"cpy_r_r0 = (uint32_t)cpy_r_i32 < (uint32_t)cpy_r_i32_1;\"\"\",\n        )\n        self.assert_emit(\n            ComparisonOp(self.i64, self.i64_1, ComparisonOp.ULT, 1),\n            \"\"\"cpy_r_r0 = (uint64_t)cpy_r_i64 < (uint64_t)cpy_r_i64_1;\"\"\",\n        )\n\n        # object type\n        self.assert_emit(\n            ComparisonOp(self.o, self.o2, ComparisonOp.EQ, 1),\n            \"\"\"cpy_r_r0 = cpy_r_o == cpy_r_o2;\"\"\",\n        )\n        self.assert_emit(\n            ComparisonOp(self.o, self.o2, ComparisonOp.NEQ, 1),\n            \"\"\"cpy_r_r0 = cpy_r_o != cpy_r_o2;\"\"\",\n        )"
}