{
  "test_name": "test_config_types",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_config.py",
  "static_methods": [
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "assert_type",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1153
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "int",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    }
  ],
  "dynamic_methods": [
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_config_types",
      "source_code": ""
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "assert_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1153,
      "caller": "test_config_types",
      "source_code": "    def assert_type(val, typ, /):\n        \"\"\"Assert (to the type checker) that the value is of the given type.\n\n        When the type checker encounters a call to assert_type(), it\n        emits an error if the value is not of the specified type::\n\n            def greet(name: str) -> None:\n                assert_type(name, str)  # ok\n                assert_type(name, int)  # type checker error\n\n        At runtime this returns the first argument unchanged and otherwise\n        does nothing.\n        \"\"\"\n        return val\n\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "int",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config_types",
      "source_code": ""
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config_types",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    }
  ],
  "assertions": [
    "assert_type(config('STR'), str)",
    "assert_type(config('STR_DEFAULT', default=''), str)",
    "assert_type(config('STR_CAST', cast=str), str)",
    "assert_type(config('STR_NONE', default=None), Optional[str])",
    "assert_type(config('STR_CAST_NONE', cast=str, default=None), Optional[str])",
    "assert_type(config('STR_CAST_STR', cast=str, default=''), str)",
    "assert_type(config('BOOL', cast=bool), bool)",
    "assert_type(config('BOOL_DEFAULT', cast=bool, default=False), bool)",
    "assert_type(config('BOOL_NONE', cast=bool, default=None), Optional[bool])"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_config_types() -> None:\n    \"\"\"\n    We use `assert_type` to test the types returned by Config via mypy.\n    \"\"\"\n    config = Config(environ={\"STR\": \"some_str_value\", \"STR_CAST\": \"some_str_value\", \"BOOL\": \"true\"})\n\n    assert_type(config(\"STR\"), str)\n    assert_type(config(\"STR_DEFAULT\", default=\"\"), str)\n    assert_type(config(\"STR_CAST\", cast=str), str)\n    assert_type(config(\"STR_NONE\", default=None), Optional[str])\n    assert_type(config(\"STR_CAST_NONE\", cast=str, default=None), Optional[str])\n    assert_type(config(\"STR_CAST_STR\", cast=str, default=\"\"), str)\n\n    assert_type(config(\"BOOL\", cast=bool), bool)\n    assert_type(config(\"BOOL_DEFAULT\", cast=bool, default=False), bool)\n    assert_type(config(\"BOOL_NONE\", cast=bool, default=None), Optional[bool])\n\n    def cast_to_int(v: Any) -> int:\n        return int(v)\n\n    # our type annotations allow these `cast` and `default` configurations, but\n    # the code will error at runtime.\n    with pytest.raises(ValueError):\n        config(\"INT_CAST_DEFAULT_STR\", cast=cast_to_int, default=\"true\")\n    with pytest.raises(ValueError):\n        config(\"INT_DEFAULT_STR\", cast=int, default=\"true\")"
}