{
  "test_name": "test_cors_preflight_allow_all_methods",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_cors.py",
  "static_methods": [
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.options",
      "source_code": "def options():\n    return [\n        (('-n', '--no-jekyll'), dict(\n            dest='nojekyll',\n            default=False,\n            action=\"store_true\",\n            help='Include a .nojekyll file in the branch.',\n        )),\n        (('-c', '--cname'), dict(\n            dest='cname',\n            default=None,\n            help='Write a CNAME file with the given CNAME.',\n        )),\n        (('-m', '--message'), dict(\n            dest='mesg',\n            default='Update documentation',\n            help='The commit message to use on the target branch.',\n        )),\n        (('-p', '--push'), dict(\n            dest='push',\n            default=False,\n            action='store_true',\n            help='Push the branch to origin/{branch} after committing.',\n        )),\n        (('-x', '--prefix'), dict(\n            dest='prefix',\n            default=None,\n            help='The prefix to add to each file that gets pushed to the '\n                 'remote. Only files below this prefix will be cleared '\n                 'out. [%(default)s]',\n        )),\n        (('-f', '--force'), dict(\n            dest='force',\n            default=False, action='store_true',\n            help='Force the push to the repository.',\n        )),\n        (('-o', '--no-history'), dict(\n            dest='no_history',\n            default=False,\n            action='store_true',\n            help='Force new commit without parent history.',\n        )),\n        (('-r', '--remote'), dict(\n            dest='remote',\n            default='origin',\n            help='The name of the remote to push to. [%(default)s]',\n        )),\n        (('-b', '--branch'), dict(\n            dest='branch',\n            default='gh-pages',\n            help='Name of the branch to write to. [%(default)s]',\n        )),\n        (('-s', '--shell'), dict(\n            dest='use_shell',\n            default=False,\n            action='store_true',\n            help='Use the shell when invoking Git. [%(default)s]',\n        )),\n        (('-l', '--follow-links'), dict(\n            dest='followlinks',\n            default=False,\n            action='store_true',\n            help='Follow symlinks when adding files. [%(default)s]',\n        ))\n    ]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 199
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Middleware",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_cors_preflight_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_cors_preflight_allow_all_methods",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.options",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 199,
      "caller": "test_cors_preflight_allow_all_methods",
      "source_code": "def options():\n    return [\n        (('-n', '--no-jekyll'), dict(\n            dest='nojekyll',\n            default=False,\n            action=\"store_true\",\n            help='Include a .nojekyll file in the branch.',\n        )),\n        (('-c', '--cname'), dict(\n            dest='cname',\n            default=None,\n            help='Write a CNAME file with the given CNAME.',\n        )),\n        (('-m', '--message'), dict(\n            dest='mesg',\n            default='Update documentation',\n            help='The commit message to use on the target branch.',\n        )),\n        (('-p', '--push'), dict(\n            dest='push',\n            default=False,\n            action='store_true',\n            help='Push the branch to origin/{branch} after committing.',\n        )),\n        (('-x', '--prefix'), dict(\n            dest='prefix',\n            default=None,\n            help='The prefix to add to each file that gets pushed to the '\n                 'remote. Only files below this prefix will be cleared '\n                 'out. [%(default)s]',\n        )),\n        (('-f', '--force'), dict(\n            dest='force',\n            default=False, action='store_true',\n            help='Force the push to the repository.',\n        )),\n        (('-o', '--no-history'), dict(\n            dest='no_history',\n            default=False,\n            action='store_true',\n            help='Force new commit without parent history.',\n        )),\n        (('-r', '--remote'), dict(\n            dest='remote',\n            default='origin',\n            help='The name of the remote to push to. [%(default)s]',\n        )),\n        (('-b', '--branch'), dict(\n            dest='branch',\n            default='gh-pages',\n            help='Name of the branch to write to. [%(default)s]',\n        )),\n        (('-s', '--shell'), dict(\n            dest='use_shell',\n            default=False,\n            action='store_true',\n            help='Use the shell when invoking Git. [%(default)s]',\n        )),\n        (('-l', '--follow-links'), dict(\n            dest='followlinks',\n            default=False,\n            action='store_true',\n            help='Follow symlinks when adding files. [%(default)s]',\n        ))\n    ]\n\n\n"
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_cors_preflight_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "Middleware",
      "filename": "",
      "line": 0,
      "caller": "test_cors_preflight_allow_all_methods",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.status_code == 200",
    "assert method in response.headers['access-control-allow-methods']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cors_preflight_allow_all_methods(\n    test_client_factory: TestClientFactory,\n) -> None:\n    def homepage(request: Request) -> None:\n        pass  # pragma: no cover\n\n    app = Starlette(\n        routes=[Route(\"/\", endpoint=homepage)],\n        middleware=[Middleware(CORSMiddleware, allow_origins=[\"*\"], allow_methods=[\"*\"])],\n    )\n\n    client = test_client_factory(app)\n\n    headers = {\n        \"Origin\": \"https://example.org\",\n        \"Access-Control-Request-Method\": \"POST\",\n    }\n\n    for method in (\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"):\n        response = client.options(\"/\", headers=headers)\n        assert response.status_code == 200\n        assert method in response.headers[\"access-control-allow-methods\"]"
}