{
  "test_name": "test_delegation_to_existing_hooks",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_asyncgen.py",
  "static_methods": [
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "step_outside_async_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "example.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "example",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "step_outside_async_context",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    },
    {
      "function": "_core.wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    },
    {
      "function": "example.asend",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    },
    {
      "function": "example",
      "filename": "",
      "line": 0,
      "caller": "test_delegation_to_existing_hooks",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert await example('ours').asend(None) == 42",
    "assert record == ['firstiter theirs', 'finalizer theirs']",
    "assert record == ['trio collected ours']",
    "assert sys.get_asyncgen_hooks() == (my_firstiter, my_finalizer)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_delegation_to_existing_hooks() -> None:\n    record = []\n\n    def my_firstiter(agen: AsyncGenerator[object, NoReturn]) -> None:\n        record.append(\"firstiter \" + agen.ag_frame.f_locals[\"arg\"])\n\n    def my_finalizer(agen: AsyncGenerator[object, NoReturn]) -> None:\n        record.append(\"finalizer \" + agen.ag_frame.f_locals[\"arg\"])\n\n    async def example(arg: str) -> AsyncGenerator[int, None]:\n        try:\n            yield 42\n        finally:\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n            record.append(\"trio collected \" + arg)\n\n    async def async_main() -> None:\n        await step_outside_async_context(example(\"theirs\"))\n        assert await example(\"ours\").asend(None) == 42\n        gc_collect_harder()\n        assert record == [\"firstiter theirs\", \"finalizer theirs\"]\n        record[:] = []\n        await _core.wait_all_tasks_blocked()\n        assert record == [\"trio collected ours\"]\n\n    with restore_unraisablehook():\n        old_hooks = sys.get_asyncgen_hooks()\n        sys.set_asyncgen_hooks(my_firstiter, my_finalizer)\n        try:\n            _core.run(async_main)\n        finally:\n            assert sys.get_asyncgen_hooks() == (my_firstiter, my_finalizer)\n            sys.set_asyncgen_hooks(*old_hooks)"
}