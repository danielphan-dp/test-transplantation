{
  "test_name": "test_dollar_matches_twice",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "regex.compile",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.compile",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "pattern.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    }
  ],
  "dynamic_methods": [
    {
      "function": "regex.compile",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "regex.compile",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dollar_matches_twice",
      "source_code": ""
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "pattern.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_dollar_matches_twice",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dollar_matches_twice(self):\n        # $ matches the end of string, and just before the terminating \\n.\n        pattern = regex.compile('$')\n        self.assertEqual(pattern.sub('#', 'a\\nb\\n'), 'a\\nb#\\n#')\n        self.assertEqual(pattern.sub('#', 'a\\nb\\nc'), 'a\\nb\\nc#')\n        self.assertEqual(pattern.sub('#', '\\n'), '#\\n#')\n\n        pattern = regex.compile('$', regex.MULTILINE)\n        self.assertEqual(pattern.sub('#', 'a\\nb\\n' ), 'a#\\nb#\\n#')\n        self.assertEqual(pattern.sub('#', 'a\\nb\\nc'), 'a#\\nb#\\nc#')\n        self.assertEqual(pattern.sub('#', '\\n'), '#\\n#')"
}