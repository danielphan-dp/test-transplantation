{
  "test_name": "test_encode_int_values",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_literals.py",
  "static_methods": [
    {
      "name": "_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 237
    },
    {
      "name": "_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 237
    },
    {
      "name": "_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 237
    },
    {
      "name": "_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 237
    },
    {
      "name": "_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 237
    }
  ],
  "dynamic_methods": [
    {
      "function": "_encode_int_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 237,
      "caller": "test_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.\n\n    Values are stored in base 10 and separated by 0 bytes.\n    \"\"\"\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        encoded = b\"%d\" % value\n        if line_len > 0 and line_len + len(encoded) > 70:\n            result.append(format_int(len(line)) + b\"\\0\".join(line))\n            line = []\n            line_len = 0\n        line.append(encoded)\n        line_len += len(encoded)\n    if line:\n        result.append(format_int(len(line)) + b\"\\0\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_int_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 237,
      "caller": "test_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.\n\n    Values are stored in base 10 and separated by 0 bytes.\n    \"\"\"\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        encoded = b\"%d\" % value\n        if line_len > 0 and line_len + len(encoded) > 70:\n            result.append(format_int(len(line)) + b\"\\0\".join(line))\n            line = []\n            line_len = 0\n        line.append(encoded)\n        line_len += len(encoded)\n    if line:\n        result.append(format_int(len(line)) + b\"\\0\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_int_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 237,
      "caller": "test_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.\n\n    Values are stored in base 10 and separated by 0 bytes.\n    \"\"\"\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        encoded = b\"%d\" % value\n        if line_len > 0 and line_len + len(encoded) > 70:\n            result.append(format_int(len(line)) + b\"\\0\".join(line))\n            line = []\n            line_len = 0\n        line.append(encoded)\n        line_len += len(encoded)\n    if line:\n        result.append(format_int(len(line)) + b\"\\0\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_int_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 237,
      "caller": "test_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.\n\n    Values are stored in base 10 and separated by 0 bytes.\n    \"\"\"\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        encoded = b\"%d\" % value\n        if line_len > 0 and line_len + len(encoded) > 70:\n            result.append(format_int(len(line)) + b\"\\0\".join(line))\n            line = []\n            line_len = 0\n        line.append(encoded)\n        line_len += len(encoded)\n    if line:\n        result.append(format_int(len(line)) + b\"\\0\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_int_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 237,
      "caller": "test_encode_int_values",
      "source_code": "def _encode_int_values(values: dict[int, int]) -> list[bytes]:\n    \"\"\"Encode int values into C strings.\n\n    Values are stored in base 10 and separated by 0 bytes.\n    \"\"\"\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        encoded = b\"%d\" % value\n        if line_len > 0 and line_len + len(encoded) > 70:\n            result.append(format_int(len(line)) + b\"\\0\".join(line))\n            line = []\n            line_len = 0\n        line.append(encoded)\n        line_len += len(encoded)\n    if line:\n        result.append(format_int(len(line)) + b\"\\0\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    }
  ],
  "assertions": [
    "assert _encode_int_values({}) == [b'']",
    "assert _encode_int_values({123: 0}) == [b'\\x01123', b'']",
    "assert _encode_int_values({123: 0, 9: 1}) == [b'\\x02123\\x009', b'']",
    "assert _encode_int_values({123: 0, 45: 1, 5 * 10 ** 70: 2}) == [b'\\x02123\\x0045', b'\\x015' + b'0' * 70, b'']",
    "assert _encode_int_values({6 * 10 ** 100: 0}) == [b'\\x016' + b'0' * 100, b'']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_encode_int_values(self) -> None:\n        assert _encode_int_values({}) == [b\"\"]\n        assert _encode_int_values({123: 0}) == [b\"\\x01123\", b\"\"]\n        assert _encode_int_values({123: 0, 9: 1}) == [b\"\\x02123\\x009\", b\"\"]\n        assert _encode_int_values({123: 0, 45: 1, 5 * 10**70: 2}) == [\n            b\"\\x02123\\x0045\",\n            b\"\\x015\" + b\"0\" * 70,\n            b\"\",\n        ]\n        assert _encode_int_values({6 * 10**100: 0}) == [b\"\\x016\" + b\"0\" * 100, b\"\"]"
}