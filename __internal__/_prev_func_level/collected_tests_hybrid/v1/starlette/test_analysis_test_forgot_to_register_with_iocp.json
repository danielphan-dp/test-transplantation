{
  "test_name": "test_forgot_to_register_with_iocp",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
  "static_methods": [
    {
      "name": "pipe_with_overlapped_read",
      "source_code": "def pipe_with_overlapped_read() -> Generator[tuple[BufferedWriter, int], None, None]:\n    import msvcrt\n    from asyncio.windows_utils import pipe",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
      "line_number": 161
    },
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    },
    {
      "name": "pipe_with_overlapped_read",
      "source_code": "def pipe_with_overlapped_read() -> Generator[tuple[BufferedWriter, int], None, None]:\n    import msvcrt\n    from asyncio.windows_utils import pipe",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
      "line_number": 161
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "write_fp.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.cancel_scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    }
  ],
  "dynamic_methods": [
    {
      "function": "pipe_with_overlapped_read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
      "line": 161,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "@contextmanager\ndef pipe_with_overlapped_read() -> Generator[tuple[BufferedWriter, int], None, None]:\n    import msvcrt\n    from asyncio.windows_utils import pipe\n\n    read_handle, write_handle = pipe(overlapped=(True, False))\n    try:\n        write_fd = msvcrt.open_osfhandle(write_handle, 0)\n        yield os.fdopen(write_fd, \"wb\", closefd=False), read_handle\n    finally:\n        kernel32.CloseHandle(Handle(ffi.cast(\"HANDLE\", read_handle)))\n        kernel32.CloseHandle(Handle(ffi.cast(\"HANDLE\", write_handle)))\n\n\n"
    },
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    },
    {
      "function": "pipe_with_overlapped_read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
      "line": 161,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "@contextmanager\ndef pipe_with_overlapped_read() -> Generator[tuple[BufferedWriter, int], None, None]:\n    import msvcrt\n    from asyncio.windows_utils import pipe\n\n    read_handle, write_handle = pipe(overlapped=(True, False))\n    try:\n        write_fd = msvcrt.open_osfhandle(write_handle, 0)\n        yield os.fdopen(write_fd, \"wb\", closefd=False), read_handle\n    finally:\n        kernel32.CloseHandle(Handle(ffi.cast(\"HANDLE\", read_handle)))\n        kernel32.CloseHandle(Handle(ffi.cast(\"HANDLE\", write_handle)))\n\n\n"
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "write_fp.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.cancel_scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": ""
    },
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_forgot_to_register_with_iocp",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    }
  ],
  "assertions": [
    "assert 'Failed to cancel overlapped I/O in xyz ' in str(exc_info.value)",
    "assert 'forget to call register_with_iocp()?' in str(exc_info.value)",
    "assert left_run_yet"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_forgot_to_register_with_iocp() -> None:\n    with pipe_with_overlapped_read() as (write_fp, read_handle):\n        with write_fp:\n            write_fp.write(b\"test\\n\")\n\n        left_run_yet = False\n\n        async def main() -> None:\n            target = bytearray(1)\n            try:\n                async with _core.open_nursery() as nursery:\n                    nursery.start_soon(\n                        _core.readinto_overlapped, read_handle, target, name=\"xyz\"\n                    )\n                    await wait_all_tasks_blocked()\n                    nursery.cancel_scope.cancel()\n            finally:\n                # Run loop is exited without unwinding running tasks, so\n                # we don't get here until the main() coroutine is GC'ed\n                assert left_run_yet\n\n        with pytest.raises(_core.TrioInternalError) as exc_info:\n            _core.run(main)\n        left_run_yet = True\n        assert \"Failed to cancel overlapped I/O in xyz \" in str(exc_info.value)\n        assert \"forget to call register_with_iocp()?\" in str(exc_info.value)\n\n        # Make sure the Nursery.__del__ assertion about dangling children\n        # gets put with the correct test\n        del exc_info\n        gc_collect_harder()"
}