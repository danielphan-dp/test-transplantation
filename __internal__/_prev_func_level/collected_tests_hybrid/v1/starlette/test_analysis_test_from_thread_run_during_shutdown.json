{
  "test_name": "test_from_thread_run_during_shutdown",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_threads.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "save.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "save.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "_core.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "to_thread_run_sync",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "partial",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    },
    {
      "function": "save.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "agen",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    },
    {
      "function": "save.asend",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "_core.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "to_thread_run_sync",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "partial",
      "filename": "",
      "line": 0,
      "caller": "test_from_thread_run_during_shutdown",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert record == ['finished', 'clean']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_from_thread_run_during_shutdown() -> None:\n    save = []\n    record = []\n\n    async def agen(token: _core.TrioToken | None) -> AsyncGenerator[None, None]:\n        try:\n            yield\n        finally:\n            with _core.CancelScope(shield=True):\n                try:\n                    await to_thread_run_sync(\n                        partial(from_thread_run, sleep, 0, trio_token=token)\n                    )\n                except _core.RunFinishedError:\n                    record.append(\"finished\")\n                else:\n                    record.append(\"clean\")\n\n    async def main(use_system_task: bool) -> None:\n        save.append(agen(_core.current_trio_token() if use_system_task else None))\n        await save[-1].asend(None)\n\n    _core.run(main, True)  # System nursery will be closed and raise RunFinishedError\n    _core.run(main, False)  # host task will be rescheduled as normal\n    assert record == [\"finished\", \"clean\"]"
}