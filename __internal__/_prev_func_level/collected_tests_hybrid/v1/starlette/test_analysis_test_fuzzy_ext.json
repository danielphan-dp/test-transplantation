{
  "test_name": "test_fuzzy_ext",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fuzzy_ext",
      "source_code": ""
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fuzzy_ext",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_fuzzy_ext(self):\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:a){e<=1:[a-z]}', 'e')),\n          True)\n        self.assertEqual(bool(regex.fullmatch(r'(?:a){e<=1:[a-z]}', 'e')),\n          True)\n        self.assertEqual(bool(regex.fullmatch(r'(?:a){e<=1:[a-z]}', '-')),\n          False)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:a){e<=1:[a-z]}', '-')),\n          False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(?:a){e<=1:[a-z]}', 'ae')),\n          True)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:a){e<=1:[a-z]}',\n          'ae')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?:a){e<=1:[a-z]}', 'a-')),\n          False)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:a){e<=1:[a-z]}',\n          'a-')), False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(?:ab){e<=1:[a-z]}', 'ae')),\n           True)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:ab){e<=1:[a-z]}',\n           'ae')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?:ab){e<=1:[a-z]}', 'a-')),\n           False)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)(?:ab){e<=1:[a-z]}',\n           'a-')), False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(a)\\1{e<=1:[a-z]}', 'ae')),\n           True)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)\\1{e<=1:[a-z]}(a)',\n           'ea')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(a)\\1{e<=1:[a-z]}', 'a-')),\n           False)\n        self.assertEqual(bool(regex.fullmatch(r'(?r)\\1{e<=1:[a-z]}(a)',\n           '-a')), False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          'ts')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          'st')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          'st')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          'ts')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          '-s')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          's-')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          's-')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(?:\\N{LATIN SMALL LETTER SHARP S}){e<=1:[a-z]}',\n          '-s')), False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           'ssst')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           'ssts')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)\\1{e<=1:[a-z]}(\\N{LATIN SMALL LETTER SHARP S})',\n           'stss')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)\\1{e<=1:[a-z]}(\\N{LATIN SMALL LETTER SHARP S})',\n           'tsss')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           'ss-s')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           'sss-')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           '-s')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(\\N{LATIN SMALL LETTER SHARP S})\\1{e<=1:[a-z]}',\n           's-')), False)\n\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(ss)\\1{e<=1:[a-z]}',\n           '\\N{LATIN SMALL LETTER SHARP S}ts')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(ss)\\1{e<=1:[a-z]}',\n           '\\N{LATIN SMALL LETTER SHARP S}st')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)\\1{e<=1:[a-z]}(ss)',\n           'st\\N{LATIN SMALL LETTER SHARP S}')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)\\1{e<=1:[a-z]}(ss)',\n           'ts\\N{LATIN SMALL LETTER SHARP S}')), True)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(ss)\\1{e<=1:[a-z]}',\n           '\\N{LATIN SMALL LETTER SHARP S}-s')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?fiu)(ss)\\1{e<=1:[a-z]}',\n           '\\N{LATIN SMALL LETTER SHARP S}s-')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(ss)\\1{e<=1:[a-z]}',\n           's-\\N{LATIN SMALL LETTER SHARP S}')), False)\n        self.assertEqual(bool(regex.fullmatch(r'(?firu)(ss)\\1{e<=1:[a-z]}',\n           '-s\\N{LATIN SMALL LETTER SHARP S}')), False)"
}