{
  "test_name": "test_gc_after_trio_exits",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_dtls.py",
  "static_methods": [
    {
      "name": "trio.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "FakeNet",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "fn.enable",
      "source_code": "    def enable(self) -> None:\n        trio.socket.set_custom_socket_factory(FakeSocketFactory(self))\n        trio.socket.set_custom_hostname_resolver(FakeHostnameResolver(self))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/testing/_fake_net.py",
      "line_number": 181
    },
    {
      "name": "endpoint",
      "source_code": "def endpoint(**kwargs: int | bool) -> DTLSEndpoint:\n    ipv6 = kwargs.pop(\"ipv6\", False)\n    family = trio.socket.AF_INET6 if ipv6 else trio.socket.AF_INET\n    sock = trio.socket.socket(type=trio.socket.SOCK_DGRAM, family=family)\n    return DTLSEndpoint(sock, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_dtls.py",
      "line_number": 45
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    }
  ],
  "dynamic_methods": [
    {
      "function": "trio.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_gc_after_trio_exits",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "FakeNet",
      "filename": "",
      "line": 0,
      "caller": "test_gc_after_trio_exits",
      "source_code": ""
    },
    {
      "function": "fn.enable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/testing/_fake_net.py",
      "line": 181,
      "caller": "test_gc_after_trio_exits",
      "source_code": "    def enable(self) -> None:\n        trio.socket.set_custom_socket_factory(FakeSocketFactory(self))\n        trio.socket.set_custom_hostname_resolver(FakeHostnameResolver(self))\n\n"
    },
    {
      "function": "endpoint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_dtls.py",
      "line": 45,
      "caller": "test_gc_after_trio_exits",
      "source_code": "def endpoint(**kwargs: int | bool) -> DTLSEndpoint:\n    ipv6 = kwargs.pop(\"ipv6\", False)\n    family = trio.socket.AF_INET6 if ipv6 else trio.socket.AF_INET\n    sock = trio.socket.socket(type=trio.socket.SOCK_DGRAM, family=family)\n    return DTLSEndpoint(sock, **kwargs)\n\n\n"
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_gc_after_trio_exits",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_gc_after_trio_exits() -> None:\n    async def main() -> DTLSEndpoint:\n        # We use fakenet just to make sure no real sockets can leak out of the test\n        # case - on pypy somehow the socket was outliving the gc_collect_harder call\n        # below. Since the test is just making sure DTLSEndpoint.__del__ doesn't explode\n        # when called after trio exits, it doesn't need a real socket.\n        fn = FakeNet()\n        fn.enable()\n        return endpoint()\n\n    e = trio.run(main)\n    with pytest.warns(ResourceWarning):\n        del e\n        gc_collect_harder()"
}