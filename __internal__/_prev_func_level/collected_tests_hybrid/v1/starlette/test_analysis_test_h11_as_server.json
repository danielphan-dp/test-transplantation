{
  "test_name": "test_h11_as_server",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
  "static_methods": [
    {
      "name": "socket_server",
      "source_code": "def socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line_number": 15
    },
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "socket_server",
      "source_code": "def socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line_number": 15
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "data.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "f.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "urlopen",
      "source_code": "    def urlopen(self, method, url, redirect=True, **kw):\n        \"\"\"\n        Same as :meth:`urllib3.HTTPConnectionPool.urlopen`\n        with custom cross-host redirect logic and only sends the request-uri\n        portion of the ``url``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py",
      "line_number": 353
    },
    {
      "name": "f.getcode",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "socket_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line": 15,
      "caller": "test_h11_as_server",
      "source_code": "@contextmanager\ndef socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]\n"
    },
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_h11_as_server",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_server",
      "source_code": ""
    },
    {
      "function": "socket_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_against_stdlib_http.py",
      "line": 15,
      "caller": "test_h11_as_server",
      "source_code": "@contextmanager\ndef socket_server(\n    handler: Callable[..., socketserver.BaseRequestHandler]\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_h11_as_server",
      "source_code": ""
    },
    {
      "function": "data.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_h11_as_server",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_h11_as_server",
      "source_code": ""
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_h11_as_server",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "urlopen",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/poolmanager.py",
      "line": 353,
      "caller": "test_h11_as_server",
      "source_code": "    def urlopen(self, method, url, redirect=True, **kw):\n        \"\"\"\n        Same as :meth:`urllib3.HTTPConnectionPool.urlopen`\n        with custom cross-host redirect logic and only sends the request-uri\n        portion of the ``url``.\n\n        The given ``url`` parameter must be absolute, such that an appropriate\n        :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.\n        \"\"\"\n        u = parse_url(url)\n        self._validate_proxy_scheme_url_selection(u.scheme)\n\n        conn = self.connection_from_host(u.host, port=u.port, scheme=u.scheme)\n\n        kw[\"assert_same_host\"] = False\n        kw[\"redirect\"] = False\n\n        if \"headers\" not in kw:\n            kw[\"headers\"] = self.headers.copy()\n\n        if self._proxy_requires_url_absolute_form(u):\n            response = conn.urlopen(method, url, **kw)\n        else:\n            response = conn.urlopen(method, u.request_uri, **kw)\n\n        redirect_location = redirect and response.get_redirect_location()\n        if not redirect_location:\n            return response\n\n        # Support relative URLs for redirecting.\n        redirect_location = urljoin(url, redirect_location)\n\n        # RFC 7231, Section 6.4.4\n        if response.status == 303:\n            method = \"GET\"\n\n        retries = kw.get(\"retries\")\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect)\n\n        # Strip headers marked as unsafe to forward to the redirected location.\n        # Check remove_headers_on_redirect to avoid a potential network call within\n        # conn.is_same_host() which may use socket.gethostbyname() in the future.\n        if retries.remove_headers_on_redirect and not conn.is_same_host(\n            redirect_location\n        ):\n            headers = list(six.iterkeys(kw[\"headers\"]))\n            for header in headers:\n                if header.lower() in retries.remove_headers_on_redirect:\n                    kw[\"headers\"].pop(header, None)\n\n        try:\n            retries = retries.increment(method, url, response=response, _pool=conn)\n        except MaxRetryError:\n            if retries.raise_on_redirect:\n                response.drain_conn()\n                raise\n            return response\n\n        kw[\"retries\"] = retries\n        kw[\"redirect\"] = redirect\n\n        log.info(\"Redirecting %s -> %s\", url, redirect_location)\n\n        response.drain_conn()\n        return self.urlopen(method, redirect_location, **kw)\n\n\n"
    },
    {
      "function": "f.getcode",
      "filename": "",
      "line": 0,
      "caller": "test_h11_as_server",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert info['method'] == 'GET'",
    "assert info['target'] == '/some-path'",
    "assert 'urllib' in info['headers']['user-agent']",
    "assert f.getcode() == 200"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_h11_as_server() -> None:\n    with socket_server(H11RequestHandler) as httpd:\n        host, port = httpd.server_address\n        url = \"http://{}:{}/some-path\".format(host, port)\n        with closing(urlopen(url)) as f:\n            assert f.getcode() == 200\n            data = f.read()\n    info = json.loads(data.decode(\"ascii\"))\n    print(info)\n    assert info[\"method\"] == \"GET\"\n    assert info[\"target\"] == \"/some-path\"\n    assert \"urllib\" in info[\"headers\"][\"user-agent\"]"
}