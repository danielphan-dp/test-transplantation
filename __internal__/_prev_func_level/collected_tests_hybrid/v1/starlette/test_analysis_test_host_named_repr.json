{
  "test_name": "test_host_named_repr",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_routing.py",
  "static_methods": [
    {
      "name": "Host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr.startswith",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def endswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def replace(self, old: str, new: str, maxcount: int=...) -> str: ...\n    def encode(self, x: str=..., y: str=...) -> bytes: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 110
    },
    {
      "name": "Router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Host",
      "filename": "",
      "line": 0,
      "caller": "test_host_named_repr",
      "source_code": ""
    },
    {
      "function": "repr.startswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 110,
      "caller": "test_host_named_repr",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n"
    },
    {
      "function": "Router",
      "filename": "",
      "line": 0,
      "caller": "test_host_named_repr",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_named_repr",
      "source_code": ""
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_host_named_repr",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert repr(route).startswith(\"Host(host='example.com', name='app', app=\")"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_host_named_repr() -> None:\n    route = Host(\n        \"example.com\",\n        name=\"app\",\n        app=Router(\n            [\n                Route(\"/\", endpoint=homepage),\n            ]\n        ),\n    )\n    # test for substring because repr(Router) returns unique object ID\n    assert repr(route).startswith(\"Host(host='example.com', name='app', app=\")"
}