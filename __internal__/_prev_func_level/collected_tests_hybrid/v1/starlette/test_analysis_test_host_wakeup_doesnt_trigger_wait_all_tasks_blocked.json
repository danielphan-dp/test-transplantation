{
  "test_name": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "watb_cscope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "trio.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.lowlevel.add_instrument",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 18
    },
    {
      "name": "trio.testing.wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.testing.wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InstrumentHelper",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.sleep_forever",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.lowlevel.remove_instrument",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 34
    },
    {
      "name": "set_deadline",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 199
    },
    {
      "name": "cscope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    }
  ],
  "dynamic_methods": [
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "watb_cscope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "trio.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.lowlevel.add_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 18,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to activate.\n\n    If ``instrument`` is already active, does nothing.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.add_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "trio.testing.wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.testing.wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "InstrumentHelper",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.sleep_forever",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": ""
    },
    {
      "function": "trio.lowlevel.remove_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 34,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to de-activate.\n\n    Raises:\n      KeyError: if the instrument is not currently active. This could\n          occur either because you never added it, or because you added it\n          and then it raised an unhandled exception and was automatically\n          deactivated.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.remove_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n"
    },
    {
      "function": "set_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 199,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline\n\n"
    },
    {
      "function": "cscope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    }
  ],
  "assertions": [
    "assert trivial_guest_run(trio_main) == 'ok'",
    "assert watb_cscope.cancelled_caught",
    "assert cscope.cancelled_caught",
    "assert not self.primed"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_host_wakeup_doesnt_trigger_wait_all_tasks_blocked() -> None:\n    # This is designed to hit the branch in unrolled_run where:\n    #   idle_primed=True\n    #   runner.runq is empty\n    #   events is Truth-y\n    # ...and confirm that in this case, wait_all_tasks_blocked does not get\n    # triggered.\n    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        print(f\"setting deadline {new_deadline}\")\n        cscope.deadline = new_deadline\n\n    async def trio_main(in_host: InHost) -> str:\n        async def sit_in_wait_all_tasks_blocked(watb_cscope: trio.CancelScope) -> None:\n            with watb_cscope:\n                # Overall point of this test is that this\n                # wait_all_tasks_blocked should *not* return normally, but\n                # only by cancellation.\n                await trio.testing.wait_all_tasks_blocked(cushion=9999)\n                raise AssertionError(  # pragma: no cover\n                    \"wait_all_tasks_blocked should *not* return normally, \"\n                    \"only by cancellation.\"\n                )\n            assert watb_cscope.cancelled_caught\n\n        async def get_woken_by_host_deadline(watb_cscope: trio.CancelScope) -> None:\n            with trio.CancelScope() as cscope:\n                print(\"scheduling stuff to happen\")\n\n                # Altering the deadline from the host, to something in the\n                # future, will cause the run loop to wake up, but then\n                # discover that there is nothing to do and go back to sleep.\n                # This should *not* trigger wait_all_tasks_blocked.\n                #\n                # So the 'before_io_wait' here will wait until we're blocking\n                # with the wait_all_tasks_blocked primed, and then schedule a\n                # deadline change. The critical test is that this should *not*\n                # wake up 'sit_in_wait_all_tasks_blocked'.\n                #\n                # The after we've had a chance to wake up\n                # 'sit_in_wait_all_tasks_blocked', we want the test to\n                # actually end. So in after_io_wait we schedule a second host\n                # call to tear things down.\n                class InstrumentHelper(Instrument):\n                    def __init__(self) -> None:\n                        self.primed = False\n\n                    def before_io_wait(self, timeout: float) -> None:\n                        print(f\"before_io_wait({timeout})\")\n                        if timeout == 9999:  # pragma: no branch\n                            assert not self.primed\n                            in_host(lambda: set_deadline(cscope, 1e9))\n                            self.primed = True\n\n                    def after_io_wait(self, timeout: float) -> None:\n                        if self.primed:  # pragma: no branch\n                            print(\"instrument triggered\")\n                            in_host(lambda: cscope.cancel())\n                            trio.lowlevel.remove_instrument(self)\n\n                trio.lowlevel.add_instrument(InstrumentHelper())\n                await trio.sleep_forever()\n            assert cscope.cancelled_caught\n            watb_cscope.cancel()\n\n        async with trio.open_nursery() as nursery:\n            watb_cscope = trio.CancelScope()\n            nursery.start_soon(sit_in_wait_all_tasks_blocked, watb_cscope)\n            await trio.testing.wait_all_tasks_blocked()\n            nursery.start_soon(get_woken_by_host_deadline, watb_cscope)\n\n        return \"ok\"\n\n    assert trivial_guest_run(trio_main) == \"ok\""
}