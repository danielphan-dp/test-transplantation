{
  "test_name": "test_instrument_that_raises_on_getattr",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.add_instrument",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 18
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "EvilInstrument",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": ""
    },
    {
      "function": "_core.add_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 18,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to activate.\n\n    If ``instrument`` is already active, does nothing.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.add_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "EvilInstrument",
      "filename": "",
      "line": 0,
      "caller": "test_instrument_that_raises_on_getattr",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'after_run' not in runner.instruments",
    "assert 'task_exited' not in runner.instruments"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_instrument_that_raises_on_getattr() -> None:\n    class EvilInstrument(_abc.Instrument):\n        def task_exited(self, task: Task) -> NoReturn:\n            raise AssertionError(\"this should never happen\")  # pragma: no cover\n\n        @property\n        def after_run(self) -> NoReturn:\n            raise ValueError(\"oops\")\n\n    async def main() -> None:\n        with pytest.raises(ValueError, match=\"^oops$\"):\n            _core.add_instrument(EvilInstrument())\n\n        # Make sure the instrument is fully removed from the per-method lists\n        runner = _core.current_task()._runner\n        assert \"after_run\" not in runner.instruments\n        assert \"task_exited\" not in runner.instruments\n\n    _core.run(main)"
}