{
  "test_name": "test_instruments_interleave",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
  "static_methods": [
    {
      "name": "TaskRecorder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "r.filter_tasks",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line_number": 36
    },
    {
      "name": "r.filter_tasks",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line_number": 36
    },
    {
      "name": "tasks.values",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 749
    },
    {
      "name": "tasks.values",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 749
    }
  ],
  "dynamic_methods": [
    {
      "function": "TaskRecorder",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_instruments_interleave",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_instruments_interleave",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instruments_interleave",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instruments_interleave",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_interleave",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_instruments_interleave",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_instruments_interleave",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_instruments_interleave",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "r.filter_tasks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line": 36,
      "caller": "test_instruments_interleave",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item\n\n\n"
    },
    {
      "function": "r.filter_tasks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line": 36,
      "caller": "test_instruments_interleave",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item\n\n\n"
    },
    {
      "function": "tasks.values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 749,
      "caller": "test_instruments_interleave",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]\n\n"
    },
    {
      "function": "tasks.values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 749,
      "caller": "test_instruments_interleave",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_instruments_interleave() -> None:\n    tasks = {}\n\n    async def two_step1() -> None:\n        tasks[\"t1\"] = _core.current_task()\n        await _core.checkpoint()\n\n    async def two_step2() -> None:\n        tasks[\"t2\"] = _core.current_task()\n        await _core.checkpoint()\n\n    async def main() -> None:\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(two_step1)\n            nursery.start_soon(two_step2)\n\n    r = TaskRecorder()\n    _core.run(main, instruments=[r])\n\n    expected = [\n        (\"before_run\", None),\n        (\"schedule\", tasks[\"t1\"]),\n        (\"schedule\", tasks[\"t2\"]),\n        {\n            (\"before\", tasks[\"t1\"]),\n            (\"schedule\", tasks[\"t1\"]),\n            (\"after\", tasks[\"t1\"]),\n            (\"before\", tasks[\"t2\"]),\n            (\"schedule\", tasks[\"t2\"]),\n            (\"after\", tasks[\"t2\"]),\n        },\n        {\n            (\"before\", tasks[\"t1\"]),\n            (\"after\", tasks[\"t1\"]),\n            (\"before\", tasks[\"t2\"]),\n            (\"after\", tasks[\"t2\"]),\n        },\n        (\"after_run\", None),\n    ]\n    print(list(r.filter_tasks(tasks.values())))\n    check_sequence_matches(list(r.filter_tasks(tasks.values())), expected)"
}