{
  "test_name": "test_interdependent_asyncgen_cleanup_order",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_asyncgen.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "innermost",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ag_chain.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "inner.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inner.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "innermost",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "agen",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "ag_chain.asend",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "inner.asend",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    },
    {
      "function": "inner.asend",
      "filename": "",
      "line": 0,
      "caller": "test_interdependent_asyncgen_cleanup_order",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert record == ['innermost', *range(100)]",
    "assert await ag_chain.asend(None) == 1",
    "assert record == []"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_interdependent_asyncgen_cleanup_order() -> None:\n    saved: list[AsyncGenerator[int, None]] = []\n    record: list[int | str] = []\n\n    async def innermost() -> AsyncGenerator[int, None]:\n        try:\n            yield 1\n        finally:\n            await _core.cancel_shielded_checkpoint()\n            record.append(\"innermost\")\n\n    async def agen(\n        label: int, inner: AsyncGenerator[int, None]\n    ) -> AsyncGenerator[int, None]:\n        try:\n            yield await inner.asend(None)\n        finally:\n            # Either `inner` has already been cleaned up, or\n            # we're about to exhaust it. Either way, we wind\n            # up with `record` containing the labels in\n            # innermost-to-outermost order.\n            with pytest.raises(StopAsyncIteration):\n                await inner.asend(None)\n            record.append(label)\n\n    async def async_main() -> None:\n        # This makes a chain of 101 interdependent asyncgens:\n        # agen(99)'s cleanup will iterate agen(98)'s will iterate\n        # ... agen(0)'s will iterate innermost()'s\n        ag_chain = innermost()\n        for idx in range(100):\n            ag_chain = agen(idx, ag_chain)\n        saved.append(ag_chain)\n        assert await ag_chain.asend(None) == 1\n        assert record == []\n\n    _core.run(async_main)\n    assert record == [\"innermost\", *range(100)]"
}