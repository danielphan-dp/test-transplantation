{
  "test_name": "test_ki_is_good_neighbor",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_is_good_neighbor",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    }
  ],
  "assertions": [
    "assert signal.getsignal(signal.SIGINT) is my_handler"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ki_is_good_neighbor() -> None:\n    # in the unlikely event someone overwrites our signal handler, we leave\n    # the overwritten one be\n    try:\n        orig = signal.getsignal(signal.SIGINT)\n\n        def my_handler(signum: object, frame: object) -> None:  # pragma: no cover\n            pass\n\n        async def main() -> None:\n            signal.signal(signal.SIGINT, my_handler)\n\n        _core.run(main)\n\n        assert signal.getsignal(signal.SIGINT) is my_handler\n    finally:\n        signal.signal(signal.SIGINT, orig)"
}