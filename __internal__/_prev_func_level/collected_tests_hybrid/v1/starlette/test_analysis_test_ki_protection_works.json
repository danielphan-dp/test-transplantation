{
  "test_name": "test_ki_protection_works",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "record_list.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.cancel_shielded_checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.reschedule",
      "source_code": "    def reschedule(  # type: ignore[misc]\n        self, task: Task, next_send: Outcome[Any] = _NO_SEND\n    ) -> None:\n        \"\"\"Reschedule the given task with the given\n        :class:`outcome.Outcome`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1698
    },
    {
      "name": "outcome.capture",
      "source_code": "    def capture(self) -> Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line_number": 1083
    },
    {
      "name": "_core.reschedule",
      "source_code": "    def reschedule(  # type: ignore[misc]\n        self, task: Task, next_send: Outcome[Any] = _NO_SEND\n    ) -> None:\n        \"\"\"Reschedule the given task with the given\n        :class:`outcome.Outcome`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1698
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "_core.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cancel_scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "record.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "record.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "_core.enable_ki_protection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint_if_cancelled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "outcome.Value",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.wait_task_rescheduled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.wait_task_rescheduled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.wait_task_rescheduled",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ki_self",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 29
    },
    {
      "name": "InstrumentOfDeath",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_ki_protection_works",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_ki_protection_works",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_ki_protection_works",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "record_list.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_ki_protection_works",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_ki_protection_works",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_ki_protection_works",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_ki_protection_works",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_ki_protection_works",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.cancel_shielded_checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.reschedule",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1698,
      "caller": "test_ki_protection_works",
      "source_code": "    @_public  # Type-ignore due to use of Any here.\n    def reschedule(  # type: ignore[misc]\n        self, task: Task, next_send: Outcome[Any] = _NO_SEND\n"
    },
    {
      "function": "outcome.capture",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line": 1083,
      "caller": "test_ki_protection_works",
      "source_code": "    def capture(self) -> Capture:\n        \"\"\"A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print(\"[bold magenta]Hello World[/]\")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        \"\"\"\n        capture = Capture(self)\n        return capture\n\n"
    },
    {
      "function": "_core.reschedule",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1698,
      "caller": "test_ki_protection_works",
      "source_code": "    @_public  # Type-ignore due to use of Any here.\n    def reschedule(  # type: ignore[misc]\n        self, task: Task, next_send: Outcome[Any] = _NO_SEND\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "_core.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "cancel_scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_ki_protection_works",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "record.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_ki_protection_works",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_protection_works",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "record.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_ki_protection_works",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "_core.enable_ki_protection",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint_if_cancelled",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "outcome.Value",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.wait_task_rescheduled",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.wait_task_rescheduled",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_ki_protection_works",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.wait_task_rescheduled",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "record.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_ki_protection_works",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "ki_self",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 29,
      "caller": "test_ki_protection_works",
      "source_code": "def ki_self() -> None:\n    signal_raise(signal.SIGINT)\n\n\n"
    },
    {
      "function": "InstrumentOfDeath",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_ki_protection_works",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert record_set == {'s1 ok', 's2 ok', 'r1 raise ok'}",
    "assert record_set == {'s1 ok', 's2 ok', 'r1 cancel ok'}",
    "assert record_list == ['ok']",
    "assert record_list == []",
    "assert _core.currently_ki_protected()",
    "assert _core.currently_ki_protected()",
    "assert _core.currently_ki_protected()",
    "assert await _core.wait_task_rescheduled(abort) == 1",
    "assert _core.currently_ki_protected()",
    "assert not _core.currently_ki_protected()",
    "assert _core.currently_ki_protected()",
    "assert _core.currently_ki_protected()",
    "assert await _core.wait_task_rescheduled(abort)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ki_protection_works() -> None:\n    async def sleeper(name: str, record: set[str]) -> None:\n        try:\n            while True:\n                await _core.checkpoint()\n        except _core.Cancelled:\n            record.add(name + \" ok\")\n\n    async def raiser(name: str, record: set[str]) -> None:\n        try:\n            # os.kill runs signal handlers before returning, so we don't need\n            # to worry that the handler will be delayed\n            print(\"killing, protection =\", _core.currently_ki_protected())\n            ki_self()\n        except KeyboardInterrupt:\n            print(\"raised!\")\n            # Make sure we aren't getting cancelled as well as siginted\n            await _core.checkpoint()\n            record.add(name + \" raise ok\")\n            raise\n        else:\n            print(\"didn't raise!\")\n            # If we didn't raise (b/c protected), then we *should* get\n            # cancelled at the next opportunity\n            try:\n                await _core.wait_task_rescheduled(lambda _: _core.Abort.SUCCEEDED)\n            except _core.Cancelled:\n                record.add(name + \" cancel ok\")\n\n    # simulated control-C during raiser, which is *unprotected*\n    print(\"check 1\")\n    record_set: set[str] = set()\n\n    async def check_unprotected_kill() -> None:\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(sleeper, \"s1\", record_set)\n            nursery.start_soon(sleeper, \"s2\", record_set)\n            nursery.start_soon(raiser, \"r1\", record_set)\n\n    # raises inside a nursery, so the KeyboardInterrupt is wrapped in an ExceptionGroup\n    with RaisesGroup(KeyboardInterrupt):\n        _core.run(check_unprotected_kill)\n    assert record_set == {\"s1 ok\", \"s2 ok\", \"r1 raise ok\"}\n\n    # simulated control-C during raiser, which is *protected*, so the KI gets\n    # delivered to the main task instead\n    print(\"check 2\")\n    record_set = set()\n\n    async def check_protected_kill() -> None:\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(sleeper, \"s1\", record_set)\n            nursery.start_soon(sleeper, \"s2\", record_set)\n            nursery.start_soon(_core.enable_ki_protection(raiser), \"r1\", record_set)\n            # __aexit__ blocks, and then receives the KI\n\n    # raises inside a nursery, so the KeyboardInterrupt is wrapped in an ExceptionGroup\n    with RaisesGroup(KeyboardInterrupt):\n        _core.run(check_protected_kill)\n    assert record_set == {\"s1 ok\", \"s2 ok\", \"r1 cancel ok\"}\n\n    # kill at last moment still raises (run_sync_soon until it raises an\n    # error, then kill)\n    print(\"check 3\")\n\n    async def check_kill_during_shutdown() -> None:\n        token = _core.current_trio_token()\n\n        def kill_during_shutdown() -> None:\n            assert _core.currently_ki_protected()\n            try:\n                token.run_sync_soon(kill_during_shutdown)\n            except _core.RunFinishedError:\n                # it's too late for regular handling! handle this!\n                print(\"kill! kill!\")\n                ki_self()\n\n        token.run_sync_soon(kill_during_shutdown)\n\n    # no nurseries involved, so the KeyboardInterrupt isn't wrapped\n    with pytest.raises(KeyboardInterrupt):\n        _core.run(check_kill_during_shutdown)\n\n    # KI arrives very early, before main is even spawned\n    print(\"check 4\")\n\n    class InstrumentOfDeath(Instrument):\n        def before_run(self) -> None:\n            ki_self()\n\n    async def main_1() -> None:\n        await _core.checkpoint()\n\n    # no nurseries involved, so the KeyboardInterrupt isn't wrapped\n    with pytest.raises(KeyboardInterrupt):\n        _core.run(main_1, instruments=[InstrumentOfDeath()])\n\n    # checkpoint_if_cancelled notices pending KI\n    print(\"check 5\")\n\n    @_core.enable_ki_protection\n    async def main_2() -> None:\n        assert _core.currently_ki_protected()\n        ki_self()\n        with pytest.raises(KeyboardInterrupt):\n            await _core.checkpoint_if_cancelled()\n\n    _core.run(main_2)\n\n    # KI arrives while main task is not abortable, b/c already scheduled\n    print(\"check 6\")\n\n    @_core.enable_ki_protection\n    async def main_3() -> None:\n        assert _core.currently_ki_protected()\n        ki_self()\n        await _core.cancel_shielded_checkpoint()\n        await _core.cancel_shielded_checkpoint()\n        await _core.cancel_shielded_checkpoint()\n        with pytest.raises(KeyboardInterrupt):\n            await _core.checkpoint()\n\n    _core.run(main_3)\n\n    # KI arrives while main task is not abortable, b/c refuses to be aborted\n    print(\"check 7\")\n\n    @_core.enable_ki_protection\n    async def main_4() -> None:\n        assert _core.currently_ki_protected()\n        ki_self()\n        task = _core.current_task()\n\n        def abort(_: RaiseCancelT) -> Abort:\n            _core.reschedule(task, outcome.Value(1))\n            return _core.Abort.FAILED\n\n        assert await _core.wait_task_rescheduled(abort) == 1\n        with pytest.raises(KeyboardInterrupt):\n            await _core.checkpoint()\n\n    _core.run(main_4)\n\n    # KI delivered via slow abort\n    print(\"check 8\")\n\n    @_core.enable_ki_protection\n    async def main_5() -> None:\n        assert _core.currently_ki_protected()\n        ki_self()\n        task = _core.current_task()\n\n        def abort(raise_cancel: RaiseCancelT) -> Abort:\n            result = outcome.capture(raise_cancel)\n            _core.reschedule(task, result)\n            return _core.Abort.FAILED\n\n        with pytest.raises(KeyboardInterrupt):\n            assert await _core.wait_task_rescheduled(abort)\n        await _core.checkpoint()\n\n    _core.run(main_5)\n\n    # KI arrives just before main task exits, so the run_sync_soon machinery\n    # is still functioning and will accept the callback to deliver the KI, but\n    # by the time the callback is actually run, main has exited and can't be\n    # aborted.\n    print(\"check 9\")\n\n    @_core.enable_ki_protection\n    async def main_6() -> None:\n        ki_self()\n\n    with pytest.raises(KeyboardInterrupt):\n        _core.run(main_6)\n\n    print(\"check 10\")\n    # KI in unprotected code, with\n    # restrict_keyboard_interrupt_to_checkpoints=True\n    record_list = []\n\n    async def main_7() -> None:\n        # We're not KI protected...\n        assert not _core.currently_ki_protected()\n        ki_self()\n        # ...but even after the KI, we keep running uninterrupted...\n        record_list.append(\"ok\")\n        # ...until we hit a checkpoint:\n        with pytest.raises(KeyboardInterrupt):\n            await sleep(10)\n\n    _core.run(main_7, restrict_keyboard_interrupt_to_checkpoints=True)\n    assert record_list == [\"ok\"]\n    record_list = []\n    # Exact same code raises KI early if we leave off the argument, doesn't\n    # even reach the record.append call:\n    with pytest.raises(KeyboardInterrupt):\n        _core.run(main_7)\n    assert record_list == []\n\n    # KI arrives while main task is inside a cancelled cancellation scope\n    # the KeyboardInterrupt should take priority\n    print(\"check 11\")\n\n    @_core.enable_ki_protection\n    async def main_8() -> None:\n        assert _core.currently_ki_protected()\n        with _core.CancelScope() as cancel_scope:\n            cancel_scope.cancel()\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n            ki_self()\n            with pytest.raises(KeyboardInterrupt):\n                await _core.checkpoint()\n            with pytest.raises(_core.Cancelled):\n                await _core.checkpoint()\n\n    _core.run(main_8)"
}