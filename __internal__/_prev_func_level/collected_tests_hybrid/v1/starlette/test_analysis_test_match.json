{
  "test_name": "test_match",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "e.add_note",
      "source_code": "    def add_note(self, note: str) -> None:\n        if not isinstance(note, str):\n            raise TypeError(\n                f\"Expected a string, got note={note!r} (type {type(note).__name__})\"\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/exceptiongroup/_exceptions.py",
      "line_number": 100
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "e.add_note",
      "source_code": "    def add_note(self, note: str) -> None:\n        if not isinstance(note, str):\n            raise TypeError(\n                f\"Expected a string, got note={note!r} (type {type(note).__name__})\"\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/exceptiongroup/_exceptions.py",
      "line_number": 100
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "e.add_note",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/exceptiongroup/_exceptions.py",
      "line": 100,
      "caller": "test_match",
      "source_code": "    def add_note(self, note: str) -> None:\n        if not isinstance(note, str):\n            raise TypeError(\n                f\"Expected a string, got note={note!r} (type {type(note).__name__})\"\n            )\n\n        if not hasattr(self, \"__notes__\"):\n            self.__notes__: list[str] = []\n\n        self.__notes__.append(note)\n\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "e.add_note",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/exceptiongroup/_exceptions.py",
      "line": 100,
      "caller": "test_match",
      "source_code": "    def add_note(self, note: str) -> None:\n        if not isinstance(note, str):\n            raise TypeError(\n                f\"Expected a string, got note={note!r} (type {type(note).__name__})\"\n            )\n\n        if not hasattr(self, \"__notes__\"):\n            self.__notes__: list[str] = []\n\n        self.__notes__.append(note)\n\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_match",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_match() -> None:\n    # supports match string\n    with RaisesGroup(ValueError, match=\"bar\"):\n        raise ExceptionGroup(\"bar\", (ValueError(),))\n\n    # now also works with ^$\n    with RaisesGroup(ValueError, match=\"^bar$\"):\n        raise ExceptionGroup(\"bar\", (ValueError(),))\n\n    # it also includes notes\n    with RaisesGroup(ValueError, match=\"my note\"):\n        e = ExceptionGroup(\"bar\", (ValueError(),))\n        e.add_note(\"my note\")\n        raise e\n\n    # and technically you can match it all with ^$\n    # but you're probably better off using a Matcher at that point\n    with RaisesGroup(ValueError, match=\"^bar\\nmy note$\"):\n        e = ExceptionGroup(\"bar\", (ValueError(),))\n        e.add_note(\"my note\")\n        raise e\n\n    with pytest.raises(ExceptionGroup):\n        with RaisesGroup(ValueError, match=\"foo\"):\n            raise ExceptionGroup(\"bar\", (ValueError(),))"
}