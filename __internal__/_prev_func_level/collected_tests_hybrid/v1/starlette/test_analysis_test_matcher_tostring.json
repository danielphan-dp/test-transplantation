{
  "test_name": "test_matcher_tostring",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_matcher_tostring",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(Matcher(ValueError)) == 'Matcher(ValueError)'",
    "assert str(Matcher(match='[a-z]')) == \"Matcher(match='[a-z]')\"",
    "assert str(Matcher(match=pattern_no_flags)) == \"Matcher(match='noflag')\"",
    "assert str(Matcher(match=pattern_flags)) == f'Matcher(match={pattern_flags!r})'",
    "assert str(Matcher(ValueError, match='re', check=bool)) == f\"Matcher(ValueError, match='re', check={bool!r})\""
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_matcher_tostring() -> None:\n    assert str(Matcher(ValueError)) == \"Matcher(ValueError)\"\n    assert str(Matcher(match=\"[a-z]\")) == \"Matcher(match='[a-z]')\"\n    pattern_no_flags = re.compile(\"noflag\", 0)\n    assert str(Matcher(match=pattern_no_flags)) == \"Matcher(match='noflag')\"\n    pattern_flags = re.compile(\"noflag\", re.IGNORECASE)\n    assert str(Matcher(match=pattern_flags)) == f\"Matcher(match={pattern_flags!r})\"\n    assert (\n        str(Matcher(ValueError, match=\"re\", check=bool))\n        == f\"Matcher(ValueError, match='re', check={bool!r})\"\n    )"
}