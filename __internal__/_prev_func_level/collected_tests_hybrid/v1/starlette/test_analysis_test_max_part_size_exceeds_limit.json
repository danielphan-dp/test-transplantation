{
  "test_name": "test_max_part_size_exceeds_limit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_formparsers.py",
  "static_methods": [
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line_number": 310
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "does_not_raise",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mount",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line": 310,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": "    @property\n    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.\n\n        >>> print(Version(\"1.2.3\").post)\n        None\n        >>> Version(\"1.2.3.post1\").post\n        1\n        \"\"\"\n        return self._version.post[1] if self._version.post else None\n\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": ""
    },
    {
      "function": "does_not_raise",
      "filename": "",
      "line": 0,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": ""
    },
    {
      "function": "Mount",
      "filename": "",
      "line": 0,
      "caller": "test_max_part_size_exceeds_limit",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.status_code == 400",
    "assert response.text == 'Part exceeded maximum size of 1024KB.'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_max_part_size_exceeds_limit(\n    app: ASGIApp,\n    expectation: typing.ContextManager[Exception],\n    test_client_factory: TestClientFactory,\n) -> None:\n    client = test_client_factory(app)\n    boundary = \"------------------------4K1ON9fZkj9uCUmqLHRbbR\"\n\n    multipart_data = (\n        f\"--{boundary}\\r\\n\"\n        f'Content-Disposition: form-data; name=\"small\"\\r\\n\\r\\n'\n        \"small content\\r\\n\"\n        f\"--{boundary}\\r\\n\"\n        f'Content-Disposition: form-data; name=\"large\"\\r\\n\\r\\n'\n        + (\"x\" * 1024 * 1024 + \"x\")  # 1MB + 1 byte of data\n        + \"\\r\\n\"\n        f\"--{boundary}--\\r\\n\"\n    ).encode(\"utf-8\")\n\n    headers = {\n        \"Content-Type\": f\"multipart/form-data; boundary={boundary}\",\n        \"Transfer-Encoding\": \"chunked\",\n    }\n\n    with expectation:\n        response = client.post(\"/\", data=multipart_data, headers=headers)  # type: ignore\n        assert response.status_code == 400\n        assert response.text == \"Part exceeded maximum size of 1024KB.\""
}