{
  "test_name": "test_more_zerowidth",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "m.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "m.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "regex.finditer",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 340
    },
    {
      "name": "regex.finditer",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 340
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_more_zerowidth",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_more_zerowidth",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_more_zerowidth",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_more_zerowidth",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_more_zerowidth",
      "source_code": ""
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_more_zerowidth",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_more_zerowidth",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_more_zerowidth",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "m.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_more_zerowidth",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "m.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_more_zerowidth",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "regex.finditer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 340,
      "caller": "test_more_zerowidth",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,\n  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return an iterator over all matches in the string. The matches may be\n    overlapped if overlapped is True. For each match, the iterator returns a\n    match object. Empty matches are included in the result.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.finditer(string, pos, endpos, overlapped, concurrent, partial,\n      timeout)\n\n"
    },
    {
      "function": "regex.finditer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 340,
      "caller": "test_more_zerowidth",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,\n  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return an iterator over all matches in the string. The matches may be\n    overlapped if overlapped is True. For each match, the iterator returns a\n    match object. Empty matches are included in the result.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.finditer(string, pos, endpos, overlapped, concurrent, partial,\n      timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_more_zerowidth(self):\n        if sys.version_info >= (3, 7, 0):\n            self.assertEqual(regex.split(r'\\b|:+', 'a::bc'), ['', 'a', '', '',\n              'bc', ''])\n            self.assertEqual(regex.sub(r'\\b|:+', '-', 'a::bc'), '-a---bc-')\n            self.assertEqual(regex.findall(r'\\b|:+', 'a::bc'), ['', '', '::',\n              '', ''])\n            self.assertEqual([m.span() for m in regex.finditer(r'\\b|:+',\n              'a::bc')], [(0, 0), (1, 1), (1, 3), (3, 3), (5, 5)])\n            self.assertEqual([m.span() for m in regex.finditer(r'(?m)^\\s*?$',\n              'foo\\n\\n\\nbar')], [(4, 4), (4, 5), (5, 5)])"
}