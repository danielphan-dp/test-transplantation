{
  "test_name": "test_name_generator",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_namegen.py",
  "static_methods": [
    {
      "name": "NameGenerator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    },
    {
      "name": "g.private_name",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line_number": 54
    }
  ],
  "dynamic_methods": [
    {
      "function": "NameGenerator",
      "filename": "",
      "line": 0,
      "caller": "test_name_generator",
      "source_code": ""
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    },
    {
      "function": "g.private_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/namegen.py",
      "line": 54,
      "caller": "test_name_generator",
      "source_code": "    def private_name(self, module: str, partial_name: str | None = None) -> str:\n        \"\"\"Return a C name usable for a static definition.\n\n        Return a distinct result for each (module, partial_name) pair.\n\n        The caller should add a suitable prefix to the name to avoid\n        conflicts with other C names. Only ensure that the results of\n        this function are unique, not that they aren't overlapping with\n        arbitrary names.\n\n        If a name is not specific to any module, the module argument can\n        be an empty string.\n        \"\"\"\n        # TODO: Support unicode\n        if partial_name is None:\n            return exported_name(self.module_map[module].rstrip(\".\"))\n        if (module, partial_name) in self.translations:\n            return self.translations[module, partial_name]\n        if module in self.module_map:\n            module_prefix = self.module_map[module]\n        elif module:\n            module_prefix = module + \".\"\n        else:\n            module_prefix = \"\"\n        actual = exported_name(f\"{module_prefix}{partial_name}\")\n        self.translations[module, partial_name] = actual\n        return actual\n\n\n"
    }
  ],
  "assertions": [
    "assert g.private_name('foo', 'f') == 'foo___f'",
    "assert g.private_name('foo', 'C.x.y') == 'foo___C___x___y'",
    "assert g.private_name('foo', 'C.x.y') == 'foo___C___x___y'",
    "assert g.private_name('foo.zar', 'C.x.y') == 'zar___C___x___y'",
    "assert g.private_name('foo', 'C.x_y') == 'foo___C___x_y'",
    "assert g.private_name('foo', 'C_x_y') == 'foo___C_x_y'",
    "assert g.private_name('foo', 'C_x_y') == 'foo___C_x_y'",
    "assert g.private_name('foo', '___') == 'foo______3_'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_name_generator(self) -> None:\n        g = NameGenerator([[\"foo\", \"foo.zar\"]])\n        assert g.private_name(\"foo\", \"f\") == \"foo___f\"\n        assert g.private_name(\"foo\", \"C.x.y\") == \"foo___C___x___y\"\n        assert g.private_name(\"foo\", \"C.x.y\") == \"foo___C___x___y\"\n        assert g.private_name(\"foo.zar\", \"C.x.y\") == \"zar___C___x___y\"\n        assert g.private_name(\"foo\", \"C.x_y\") == \"foo___C___x_y\"\n        assert g.private_name(\"foo\", \"C_x_y\") == \"foo___C_x_y\"\n        assert g.private_name(\"foo\", \"C_x_y\") == \"foo___C_x_y\"\n        assert g.private_name(\"foo\", \"___\") == \"foo______3_\""
}