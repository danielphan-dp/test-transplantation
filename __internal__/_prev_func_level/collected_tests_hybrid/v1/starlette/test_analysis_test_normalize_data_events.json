{
  "test_name": "test_normalize_data_events",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "normalize_data_events",
      "source_code": "def normalize_data_events(in_events: List[Event]) -> List[Event]:\n    out_events: List[Event] = []\n    for event in in_events:\n        if type(event) is Data:\n            event = Data(data=bytes(event.data), chunk_start=False, chunk_end=False)\n        if out_events and type(out_events[-1]) is type(event) is Data:\n            out_events[-1] = Data(\n                data=out_events[-1].data + event.data,\n                chunk_start=out_events[-1].chunk_start,\n                chunk_end=out_events[-1].chunk_end,\n            )\n        else:\n            out_events.append(event)\n    return out_events",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 42
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "normalize_data_events",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 42,
      "caller": "test_normalize_data_events",
      "source_code": "def normalize_data_events(in_events: List[Event]) -> List[Event]:\n    out_events: List[Event] = []\n    for event in in_events:\n        if type(event) is Data:\n            event = Data(data=bytes(event.data), chunk_start=False, chunk_end=False)\n        if out_events and type(out_events[-1]) is type(event) is Data:\n            out_events[-1] = Data(\n                data=out_events[-1].data + event.data,\n                chunk_start=out_events[-1].chunk_start,\n                chunk_end=out_events[-1].chunk_end,\n            )\n        else:\n            out_events.append(event)\n    return out_events\n\n\n"
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_normalize_data_events",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert normalize_data_events([Data(data=bytearray(b'1')), Data(data=b'2'), Response(status_code=200, headers=[]), Data(data=b'3'), Data(data=b'4'), EndOfMessage(), Data(data=b'5'), Data(data=b'6'), Data(data=b'7')]) == [Data(data=b'12'), Response(status_code=200, headers=[]), Data(data=b'34'), EndOfMessage(), Data(data=b'567')]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_normalize_data_events() -> None:\n    assert normalize_data_events(\n        [\n            Data(data=bytearray(b\"1\")),\n            Data(data=b\"2\"),\n            Response(status_code=200, headers=[]),  # type: ignore[arg-type]\n            Data(data=b\"3\"),\n            Data(data=b\"4\"),\n            EndOfMessage(),\n            Data(data=b\"5\"),\n            Data(data=b\"6\"),\n            Data(data=b\"7\"),\n        ]\n    ) == [\n        Data(data=b\"12\"),\n        Response(status_code=200, headers=[]),  # type: ignore[arg-type]\n        Data(data=b\"34\"),\n        EndOfMessage(),\n        Data(data=b\"567\"),\n    ]"
}