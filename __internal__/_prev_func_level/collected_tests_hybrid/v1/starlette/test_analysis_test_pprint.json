{
  "test_name": "test_pprint",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
  "static_methods": [
    {
      "name": "self.basic_block",
      "source_code": "    def basic_block(self, ops: list[Op]) -> BasicBlock:\n        self.label += 1\n        block = BasicBlock(self.label)\n        block.ops = ops\n        return block",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line_number": 50
    },
    {
      "name": "Goto",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.basic_block",
      "source_code": "    def basic_block(self, ops: list[Op]) -> BasicBlock:\n        self.label += 1\n        block = BasicBlock(self.label)\n        block.ops = ops\n        return block",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line_number": 50
    },
    {
      "name": "FuncIR",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "format_func",
      "source_code": "def format_func(fn: FuncIR, errors: Sequence[tuple[ErrorSource, str]] = ()) -> list[str]:\n    lines = []\n    cls_prefix = fn.class_name + \".\" if fn.class_name else \"\"\n    lines.append(\n        \"def {}{}({}):\".format(cls_prefix, fn.name, \", \".join(arg.name for arg in fn.args))\n    )\n    names = generate_names_for_ir(fn.arg_regs, fn.blocks)\n    for line in format_registers(fn, names):\n        lines.append(\"    \" + line)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/ir/pprint.py",
      "line_number": 434
    },
    {
      "name": "Return",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.func_decl",
      "source_code": "    def func_decl(self, name: str, ret_type: RType | None = None) -> FuncDecl:\n        if ret_type is None:\n            ret_type = none_rprimitive\n        return FuncDecl(\n            name=name,\n            class_name=None,\n            module_name=\"module\",\n            sig=FuncSignature(args=[], ret_type=ret_type),\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line_number": 56
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.basic_block",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line": 50,
      "caller": "test_pprint",
      "source_code": "    def basic_block(self, ops: list[Op]) -> BasicBlock:\n        self.label += 1\n        block = BasicBlock(self.label)\n        block.ops = ops\n        return block\n\n"
    },
    {
      "function": "Goto",
      "filename": "",
      "line": 0,
      "caller": "test_pprint",
      "source_code": ""
    },
    {
      "function": "self.basic_block",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line": 50,
      "caller": "test_pprint",
      "source_code": "    def basic_block(self, ops: list[Op]) -> BasicBlock:\n        self.label += 1\n        block = BasicBlock(self.label)\n        block.ops = ops\n        return block\n\n"
    },
    {
      "function": "FuncIR",
      "filename": "",
      "line": 0,
      "caller": "test_pprint",
      "source_code": ""
    },
    {
      "function": "format_func",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/ir/pprint.py",
      "line": 434,
      "caller": "test_pprint",
      "source_code": "def format_func(fn: FuncIR, errors: Sequence[tuple[ErrorSource, str]] = ()) -> list[str]:\n    lines = []\n    cls_prefix = fn.class_name + \".\" if fn.class_name else \"\"\n    lines.append(\n        \"def {}{}({}):\".format(cls_prefix, fn.name, \", \".join(arg.name for arg in fn.args))\n    )\n    names = generate_names_for_ir(fn.arg_regs, fn.blocks)\n    for line in format_registers(fn, names):\n        lines.append(\"    \" + line)\n\n    source_to_error = defaultdict(list)\n    for source, error in errors:\n        source_to_error[source].append(error)\n\n    code = format_blocks(fn.blocks, names, source_to_error)\n    lines.extend(code)\n    return lines\n\n\n"
    },
    {
      "function": "Return",
      "filename": "",
      "line": 0,
      "caller": "test_pprint",
      "source_code": ""
    },
    {
      "function": "self.func_decl",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_ircheck.py",
      "line": 56,
      "caller": "test_pprint",
      "source_code": "    def func_decl(self, name: str, ret_type: RType | None = None) -> FuncDecl:\n        if ret_type is None:\n            ret_type = none_rprimitive\n        return FuncDecl(\n            name=name,\n            class_name=None,\n            module_name=\"module\",\n            sig=FuncSignature(args=[], ret_type=ret_type),\n        )\n\n"
    }
  ],
  "assertions": [
    "assert formatted == ['def func_1():', 'L0:', '    goto L1', '  ERR: Invalid control operation target: 1']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pprint(self) -> None:\n        block_1 = self.basic_block([Return(value=NONE_VALUE)])\n        goto = Goto(label=block_1)\n        block_2 = self.basic_block([goto])\n        fn = FuncIR(\n            decl=self.func_decl(name=\"func_1\"),\n            arg_regs=[],\n            # block_1 omitted\n            blocks=[block_2],\n        )\n        errors = [(goto, \"Invalid control operation target: 1\")]\n        formatted = format_func(fn, errors)\n        assert formatted == [\n            \"def func_1():\",\n            \"L0:\",\n            \"    goto L1\",\n            \"  ERR: Invalid control operation target: 1\",\n        ]"
}