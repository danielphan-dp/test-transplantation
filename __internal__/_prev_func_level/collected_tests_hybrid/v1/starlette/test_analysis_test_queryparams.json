{
  "test_name": "test_queryparams",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.keys",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line_number": 1281
    },
    {
      "name": "q.values",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 749
    },
    {
      "name": "q.items",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line_number": 100
    }
  ],
  "dynamic_methods": [
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_queryparams",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_queryparams",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_queryparams",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_queryparams",
      "source_code": ""
    },
    {
      "function": "q.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line": 1281,
      "caller": "test_queryparams",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())\n\n"
    },
    {
      "function": "q.values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 749,
      "caller": "test_queryparams",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]\n\n"
    },
    {
      "function": "q.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line": 100,
      "caller": "test_queryparams",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]\n\n\n"
    }
  ],
  "assertions": [
    "assert 'a' in q",
    "assert 'A' not in q",
    "assert 'c' not in q",
    "assert q['a'] == '456'",
    "assert q.get('a') == '456'",
    "assert q.get('nope', default=None) is None",
    "assert q.getlist('a') == ['123', '456']",
    "assert list(q.keys()) == ['a', 'b']",
    "assert list(q.values()) == ['456', '789']",
    "assert list(q.items()) == [('a', '456'), ('b', '789')]",
    "assert len(q) == 2",
    "assert list(q) == ['a', 'b']",
    "assert dict(q) == {'a': '456', 'b': '789'}",
    "assert str(q) == 'a=123&a=456&b=789'",
    "assert repr(q) == \"QueryParams('a=123&a=456&b=789')\"",
    "assert QueryParams({'a': '123', 'b': '456'}) == QueryParams([('a', '123'), ('b', '456')])",
    "assert QueryParams({'a': '123', 'b': '456'}) == QueryParams('a=123&b=456')",
    "assert QueryParams({'a': '123', 'b': '456'}) == QueryParams({'b': '456', 'a': '123'})",
    "assert QueryParams() == QueryParams({})",
    "assert QueryParams([('a', '123'), ('a', '456')]) == QueryParams('a=123&a=456')",
    "assert QueryParams({'a': '123', 'b': '456'}) != 'invalid'",
    "assert QueryParams(q) == q"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_queryparams() -> None:\n    q = QueryParams(\"a=123&a=456&b=789\")\n    assert \"a\" in q\n    assert \"A\" not in q\n    assert \"c\" not in q\n    assert q[\"a\"] == \"456\"\n    assert q.get(\"a\") == \"456\"\n    assert q.get(\"nope\", default=None) is None\n    assert q.getlist(\"a\") == [\"123\", \"456\"]\n    assert list(q.keys()) == [\"a\", \"b\"]\n    assert list(q.values()) == [\"456\", \"789\"]\n    assert list(q.items()) == [(\"a\", \"456\"), (\"b\", \"789\")]\n    assert len(q) == 2\n    assert list(q) == [\"a\", \"b\"]\n    assert dict(q) == {\"a\": \"456\", \"b\": \"789\"}\n    assert str(q) == \"a=123&a=456&b=789\"\n    assert repr(q) == \"QueryParams('a=123&a=456&b=789')\"\n    assert QueryParams({\"a\": \"123\", \"b\": \"456\"}) == QueryParams([(\"a\", \"123\"), (\"b\", \"456\")])\n    assert QueryParams({\"a\": \"123\", \"b\": \"456\"}) == QueryParams(\"a=123&b=456\")\n    assert QueryParams({\"a\": \"123\", \"b\": \"456\"}) == QueryParams({\"b\": \"456\", \"a\": \"123\"})\n    assert QueryParams() == QueryParams({})\n    assert QueryParams([(\"a\", \"123\"), (\"a\", \"456\")]) == QueryParams(\"a=123&a=456\")\n    assert QueryParams({\"a\": \"123\", \"b\": \"456\"}) != \"invalid\"\n\n    q = QueryParams([(\"a\", \"123\"), (\"a\", \"456\")])\n    assert QueryParams(q) == q"
}