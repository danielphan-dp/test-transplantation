{
  "test_name": "test_race_between_idle_exit_and_job_assignment",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
  "static_methods": [
    {
      "name": "_join_started_threads",
      "source_code": "def _join_started_threads() -> Iterator[None]:\n    before = frozenset(threading.enumerate())\n    try:\n        yield\n    finally:\n        for thread in threading.enumerate():\n            if thread not in before:\n                thread.join(timeout=1.0)\n                assert not thread.is_alive()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line_number": 110
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_join_started_threads",
      "source_code": "def _join_started_threads() -> Iterator[None]:\n    before = frozenset(threading.enumerate())\n    try:\n        yield\n    finally:\n        for thread in threading.enumerate():\n            if thread not in before:\n                thread.join(timeout=1.0)\n                assert not thread.is_alive()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line_number": 110
    },
    {
      "name": "ThreadCache",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tc.start_thread_soon",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line_number": 227
    },
    {
      "name": "done.wait",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line_number": 287
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tc.start_thread_soon",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line_number": 227
    },
    {
      "name": "self._lock.acquire",
      "source_code": "        def acquire(self, timeout: int = -1) -> bool:\n            got_it = self._lock.acquire(timeout=timeout)\n            if timeout == -1:\n                return True\n            elif got_it:\n                if self._counter > 0:\n                    self._counter -= 1\n                    self._lock.release()\n                    return False\n                return True\n            else:\n                return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line_number": 146
    },
    {
      "name": "self._lock.release",
      "source_code": "    def release(self) -> tuple[int, ...]:\n        \"\"\"The components of the \"release\" segment of the version.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line_number": 279
    },
    {
      "name": "done.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._lock.release",
      "source_code": "    def release(self) -> tuple[int, ...]:\n        \"\"\"The components of the \"release\" segment of the version.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line_number": 279
    }
  ],
  "dynamic_methods": [
    {
      "function": "_join_started_threads",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line": 110,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "@contextmanager\ndef _join_started_threads() -> Iterator[None]:\n    before = frozenset(threading.enumerate())\n    try:\n        yield\n    finally:\n        for thread in threading.enumerate():\n            if thread not in before:\n                thread.join(timeout=1.0)\n                assert not thread.is_alive()\n\n\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": ""
    },
    {
      "function": "_join_started_threads",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line": 110,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "@contextmanager\ndef _join_started_threads() -> Iterator[None]:\n    before = frozenset(threading.enumerate())\n    try:\n        yield\n    finally:\n        for thread in threading.enumerate():\n            if thread not in before:\n                thread.join(timeout=1.0)\n                assert not thread.is_alive()\n\n\n"
    },
    {
      "function": "ThreadCache",
      "filename": "",
      "line": 0,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": ""
    },
    {
      "function": "tc.start_thread_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line": 227,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,\n"
    },
    {
      "function": "done.wait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line": 287,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover\n\n\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": ""
    },
    {
      "function": "tc.start_thread_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line": 227,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,\n"
    },
    {
      "function": "self._lock.acquire",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
      "line": 146,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "        def acquire(self, timeout: int = -1) -> bool:\n            got_it = self._lock.acquire(timeout=timeout)\n            if timeout == -1:\n                return True\n            elif got_it:\n                if self._counter > 0:\n                    self._counter -= 1\n                    self._lock.release()\n                    return False\n                return True\n            else:\n                return False\n\n"
    },
    {
      "function": "self._lock.release",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line": 279,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "    @property\n    def release(self) -> tuple[int, ...]:\n        \"\"\"The components of the \"release\" segment of the version.\n\n        >>> Version(\"1.2.3\").release\n        (1, 2, 3)\n        >>> Version(\"2.0.0\").release\n        (2, 0, 0)\n        >>> Version(\"1!2.0.0.post0\").release\n        (2, 0, 0)\n\n        Includes trailing zeroes but not the epoch or any pre-release / development /\n        post-release suffixes.\n        \"\"\"\n        return self._version.release\n\n"
    },
    {
      "function": "done.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": ""
    },
    {
      "function": "self._lock.release",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line": 279,
      "caller": "test_race_between_idle_exit_and_job_assignment",
      "source_code": "    @property\n    def release(self) -> tuple[int, ...]:\n        \"\"\"The components of the \"release\" segment of the version.\n\n        >>> Version(\"1.2.3\").release\n        (1, 2, 3)\n        >>> Version(\"2.0.0\").release\n        (2, 0, 0)\n        >>> Version(\"1!2.0.0.post0\").release\n        (2, 0, 0)\n\n        Includes trailing zeroes but not the epoch or any pre-release / development /\n        post-release suffixes.\n        \"\"\"\n        return self._version.release\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_race_between_idle_exit_and_job_assignment(\n    monkeypatch: pytest.MonkeyPatch,\n) -> None:\n    # This is a lock where the first few times you try to acquire it with a\n    # timeout, it waits until the lock is available and then pretends to time\n    # out. Using this in our thread cache implementation causes the following\n    # sequence:\n    #\n    # 1. start_thread_soon grabs the worker thread, assigns it a job, and\n    #    releases its lock.\n    # 2. The worker thread wakes up (because the lock has been released), but\n    #    the JankyLock lies to it and tells it that the lock timed out. So the\n    #    worker thread tries to exit.\n    # 3. The worker thread checks for the race between exiting and being\n    #    assigned a job, and discovers that it *is* in the process of being\n    #    assigned a job, so it loops around and tries to acquire the lock\n    #    again.\n    # 4. Eventually the JankyLock admits that the lock is available, and\n    #    everything proceeds as normal.\n\n    class JankyLock:\n        def __init__(self) -> None:\n            self._lock = threading.Lock()\n            self._counter = 3\n\n        def acquire(self, timeout: int = -1) -> bool:\n            got_it = self._lock.acquire(timeout=timeout)\n            if timeout == -1:\n                return True\n            elif got_it:\n                if self._counter > 0:\n                    self._counter -= 1\n                    self._lock.release()\n                    return False\n                return True\n            else:\n                return False\n\n        def release(self) -> None:\n            self._lock.release()\n\n    monkeypatch.setattr(_thread_cache, \"Lock\", JankyLock)\n\n    with _join_started_threads():\n        tc = ThreadCache()\n        done = threading.Event()\n        tc.start_thread_soon(lambda: None, lambda _: done.set())\n        done.wait()\n        # Let's kill the thread we started, so it doesn't hang around until the\n        # test suite finishes. Doesn't really do any harm, but it can be confusing\n        # to see it in debug output.\n        monkeypatch.setattr(_thread_cache, \"IDLE_TIMEOUT\", 0.0001)\n        tc.start_thread_soon(lambda: None, lambda _: None)"
}