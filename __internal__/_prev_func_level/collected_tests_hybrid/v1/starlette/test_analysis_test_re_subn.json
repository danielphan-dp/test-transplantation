{
  "test_name": "test_re_subn",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "regex.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "regex.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "regex.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "regex.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_re_subn",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_re_subn",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_re_subn",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_re_subn",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_re_subn",
      "source_code": ""
    },
    {
      "function": "regex.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_re_subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_re_subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_re_subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_re_subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_re_subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_re_subn(self):\n        self.assertEqual(regex.subn(\"(?i)b+\", \"x\", \"bbbb BBBB\"), ('x x', 2))\n        self.assertEqual(regex.subn(\"b+\", \"x\", \"bbbb BBBB\"), ('x BBBB', 1))\n        self.assertEqual(regex.subn(\"b+\", \"x\", \"xyz\"), ('xyz', 0))\n        self.assertEqual(regex.subn(\"b*\", \"x\", \"xyz\"), ('xxxyxzx', 4))\n        self.assertEqual(regex.subn(\"b*\", \"x\", \"xyz\", 2), ('xxxyz', 2))"
}