{
  "test_name": "test_run_in_worker_thread_abandoned",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_threads.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "stdlib_queue.Queue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stdlib_queue.Queue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "q1.put",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 637
    },
    {
      "name": "q2.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "thread.is_alive",
      "source_code": "    def is_alive(self):\n        \"\"\"Proxy to the thread's ``is_alive`` method.\"\"\"\n        return self._worker.is_alive()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/threaded/thread.py",
      "line_number": 47
    },
    {
      "name": "capfd.readouterr",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 685
    },
    {
      "name": "q1.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q2.put",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 637
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.cancel_scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "to_thread_run_sync",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": ""
    },
    {
      "function": "stdlib_queue.Queue",
      "filename": "",
      "line": 0,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": ""
    },
    {
      "function": "stdlib_queue.Queue",
      "filename": "",
      "line": 0,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "q1.put",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 637,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PUT\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "q2.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "thread.is_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/threaded/thread.py",
      "line": 47,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def is_alive(self):\n        \"\"\"Proxy to the thread's ``is_alive`` method.\"\"\"\n        return self._worker.is_alive()\n\n"
    },
    {
      "function": "capfd.readouterr",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 685,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]\n\n\n"
    },
    {
      "function": "q1.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q2.put",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 637,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PUT\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.cancel_scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "to_thread_run_sync",
      "filename": "",
      "line": 0,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": ""
    },
    {
      "function": "wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_run_in_worker_thread_abandoned",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'Exception in thread' not in out",
    "assert 'Exception in thread' not in err"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_run_in_worker_thread_abandoned(\n    capfd: pytest.CaptureFixture[str], monkeypatch: pytest.MonkeyPatch\n) -> None:\n    monkeypatch.setattr(_core._thread_cache, \"IDLE_TIMEOUT\", 0.01)\n\n    q1: stdlib_queue.Queue[None] = stdlib_queue.Queue()\n    q2: stdlib_queue.Queue[threading.Thread] = stdlib_queue.Queue()\n\n    def thread_fn() -> None:\n        q1.get()\n        q2.put(threading.current_thread())\n\n    async def main() -> None:\n        async def child() -> None:\n            await to_thread_run_sync(thread_fn, abandon_on_cancel=True)\n\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(child)\n            await wait_all_tasks_blocked()\n            nursery.cancel_scope.cancel()\n\n    _core.run(main)\n\n    q1.put(None)\n    # This makes sure:\n    # - the thread actually ran\n    # - that thread has finished before we check for its output\n    thread = q2.get()\n    while thread.is_alive():\n        time.sleep(0.01)  # pragma: no cover\n\n    # Make sure we don't have a \"Exception in thread ...\" dump to the console:\n    out, err = capfd.readouterr()\n    assert \"Exception in thread\" not in out\n    assert \"Exception in thread\" not in err"
}