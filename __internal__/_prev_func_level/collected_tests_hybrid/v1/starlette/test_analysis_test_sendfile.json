{
  "test_name": "test_sendfile",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "SendfilePlaceholder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "setup",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line_number": 498
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "setup",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line_number": 498
    },
    {
      "name": "setup",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line_number": 498
    },
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "data.index",
      "source_code": "    def index(self, o: _T) -> int: pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 225
    },
    {
      "name": "join",
      "source_code": "    def join(self, *args: os.PathLike[str], abs: bool = False) -> LocalPath:\n        \"\"\"Return a new path by appending all 'args' as path\n        components.  if abs=1 is used restart from root if any\n        of the args is an absolute path.\n        \"\"\"\n        sep = self.sep\n        strargs = [os.fspath(arg) for arg in args]\n        strpath = self.strpath\n        if abs:\n            newargs: list[str] = []\n            for arg in reversed(strargs):\n                if isabs(arg):\n                    strpath = arg\n                    strargs = newargs\n                    break\n                newargs.insert(0, arg)\n        # special case for when we have e.g. strpath == \"/\"\n        actual_sep = \"\" if strpath.endswith(sep) else sep\n        for arg in strargs:\n            arg = arg.strip(sep)\n            if iswin32:\n                # allow unix style paths even on windows.\n                arg = arg.strip(\"/\")\n                arg = arg.replace(\"/\", sep)\n            strpath = strpath + actual_sep + arg\n            actual_sep = sep\n        obj = object.__new__(self.__class__)\n        obj.strpath = normpath(strpath)\n        return obj",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 719
    },
    {
      "name": "format.encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    },
    {
      "name": "headers.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.send_with_data_passthrough",
      "source_code": "    def send_with_data_passthrough(self, event: Event) -> Optional[List[bytes]]:\n        \"\"\"Identical to :meth:`send`, except that in situations where\n        :meth:`send` returns a single :term:`bytes-like object`, this instead\n        returns a list of them -- and when sending a :class:`Data` event, this\n        list is guaranteed to contain the exact object you passed in as\n        :attr:`Data.data`. See :ref:`sendfile` for discussion.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 518
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "SendfilePlaceholder",
      "filename": "",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    },
    {
      "function": "setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line": 498,
      "caller": "test_sendfile",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()\n\n        # If a collector fails its setup, fail its entire subtree of items.\n        # The setup is not retried for each item - the same exception is used.\n        for col, (finalizers, exc) in self.stack.items():\n            assert col in needed_collectors, \"previous item was not torn down properly\"\n            if exc:\n                raise exc[0].with_traceback(exc[1])\n\n        for col in needed_collectors[len(self.stack) :]:\n            assert col not in self.stack\n            # Push onto the stack.\n            self.stack[col] = ([col.teardown], None)\n            try:\n                col.setup()\n            except TEST_OUTCOME as exc:\n                self.stack[col] = (self.stack[col][0], (exc, exc.__traceback__))\n                raise\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_sendfile",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line": 498,
      "caller": "test_sendfile",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()\n\n        # If a collector fails its setup, fail its entire subtree of items.\n        # The setup is not retried for each item - the same exception is used.\n        for col, (finalizers, exc) in self.stack.items():\n            assert col in needed_collectors, \"previous item was not torn down properly\"\n            if exc:\n                raise exc[0].with_traceback(exc[1])\n\n        for col in needed_collectors[len(self.stack) :]:\n            assert col not in self.stack\n            # Push onto the stack.\n            self.stack[col] = ([col.teardown], None)\n            try:\n                col.setup()\n            except TEST_OUTCOME as exc:\n                self.stack[col] = (self.stack[col][0], (exc, exc.__traceback__))\n                raise\n\n"
    },
    {
      "function": "setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/runner.py",
      "line": 498,
      "caller": "test_sendfile",
      "source_code": "    def setup(self, item: Item) -> None:\n        \"\"\"Setup objects along the collector chain to the item.\"\"\"\n        needed_collectors = item.listchain()\n\n        # If a collector fails its setup, fail its entire subtree of items.\n        # The setup is not retried for each item - the same exception is used.\n        for col, (finalizers, exc) in self.stack.items():\n            assert col in needed_collectors, \"previous item was not torn down properly\"\n            if exc:\n                raise exc[0].with_traceback(exc[1])\n\n        for col in needed_collectors[len(self.stack) :]:\n            assert col not in self.stack\n            # Push onto the stack.\n            self.stack[col] = ([col.teardown], None)\n            try:\n                col.setup()\n            except TEST_OUTCOME as exc:\n                self.stack[col] = (self.stack[col][0], (exc, exc.__traceback__))\n                raise\n\n"
    },
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_sendfile",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_sendfile",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    },
    {
      "function": "data.index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 225,
      "caller": "test_sendfile",
      "source_code": "    def index(self, o: _T) -> int: pass\n\n"
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 719,
      "caller": "test_sendfile",
      "source_code": "    def join(self, *args: os.PathLike[str], abs: bool = False) -> LocalPath:\n        \"\"\"Return a new path by appending all 'args' as path\n        components.  if abs=1 is used restart from root if any\n        of the args is an absolute path.\n        \"\"\"\n        sep = self.sep\n        strargs = [os.fspath(arg) for arg in args]\n        strpath = self.strpath\n        if abs:\n            newargs: list[str] = []\n            for arg in reversed(strargs):\n                if isabs(arg):\n                    strpath = arg\n                    strargs = newargs\n                    break\n                newargs.insert(0, arg)\n        # special case for when we have e.g. strpath == \"/\"\n        actual_sep = \"\" if strpath.endswith(sep) else sep\n        for arg in strargs:\n            arg = arg.strip(sep)\n            if iswin32:\n                # allow unix style paths even on windows.\n                arg = arg.strip(\"/\")\n                arg = arg.replace(\"/\", sep)\n            strpath = strpath + actual_sep + arg\n            actual_sep = sep\n        obj = object.__new__(self.__class__)\n        obj.strpath = normpath(strpath)\n        return obj\n\n"
    },
    {
      "function": "format.encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_sendfile",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    },
    {
      "function": "headers.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_sendfile",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    },
    {
      "function": "c.send_with_data_passthrough",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 518,
      "caller": "test_sendfile",
      "source_code": "    def send_with_data_passthrough(self, event: Event) -> Optional[List[bytes]]:\n        \"\"\"Identical to :meth:`send`, except that in situations where\n        :meth:`send` returns a single :term:`bytes-like object`, this instead\n        returns a list of them -- and when sending a :class:`Data` event, this\n        list is guaranteed to contain the exact object you passed in as\n        :attr:`Data.data`. See :ref:`sendfile` for discussion.\n\n        \"\"\"\n        if self.our_state is ERROR:\n            raise LocalProtocolError(\"Can't send data when our state is ERROR\")\n        try:\n            if type(event) is Response:\n                event = self._clean_up_response_headers_for_sending(event)\n            # We want to call _process_event before calling the writer,\n            # because if someone tries to do something invalid then this will\n            # give a sensible error message, while our writers all just assume\n            # they will only receive valid events. But, _process_event might\n            # change self._writer. So we have to do a little dance:\n            writer = self._writer\n            self._process_event(self.our_role, event)\n            if type(event) is ConnectionClosed:\n                return None\n            else:\n                # In any situation where writer is None, process_event should\n                # have raised ProtocolError\n                assert writer is not None\n                data_list: List[bytes] = []\n                writer(event, data_list.append)\n                return data_list\n        except:\n            self._process_error(self.our_role)\n            raise\n\n"
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_sendfile",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert data == [placeholder]",
    "assert placeholder in data",
    "assert b''.join(data) == b'a\\r\\nxxxxxxxxxx\\r\\n'",
    "assert data == [placeholder]",
    "assert c.our_state is SEND_BODY"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_sendfile() -> None:\n    class SendfilePlaceholder:\n        def __len__(self) -> int:\n            return 10\n\n    placeholder = SendfilePlaceholder()\n\n    def setup(\n        header: Tuple[str, str], http_version: str\n    ) -> Tuple[Connection, Optional[List[bytes]]]:\n        c = Connection(SERVER)\n        receive_and_get(\n            c, \"GET / HTTP/{}\\r\\nHost: a\\r\\n\\r\\n\".format(http_version).encode(\"ascii\")\n        )\n        headers = []\n        if header:\n            headers.append(header)\n        c.send(Response(status_code=200, headers=headers))\n        return c, c.send_with_data_passthrough(Data(data=placeholder))  # type: ignore\n\n    c, data = setup((\"Content-Length\", \"10\"), \"1.1\")\n    assert data == [placeholder]  # type: ignore\n    # Raises an error if the connection object doesn't think we've sent\n    # exactly 10 bytes\n    c.send(EndOfMessage())\n\n    _, data = setup((\"Transfer-Encoding\", \"chunked\"), \"1.1\")\n    assert placeholder in data  # type: ignore\n    data[data.index(placeholder)] = b\"x\" * 10  # type: ignore\n    assert b\"\".join(data) == b\"a\\r\\nxxxxxxxxxx\\r\\n\"  # type: ignore\n\n    c, data = setup(None, \"1.0\")  # type: ignore\n    assert data == [placeholder]  # type: ignore\n    assert c.our_state is SEND_BODY"
}