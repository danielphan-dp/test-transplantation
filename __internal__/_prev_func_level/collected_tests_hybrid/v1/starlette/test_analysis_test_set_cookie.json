{
  "test_name": "test_set_cookie",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_responses.py",
  "static_methods": [
    {
      "name": "dt.datetime",
      "source_code": "    def datetime(\n        self,\n        datetime: datetime.date | None = None,\n        format: _PredefinedTimeFormat | str = 'medium',\n    ) -> str:\n        \"\"\"Return a date and time formatted according to the given pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/babel/support.py",
      "line_number": 84
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line_number": 349
    },
    {
      "name": "mocked_now.timestamp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "dt.datetime",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/babel/support.py",
      "line": 84,
      "caller": "test_set_cookie",
      "source_code": "    def datetime(\n        self,\n        datetime: datetime.date | None = None,\n        format: _PredefinedTimeFormat | str = 'medium',\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_set_cookie",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_set_cookie",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_set_cookie",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_set_cookie",
      "source_code": ""
    },
    {
      "function": "response.set_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line": 349,
      "caller": "test_set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n"
    },
    {
      "function": "mocked_now.timestamp",
      "filename": "",
      "line": 0,
      "caller": "test_set_cookie",
      "source_code": ""
    },
    {
      "function": "response",
      "filename": "",
      "line": 0,
      "caller": "test_set_cookie",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.text == 'Hello, world!'",
    "assert response.headers['set-cookie'] == 'mycookie=myvalue; Domain=localhost; expires=Thu, 22 Jan 2037 12:00:10 GMT; HttpOnly; Max-Age=10; Path=/; SameSite=none; Secure'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_set_cookie(test_client_factory: TestClientFactory, monkeypatch: pytest.MonkeyPatch) -> None:\n    # Mock time used as a reference for `Expires` by stdlib `SimpleCookie`.\n    mocked_now = dt.datetime(2037, 1, 22, 12, 0, 0, tzinfo=dt.timezone.utc)\n    monkeypatch.setattr(time, \"time\", lambda: mocked_now.timestamp())\n\n    async def app(scope: Scope, receive: Receive, send: Send) -> None:\n        response = Response(\"Hello, world!\", media_type=\"text/plain\")\n        response.set_cookie(\n            \"mycookie\",\n            \"myvalue\",\n            max_age=10,\n            expires=10,\n            path=\"/\",\n            domain=\"localhost\",\n            secure=True,\n            httponly=True,\n            samesite=\"none\",\n        )\n        await response(scope, receive, send)\n\n    client = test_client_factory(app)\n    response = client.get(\"/\")\n    assert response.text == \"Hello, world!\"\n    assert (\n        response.headers[\"set-cookie\"] == \"mycookie=myvalue; Domain=localhost; expires=Thu, 22 Jan 2037 12:00:10 GMT; \"\n        \"HttpOnly; Max-Age=10; Path=/; SameSite=none; Secure\"\n    )"
}