{
  "test_name": "test_setting_strict_exception_groups",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RuntimeError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_main",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 2576
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "_create_kwargs",
      "source_code": "def _create_kwargs(strictness: bool | None) -> dict[str, bool]:\n    \"\"\"Turn a bool|None into a kwarg dict that can be passed to `run` or `open_nursery`\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 2544
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_main",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 2576
    },
    {
      "name": "run_main",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 2576
    },
    {
      "name": "_create_kwargs",
      "source_code": "def _create_kwargs(strictness: bool | None) -> dict[str, bool]:\n    \"\"\"Turn a bool|None into a kwarg dict that can be passed to `run` or `open_nursery`\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 2544
    }
  ],
  "dynamic_methods": [
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "RuntimeError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "run_main",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 2576,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]\n\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "_create_kwargs",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 2544,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "def _create_kwargs(strictness: bool | None) -> dict[str, bool]:\n    \"\"\"Turn a bool|None into a kwarg dict that can be passed to `run` or `open_nursery`\"\"\"\n\n    if strictness is None:\n        return {}\n    return {\"strict_exception_groups\": strictness}\n\n\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_setting_strict_exception_groups",
      "source_code": ""
    },
    {
      "function": "run_main",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 2576,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]\n\n"
    },
    {
      "function": "run_main",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 2576,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]\n\n"
    },
    {
      "function": "_create_kwargs",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 2544,
      "caller": "test_setting_strict_exception_groups",
      "source_code": "def _create_kwargs(strictness: bool | None) -> dict[str, bool]:\n    \"\"\"Turn a bool|None into a kwarg dict that can be passed to `run` or `open_nursery`\"\"\"\n\n    if strictness is None:\n        return {}\n    return {\"strict_exception_groups\": strictness}\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_setting_strict_exception_groups(\n    run_strict: bool | None, open_nursery_strict: bool | None, multiple_exceptions: bool\n) -> None:\n    \"\"\"\n    Test default values and that nurseries can both inherit and override the global context\n    setting of strict_exception_groups.\n    \"\"\"\n\n    async def raise_error() -> NoReturn:\n        raise RuntimeError(\"test error\")\n\n    async def main() -> None:\n        \"\"\"Open a nursery, and raise one or two errors inside\"\"\"\n        async with _core.open_nursery(**_create_kwargs(open_nursery_strict)) as nursery:\n            nursery.start_soon(raise_error)\n            if multiple_exceptions:\n                nursery.start_soon(raise_error)\n\n    def run_main() -> None:\n        # mypy doesn't like kwarg magic\n        _core.run(main, **_create_kwargs(run_strict))  # type: ignore[arg-type]\n\n    matcher = Matcher(RuntimeError, \"^test error$\")\n\n    if multiple_exceptions:\n        with RaisesGroup(matcher, matcher):\n            run_main()\n    elif open_nursery_strict or (\n        open_nursery_strict is None and run_strict is not False\n    ):\n        with RaisesGroup(matcher):\n            run_main()\n    else:\n        with pytest.raises(RuntimeError, match=\"^test error$\"):\n            run_main()"
}