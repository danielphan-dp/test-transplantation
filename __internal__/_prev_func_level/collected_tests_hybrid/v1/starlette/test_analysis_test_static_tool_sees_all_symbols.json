{
  "test_name": "test_static_tool_sees_all_symbols",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
  "static_methods": [
    {
      "name": "no_underscores",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 135
    },
    {
      "name": "dir",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "runtime_names.discard",
      "source_code": "    def discard(self, key):\n        try:\n            del self[key]\n        except KeyError:\n            pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 209
    },
    {
      "name": "PyLinter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "linter.get_ast",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "no_underscores",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 135
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "runtime_names.remove",
      "source_code": "    def remove(self, rec=1, ignore_errors=False):\n        \"\"\"Remove a file or directory (or a directory tree if rec=1).\n        if ignore_errors is True, errors while removing directories will\n        be ignored.\n        \"\"\"\n        if self.check(dir=1, link=0):\n            if rec:\n                # force remove of readonly files on windows\n                if iswin32:\n                    self.chmod(0o700, rec=1)\n                import shutil",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 596
    },
    {
      "name": "jedi.Script",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "script.complete",
      "source_code": "    def complete(self) -> str:\n        \"\"\"Produce the completion data to send back to the shell.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/click/shell_completion.py",
      "line_number": 285
    },
    {
      "name": "no_underscores",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 135
    },
    {
      "name": "mod_cache.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "skip_if_optional_else_raise",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line_number": 50
    },
    {
      "name": "_ensure_mypy_cache_updated",
      "source_code": "def _ensure_mypy_cache_updated() -> None:\n    # This pollutes the `empty` dir. Should this be changed?\n    try:\n        from mypy.api import run\n    except ImportError as error:\n        skip_if_optional_else_raise(error)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 40
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "mod_cache.is_dir",
      "source_code": "    def is_dir(self):\n        return not self.at or self.at.endswith(\"/\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/zipp/__init__.py",
      "line_number": 395
    },
    {
      "name": "mod_cache.exists",
      "source_code": "    def exists(self):\n        return self._stat()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 126
    },
    {
      "name": "mod_cache.is_file",
      "source_code": "    def is_file(self, path: InfoPath) -> bool:\n        \"\"\"Check whether an entry in the info directory is a file.\"\"\"\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py",
      "line_number": 362
    },
    {
      "name": "skip_if_optional_else_raise",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line_number": 50
    },
    {
      "name": "Path.cwd",
      "source_code": "    def cwd(cls) -> Self:\n        return cls(pathlib.Path.cwd())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_path.py",
      "line_number": 117
    },
    {
      "name": "cache.glob",
      "source_code": "    def glob(self, pattern):\n        if not pattern:\n            raise ValueError(f\"Unacceptable pattern: {pattern!r}\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/zipp/__init__.py",
      "line_number": 421
    },
    {
      "name": "mod_cache.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "no_underscores",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 135
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "cache_file.read",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line_number": 145
    },
    {
      "name": "skip_if_optional_else_raise",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line_number": 50
    },
    {
      "name": "x.startswith",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def endswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def replace(self, old: str, new: str, maxcount: int=...) -> str: ...\n    def encode(self, x: str=..., y: str=...) -> bytes: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 110
    },
    {
      "name": "cache_json.items",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line_number": 100
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "key.startswith",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def endswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def replace(self, old: str, new: str, maxcount: int=...) -> str: ...\n    def encode(self, x: str=..., y: str=...) -> bytes: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 110
    }
  ],
  "dynamic_methods": [
    {
      "function": "no_underscores",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 135,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}\n\n"
    },
    {
      "function": "dir",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "runtime_names.discard",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 209,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def discard(self, key):\n        try:\n            del self[key]\n        except KeyError:\n            pass\n\n"
    },
    {
      "function": "PyLinter",
      "filename": "",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "linter.get_ast",
      "filename": "",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "no_underscores",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 135,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "runtime_names.remove",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 596,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def remove(self, rec=1, ignore_errors=False):\n        \"\"\"Remove a file or directory (or a directory tree if rec=1).\n        if ignore_errors is True, errors while removing directories will\n        be ignored.\n        \"\"\"\n        if self.check(dir=1, link=0):\n            if rec:\n                # force remove of readonly files on windows\n                if iswin32:\n                    self.chmod(0o700, rec=1)\n                import shutil\n\n                error.checked_call(\n                    shutil.rmtree, self.strpath, ignore_errors=ignore_errors\n                )\n            else:\n                error.checked_call(os.rmdir, self.strpath)\n        else:\n            if iswin32:\n                self.chmod(0o700)\n            error.checked_call(os.remove, self.strpath)\n\n"
    },
    {
      "function": "jedi.Script",
      "filename": "",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "script.complete",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/click/shell_completion.py",
      "line": 285,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def complete(self) -> str:\n        \"\"\"Produce the completion data to send back to the shell.\n\n        By default this calls :meth:`get_completion_args`, gets the\n        completions, then calls :meth:`format_completion` for each\n        completion.\n        \"\"\"\n        args, incomplete = self.get_completion_args()\n        completions = self.get_completions(args, incomplete)\n        out = [self.format_completion(item) for item in completions]\n        return \"\\n\".join(out)\n\n\n"
    },
    {
      "function": "no_underscores",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 135,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}\n\n"
    },
    {
      "function": "mod_cache.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "skip_if_optional_else_raise",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line": 50,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error\n"
    },
    {
      "function": "_ensure_mypy_cache_updated",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 40,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "def _ensure_mypy_cache_updated() -> None:\n    # This pollutes the `empty` dir. Should this be changed?\n    try:\n        from mypy.api import run\n    except ImportError as error:\n        skip_if_optional_else_raise(error)\n\n    global mypy_cache_updated\n    if not mypy_cache_updated:\n        # mypy cache was *probably* already updated by the other tests,\n        # but `pytest -k ...` might run just this test on its own\n        result = run(\n            [\n                \"--config-file=\",\n                \"--cache-dir=./.mypy_cache\",\n                \"--no-error-summary\",\n                \"-c\",\n                \"import trio\",\n            ]\n        )\n        assert not result[1]  # stderr\n        assert not result[0]  # stdout\n        mypy_cache_updated = True\n\n\n"
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "mod_cache.is_dir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/zipp/__init__.py",
      "line": 395,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def is_dir(self):\n        return not self.at or self.at.endswith(\"/\")\n\n"
    },
    {
      "function": "mod_cache.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 126,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def exists(self):\n        return self._stat()\n\n"
    },
    {
      "function": "mod_cache.is_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/metadata/base.py",
      "line": 362,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def is_file(self, path: InfoPath) -> bool:\n        \"\"\"Check whether an entry in the info directory is a file.\"\"\"\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "skip_if_optional_else_raise",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line": 50,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error\n"
    },
    {
      "function": "Path.cwd",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_path.py",
      "line": 117,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    @classmethod\n    @_wraps_async(pathlib.Path.cwd)\n    def cwd(cls) -> Self:\n        return cls(pathlib.Path.cwd())\n\n"
    },
    {
      "function": "cache.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/zipp/__init__.py",
      "line": 421,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def glob(self, pattern):\n        if not pattern:\n            raise ValueError(f\"Unacceptable pattern: {pattern!r}\")\n\n        prefix = re.escape(self.at)\n        tr = Translator(seps='/')\n        matches = re.compile(prefix + tr.translate(pattern)).fullmatch\n        return map(self._next, filter(matches, self.root.namelist()))\n\n"
    },
    {
      "function": "mod_cache.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "no_underscores",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 135,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}\n\n"
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "cache_file.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/_tokenizer.py",
      "line": 145,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n"
    },
    {
      "function": "skip_if_optional_else_raise",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line": 50,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error\n"
    },
    {
      "function": "x.startswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 110,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n"
    },
    {
      "function": "cache_json.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line": 100,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]\n\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": ""
    },
    {
      "function": "key.startswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 110,
      "caller": "test_static_tool_sees_all_symbols",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n"
    }
  ],
  "assertions": [
    "assert module.__file__ is not None",
    "assert mod_cache.exists()",
    "assert mod_cache.is_file()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_static_tool_sees_all_symbols(tool: str, modname: str, tmp_path: Path) -> None:\n    module = importlib.import_module(modname)\n\n    def no_underscores(symbols: Iterable[str]) -> set[str]:\n        return {symbol for symbol in symbols if not symbol.startswith(\"_\")}\n\n    runtime_names = no_underscores(dir(module))\n\n    # ignore deprecated module `tests` being invisible\n    if modname == \"trio\":\n        runtime_names.discard(\"tests\")\n\n    # Ignore any __future__ feature objects, if imported under that name.\n    for name in __future__.all_feature_names:\n        if getattr(module, name, None) is getattr(__future__, name):\n            runtime_names.remove(name)\n\n    if tool == \"pylint\":\n        try:\n            from pylint.lint import PyLinter\n        except ImportError as error:\n            skip_if_optional_else_raise(error)\n\n        linter = PyLinter()\n        assert module.__file__ is not None\n        ast = linter.get_ast(module.__file__, modname)\n        static_names = no_underscores(ast)  # type: ignore[arg-type]\n    elif tool == \"jedi\":\n        if sys.implementation.name != \"cpython\":\n            pytest.skip(\"jedi does not support pypy\")\n\n        try:\n            import jedi\n        except ImportError as error:\n            skip_if_optional_else_raise(error)\n\n        # Simulate typing \"import trio; trio.<TAB>\"\n        script = jedi.Script(f\"import {modname}; {modname}.\")\n        completions = script.complete()\n        static_names = no_underscores(c.name for c in completions)\n    elif tool == \"mypy\":\n        if not RUN_SLOW:  # pragma: no cover\n            pytest.skip(\"use --run-slow to check against mypy\")\n        if sys.implementation.name != \"cpython\":\n            pytest.skip(\"mypy not installed in tests on pypy\")\n\n        cache = Path.cwd() / \".mypy_cache\"\n\n        _ensure_mypy_cache_updated()\n\n        trio_cache = next(cache.glob(\"*/trio\"))\n        _, modname = (modname + \".\").split(\".\", 1)\n        modname = modname[:-1]\n        mod_cache = trio_cache / modname if modname else trio_cache\n        if mod_cache.is_dir():  # pragma: no coverage\n            mod_cache = mod_cache / \"__init__.data.json\"\n        else:\n            mod_cache = trio_cache / (modname + \".data.json\")\n\n        assert mod_cache.exists()\n        assert mod_cache.is_file()\n        with mod_cache.open() as cache_file:\n            cache_json = json.loads(cache_file.read())\n            static_names = no_underscores(\n                key\n                for key, value in cache_json[\"names\"].items()\n                if not key.startswith(\".\") and value[\"kind\"] == \"Gdef\"\n            )\n    elif tool == \"pyright_verifytypes\":\n        if not RUN_SLOW:  # pragma: no cover\n            pytest.skip(\"use --run-slow to check against pyright\")\n\n        try:\n            import pyright  # noqa: F401\n        except ImportError as error:\n            skip_if_optional_else_raise(error)\n        import subprocess\n\n        res = subprocess.run(\n            [\"pyright\", f\"--verifytypes={modname}\", \"--outputjson\"],\n            capture_output=True,\n        )\n        current_result = json.loads(res.stdout)\n\n        static_names = {\n            x[\"name\"][len(modname) + 1 :]\n            for x in current_result[\"typeCompleteness\"][\"symbols\"]\n            if x[\"name\"].startswith(modname)\n        }\n    else:  # pragma: no cover\n        raise AssertionError()\n\n    # It's expected that the static set will contain more names than the\n    # runtime set:\n    # - static tools are sometimes sloppy and include deleted names\n    # - some symbols are platform-specific at runtime, but always show up in\n    #   static analysis (e.g. in trio.socket or trio.lowlevel)\n    # So we check that the runtime names are a subset of the static names.\n    missing_names = runtime_names - static_names\n\n    # ignore warnings about deprecated module tests\n    missing_names -= {\"tests\"}\n\n    if missing_names:  # pragma: no cover\n        print(f\"{tool} can't see the following names in {modname}:\")\n        print()\n        for name in sorted(missing_names):\n            print(f\"    {name}\")\n        raise AssertionError()"
}