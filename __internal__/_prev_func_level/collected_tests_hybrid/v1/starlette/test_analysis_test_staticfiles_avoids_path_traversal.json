{
  "test_name": "test_staticfiles_avoids_path_traversal",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_staticfiles.py",
  "static_methods": [
    {
      "name": "statics_path.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "statics_disallow_path.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "static_index_file.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "statics_disallow_path_index_file.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "static_file.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "StaticFiles",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.get_path",
      "source_code": "def get_path(\n    o: object, seen: dict[int, object], parents: dict[int, tuple[int, object]]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/server/objgraph.py",
      "line_number": 92
    },
    {
      "name": "app.get_path",
      "source_code": "def get_path(\n    o: object, seen: dict[int, object], parents: dict[int, tuple[int, object]]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/server/objgraph.py",
      "line_number": 92
    }
  ],
  "dynamic_methods": [
    {
      "function": "statics_path.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "statics_disallow_path.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "static_index_file.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "statics_disallow_path_index_file.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "static_file.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "StaticFiles",
      "filename": "",
      "line": 0,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": ""
    },
    {
      "function": "app.get_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/server/objgraph.py",
      "line": 92,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "def get_path(\n    o: object, seen: dict[int, object], parents: dict[int, tuple[int, object]]\n"
    },
    {
      "function": "app.get_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/server/objgraph.py",
      "line": 92,
      "caller": "test_staticfiles_avoids_path_traversal",
      "source_code": "def get_path(\n    o: object, seen: dict[int, object], parents: dict[int, tuple[int, object]]\n"
    }
  ],
  "assertions": [
    "assert exc_info.value.status_code == 404",
    "assert exc_info.value.detail == 'Not Found'",
    "assert exc_info.value.status_code == 404",
    "assert exc_info.value.detail == 'Not Found'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_staticfiles_avoids_path_traversal(tmp_path: Path) -> None:\n    statics_path = tmp_path / \"static\"\n    statics_disallow_path = tmp_path / \"static_disallow\"\n\n    statics_path.mkdir()\n    statics_disallow_path.mkdir()\n\n    static_index_file = statics_path / \"index.html\"\n    statics_disallow_path_index_file = statics_disallow_path / \"index.html\"\n    static_file = tmp_path / \"static1.txt\"\n\n    static_index_file.write_text(\"<h1>Hello</h1>\")\n    statics_disallow_path_index_file.write_text(\"<h1>Private</h1>\")\n    static_file.write_text(\"Private\")\n\n    app = StaticFiles(directory=statics_path)\n\n    # We can't test this with 'httpx', so we test the app directly here.\n    path = app.get_path({\"path\": \"/../static1.txt\"})\n    with pytest.raises(HTTPException) as exc_info:\n        anyio.run(app.get_response, path, {\"method\": \"GET\"})\n\n    assert exc_info.value.status_code == 404\n    assert exc_info.value.detail == \"Not Found\"\n\n    path = app.get_path({\"path\": \"/../static_disallow/index.html\"})\n    with pytest.raises(HTTPException) as exc_info:\n        anyio.run(app.get_response, path, {\"method\": \"GET\"})\n\n    assert exc_info.value.status_code == 404\n    assert exc_info.value.detail == \"Not Found\""
}