{
  "test_name": "test_subscripting_match",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "self.fail",
      "source_code": "def fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line_number": 164
    },
    {
      "name": "self.fail",
      "source_code": "def fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line_number": 164
    },
    {
      "name": "self.fail",
      "source_code": "def fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line_number": 164
    },
    {
      "name": "self.fail",
      "source_code": "def fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line_number": 164
    },
    {
      "name": "m.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "m.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ascii",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_subscripting_match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line": 164,
      "caller": "test_subscripting_match",
      "source_code": "@_with_exception(Failed)\ndef fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.\n\n    :param reason:\n        The message to show the user as reason for the failure.\n\n    :param pytrace:\n        If False, msg represents the full failure information and no\n        python traceback will be reported.\n\n    :raises pytest.fail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Failed(msg=reason, pytrace=pytrace)\n\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line": 164,
      "caller": "test_subscripting_match",
      "source_code": "@_with_exception(Failed)\ndef fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.\n\n    :param reason:\n        The message to show the user as reason for the failure.\n\n    :param pytrace:\n        If False, msg represents the full failure information and no\n        python traceback will be reported.\n\n    :raises pytest.fail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Failed(msg=reason, pytrace=pytrace)\n\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line": 164,
      "caller": "test_subscripting_match",
      "source_code": "@_with_exception(Failed)\ndef fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.\n\n    :param reason:\n        The message to show the user as reason for the failure.\n\n    :param pytrace:\n        If False, msg represents the full failure information and no\n        python traceback will be reported.\n\n    :raises pytest.fail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Failed(msg=reason, pytrace=pytrace)\n\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/outcomes.py",
      "line": 164,
      "caller": "test_subscripting_match",
      "source_code": "@_with_exception(Failed)\ndef fail(reason: str = \"\", pytrace: bool = True) -> NoReturn:\n    \"\"\"Explicitly fail an executing test with the given message.\n\n    :param reason:\n        The message to show the user as reason for the failure.\n\n    :param pytrace:\n        If False, msg represents the full failure information and no\n        python traceback will be reported.\n\n    :raises pytest.fail.Exception:\n        The exception that is raised.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Failed(msg=reason, pytrace=pytrace)\n\n\n"
    },
    {
      "function": "m.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_subscripting_match",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "m.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_subscripting_match",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscripting_match",
      "source_code": ""
    },
    {
      "function": "ascii",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscripting_match",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscripting_match(self):\n        m = regex.match(r'(?<a>\\w)', 'xy')\n        if not m:\n            self.fail(\"Failed: expected match but returned None\")\n        elif not m or m[0] != m.group(0) or m[1] != m.group(1):\n            self.fail(\"Failed\")\n        if not m:\n            self.fail(\"Failed: expected match but returned None\")\n        elif m[:] != ('x', 'x'):\n            self.fail(\"Failed: expected \\\"('x', 'x')\\\" but got {} instead\".format(ascii(m[:])))"
}