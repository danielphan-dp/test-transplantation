{
  "test_name": "test_templates_with_directories",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_templates.py",
  "static_methods": [
    {
      "name": "dir_a.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "template_a.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "dir_b.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "template_b.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Jinja2Templates",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "tmp_path.resolve",
      "source_code": "    def resolve(self, kind, value, implicit):\n        if kind is ScalarNode and implicit[0]:\n            if value == '':\n                resolvers = self.yaml_implicit_resolvers.get('', [])\n            else:\n                resolvers = self.yaml_implicit_resolvers.get(value[0], [])\n            wildcard_resolvers = self.yaml_implicit_resolvers.get(None, [])\n            for tag, regexp in resolvers + wildcard_resolvers:\n                if regexp.match(value):\n                    return tag\n            implicit = implicit[1]\n        if self.yaml_path_resolvers:\n            exact_paths = self.resolver_exact_paths[-1]\n            if kind in exact_paths:\n                return exact_paths[kind]\n            if None in exact_paths:\n                return exact_paths[None]\n        if kind is ScalarNode:\n            return self.DEFAULT_SCALAR_TAG\n        elif kind is SequenceNode:\n            return self.DEFAULT_SEQUENCE_TAG\n        elif kind is MappingNode:\n            return self.DEFAULT_MAPPING_TAG",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/resolver.py",
      "line_number": 143
    },
    {
      "name": "templates.TemplateResponse",
      "source_code": "    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n    ) -> _TemplateResponse: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line_number": 134
    },
    {
      "name": "tmp_path.resolve",
      "source_code": "    def resolve(self, kind, value, implicit):\n        if kind is ScalarNode and implicit[0]:\n            if value == '':\n                resolvers = self.yaml_implicit_resolvers.get('', [])\n            else:\n                resolvers = self.yaml_implicit_resolvers.get(value[0], [])\n            wildcard_resolvers = self.yaml_implicit_resolvers.get(None, [])\n            for tag, regexp in resolvers + wildcard_resolvers:\n                if regexp.match(value):\n                    return tag\n            implicit = implicit[1]\n        if self.yaml_path_resolvers:\n            exact_paths = self.resolver_exact_paths[-1]\n            if kind in exact_paths:\n                return exact_paths[kind]\n            if None in exact_paths:\n                return exact_paths[None]\n        if kind is ScalarNode:\n            return self.DEFAULT_SCALAR_TAG\n        elif kind is SequenceNode:\n            return self.DEFAULT_SEQUENCE_TAG\n        elif kind is MappingNode:\n            return self.DEFAULT_MAPPING_TAG",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/resolver.py",
      "line_number": 143
    },
    {
      "name": "templates.TemplateResponse",
      "source_code": "    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n    ) -> _TemplateResponse: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line_number": 134
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "response.context.keys",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line_number": 1281
    },
    {
      "name": "response.context.keys",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line_number": 1281
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "dir_a.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_templates_with_directories",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "template_a.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_templates_with_directories",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "dir_b.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_templates_with_directories",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "template_b.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_templates_with_directories",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    },
    {
      "function": "Jinja2Templates",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_templates_with_directories",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_templates_with_directories",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_templates_with_directories",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "tmp_path.resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/resolver.py",
      "line": 143,
      "caller": "test_templates_with_directories",
      "source_code": "    def resolve(self, kind, value, implicit):\n        if kind is ScalarNode and implicit[0]:\n            if value == '':\n                resolvers = self.yaml_implicit_resolvers.get('', [])\n            else:\n                resolvers = self.yaml_implicit_resolvers.get(value[0], [])\n            wildcard_resolvers = self.yaml_implicit_resolvers.get(None, [])\n            for tag, regexp in resolvers + wildcard_resolvers:\n                if regexp.match(value):\n                    return tag\n            implicit = implicit[1]\n        if self.yaml_path_resolvers:\n            exact_paths = self.resolver_exact_paths[-1]\n            if kind in exact_paths:\n                return exact_paths[kind]\n            if None in exact_paths:\n                return exact_paths[None]\n        if kind is ScalarNode:\n            return self.DEFAULT_SCALAR_TAG\n        elif kind is SequenceNode:\n            return self.DEFAULT_SEQUENCE_TAG\n        elif kind is MappingNode:\n            return self.DEFAULT_MAPPING_TAG\n\n"
    },
    {
      "function": "templates.TemplateResponse",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line": 134,
      "caller": "test_templates_with_directories",
      "source_code": "    @typing.overload\n    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n"
    },
    {
      "function": "tmp_path.resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/resolver.py",
      "line": 143,
      "caller": "test_templates_with_directories",
      "source_code": "    def resolve(self, kind, value, implicit):\n        if kind is ScalarNode and implicit[0]:\n            if value == '':\n                resolvers = self.yaml_implicit_resolvers.get('', [])\n            else:\n                resolvers = self.yaml_implicit_resolvers.get(value[0], [])\n            wildcard_resolvers = self.yaml_implicit_resolvers.get(None, [])\n            for tag, regexp in resolvers + wildcard_resolvers:\n                if regexp.match(value):\n                    return tag\n            implicit = implicit[1]\n        if self.yaml_path_resolvers:\n            exact_paths = self.resolver_exact_paths[-1]\n            if kind in exact_paths:\n                return exact_paths[kind]\n            if None in exact_paths:\n                return exact_paths[None]\n        if kind is ScalarNode:\n            return self.DEFAULT_SCALAR_TAG\n        elif kind is SequenceNode:\n            return self.DEFAULT_SEQUENCE_TAG\n        elif kind is MappingNode:\n            return self.DEFAULT_MAPPING_TAG\n\n"
    },
    {
      "function": "templates.TemplateResponse",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line": 134,
      "caller": "test_templates_with_directories",
      "source_code": "    @typing.overload\n    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    },
    {
      "function": "response.context.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line": 1281,
      "caller": "test_templates_with_directories",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())\n\n"
    },
    {
      "function": "response.context.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line": 1281,
      "caller": "test_templates_with_directories",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())\n\n"
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_directories",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.text == \"<html><a href='http://testserver/a'></a> a</html>\"",
    "assert response.template.name == 'template_a.html'",
    "assert set(response.context.keys()) == {'request'}",
    "assert response.text == \"<html><a href='http://testserver/b'></a> b</html>\"",
    "assert response.template.name == 'template_b.html'",
    "assert set(response.context.keys()) == {'request'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_templates_with_directories(tmp_path: Path, test_client_factory: TestClientFactory) -> None:\n    dir_a = tmp_path.resolve() / \"a\"\n    dir_a.mkdir()\n    template_a = dir_a / \"template_a.html\"\n    template_a.write_text(\"<html><a href='{{ url_for('page_a') }}'></a> a</html>\")\n\n    async def page_a(request: Request) -> Response:\n        return templates.TemplateResponse(request, \"template_a.html\")\n\n    dir_b = tmp_path.resolve() / \"b\"\n    dir_b.mkdir()\n    template_b = dir_b / \"template_b.html\"\n    template_b.write_text(\"<html><a href='{{ url_for('page_b') }}'></a> b</html>\")\n\n    async def page_b(request: Request) -> Response:\n        return templates.TemplateResponse(request, \"template_b.html\")\n\n    app = Starlette(\n        debug=True,\n        routes=[Route(\"/a\", endpoint=page_a), Route(\"/b\", endpoint=page_b)],\n    )\n    templates = Jinja2Templates(directory=[dir_a, dir_b])\n\n    client = test_client_factory(app)\n    response = client.get(\"/a\")\n    assert response.text == \"<html><a href='http://testserver/a'></a> a</html>\"\n    assert response.template.name == \"template_a.html\"  # type: ignore\n    assert set(response.context.keys()) == {\"request\"}  # type: ignore\n\n    response = client.get(\"/b\")\n    assert response.text == \"<html><a href='http://testserver/b'></a> b</html>\"\n    assert response.template.name == \"template_b.html\"  # type: ignore\n    assert set(response.context.keys()) == {\"request\"}"
}