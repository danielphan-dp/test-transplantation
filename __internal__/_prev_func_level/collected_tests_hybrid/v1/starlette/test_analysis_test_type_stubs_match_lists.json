{
  "test_name": "test_type_stubs_match_lists",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_file_io.py",
  "static_methods": [
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "found.sort",
      "source_code": "    def sort(self) -> None: pass\n    def reverse(self) -> None: pass\n    def remove(self, o: _T) -> None: pass\n    def index(self, o: _T) -> int: pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 222
    },
    {
      "name": "expected.sort",
      "source_code": "    def sort(self) -> None: pass\n    def reverse(self) -> None: pass\n    def remove(self, o: _T) -> None: pass\n    def index(self, o: _T) -> int: pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 222
    },
    {
      "name": "loader.get_source",
      "source_code": "    def get_source(\n        self,\n        source: Source | None,\n        line_index: int = -1,\n        excinfo: ExceptionInfo[BaseException] | None = None,\n        short: bool = False,\n    ) -> list[str]:\n        \"\"\"Return formatted and marked up source lines.\"\"\"\n        lines = []\n        if source is not None and line_index < 0:\n            line_index += len(source)\n        if source is None or line_index >= len(source.lines) or line_index < 0:\n            # `line_index` could still be outside `range(len(source.lines))` if\n            # we're processing AST with pathological position attributes.\n            source = Source(\"???\")\n            line_index = 0\n        space_prefix = \"    \"\n        if short:\n            lines.append(space_prefix + source.lines[line_index].strip())\n        else:\n            for line in source.lines[:line_index]:\n                lines.append(space_prefix + line)\n            lines.append(self.flow_marker + \"   \" + source.lines[line_index])\n            for line in source.lines[line_index + 1 :]:\n                lines.append(space_prefix + line)\n        if excinfo is not None:\n            indent = 4 if short else self._getindent(source)\n            lines.extend(self.get_exconly(excinfo, indent=indent, markall=True))\n        return lines",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 845
    },
    {
      "name": "line.strip",
      "source_code": "    def strip(self) -> Source:\n        \"\"\"Return new Source object with trailing and leading blank lines removed.\"\"\"\n        start, end = 0, len(self)\n        while start < end and not self.lines[start].strip():\n            start += 1\n        while end > start and not self.lines[end - 1].strip():\n            end -= 1\n        source = Source()\n        source.lines[:] = self.lines[start:end]\n        return source",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/source.py",
      "line_number": 69
    },
    {
      "name": "found.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "line.startswith",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def endswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def replace(self, old: str, new: str, maxcount: int=...) -> str: ...\n    def encode(self, x: str=..., y: str=...) -> bytes: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 110
    },
    {
      "name": "match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    }
  ],
  "dynamic_methods": [
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_type_stubs_match_lists",
      "source_code": ""
    },
    {
      "function": "found.sort",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 222,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def sort(self) -> None: pass\n"
    },
    {
      "function": "expected.sort",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 222,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def sort(self) -> None: pass\n"
    },
    {
      "function": "loader.get_source",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 845,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def get_source(\n        self,\n        source: Source | None,\n        line_index: int = -1,\n        excinfo: ExceptionInfo[BaseException] | None = None,\n        short: bool = False,\n"
    },
    {
      "function": "line.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/source.py",
      "line": 69,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def strip(self) -> Source:\n        \"\"\"Return new Source object with trailing and leading blank lines removed.\"\"\"\n        start, end = 0, len(self)\n        while start < end and not self.lines[start].strip():\n            start += 1\n        while end > start and not self.lines[end - 1].strip():\n            end -= 1\n        source = Source()\n        source.lines[:] = self.lines[start:end]\n        return source\n\n"
    },
    {
      "function": "found.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "line.startswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 110,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n"
    },
    {
      "function": "match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_type_stubs_match_lists",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    }
  ],
  "assertions": [
    "assert _file_io.__spec__ is not None",
    "assert isinstance(loader, importlib.abc.SourceLoader)",
    "assert found == expected"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_type_stubs_match_lists() -> None:\n    \"\"\"Check the manual stubs match the list of wrapped methods.\"\"\"\n    # Fetch the module's source code.\n    assert _file_io.__spec__ is not None\n    loader = _file_io.__spec__.loader\n    assert isinstance(loader, importlib.abc.SourceLoader)\n    source = io.StringIO(loader.get_source(\"trio._file_io\"))\n\n    # Find the class, then find the TYPE_CHECKING block.\n    for line in source:\n        if \"class AsyncIOWrapper\" in line:\n            break\n    else:  # pragma: no cover - should always find this\n        pytest.fail(\"No class definition line?\")\n\n    for line in source:\n        if \"if TYPE_CHECKING\" in line:\n            break\n    else:  # pragma: no cover - should always find this\n        pytest.fail(\"No TYPE CHECKING line?\")\n\n    # Now we should be at the type checking block.\n    found: list[tuple[str, str]] = []\n    for line in source:  # pragma: no branch - expected to break early\n        if line.strip() and not line.startswith(\" \" * 8):\n            break  # Dedented out of the if TYPE_CHECKING block.\n        match = re.match(r\"\\s*(async )?def ([a-zA-Z0-9_]+)\\(\", line)\n        if match is not None:\n            kind = \"async\" if match.group(1) is not None else \"sync\"\n            found.append((match.group(2), kind))\n\n    # Compare two lists so that we can easily see duplicates, and see what is different overall.\n    expected = [(fname, \"async\") for fname in _FILE_ASYNC_METHODS]\n    expected += [(fname, \"sync\") for fname in _FILE_SYNC_ATTRS]\n    # Ignore order, error if duplicates are present.\n    found.sort()\n    expected.sort()\n    assert found == expected"
}