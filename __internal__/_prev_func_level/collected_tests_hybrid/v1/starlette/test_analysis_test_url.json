{
  "test_name": "test_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "u.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "u.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "u.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ipv6_url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "ipv6_url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ipv6_url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "url.replace",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 762
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "u.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "u.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "u.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "ipv6_url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "ipv6_url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "ipv6_url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    },
    {
      "function": "url.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 762,
      "caller": "test_url",
      "source_code": "    def replace(self, **kwargs):\n        \"\"\"Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.\"\"\"\n        new_kwargs = {\"interval\": self._interval,\n                      \"count\": self._count,\n                      \"dtstart\": self._dtstart,\n                      \"freq\": self._freq,\n                      \"until\": self._until,\n                      \"wkst\": self._wkst,\n                      \"cache\": False if self._cache is None else True }\n        new_kwargs.update(self._original_rule)\n        new_kwargs.update(kwargs)\n        return rrule(**new_kwargs)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert u.scheme == 'https'",
    "assert u.hostname == 'example.org'",
    "assert u.port == 123",
    "assert u.netloc == 'example.org:123'",
    "assert u.username is None",
    "assert u.password is None",
    "assert u.path == '/path/to/somewhere'",
    "assert u.query == 'abc=123'",
    "assert u.fragment == 'anchor'",
    "assert new == 'http://example.org:123/path/to/somewhere?abc=123#anchor'",
    "assert new.scheme == 'http'",
    "assert new == 'https://example.org/path/to/somewhere?abc=123#anchor'",
    "assert new.port is None",
    "assert new == 'https://example.com:123/path/to/somewhere?abc=123#anchor'",
    "assert new.hostname == 'example.com'",
    "assert new == 'https://[fe::2]:8080'",
    "assert new == 'https://username:password@[fe::2]:12345'",
    "assert new.netloc == 'username:password@[fe::2]:12345'",
    "assert new == 'https://[fe::2]:123'",
    "assert url.replace(hostname='bar') == URL('http://u:p@bar/')",
    "assert url.replace(port=88) == URL('http://u:p@host:88')",
    "assert url.replace(username='u') == URL('http://u@host:80')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_url() -> None:\n    u = URL(\"https://example.org:123/path/to/somewhere?abc=123#anchor\")\n    assert u.scheme == \"https\"\n    assert u.hostname == \"example.org\"\n    assert u.port == 123\n    assert u.netloc == \"example.org:123\"\n    assert u.username is None\n    assert u.password is None\n    assert u.path == \"/path/to/somewhere\"\n    assert u.query == \"abc=123\"\n    assert u.fragment == \"anchor\"\n\n    new = u.replace(scheme=\"http\")\n    assert new == \"http://example.org:123/path/to/somewhere?abc=123#anchor\"\n    assert new.scheme == \"http\"\n\n    new = u.replace(port=None)\n    assert new == \"https://example.org/path/to/somewhere?abc=123#anchor\"\n    assert new.port is None\n\n    new = u.replace(hostname=\"example.com\")\n    assert new == \"https://example.com:123/path/to/somewhere?abc=123#anchor\"\n    assert new.hostname == \"example.com\"\n\n    ipv6_url = URL(\"https://[fe::2]:12345\")\n    new = ipv6_url.replace(port=8080)\n    assert new == \"https://[fe::2]:8080\"\n\n    new = ipv6_url.replace(username=\"username\", password=\"password\")\n    assert new == \"https://username:password@[fe::2]:12345\"\n    assert new.netloc == \"username:password@[fe::2]:12345\"\n\n    ipv6_url = URL(\"https://[fe::2]\")\n    new = ipv6_url.replace(port=123)\n    assert new == \"https://[fe::2]:123\"\n\n    url = URL(\"http://u:p@host/\")\n    assert url.replace(hostname=\"bar\") == URL(\"http://u:p@bar/\")\n\n    url = URL(\"http://u:p@host:80\")\n    assert url.replace(port=88) == URL(\"http://u:p@host:88\")\n\n    url = URL(\"http://host:80\")\n    assert url.replace(username=\"u\") == URL(\"http://u@host:80\")"
}