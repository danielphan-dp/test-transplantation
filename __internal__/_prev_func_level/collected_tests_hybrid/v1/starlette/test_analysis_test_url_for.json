{
  "test_name": "test_url_for",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_routing.py",
  "static_methods": [
    {
      "name": "app.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "app.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "app.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "app.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "app.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "app.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    },
    {
      "name": "app.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    },
    {
      "name": "app.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    },
    {
      "name": "app.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    },
    {
      "name": "app.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_url_for",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "app.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_url_for",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "app.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_url_for",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "app.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_url_for",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "app.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_url_for",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "app.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_url_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    },
    {
      "function": "app.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_url_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    },
    {
      "function": "app.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_url_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    },
    {
      "function": "app.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_url_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    },
    {
      "function": "app.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_url_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    }
  ],
  "assertions": [
    "assert app.url_path_for('homepage').make_absolute_url(base_url='https://example.org') == 'https://example.org/'",
    "assert app.url_path_for('homepage').make_absolute_url(base_url='https://example.org/root_path/') == 'https://example.org/root_path/'",
    "assert app.url_path_for('user', username='tomchristie').make_absolute_url(base_url='https://example.org') == 'https://example.org/users/tomchristie'",
    "assert app.url_path_for('user', username='tomchristie').make_absolute_url(base_url='https://example.org/root_path/') == 'https://example.org/root_path/users/tomchristie'",
    "assert app.url_path_for('websocket_endpoint').make_absolute_url(base_url='https://example.org') == 'wss://example.org/ws'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_url_for() -> None:\n    assert app.url_path_for(\"homepage\").make_absolute_url(base_url=\"https://example.org\") == \"https://example.org/\"\n    assert (\n        app.url_path_for(\"homepage\").make_absolute_url(base_url=\"https://example.org/root_path/\")\n        == \"https://example.org/root_path/\"\n    )\n    assert (\n        app.url_path_for(\"user\", username=\"tomchristie\").make_absolute_url(base_url=\"https://example.org\")\n        == \"https://example.org/users/tomchristie\"\n    )\n    assert (\n        app.url_path_for(\"user\", username=\"tomchristie\").make_absolute_url(base_url=\"https://example.org/root_path/\")\n        == \"https://example.org/root_path/users/tomchristie\"\n    )\n    assert (\n        app.url_path_for(\"websocket_endpoint\").make_absolute_url(base_url=\"https://example.org\")\n        == \"wss://example.org/ws\"\n    )"
}