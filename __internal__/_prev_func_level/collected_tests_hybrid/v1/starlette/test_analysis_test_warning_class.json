{
  "test_name": "test_warning_class",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
  "static_methods": [
    {
      "name": "warn_deprecated",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line_number": 54
    },
    {
      "name": "warn_deprecated",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line_number": 54
    },
    {
      "name": "warn_deprecated",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line_number": 54
    }
  ],
  "dynamic_methods": [
    {
      "function": "warn_deprecated",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line": 54,
      "caller": "test_warning_class",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,\n"
    },
    {
      "function": "warn_deprecated",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line": 54,
      "caller": "test_warning_class",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,\n"
    },
    {
      "function": "warn_deprecated",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line": 54,
      "caller": "test_warning_class",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_warning_class() -> None:\n    with pytest.deprecated_call():\n        warn_deprecated(\"foo\", \"bar\", issue=None, instead=None)\n\n    # essentially the same as the above check\n    with pytest.warns(DeprecationWarning):\n        warn_deprecated(\"foo\", \"bar\", issue=None, instead=None)\n\n    with pytest.warns(TrioDeprecationWarning):\n        warn_deprecated(\n            \"foo\", \"bar\", issue=None, instead=None, use_triodeprecationwarning=True\n        )"
}