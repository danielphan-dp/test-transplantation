{
  "test_name": "test_websocket_concurrency_pattern",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_websockets.py",
  "static_methods": [
    {
      "name": "client.websocket_connect",
      "source_code": "    def websocket_connect(\n        self,\n        url: str,\n        subprotocols: typing.Sequence[str] | None = None,\n        **kwargs: typing.Any,\n    ) -> WebSocketTestSession:\n        url = urljoin(\"ws://testserver\", url)\n        headers = kwargs.get(\"headers\", {})\n        headers.setdefault(\"connection\", \"upgrade\")\n        headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n        headers.setdefault(\"sec-websocket-version\", \"13\")\n        if subprotocols is not None:\n            headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n        kwargs[\"headers\"] = headers\n        try:\n            super().request(\"GET\", url, **kwargs)\n        except _Upgrade as exc:\n            session = exc.session\n        else:\n            raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line_number": 699
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "WebSocket",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.websocket_connect",
      "source_code": "    def websocket_connect(\n        self,\n        url: str,\n        subprotocols: typing.Sequence[str] | None = None,\n        **kwargs: typing.Any,\n    ) -> WebSocketTestSession:\n        url = urljoin(\"ws://testserver\", url)\n        headers = kwargs.get(\"headers\", {})\n        headers.setdefault(\"connection\", \"upgrade\")\n        headers.setdefault(\"sec-websocket-key\", \"testserver==\")\n        headers.setdefault(\"sec-websocket-version\", \"13\")\n        if subprotocols is not None:\n            headers.setdefault(\"sec-websocket-protocol\", \", \".join(subprotocols))\n        kwargs[\"headers\"] = headers\n        try:\n            super().request(\"GET\", url, **kwargs)\n        except _Upgrade as exc:\n            session = exc.session\n        else:\n            raise RuntimeError(\"Expected WebSocket upgrade\")  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line_number": 699
    },
    {
      "name": "websocket.send_json",
      "source_code": "    def send_json(self, data: typing.Any, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> None:\n        text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n        if mode == \"text\":\n            self.send({\"type\": \"websocket.receive\", \"text\": text})\n        else:\n            self.send({\"type\": \"websocket.receive\", \"bytes\": text.encode(\"utf-8\")})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line_number": 194
    },
    {
      "name": "websocket.receive_json",
      "source_code": "    def receive_json(self, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> typing.Any:\n        message = self.receive()\n        self._raise_on_close(message)\n        if mode == \"text\":\n            text = message[\"text\"]\n        else:\n            text = message[\"bytes\"].decode(\"utf-8\")\n        return json.loads(text)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line_number": 220
    },
    {
      "name": "websocket.iter_json",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "websocket.accept",
      "source_code": "    def accept(self, type: TokenType, *, reject: Literal[True]) -> Token: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/mark/expression.py",
      "line_number": 142
    },
    {
      "name": "task_group.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "websocket.close",
      "source_code": "    def close(self) -> None:\n        self.session.close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/twine/repository.py",
      "line_number": 89
    },
    {
      "name": "writer",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stream_send.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "websocket.send_json",
      "source_code": "    def send_json(self, data: typing.Any, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> None:\n        text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n        if mode == \"text\":\n            self.send({\"type\": \"websocket.receive\", \"text\": text})\n        else:\n            self.send({\"type\": \"websocket.receive\", \"bytes\": text.encode(\"utf-8\")})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line_number": 194
    }
  ],
  "dynamic_methods": [
    {
      "function": "client.websocket_connect",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line": 699,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def websocket_connect(\n        self,\n        url: str,\n        subprotocols: typing.Sequence[str] | None = None,\n        **kwargs: typing.Any,\n"
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "WebSocket",
      "filename": "",
      "line": 0,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": ""
    },
    {
      "function": "client.websocket_connect",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line": 699,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def websocket_connect(\n        self,\n        url: str,\n        subprotocols: typing.Sequence[str] | None = None,\n        **kwargs: typing.Any,\n"
    },
    {
      "function": "websocket.send_json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line": 194,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def send_json(self, data: typing.Any, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> None:\n        text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n        if mode == \"text\":\n            self.send({\"type\": \"websocket.receive\", \"text\": text})\n        else:\n            self.send({\"type\": \"websocket.receive\", \"bytes\": text.encode(\"utf-8\")})\n\n"
    },
    {
      "function": "websocket.receive_json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line": 220,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def receive_json(self, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> typing.Any:\n        message = self.receive()\n        self._raise_on_close(message)\n        if mode == \"text\":\n            text = message[\"text\"]\n        else:\n            text = message[\"bytes\"].decode(\"utf-8\")\n        return json.loads(text)\n\n\n"
    },
    {
      "function": "websocket.iter_json",
      "filename": "",
      "line": 0,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": ""
    },
    {
      "function": "websocket.accept",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/mark/expression.py",
      "line": 142,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    @overload\n    def accept(self, type: TokenType, *, reject: Literal[True]) -> Token: ...\n\n"
    },
    {
      "function": "task_group.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "websocket.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/twine/repository.py",
      "line": 89,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def close(self) -> None:\n        self.session.close()\n\n"
    },
    {
      "function": "writer",
      "filename": "",
      "line": 0,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": ""
    },
    {
      "function": "stream_send.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "websocket.send_json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/testclient.py",
      "line": 194,
      "caller": "test_websocket_concurrency_pattern",
      "source_code": "    def send_json(self, data: typing.Any, mode: typing.Literal[\"text\", \"binary\"] = \"text\") -> None:\n        text = json.dumps(data, separators=(\",\", \":\"), ensure_ascii=False)\n        if mode == \"text\":\n            self.send({\"type\": \"websocket.receive\", \"text\": text})\n        else:\n            self.send({\"type\": \"websocket.receive\", \"bytes\": text.encode(\"utf-8\")})\n\n"
    }
  ],
  "assertions": [
    "assert data == {'hello': 'world'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_websocket_concurrency_pattern(test_client_factory: TestClientFactory) -> None:\n    stream_send: ObjectSendStream[MutableMapping[str, Any]]\n    stream_receive: ObjectReceiveStream[MutableMapping[str, Any]]\n    stream_send, stream_receive = anyio.create_memory_object_stream()\n\n    async def reader(websocket: WebSocket) -> None:\n        async with stream_send:\n            async for data in websocket.iter_json():\n                await stream_send.send(data)\n\n    async def writer(websocket: WebSocket) -> None:\n        async with stream_receive:\n            async for message in stream_receive:\n                await websocket.send_json(message)\n\n    async def app(scope: Scope, receive: Receive, send: Send) -> None:\n        websocket = WebSocket(scope, receive=receive, send=send)\n        await websocket.accept()\n        async with anyio.create_task_group() as task_group:\n            task_group.start_soon(reader, websocket)\n            await writer(websocket)\n        await websocket.close()\n\n    client = test_client_factory(app)\n    with client.websocket_connect(\"/\") as websocket:\n        websocket.send_json({\"hello\": \"world\"})\n        data = websocket.receive_json()\n        assert data == {\"hello\": \"world\"}"
}