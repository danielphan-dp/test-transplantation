{
  "test_name": "test_word_boundary",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_boundary",
      "source_code": ""
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_boundary",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_word_boundary(self):\n        text = 'The quick (\"brown\") fox can\\'t jump 32.3 feet, right?'\n        self.assertEqual(regex.split(r'(?V1)\\b', text), ['', 'The', ' ',\n          'quick', ' (\"', 'brown', '\") ', 'fox', ' ', 'can', \"'\", 't',\n          ' ', 'jump', ' ', '32', '.', '3', ' ', 'feet', ', ',\n          'right', '?'])\n        self.assertEqual(regex.split(r'(?V1w)\\b', text), ['', 'The', ' ',\n          'quick', ' ', '(', '\"', 'brown', '\"', ')', ' ', 'fox', ' ',\n          \"can't\", ' ', 'jump', ' ', '32.3', ' ', 'feet', ',', ' ',\n          'right', '?', ''])\n\n        text = \"The  fox\"\n        self.assertEqual(regex.split(r'(?V1)\\b', text), ['', 'The', '  ',\n          'fox', ''])\n        self.assertEqual(regex.split(r'(?V1w)\\b', text), ['', 'The', '  ',\n          'fox', ''])\n\n        text = \"can't aujourd'hui l'objectif\"\n        self.assertEqual(regex.split(r'(?V1)\\b', text), ['', 'can', \"'\",\n          't', ' ', 'aujourd', \"'\", 'hui', ' ', 'l', \"'\", 'objectif',\n          ''])\n        self.assertEqual(regex.split(r'(?V1w)\\b', text), ['', \"can't\", ' ',\n          \"aujourd'hui\", ' ', \"l'objectif\", ''])"
}