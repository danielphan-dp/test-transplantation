{
  "test_name": "test_app_factory",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 557
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    },
    {
      "name": "caplog.clear",
      "source_code": "    def clear(self) -> None:\n        self.calls[:] = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 455
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "caplog.at_level",
      "source_code": "    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 557
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 557,
      "caller": "test_app_factory",
      "source_code": "    @contextmanager\n    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        orig_level = logger_obj.level\n        logger_obj.setLevel(level)\n        handler_orig_level = self.handler.level\n        self.handler.setLevel(level)\n        original_disable_level = self._force_enable_logging(level, logger_obj)\n        try:\n            yield\n        finally:\n            logger_obj.setLevel(orig_level)\n            self.handler.setLevel(handler_orig_level)\n            logging.disable(original_disable_level)\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_app_factory",
      "source_code": ""
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_app_factory",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    },
    {
      "function": "caplog.clear",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 455,
      "caller": "test_app_factory",
      "source_code": "    def clear(self) -> None:\n        self.calls[:] = []\n\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_app_factory",
      "source_code": ""
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_app_factory",
      "source_code": ""
    },
    {
      "function": "caplog.at_level",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 557,
      "caller": "test_app_factory",
      "source_code": "    @contextmanager\n    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        orig_level = logger_obj.level\n        logger_obj.setLevel(level)\n        handler_orig_level = self.handler.level\n        self.handler.setLevel(level)\n        original_disable_level = self._force_enable_logging(level, logger_obj)\n        try:\n            yield\n        finally:\n            logger_obj.setLevel(orig_level)\n            self.handler.setLevel(handler_orig_level)\n            logging.disable(original_disable_level)\n\n"
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_app_factory",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_factory",
      "source_code": ""
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_app_factory",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    }
  ],
  "assertions": [
    "assert config.loaded_app is asgi_app",
    "assert config.loaded_app is asgi_app",
    "assert len(caplog.records) == 1",
    "assert '--factory' in caplog.records[0].message"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_app_factory(caplog: pytest.LogCaptureFixture) -> None:\n    def create_app() -> ASGIApplication:\n        return asgi_app\n\n    config = Config(app=create_app, factory=True, proxy_headers=False)\n    config.load()\n    assert config.loaded_app is asgi_app\n\n    # Flag not passed. In this case, successfully load the app, but issue a warning\n    # to indicate that an explicit flag is preferred.\n    caplog.clear()\n    config = Config(app=create_app, proxy_headers=False)\n    with caplog.at_level(logging.WARNING):\n        config.load()\n    assert config.loaded_app is asgi_app\n    assert len(caplog.records) == 1\n    assert \"--factory\" in caplog.records[0].message\n\n    # App not a no-arguments callable.\n    config = Config(app=asgi_app, factory=True)\n    with pytest.raises(SystemExit):\n        config.load()"
}