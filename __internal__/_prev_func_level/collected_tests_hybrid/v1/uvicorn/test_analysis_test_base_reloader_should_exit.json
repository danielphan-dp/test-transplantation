{
  "test_name": "test_base_reloader_should_exit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
  "static_methods": [
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BaseReload",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "reloader.pause",
      "source_code": "    def pause(self) -> None:\n        \"\"\"Pause tracing, but be prepared to `resume`.\"\"\"\n        for tracer in self.tracers:\n            tracer.stop()\n            stats = tracer.get_stats()\n            if stats:\n                print(\"\\nCoverage.py tracer stats:\")\n                for k, v in human_sorted_items(stats.items()):\n                    print(f\"{k:>20}: {v}\")\n        if self.threading:\n            self.threading.settrace(None)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/coverage/collector.py",
      "line_number": 365
    },
    {
      "name": "reloader.should_exit.is_set",
      "source_code": "        def is_set(self) -> bool: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/main.py",
      "line_number": 49
    },
    {
      "name": "reloader.should_exit.is_set",
      "source_code": "        def is_set(self) -> bool: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/main.py",
      "line_number": 49
    },
    {
      "name": "reloader.signal_handler",
      "source_code": "    def signal_handler(self, sig: int, frame: FrameType | None) -> None:  # pragma: full coverage\n        \"\"\"\n        A signal handler that is registered with the parent process.\n        \"\"\"\n        if sys.platform == \"win32\" and self.is_restarting:\n            self.is_restarting = False\n        else:\n            self.should_exit.set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/uvicorn/supervisors/basereload.py",
      "line_number": 41
    },
    {
      "name": "reloader.signal_handler",
      "source_code": "    def signal_handler(self, sig: int, frame: FrameType | None) -> None:  # pragma: full coverage\n        \"\"\"\n        A signal handler that is registered with the parent process.\n        \"\"\"\n        if sys.platform == \"win32\" and self.is_restarting:\n            self.is_restarting = False\n        else:\n            self.should_exit.set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/uvicorn/supervisors/basereload.py",
      "line_number": 41
    },
    {
      "name": "reloader.pause",
      "source_code": "    def pause(self) -> None:\n        \"\"\"Pause tracing, but be prepared to `resume`.\"\"\"\n        for tracer in self.tracers:\n            tracer.stop()\n            stats = tracer.get_stats()\n            if stats:\n                print(\"\\nCoverage.py tracer stats:\")\n                for k, v in human_sorted_items(stats.items()):\n                    print(f\"{k:>20}: {v}\")\n        if self.threading:\n            self.threading.settrace(None)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/coverage/collector.py",
      "line_number": 365
    }
  ],
  "dynamic_methods": [
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_base_reloader_should_exit",
      "source_code": ""
    },
    {
      "function": "BaseReload",
      "filename": "",
      "line": 0,
      "caller": "test_base_reloader_should_exit",
      "source_code": ""
    },
    {
      "function": "reloader.pause",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/coverage/collector.py",
      "line": 365,
      "caller": "test_base_reloader_should_exit",
      "source_code": "    def pause(self) -> None:\n        \"\"\"Pause tracing, but be prepared to `resume`.\"\"\"\n        for tracer in self.tracers:\n            tracer.stop()\n            stats = tracer.get_stats()\n            if stats:\n                print(\"\\nCoverage.py tracer stats:\")\n                for k, v in human_sorted_items(stats.items()):\n                    print(f\"{k:>20}: {v}\")\n        if self.threading:\n            self.threading.settrace(None)\n\n"
    },
    {
      "function": "reloader.should_exit.is_set",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/main.py",
      "line": 49,
      "caller": "test_base_reloader_should_exit",
      "source_code": "        def is_set(self) -> bool: ...\n\n\n"
    },
    {
      "function": "reloader.should_exit.is_set",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/main.py",
      "line": 49,
      "caller": "test_base_reloader_should_exit",
      "source_code": "        def is_set(self) -> bool: ...\n\n\n"
    },
    {
      "function": "reloader.signal_handler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/uvicorn/supervisors/basereload.py",
      "line": 41,
      "caller": "test_base_reloader_should_exit",
      "source_code": "    def signal_handler(self, sig: int, frame: FrameType | None) -> None:  # pragma: full coverage\n        \"\"\"\n        A signal handler that is registered with the parent process.\n        \"\"\"\n        if sys.platform == \"win32\" and self.is_restarting:\n            self.is_restarting = False\n        else:\n            self.should_exit.set()\n\n"
    },
    {
      "function": "reloader.signal_handler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/uvicorn/supervisors/basereload.py",
      "line": 41,
      "caller": "test_base_reloader_should_exit",
      "source_code": "    def signal_handler(self, sig: int, frame: FrameType | None) -> None:  # pragma: full coverage\n        \"\"\"\n        A signal handler that is registered with the parent process.\n        \"\"\"\n        if sys.platform == \"win32\" and self.is_restarting:\n            self.is_restarting = False\n        else:\n            self.should_exit.set()\n\n"
    },
    {
      "function": "reloader.pause",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/coverage/collector.py",
      "line": 365,
      "caller": "test_base_reloader_should_exit",
      "source_code": "    def pause(self) -> None:\n        \"\"\"Pause tracing, but be prepared to `resume`.\"\"\"\n        for tracer in self.tracers:\n            tracer.stop()\n            stats = tracer.get_stats()\n            if stats:\n                print(\"\\nCoverage.py tracer stats:\")\n                for k, v in human_sorted_items(stats.items()):\n                    print(f\"{k:>20}: {v}\")\n        if self.threading:\n            self.threading.settrace(None)\n\n"
    }
  ],
  "assertions": [
    "assert not reloader.should_exit.is_set()",
    "assert reloader.should_exit.is_set()"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_base_reloader_should_exit(tmp_path):\n    config = Config(app=\"tests.test_config:asgi_app\", reload=True)\n    reloader = BaseReload(config, target=run, sockets=[])\n    assert not reloader.should_exit.is_set()\n    reloader.pause()\n\n    if sys.platform == \"win32\":\n        reloader.signal_handler(signal.CTRL_C_EVENT, None)  # pragma: py-not-win32\n    else:\n        reloader.signal_handler(signal.SIGINT, None)  # pragma: py-win32\n\n    assert reloader.should_exit.is_set()\n    with pytest.raises(StopIteration):\n        reloader.pause()"
}