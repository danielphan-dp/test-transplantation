{
  "test_name": "test_basic_regex_sub",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "chr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_basic_regex_sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    },
    {
      "function": "chr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_basic_regex_sub",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_basic_regex_sub(self):\n        self.assertEqual(regex.sub(\"(?i)b+\", \"x\", \"bbbb BBBB\"), 'x x')\n        self.assertEqual(regex.sub(r'\\d+', self.bump_num, '08.2 -2 23x99y'),\n          '9.3 -3 24x100y')\n        self.assertEqual(regex.sub(r'\\d+', self.bump_num, '08.2 -2 23x99y', 3),\n          '9.3 -3 23x99y')\n\n        self.assertEqual(regex.sub('.', lambda m: r\"\\n\", 'x'), \"\\\\n\")\n        self.assertEqual(regex.sub('.', r\"\\n\", 'x'), \"\\n\")\n\n        self.assertEqual(regex.sub('(?P<a>x)', r'\\g<a>\\g<a>', 'xx'), 'xxxx')\n        self.assertEqual(regex.sub('(?P<a>x)', r'\\g<a>\\g<1>', 'xx'), 'xxxx')\n        self.assertEqual(regex.sub('(?P<unk>x)', r'\\g<unk>\\g<unk>', 'xx'),\n          'xxxx')\n        self.assertEqual(regex.sub('(?P<unk>x)', r'\\g<1>\\g<1>', 'xx'), 'xxxx')\n\n        self.assertEqual(regex.sub('a', r'\\t\\n\\v\\r\\f\\a\\b', 'a'), \"\\t\\n\\v\\r\\f\\a\\b\")\n        self.assertEqual(regex.sub('a', '\\t\\n\\v\\r\\f\\a', 'a'), \"\\t\\n\\v\\r\\f\\a\")\n        self.assertEqual(regex.sub('a', '\\t\\n\\v\\r\\f\\a', 'a'), chr(9) + chr(10)\n          + chr(11) + chr(13) + chr(12) + chr(7))\n\n        self.assertEqual(regex.sub(r'^\\s*', 'X', 'test'), 'Xtest')\n\n        self.assertEqual(regex.sub(r\"x\", r\"\\x0A\", \"x\"), \"\\n\")\n        self.assertEqual(regex.sub(r\"x\", r\"\\u000A\", \"x\"), \"\\n\")\n        self.assertEqual(regex.sub(r\"x\", r\"\\U0000000A\", \"x\"), \"\\n\")\n        self.assertEqual(regex.sub(r\"x\", r\"\\N{LATIN CAPITAL LETTER A}\",\n          \"x\"), \"A\")\n\n        self.assertEqual(regex.sub(br\"x\", br\"\\x0A\", b\"x\"), b\"\\n\")"
}