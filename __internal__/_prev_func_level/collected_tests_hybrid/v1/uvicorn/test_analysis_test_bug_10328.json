{
  "test_name": "test_bug_10328",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "regex.compile",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.compile",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pat.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "pat.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "pat.subn",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 290
    },
    {
      "name": "m.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "m.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "pat.finditer",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 340
    },
    {
      "name": "pat.finditer",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 340
    }
  ],
  "dynamic_methods": [
    {
      "function": "regex.compile",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "regex.compile",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_10328",
      "source_code": ""
    },
    {
      "function": "pat.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_bug_10328",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "pat.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_bug_10328",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "pat.subn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 290,
      "caller": "test_bug_10328",
      "source_code": "def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement repl. number is the number of substitutions that were made. repl\n    can be either a string or a callable; if a string, backslash escapes in it\n    are processed; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subn(repl, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "m.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_bug_10328",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "m.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_bug_10328",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "pat.finditer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 340,
      "caller": "test_bug_10328",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,\n  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return an iterator over all matches in the string. The matches may be\n    overlapped if overlapped is True. For each match, the iterator returns a\n    match object. Empty matches are included in the result.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.finditer(string, pos, endpos, overlapped, concurrent, partial,\n      timeout)\n\n"
    },
    {
      "function": "pat.finditer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 340,
      "caller": "test_bug_10328",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,\n  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return an iterator over all matches in the string. The matches may be\n    overlapped if overlapped is True. For each match, the iterator returns a\n    match object. Empty matches are included in the result.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.finditer(string, pos, endpos, overlapped, concurrent, partial,\n      timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_bug_10328 (self):\n        # Issue 10328.\n        pat = regex.compile(r'(?mV0)(?P<trailing_ws>[ \\t]+\\r*$)|(?P<no_final_newline>(?<=[^\\n])\\Z)')\n        if sys.version_info >= (3, 7, 0):\n            self.assertEqual(pat.subn(lambda m: '<' + m.lastgroup + '>',\n              'foobar '), ('foobar<trailing_ws><no_final_newline>', 2))\n        else:\n            self.assertEqual(pat.subn(lambda m: '<' + m.lastgroup + '>',\n              'foobar '), ('foobar<trailing_ws>', 1))\n        self.assertEqual([m.group() for m in pat.finditer('foobar ')], [' ',\n          ''])\n        pat = regex.compile(r'(?mV1)(?P<trailing_ws>[ \\t]+\\r*$)|(?P<no_final_newline>(?<=[^\\n])\\Z)')\n        self.assertEqual(pat.subn(lambda m: '<' + m.lastgroup + '>',\n          'foobar '), ('foobar<trailing_ws><no_final_newline>', 2))\n        self.assertEqual([m.group() for m in pat.finditer('foobar ')], [' ',\n          ''])"
}