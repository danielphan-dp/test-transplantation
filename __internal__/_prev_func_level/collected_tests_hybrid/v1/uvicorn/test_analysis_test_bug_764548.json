{
  "test_name": "test_bug_764548",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "regex.compile",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "my_unicode",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pat.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    }
  ],
  "dynamic_methods": [
    {
      "function": "regex.compile",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_764548",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_764548",
      "source_code": ""
    },
    {
      "function": "my_unicode",
      "filename": "",
      "line": 0,
      "caller": "test_bug_764548",
      "source_code": ""
    },
    {
      "function": "pat.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_bug_764548",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_bug_764548(self):\n        # Bug 764548, regex.compile() barfs on str/unicode subclasses.\n        class my_unicode(str): pass\n        pat = regex.compile(my_unicode(\"abc\"))\n        self.assertEqual(pat.match(\"xyz\"), None)"
}