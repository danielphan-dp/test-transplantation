{
  "test_name": "test_cli_print_version",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_cli.py",
  "static_methods": [
    {
      "name": "CliRunner",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "runner.invoke",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n    ) -> Result:\n        \"\"\"Invokes a command in an isolated environment.  The arguments are\n        forwarded directly to the command line script, the `extra` keyword\n        arguments are passed to the :meth:`~clickpkg.Command.main` function of\n        the command.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/click/testing.py",
      "line_number": 349
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "CliRunner",
      "filename": "",
      "line": 0,
      "caller": "test_cli_print_version",
      "source_code": ""
    },
    {
      "function": "runner.invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/click/testing.py",
      "line": 349,
      "caller": "test_cli_print_version",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cli_print_version",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert result.exit_code == 0",
    "assert 'Running uvicorn {version} with {py_implementation} {py_version} on {system}'.format(version=uvicorn.__version__, py_implementation=platform.python_implementation(), py_version=platform.python_version(), system=platform.system()) in result.output"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_cli_print_version() -> None:\n    runner = CliRunner()\n\n    result = runner.invoke(cli, [\"--version\"])\n\n    assert result.exit_code == 0\n    assert (\n        \"Running uvicorn {version} with {py_implementation} {py_version} on {system}\".format(  # noqa: UP032\n            version=uvicorn.__version__,\n            py_implementation=platform.python_implementation(),\n            py_version=platform.python_version(),\n            system=platform.system(),\n        )\n    ) in result.output"
}