{
  "test_name": "test_env_file",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 557
    },
    {
      "name": "fp.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "caplog.at_level",
      "source_code": "    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 557
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    },
    {
      "name": "int",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 557,
      "caller": "test_env_file",
      "source_code": "    @contextmanager\n    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        orig_level = logger_obj.level\n        logger_obj.setLevel(level)\n        handler_orig_level = self.handler.level\n        self.handler.setLevel(level)\n        original_disable_level = self._force_enable_logging(level, logger_obj)\n        try:\n            yield\n        finally:\n            logger_obj.setLevel(orig_level)\n            self.handler.setLevel(handler_orig_level)\n            logging.disable(original_disable_level)\n\n"
    },
    {
      "function": "fp.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_env_file",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 557,
      "caller": "test_env_file",
      "source_code": "    @contextmanager\n    def at_level(self, level: int | str, logger: str | None = None) -> Generator[None]:\n        \"\"\"Context manager that sets the level for capturing of logs. After\n        the end of the 'with' statement the level is restored to its original\n        value.\n\n        Will enable the requested logging level if it was disabled via :func:`logging.disable`.\n\n        :param level: The level.\n        :param logger: The logger to update. If not given, the root logger.\n        \"\"\"\n        logger_obj = logging.getLogger(logger)\n        orig_level = logger_obj.level\n        logger_obj.setLevel(level)\n        handler_orig_level = self.handler.level\n        self.handler.setLevel(level)\n        original_disable_level = self._force_enable_logging(level, logger_obj)\n        try:\n            yield\n        finally:\n            logger_obj.setLevel(orig_level)\n            self.handler.setLevel(handler_orig_level)\n            logging.disable(original_disable_level)\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_env_file",
      "source_code": ""
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_env_file",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    },
    {
      "function": "int",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_env_file",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_env_file",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_env_file",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert config.workers == int(str(os.getenv('WEB_CONCURRENCY')))",
    "assert config.forwarded_allow_ips == os.getenv('FORWARDED_ALLOW_IPS')",
    "assert len(caplog.records) == 1",
    "assert f\"Loading environment from '{fp}'\" in caplog.records[0].message"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_env_file(\n    web_concurrency: int,\n    forwarded_allow_ips: str,\n    caplog: pytest.LogCaptureFixture,\n    tmp_path: Path,\n) -> None:\n    \"\"\"\n    Test that one can load environment variables using an env file.\n    \"\"\"\n    fp = tmp_path / \".env\"\n    content = f\"WEB_CONCURRENCY={web_concurrency}\\n\" f\"FORWARDED_ALLOW_IPS={forwarded_allow_ips}\\n\"\n    fp.write_text(content)\n    with caplog.at_level(logging.INFO):\n        config = Config(app=asgi_app, env_file=fp)\n        config.load()\n\n    assert config.workers == int(str(os.getenv(\"WEB_CONCURRENCY\")))\n    assert config.forwarded_allow_ips == os.getenv(\"FORWARDED_ALLOW_IPS\")\n    assert len(caplog.records) == 1\n    assert f\"Loading environment from '{fp}'\" in caplog.records[0].message"
}