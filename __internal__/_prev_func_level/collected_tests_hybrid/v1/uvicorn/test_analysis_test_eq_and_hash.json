{
  "test_name": "test_eq_and_hash",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_struct.py",
  "static_methods": [
    {
      "name": "RStruct",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RStruct",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RStruct",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RStruct",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RStruct",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "hash",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RStruct",
      "filename": "",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "RStruct",
      "filename": "",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "RStruct",
      "filename": "",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "RStruct",
      "filename": "",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "RStruct",
      "filename": "",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    },
    {
      "function": "hash",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_eq_and_hash",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert hash(r) == hash(r1)",
    "assert r == r1",
    "assert hash(r) != hash(r2)",
    "assert r != r2",
    "assert hash(r) != hash(r3)",
    "assert r != r3",
    "assert hash(r) != hash(r4)",
    "assert r != r4"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_eq_and_hash(self) -> None:\n        r = RStruct(\"Foo\", [\"a\", \"b\"], [bool_rprimitive, int_rprimitive])\n\n        # using the exact same fields\n        r1 = RStruct(\"Foo\", [\"a\", \"b\"], [bool_rprimitive, int_rprimitive])\n        assert hash(r) == hash(r1)\n        assert r == r1\n\n        # different name\n        r2 = RStruct(\"Foq\", [\"a\", \"b\"], [bool_rprimitive, int_rprimitive])\n        assert hash(r) != hash(r2)\n        assert r != r2\n\n        # different names\n        r3 = RStruct(\"Foo\", [\"a\", \"c\"], [bool_rprimitive, int_rprimitive])\n        assert hash(r) != hash(r3)\n        assert r != r3\n\n        # different type\n        r4 = RStruct(\"Foo\", [\"a\", \"b\"], [bool_rprimitive, int_rprimitive, bool_rprimitive])\n        assert hash(r) != hash(r4)\n        assert r != r4"
}