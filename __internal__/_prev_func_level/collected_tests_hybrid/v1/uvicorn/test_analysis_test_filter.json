{
  "test_name": "test_filter",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/tests/test_blocking.py",
  "static_methods": [
    {
      "name": "session_conn.filter",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Proxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MatchRule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "match_rule.add_arg_condition",
      "source_code": "    def add_arg_condition(self, argno: int, value: str, kind='string'):\n        \"\"\"Add a condition for a particular argument",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line_number": 160
    },
    {
      "name": "bus.AddMatch",
      "source_code": "    def AddMatch(self, rule):\n        \"\"\"*rule* can be a str or a :class:`MatchRule` instance\"\"\"\n        if isinstance(rule, MatchRule):\n            rule = rule.serialise()\n        return new_method_call(self, 'AddMatch', 's', (rule,))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line_number": 57
    },
    {
      "name": "session_conn.filter",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bus.RequestName",
      "source_code": "    def RequestName(self, name, flags=0):\n        return new_method_call(self, 'RequestName', 'su', (name, flags))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line_number": 34
    },
    {
      "name": "session_conn.recv_until_filtered",
      "source_code": "    def recv_until_filtered(self, queue, *, timeout=None) -> Message:\n        \"\"\"Process incoming messages until one is filtered into queue",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line_number": 224
    }
  ],
  "dynamic_methods": [
    {
      "function": "session_conn.filter",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_filter",
      "source_code": ""
    },
    {
      "function": "Proxy",
      "filename": "",
      "line": 0,
      "caller": "test_filter",
      "source_code": ""
    },
    {
      "function": "MatchRule",
      "filename": "",
      "line": 0,
      "caller": "test_filter",
      "source_code": ""
    },
    {
      "function": "match_rule.add_arg_condition",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line": 160,
      "caller": "test_filter",
      "source_code": "    def add_arg_condition(self, argno: int, value: str, kind='string'):\n        \"\"\"Add a condition for a particular argument\n        \n        argno: int, 0-63\n        kind: 'string', 'path', 'namespace'\n        \"\"\"\n        if kind not in {'string', 'path', 'namespace'}:\n            raise ValueError(\"kind={!r}\".format(kind))\n        if kind == 'namespace' and argno != 0:\n            raise ValueError(\"argno must be 0 for kind='namespace'\")\n        self.arg_conditions[argno] = (value, kind)\n\n"
    },
    {
      "function": "bus.AddMatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line": 57,
      "caller": "test_filter",
      "source_code": "    def AddMatch(self, rule):\n        \"\"\"*rule* can be a str or a :class:`MatchRule` instance\"\"\"\n        if isinstance(rule, MatchRule):\n            rule = rule.serialise()\n        return new_method_call(self, 'AddMatch', 's', (rule,))\n\n"
    },
    {
      "function": "session_conn.filter",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_filter",
      "source_code": ""
    },
    {
      "function": "bus.RequestName",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line": 34,
      "caller": "test_filter",
      "source_code": "    def RequestName(self, name, flags=0):\n        return new_method_call(self, 'RequestName', 'su', (name, flags))\n\n"
    },
    {
      "function": "session_conn.recv_until_filtered",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line": 224,
      "caller": "test_filter",
      "source_code": "    def recv_until_filtered(self, queue, *, timeout=None) -> Message:\n        \"\"\"Process incoming messages until one is filtered into queue\n\n        Pops the message from queue and returns it, or raises TimeoutError if\n        the optional timeout expires. Without a timeout, this is equivalent to::\n\n            while len(queue) == 0:\n                conn.recv_messages()\n            return queue.popleft()\n\n        In the other I/O modules, there is no need for this, because messages\n        are placed in queues by a separate task.\n\n        :param collections.deque queue: A deque connected by :meth:`filter`\n        :param float timeout: Maximum time to wait in seconds\n        \"\"\"\n        deadline = timeout_to_deadline(timeout)\n        while len(queue) == 0:\n            self.recv_messages(timeout=deadline_to_timeout(deadline))\n        return queue.popleft()\n\n\n"
    }
  ],
  "assertions": [
    "assert res == 1",
    "assert signal_msg.body == (name, '', session_conn.unique_name)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_filter(session_conn):\n    bus = Proxy(message_bus, session_conn)\n    name = \"io.gitlab.takluyver.jeepney.tests.blocking_test_filter\"\n\n    match_rule = MatchRule(\n        type=\"signal\",\n        sender=message_bus.bus_name,\n        interface=message_bus.interface,\n        member=\"NameOwnerChanged\",\n        path=message_bus.object_path,\n    )\n    match_rule.add_arg_condition(0, name)\n\n    # Ask the message bus to subscribe us to this signal\n    bus.AddMatch(match_rule)\n\n    with session_conn.filter(match_rule) as matches:\n        res, = bus.RequestName(name)\n        assert res == 1  # 1: got the name\n\n        signal_msg = session_conn.recv_until_filtered(matches, timeout=2)\n\n        assert signal_msg.body == (name, '', session_conn.unique_name)"
}