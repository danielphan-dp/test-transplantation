{
  "test_name": "test_format",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.subf",
      "source_code": "def subf(pattern, format, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 280
    },
    {
      "name": "regex.subf",
      "source_code": "def subf(pattern, format, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 280
    },
    {
      "name": "regex.subfn",
      "source_code": "def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 302
    },
    {
      "name": "regex.subfn",
      "source_code": "def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 302
    },
    {
      "name": "regex.match.expandf",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "regex.subf",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 280,
      "caller": "test_format",
      "source_code": "def subf(pattern, format, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return the string obtained by replacing the leftmost (or rightmost with a\n    reverse pattern) non-overlapping occurrences of the pattern in string by the\n    replacement format. format can be either a string or a callable; if a string,\n    it's treated as a format string; if a callable, it's passed the match object\n    and must return a replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subf(format, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subf",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 280,
      "caller": "test_format",
      "source_code": "def subf(pattern, format, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return the string obtained by replacing the leftmost (or rightmost with a\n    reverse pattern) non-overlapping occurrences of the pattern in string by the\n    replacement format. format can be either a string or a callable; if a string,\n    it's treated as a format string; if a callable, it's passed the match object\n    and must return a replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subf(format, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subfn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 302,
      "caller": "test_format",
      "source_code": "def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement format. number is the number of substitutions that were made. format\n    can be either a string or a callable; if a string, it's treated as a format\n    string; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subfn(format, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.subfn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 302,
      "caller": "test_format",
      "source_code": "def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return a 2-tuple containing (new_string, number). new_string is the string\n    obtained by replacing the leftmost (or rightmost with a reverse pattern)\n    non-overlapping occurrences of the pattern in the source string by the\n    replacement format. number is the number of substitutions that were made. format\n    can be either a string or a callable; if a string, it's treated as a format\n    string; if a callable, it's passed the match object and must return a\n    replacement string to be used.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.subfn(format, string, count, pos, endpos, concurrent, timeout)\n\n"
    },
    {
      "function": "regex.match.expandf",
      "filename": "",
      "line": 0,
      "caller": "test_format",
      "source_code": ""
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_format",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_format(self):\n        self.assertEqual(regex.subf(r\"(\\w+) (\\w+)\", \"{0} => {2} {1}\",\n          \"foo bar\"), \"foo bar => bar foo\")\n        self.assertEqual(regex.subf(r\"(?<word1>\\w+) (?<word2>\\w+)\",\n          \"{word2} {word1}\", \"foo bar\"), \"bar foo\")\n\n        self.assertEqual(regex.subfn(r\"(\\w+) (\\w+)\", \"{0} => {2} {1}\",\n          \"foo bar\"), (\"foo bar => bar foo\", 1))\n        self.assertEqual(regex.subfn(r\"(?<word1>\\w+) (?<word2>\\w+)\",\n          \"{word2} {word1}\", \"foo bar\"), (\"bar foo\", 1))\n\n        self.assertEqual(regex.match(r\"(\\w+) (\\w+)\",\n          \"foo bar\").expandf(\"{0} => {2} {1}\"), \"foo bar => bar foo\")"
}