{
  "test_name": "test_int32",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_typeops.py",
  "static_methods": [
    {
      "name": "is_subtype",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line_number": 26
    },
    {
      "name": "is_subtype",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line_number": 26
    },
    {
      "name": "is_subtype",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line_number": 26
    },
    {
      "name": "is_subtype",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line_number": 26
    },
    {
      "name": "is_subtype",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line_number": 26
    }
  ],
  "dynamic_methods": [
    {
      "function": "is_subtype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line": 26,
      "caller": "test_int32",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))\n\n\n"
    },
    {
      "function": "is_subtype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line": 26,
      "caller": "test_int32",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))\n\n\n"
    },
    {
      "function": "is_subtype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line": 26,
      "caller": "test_int32",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))\n\n\n"
    },
    {
      "function": "is_subtype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line": 26,
      "caller": "test_int32",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))\n\n\n"
    },
    {
      "function": "is_subtype",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/subtype.py",
      "line": 26,
      "caller": "test_int32",
      "source_code": "def is_subtype(left: RType, right: RType) -> bool:\n    if is_object_rprimitive(right):\n        return True\n    elif isinstance(right, RUnion):\n        if isinstance(left, RUnion):\n            for left_item in left.items:\n                if not any(is_subtype(left_item, right_item) for right_item in right.items):\n                    return False\n            return True\n        else:\n            return any(is_subtype(left, item) for item in right.items)\n    return left.accept(SubtypeVisitor(right))\n\n\n"
    }
  ],
  "assertions": [
    "assert is_subtype(int32_rprimitive, int32_rprimitive)",
    "assert is_subtype(int32_rprimitive, int_rprimitive)",
    "assert not is_subtype(int32_rprimitive, short_int_rprimitive)",
    "assert not is_subtype(int32_rprimitive, int64_rprimitive)",
    "assert not is_subtype(int32_rprimitive, int16_rprimitive)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_int32(self) -> None:\n        assert is_subtype(int32_rprimitive, int32_rprimitive)\n        assert is_subtype(int32_rprimitive, int_rprimitive)\n        assert not is_subtype(int32_rprimitive, short_int_rprimitive)\n        assert not is_subtype(int32_rprimitive, int64_rprimitive)\n        assert not is_subtype(int32_rprimitive, int16_rprimitive)"
}