{
  "test_name": "test_match_rule_arg",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/tests/test_bus_messages.py",
  "static_methods": [
    {
      "name": "MatchRule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "rule.add_arg_condition",
      "source_code": "    def add_arg_condition(self, argno: int, value: str, kind='string'):\n        \"\"\"Add a condition for a particular argument",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line_number": 160
    },
    {
      "name": "rule.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "new_method_call",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line_number": 48
    },
    {
      "name": "rule.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "rule.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "new_method_call",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line_number": 48
    },
    {
      "name": "new_method_call",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line_number": 48
    }
  ],
  "dynamic_methods": [
    {
      "function": "MatchRule",
      "filename": "",
      "line": 0,
      "caller": "test_match_rule_arg",
      "source_code": ""
    },
    {
      "function": "rule.add_arg_condition",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line": 160,
      "caller": "test_match_rule_arg",
      "source_code": "    def add_arg_condition(self, argno: int, value: str, kind='string'):\n        \"\"\"Add a condition for a particular argument\n        \n        argno: int, 0-63\n        kind: 'string', 'path', 'namespace'\n        \"\"\"\n        if kind not in {'string', 'path', 'namespace'}:\n            raise ValueError(\"kind={!r}\".format(kind))\n        if kind == 'namespace' and argno != 0:\n            raise ValueError(\"argno must be 0 for kind='namespace'\")\n        self.arg_conditions[argno] = (value, kind)\n\n"
    },
    {
      "function": "rule.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_match_rule_arg",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "new_method_call",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line": 48,
      "caller": "test_match_rule_arg",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message\n\n    This is a relatively low-level method. In many cases, this will be called\n    from a :class:`MessageGenerator` subclass which provides a more convenient\n    API.\n\n    :param DBusAddress remote_obj: The object to call a method on\n    :param str method: The name of the method to call\n    :param str signature: The DBus signature of the body data\n    :param tuple body: Body data (i.e. method parameters)\n    \"\"\"\n    header = new_header(MessageType.method_call)\n    header.fields[HeaderFields.path] = remote_obj.object_path\n    if remote_obj.bus_name is None:\n        raise ValueError(\"remote_obj.bus_name cannot be None for method calls\")\n    header.fields[HeaderFields.destination] = remote_obj.bus_name\n    if remote_obj.interface is not None:\n        header.fields[HeaderFields.interface] = remote_obj.interface\n    header.fields[HeaderFields.member] = method\n    if signature is not None:\n        header.fields[HeaderFields.signature] = signature\n\n    return Message(header, body)\n\n"
    },
    {
      "function": "rule.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_match_rule_arg",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "rule.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_match_rule_arg",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "new_method_call",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line": 48,
      "caller": "test_match_rule_arg",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message\n\n    This is a relatively low-level method. In many cases, this will be called\n    from a :class:`MessageGenerator` subclass which provides a more convenient\n    API.\n\n    :param DBusAddress remote_obj: The object to call a method on\n    :param str method: The name of the method to call\n    :param str signature: The DBus signature of the body data\n    :param tuple body: Body data (i.e. method parameters)\n    \"\"\"\n    header = new_header(MessageType.method_call)\n    header.fields[HeaderFields.path] = remote_obj.object_path\n    if remote_obj.bus_name is None:\n        raise ValueError(\"remote_obj.bus_name cannot be None for method calls\")\n    header.fields[HeaderFields.destination] = remote_obj.bus_name\n    if remote_obj.interface is not None:\n        header.fields[HeaderFields.interface] = remote_obj.interface\n    header.fields[HeaderFields.member] = method\n    if signature is not None:\n        header.fields[HeaderFields.signature] = signature\n\n    return Message(header, body)\n\n"
    },
    {
      "function": "new_method_call",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line": 48,
      "caller": "test_match_rule_arg",
      "source_code": "def new_method_call(remote_obj, method, signature=None, body=()):\n    \"\"\"Construct a new method call message\n\n    This is a relatively low-level method. In many cases, this will be called\n    from a :class:`MessageGenerator` subclass which provides a more convenient\n    API.\n\n    :param DBusAddress remote_obj: The object to call a method on\n    :param str method: The name of the method to call\n    :param str signature: The DBus signature of the body data\n    :param tuple body: Body data (i.e. method parameters)\n    \"\"\"\n    header = new_header(MessageType.method_call)\n    header.fields[HeaderFields.path] = remote_obj.object_path\n    if remote_obj.bus_name is None:\n        raise ValueError(\"remote_obj.bus_name cannot be None for method calls\")\n    header.fields[HeaderFields.destination] = remote_obj.bus_name\n    if remote_obj.interface is not None:\n        header.fields[HeaderFields.interface] = remote_obj.interface\n    header.fields[HeaderFields.member] = method\n    if signature is not None:\n        header.fields[HeaderFields.signature] = signature\n\n    return Message(header, body)\n\n"
    }
  ],
  "assertions": [
    "assert rule.matches(new_method_call(portal_req_iface, 'Boo', signature='s', body=('foo',)))",
    "assert not rule.matches(new_method_call(portal_req_iface, 'Boo', signature='s', body=('foobar',)))",
    "assert not rule.matches(new_method_call(portal_req_iface, 'Boo'))"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_match_rule_arg():\n    rule = MatchRule(type='method_call')\n    rule.add_arg_condition(0, 'foo')\n\n    assert rule.matches(new_method_call(\n        portal_req_iface, 'Boo', signature='s', body=('foo',)\n    ))\n\n    assert not rule.matches(new_method_call(\n        portal_req_iface, 'Boo', signature='s', body=('foobar',)\n    ))\n\n    # No such argument\n    assert not rule.matches(new_method_call(portal_req_iface, 'Boo'))"
}