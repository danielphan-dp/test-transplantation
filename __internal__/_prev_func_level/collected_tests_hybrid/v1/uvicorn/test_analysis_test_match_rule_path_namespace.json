{
  "test_name": "test_match_rule_path_namespace",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/tests/test_bus_messages.py",
  "static_methods": [
    {
      "name": "MatchRule.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "new_signal",
      "source_code": "def new_signal(emitter, signal, signature=None, body=()):\n    \"\"\"Construct a new signal message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line_number": 107
    },
    {
      "name": "MatchRule.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "MatchRule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "new_signal",
      "source_code": "def new_signal(emitter, signal, signature=None, body=()):\n    \"\"\"Construct a new signal message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line_number": 107
    },
    {
      "name": "MatchRule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "MatchRule.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_match_rule_path_namespace",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "new_signal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line": 107,
      "caller": "test_match_rule_path_namespace",
      "source_code": "def new_signal(emitter, signal, signature=None, body=()):\n    \"\"\"Construct a new signal message\n\n    :param DBusAddress emitter: The object sending the signal\n    :param str signal: The name of the signal\n    :param str signature: The DBus signature of the body data\n    :param tuple body: Body data\n    \"\"\"\n    header = new_header(MessageType.signal)\n    header.fields[HeaderFields.path] = emitter.object_path\n    if emitter.interface is None:\n        raise ValueError(\"emitter.interface cannot be None for signals\")\n    header.fields[HeaderFields.interface] = emitter.interface\n    header.fields[HeaderFields.member] = signal\n    if signature is not None:\n        header.fields[HeaderFields.signature] = signature\n    return Message(header, body)\n\n\n"
    },
    {
      "function": "MatchRule.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_match_rule_path_namespace",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "MatchRule",
      "filename": "",
      "line": 0,
      "caller": "test_match_rule_path_namespace",
      "source_code": ""
    },
    {
      "function": "new_signal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/wrappers.py",
      "line": 107,
      "caller": "test_match_rule_path_namespace",
      "source_code": "def new_signal(emitter, signal, signature=None, body=()):\n    \"\"\"Construct a new signal message\n\n    :param DBusAddress emitter: The object sending the signal\n    :param str signal: The name of the signal\n    :param str signature: The DBus signature of the body data\n    :param tuple body: Body data\n    \"\"\"\n    header = new_header(MessageType.signal)\n    header.fields[HeaderFields.path] = emitter.object_path\n    if emitter.interface is None:\n        raise ValueError(\"emitter.interface cannot be None for signals\")\n    header.fields[HeaderFields.interface] = emitter.interface\n    header.fields[HeaderFields.member] = signal\n    if signature is not None:\n        header.fields[HeaderFields.signature] = signature\n    return Message(header, body)\n\n\n"
    },
    {
      "function": "MatchRule",
      "filename": "",
      "line": 0,
      "caller": "test_match_rule_path_namespace",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert MatchRule(path_namespace='/org/freedesktop/portal').matches(new_signal(portal_req_iface, 'Response'))",
    "assert not MatchRule(path_namespace='/org/freedesktop/por').matches(new_signal(portal_req_iface, 'Response'))"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_match_rule_path_namespace():\n    assert MatchRule(path_namespace='/org/freedesktop/portal').matches(\n        new_signal(portal_req_iface, 'Response')\n    )\n\n    # Prefix but not a parent in the path hierarchy\n    assert not MatchRule(path_namespace='/org/freedesktop/por').matches(\n        new_signal(portal_req_iface, 'Response')\n    )"
}