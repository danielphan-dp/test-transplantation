{
  "test_name": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mergedeep/test_mergedeep.py",
  "static_methods": [
    {
      "name": "deepcopy",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line_number": 96
    },
    {
      "name": "deepcopy",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line_number": 96
    },
    {
      "name": "deepcopy",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line_number": 96
    },
    {
      "name": "merge",
      "source_code": "    def merge(self, params: QueryParamTypes | None = None) -> QueryParams:\n        \"\"\"\n        Return a new QueryParams instance, updated with.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/httpx/_urls.py",
      "line_number": 582
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "deepcopy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line": 96,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "deepcopy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line": 96,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "deepcopy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line": 96,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "merge",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/httpx/_urls.py",
      "line": 582,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": "    def merge(self, params: QueryParamTypes | None = None) -> QueryParams:\n        \"\"\"\n        Return a new QueryParams instance, updated with.\n\n        Usage:\n\n        q = httpx.QueryParams(\"a=123\")\n        q = q.merge({\"b\": \"456\"})\n        assert q == httpx.QueryParams(\"a=123&b=456\")\n\n        q = httpx.QueryParams(\"a=123\")\n        q = q.merge({\"a\": \"456\", \"b\": \"789\"})\n        assert q == httpx.QueryParams(\"a=456&b=789\")\n        \"\"\"\n        q = QueryParams(params)\n        q._dict = {**self._dict, **q._dict}\n        return q\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_should_merge_3_dicts_into_new_dict_using_replace_strategy_and_only_mutate_target(self,):\n        expected = {\n            \"a\": {\"b\": {\"c\": 5, \"_c\": 15}, \"B\": {\"C\": 10}},\n            \"d\": 3,\n            \"e\": {1: 2, \"a\": {\"f\": 2}},\n            \"f\": [4, 5, 6],\n            \"g\": (100, 200),\n            \"h\": Counter({\"a\": 5, \"b\": 1, \"c\": 1}),\n            \"i\": 2,\n            \"j\": Counter({\"z\": 2}),\n            \"z\": Counter({\"a\": 2}),\n        }\n\n        a = {\n            \"a\": {\"b\": {\"c\": 5}},\n            \"d\": 1,\n            \"e\": {2: 3},\n            \"f\": [1, 2, 3],\n            \"g\": (2, 4, 6),\n            \"h\": Counter({\"a\": 1, \"b\": 1}),\n            \"j\": 1,\n        }\n        a_copy = deepcopy(a)\n\n        b = {\n            \"a\": {\"B\": {\"C\": 10}},\n            \"d\": 2,\n            \"e\": 2,\n            \"f\": [4, 5, 6],\n            \"g\": (100, 200),\n            \"h\": Counter({\"a\": 5, \"c\": 1}),\n            \"i\": Counter({\"a\": 1}),\n            \"z\": Counter({\"a\": 2}),\n        }\n        b_copy = deepcopy(b)\n\n        c = {\n            \"a\": {\"b\": {\"_c\": 15}},\n            \"d\": 3,\n            \"e\": {1: 2, \"a\": {\"f\": 2}},\n            \"i\": 2,\n            \"j\": Counter({\"z\": 2}),\n            \"z\": Counter({\"a\": 2}),\n        }\n        c_copy = deepcopy(c)\n\n        actual = merge({}, a, b, c, strategy=Strategy.REPLACE)\n\n        self.assertEqual(actual, expected)\n        self.assertEqual(a, a_copy)\n        self.assertEqual(b, b_copy)\n        self.assertEqual(c, c_copy)"
}