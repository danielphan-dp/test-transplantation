{
  "test_name": "test_tuple_literal",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_literals.py",
  "static_methods": [
    {
      "name": "Literals",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "lit.record_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 34
    },
    {
      "name": "lit.record_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 34
    },
    {
      "name": "lit.record_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 34
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "lit.literal_index",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 76
    },
    {
      "name": "lit.literal_index",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 76
    },
    {
      "name": "lit.literal_index",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 76
    },
    {
      "name": "lit.encoded_tuple_values",
      "source_code": "    def encoded_tuple_values(self) -> list[str]:\n        return self._encode_collection_values(self.tuple_literals)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 140
    },
    {
      "name": "lit.encoded_tuple_values",
      "source_code": "    def encoded_tuple_values(self) -> list[str]:\n        return self._encode_collection_values(self.tuple_literals)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 140
    }
  ],
  "dynamic_methods": [
    {
      "function": "Literals",
      "filename": "",
      "line": 0,
      "caller": "test_tuple_literal",
      "source_code": ""
    },
    {
      "function": "lit.record_literal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 34,
      "caller": "test_tuple_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "lit.record_literal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 34,
      "caller": "test_tuple_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "lit.record_literal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 34,
      "caller": "test_tuple_literal",
      "source_code": "    def record_literal(self, value: LiteralValue) -> None:\n        \"\"\"Ensure that the literal value is available in generated code.\"\"\"\n        if value is None or value is True or value is False:\n            # These are special cased and always present\n            return\n        if isinstance(value, str):\n            str_literals = self.str_literals\n            if value not in str_literals:\n                str_literals[value] = len(str_literals)\n        elif isinstance(value, bytes):\n            bytes_literals = self.bytes_literals\n            if value not in bytes_literals:\n                bytes_literals[value] = len(bytes_literals)\n        elif isinstance(value, int):\n            int_literals = self.int_literals\n            if value not in int_literals:\n                int_literals[value] = len(int_literals)\n        elif isinstance(value, float):\n            float_literals = self.float_literals\n            if value not in float_literals:\n                float_literals[value] = len(float_literals)\n        elif isinstance(value, complex):\n            complex_literals = self.complex_literals\n            if value not in complex_literals:\n                complex_literals[value] = len(complex_literals)\n        elif isinstance(value, tuple):\n            tuple_literals = self.tuple_literals\n            if value not in tuple_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                tuple_literals[value] = len(tuple_literals)\n        elif isinstance(value, frozenset):\n            frozenset_literals = self.frozenset_literals\n            if value not in frozenset_literals:\n                for item in value:\n                    assert _is_literal_value(item)\n                    self.record_literal(item)\n                frozenset_literals[value] = len(frozenset_literals)\n        else:\n            assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_tuple_literal",
      "source_code": ""
    },
    {
      "function": "lit.literal_index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 76,
      "caller": "test_tuple_literal",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "lit.literal_index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 76,
      "caller": "test_tuple_literal",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "lit.literal_index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 76,
      "caller": "test_tuple_literal",
      "source_code": "    def literal_index(self, value: LiteralValue) -> int:\n        \"\"\"Return the index to the literals array for given value.\"\"\"\n        # The array contains first None and booleans, followed by all str values,\n        # followed by bytes values, etc.\n        if value is None:\n            return 0\n        elif value is False:\n            return 1\n        elif value is True:\n            return 2\n        n = NUM_SINGLETONS\n        if isinstance(value, str):\n            return n + self.str_literals[value]\n        n += len(self.str_literals)\n        if isinstance(value, bytes):\n            return n + self.bytes_literals[value]\n        n += len(self.bytes_literals)\n        if isinstance(value, int):\n            return n + self.int_literals[value]\n        n += len(self.int_literals)\n        if isinstance(value, float):\n            return n + self.float_literals[value]\n        n += len(self.float_literals)\n        if isinstance(value, complex):\n            return n + self.complex_literals[value]\n        n += len(self.complex_literals)\n        if isinstance(value, tuple):\n            return n + self.tuple_literals[value]\n        n += len(self.tuple_literals)\n        if isinstance(value, frozenset):\n            return n + self.frozenset_literals[value]\n        assert False, \"invalid literal: %r\" % value\n\n"
    },
    {
      "function": "lit.encoded_tuple_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 140,
      "caller": "test_tuple_literal",
      "source_code": "    def encoded_tuple_values(self) -> list[str]:\n        return self._encode_collection_values(self.tuple_literals)\n\n"
    },
    {
      "function": "lit.encoded_tuple_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 140,
      "caller": "test_tuple_literal",
      "source_code": "    def encoded_tuple_values(self) -> list[str]:\n        return self._encode_collection_values(self.tuple_literals)\n\n"
    }
  ],
  "assertions": [
    "assert lit.literal_index((b'a', 'b')) == 7",
    "assert lit.literal_index((1, 'y', None, (b'a', 'b'))) == 8",
    "assert lit.literal_index(()) == 9",
    "assert lit.encoded_tuple_values() == ['3', '2', '5', '4', '4', '6', '3', '0', '7', '0']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_tuple_literal(self) -> None:\n        lit = Literals()\n        lit.record_literal((1, \"y\", None, (b\"a\", \"b\")))\n        lit.record_literal((b\"a\", \"b\"))\n        lit.record_literal(())\n        assert lit.literal_index((b\"a\", \"b\")) == 7\n        assert lit.literal_index((1, \"y\", None, (b\"a\", \"b\"))) == 8\n        assert lit.literal_index(()) == 9\n        print(lit.encoded_tuple_values())\n        assert lit.encoded_tuple_values() == [\n            \"3\",  # Number of tuples\n            \"2\",\n            \"5\",\n            \"4\",  # First tuple (length=2)\n            \"4\",\n            \"6\",\n            \"3\",\n            \"0\",\n            \"7\",  # Second tuple (length=4)\n            \"0\",  # Third tuple (length=0)\n        ]"
}