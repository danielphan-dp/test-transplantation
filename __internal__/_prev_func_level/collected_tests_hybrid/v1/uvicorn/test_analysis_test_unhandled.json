{
  "test_name": "test_unhandled",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/tests/test_routing.py",
  "static_methods": [
    {
      "name": "Router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "message_bus.Hello",
      "source_code": "    def Hello(self):\n        return new_method_call(self, 'Hello')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line_number": 31
    },
    {
      "name": "router.incoming",
      "source_code": "    def incoming(self, msg):\n        \"\"\"Route an incoming message.\n        \"\"\"\n        hdr = msg.header",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/routing.py",
      "line_number": 48
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Router",
      "filename": "",
      "line": 0,
      "caller": "test_unhandled",
      "source_code": ""
    },
    {
      "function": "message_bus.Hello",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/bus_messages.py",
      "line": 31,
      "caller": "test_unhandled",
      "source_code": "    def Hello(self):\n        return new_method_call(self, 'Hello')\n\n"
    },
    {
      "function": "router.incoming",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/routing.py",
      "line": 48,
      "caller": "test_unhandled",
      "source_code": "    def incoming(self, msg):\n        \"\"\"Route an incoming message.\n        \"\"\"\n        hdr = msg.header\n\n        # Signals:\n        if hdr.message_type is MessageType.signal:\n            key = (hdr.fields.get(HeaderFields.path, None),\n                   hdr.fields.get(HeaderFields.interface, None),\n                   hdr.fields.get(HeaderFields.member, None)\n                  )\n            cb = self.signal_callbacks.get(key, None)\n            if cb is not None:\n                cb(msg.body)\n                return\n\n        # Method returns & errors\n        reply_serial = hdr.fields.get(HeaderFields.reply_serial, -1)\n        reply_handle = self.awaiting_reply.pop(reply_serial, None)\n        if reply_handle is not None:\n            if hdr.message_type is MessageType.method_return:\n                reply_handle.set_result(msg.body)\n                return\n            elif hdr.message_type is MessageType.error:\n                reply_handle.set_exception(DBusErrorResponse(msg))\n                return\n\n        if self.on_unhandled:\n            self.on_unhandled(msg)\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unhandled",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(unhandled) == 1",
    "assert unhandled[0] == msg"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unhandled():\n    unhandled = []\n    router = Router(Future, on_unhandled=unhandled.append)\n    msg = message_bus.Hello()\n    router.incoming(msg)\n    assert len(unhandled) == 1\n    assert unhandled[0] == msg"
}