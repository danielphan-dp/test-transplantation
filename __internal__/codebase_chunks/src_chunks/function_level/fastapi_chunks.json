{
  "chunks": [
    {
      "chunk_id": 0,
      "source": "__internal__/data_repo/fastapi/pdm_build.py",
      "content": "import os\nfrom typing import Any, Dict\nfrom pdm.backend.hooks import Context\n\nTIANGOLO_BUILD_PACKAGE = os.getenv(\"TIANGOLO_BUILD_PACKAGE\", \"fastapi\")"
    },
    {
      "chunk_id": 1,
      "source": "__internal__/data_repo/fastapi/pdm_build.py",
      "content": "def pdm_build_initialize(context: Context) -> None:\n    metadata = context.config.metadata\n    # Get custom config for the current package, from the env var\n    config: Dict[str, Any] = context.config.data[\"tool\"][\"tiangolo\"][\n        \"_internal-slim-build\"\n    ][\"packages\"].get(TIANGOLO_BUILD_PACKAGE)\n    if not config:\n        return\n    project_config: Dict[str, Any] = config[\"project\"]\n    # Override main [project] configs with custom configs for this package\n    for key, value in project_config.items():\n        metadata[key] = value"
    },
    {
      "chunk_id": 2,
      "source": "__internal__/data_repo/fastapi/fastapi/__init__.py",
      "content": "\"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\""
    },
    {
      "chunk_id": 3,
      "source": "__internal__/data_repo/fastapi/fastapi/__init__.py",
      "content": "__version__ = \"0.115.7\""
    },
    {
      "chunk_id": 4,
      "source": "__internal__/data_repo/fastapi/fastapi/__init__.py",
      "content": "from starlette import status as status"
    },
    {
      "chunk_id": 5,
      "source": "__internal__/data_repo/fastapi/fastapi/__init__.py",
      "content": "from .applications import FastAPI as FastAPI\nfrom .background import BackgroundTasks as BackgroundTasks\nfrom .datastructures import UploadFile as UploadFile\nfrom .exceptions import HTTPException as HTTPException\nfrom .exceptions import WebSocketException as WebSocketException\nfrom .param_functions import Body as Body\nfrom .param_functions import Cookie as Cookie\nfrom .param_functions import Depends as Depends\nfrom .param_functions import File as File\nfrom .param_functions import Form as Form\nfrom .param_functions import Header as Header\nfrom .param_functions import Path as Path\nfrom .param_functions import Query as Query\nfrom .param_functions import Security as Security\nfrom .requests import Request as Request\nfrom .responses import Response as Response\nfrom .routing import APIRouter as APIRouter\nfrom .websockets import WebSocket as WebSocket\nfrom .websockets import WebSocketDisconnect as WebSocketDisconnect"
    },
    {
      "chunk_id": 6,
      "source": "__internal__/data_repo/fastapi/fastapi/logger.py",
      "content": "import logging"
    },
    {
      "chunk_id": 7,
      "source": "__internal__/data_repo/fastapi/fastapi/logger.py",
      "content": "logger = logging.getLogger(\"fastapi\")"
    },
    {
      "chunk_id": 8,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "from typing import Any, Callable, Dict, List, Optional, Sequence, Union\n\nfrom fastapi import params\nfrom fastapi._compat import Undefined\nfrom fastapi.openapi.models import Example\nfrom typing_extensions import Annotated, Doc, deprecated\n\n_Unset: Any = Undefined"
    },
    {
      "chunk_id": 9,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Path(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = ...,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    \"\"\"\n    Declare a path parameter for a *path operation*.\n\n    Read more about it in the\n    [FastAPI docs for Path Parameters and Numeric Validations](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/).\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, Path\n\n    app = FastAPI()\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_items(\n        item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    ):\n        return {\"item_id\": item_id}\n    ```\n    \"\"\"\n    return params.Path(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 10,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Query(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Query(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 11,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Header(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    convert_underscores: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Automatically convert underscores to hyphens in the parameter field name.\n\n            Read more about it in the\n            [FastAPI docs for Header Parameters](https://fastapi.tiangolo.com/tutorial/header-params/#automatic-conversion)\n            \"\"\"\n        ),\n    ] = True,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Header(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        convert_underscores=convert_underscores,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 12,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Cookie(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Cookie(\n        default=default,\n        default_factory=default_factory,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 13,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Body(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    embed: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            When `embed` is `True`, the parameter will be expected in a JSON body as a\n            key instead of being the JSON body itself.\n\n            This happens automatically when more than one `Body` parameter is declared.\n\n            Read more about it in the\n            [FastAPI docs for Body - Multiple Parameters](https://fastapi.tiangolo.com/tutorial/body-multiple-params/#embed-a-single-body-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/json\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Body(\n        default=default,\n        default_factory=default_factory,\n        embed=embed,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 14,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Form(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"application/x-www-form-urlencoded\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.Form(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 15,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def File(  # noqa: N802\n    default: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Default value if the parameter field is not set.\n            \"\"\"\n        ),\n    ] = Undefined,\n    *,\n    default_factory: Annotated[\n        Union[Callable[[], Any], None],\n        Doc(\n            \"\"\"\n            A callable to generate the default value.\n\n            This doesn't affect `Path` parameters as the value is always required.\n            The parameter is available only for compatibility.\n            \"\"\"\n        ),\n    ] = _Unset,\n    media_type: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The media type of this parameter field. Changing it would affect the\n            generated OpenAPI, but currently it doesn't affect the parsing of the data.\n            \"\"\"\n        ),\n    ] = \"multipart/form-data\",\n    alias: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            An alternative name for the parameter field.\n\n            This will be used to extract the data and for the generated OpenAPI.\n            It is particularly useful when you can't use the name you want because it\n            is a Python reserved keyword or similar.\n            \"\"\"\n        ),\n    ] = None,\n    alias_priority: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Priority of the alias. This affects whether an alias generator is used.\n            \"\"\"\n        ),\n    ] = _Unset,\n    validation_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Whitelist' validation step. The parameter field will be the single one\n            allowed by the alias or set of aliases defined.\n            \"\"\"\n        ),\n    ] = None,\n    serialization_alias: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            'Blacklist' validation step. The vanilla parameter field will be the\n            single one of the alias' or set of aliases' fields and all the other\n            fields will be ignored at serialization time.\n            \"\"\"\n        ),\n    ] = None,\n    title: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable title.\n            \"\"\"\n        ),\n    ] = None,\n    description: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            Human-readable description.\n            \"\"\"\n        ),\n    ] = None,\n    gt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than. If set, value must be greater than this. Only applicable to\n            numbers.\n            \"\"\"\n        ),\n    ] = None,\n    ge: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Greater than or equal. If set, value must be greater than or equal to\n            this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    lt: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than. If set, value must be less than this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    le: Annotated[\n        Optional[float],\n        Doc(\n            \"\"\"\n            Less than or equal. If set, value must be less than or equal to this.\n            Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = None,\n    min_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Minimum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    max_length: Annotated[\n        Optional[int],\n        Doc(\n            \"\"\"\n            Maximum length for strings.\n            \"\"\"\n        ),\n    ] = None,\n    pattern: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n    ] = None,\n    regex: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            RegEx pattern for strings.\n            \"\"\"\n        ),\n        deprecated(\n            \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n        ),\n    ] = None,\n    discriminator: Annotated[\n        Union[str, None],\n        Doc(\n            \"\"\"\n            Parameter field name for discriminating the type in a tagged union.\n            \"\"\"\n        ),\n    ] = None,\n    strict: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            If `True`, strict validation is applied to the field.\n            \"\"\"\n        ),\n    ] = _Unset,\n    multiple_of: Annotated[\n        Union[float, None],\n        Doc(\n            \"\"\"\n            Value must be a multiple of this. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    allow_inf_nan: Annotated[\n        Union[bool, None],\n        Doc(\n            \"\"\"\n            Allow `inf`, `-inf`, `nan`. Only applicable to numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    max_digits: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of allow digits for strings.\n            \"\"\"\n        ),\n    ] = _Unset,\n    decimal_places: Annotated[\n        Union[int, None],\n        Doc(\n            \"\"\"\n            Maximum number of decimal places allowed for numbers.\n            \"\"\"\n        ),\n    ] = _Unset,\n    examples: Annotated[\n        Optional[List[Any]],\n        Doc(\n            \"\"\"\n            Example values for this field.\n            \"\"\"\n        ),\n    ] = None,\n    example: Annotated[\n        Optional[Any],\n        deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = _Unset,\n    openapi_examples: Annotated[\n        Optional[Dict[str, Example]],\n        Doc(\n            \"\"\"\n            OpenAPI-specific examples.\n\n            It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n            Swagger UI (that provides the `/docs` interface) has better support for the\n            OpenAPI-specific examples than the JSON Schema `examples`, that's the main\n            use case for this.\n\n            Read more about it in the\n            [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).\n            \"\"\"\n        ),\n    ] = None,\n    deprecated: Annotated[\n        Union[deprecated, str, bool, None],\n        Doc(\n            \"\"\"\n            Mark this parameter field as deprecated.\n\n            It will affect the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = None,\n    include_in_schema: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            To include (or not) this parameter field in the generated OpenAPI.\n            You probably don't need it, but it's available.\n\n            This affects the generated OpenAPI (e.g. visible at `/docs`).\n            \"\"\"\n        ),\n    ] = True,\n    json_schema_extra: Annotated[\n        Union[Dict[str, Any], None],\n        Doc(\n            \"\"\"\n            Any additional JSON schema data.\n            \"\"\"\n        ),\n    ] = None,\n    **extra: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            Include extra fields used by the JSON Schema.\n            \"\"\"\n        ),\n        deprecated(\n            \"\"\"\n            The `extra` kwargs is deprecated. Use `json_schema_extra` instead.\n            \"\"\"\n        ),\n    ],\n) -> Any:\n    return params.File(\n        default=default,\n        default_factory=default_factory,\n        media_type=media_type,\n        alias=alias,\n        alias_priority=alias_priority,\n        validation_alias=validation_alias,\n        serialization_alias=serialization_alias,\n        title=title,\n        description=description,\n        gt=gt,\n        ge=ge,\n        lt=lt,\n        le=le,\n        min_length=min_length,\n        max_length=max_length,\n        pattern=pattern,\n        regex=regex,\n        discriminator=discriminator,\n        strict=strict,\n        multiple_of=multiple_of,\n        allow_inf_nan=allow_inf_nan,\n        max_digits=max_digits,\n        decimal_places=decimal_places,\n        example=example,\n        examples=examples,\n        openapi_examples=openapi_examples,\n        deprecated=deprecated,\n        include_in_schema=include_in_schema,\n        json_schema_extra=json_schema_extra,\n        **extra,\n    )"
    },
    {
      "chunk_id": 16,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Depends(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI dependency.\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n\n    app = FastAPI()\n\n\n    async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n        return {\"q\": q, \"skip\": skip, \"limit\": limit}\n\n\n    @app.get(\"/items/\")\n    async def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n        return commons\n    ```\n    \"\"\"\n    return params.Depends(dependency=dependency, use_cache=use_cache)"
    },
    {
      "chunk_id": 17,
      "source": "__internal__/data_repo/fastapi/fastapi/param_functions.py",
      "content": "def Security(  # noqa: N802\n    dependency: Annotated[\n        Optional[Callable[..., Any]],\n        Doc(\n            \"\"\"\n            A \"dependable\" callable (like a function).\n\n            Don't call it directly, FastAPI will call it for you, just pass the object\n            directly.\n            \"\"\"\n        ),\n    ] = None,\n    *,\n    scopes: Annotated[\n        Optional[Sequence[str]],\n        Doc(\n            \"\"\"\n            OAuth2 scopes required for the *path operation* that uses this Security\n            dependency.\n\n            The term \"scope\" comes from the OAuth2 specification, it seems to be\n            intentionally vague and interpretable. It normally refers to permissions,\n            in cases to roles.\n\n            These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n            So they are visible in the OpenAPI specification.\n            )\n            \"\"\"\n        ),\n    ] = None,\n    use_cache: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            By default, after a dependency is called the first time in a request, if\n            the dependency is declared again for the rest of the request (for example\n            if the dependency is needed by several dependencies), the value will be\n            re-used for the rest of the request.\n\n            Set `use_cache` to `False` to disable this behavior and ensure the\n            dependency is called again (if declared more than once) in the same request.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Declare a FastAPI Security dependency.\n\n    The only difference with a regular dependency is that it can declare OAuth2\n    scopes that will be integrated with OpenAPI and the automatic UI docs (by default\n    at `/docs`).\n\n    It takes a single \"dependable\" callable (like a function).\n\n    Don't call it directly, FastAPI will call it for you.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/) and\n    in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n\n    **Example**\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Security, FastAPI\n\n    from .db import User\n    from .security import get_current_active_user\n\n    app = FastAPI()\n\n    @app.get(\"/users/me/items/\")\n    async def read_own_items(\n        current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n    ):\n        return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n    ```\n    \"\"\"\n    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)"
    },
    {
      "chunk_id": 18,
      "source": "__internal__/data_repo/fastapi/fastapi/staticfiles.py",
      "content": "from starlette.staticfiles import StaticFiles as StaticFiles  # noqa"
    },
    {
      "chunk_id": 19,
      "source": "__internal__/data_repo/fastapi/fastapi/__main__.py",
      "content": "from fastapi.cli import main"
    },
    {
      "chunk_id": 20,
      "source": "__internal__/data_repo/fastapi/fastapi/__main__.py",
      "content": "main()"
    },
    {
      "chunk_id": 21,
      "source": "__internal__/data_repo/fastapi/fastapi/requests.py",
      "content": "from starlette.requests import HTTPConnection as HTTPConnection  # noqa: F401\nfrom starlette.requests import Request as Request  # noqa: F401"
    },
    {
      "chunk_id": 22,
      "source": "__internal__/data_repo/fastapi/fastapi/testclient.py",
      "content": "from starlette.testclient import TestClient as TestClient  # noqa"
    },
    {
      "chunk_id": 23,
      "source": "__internal__/data_repo/fastapi/fastapi/websockets.py",
      "content": "from starlette.websockets import WebSocket as WebSocket  # noqa\nfrom starlette.websockets import WebSocketDisconnect as WebSocketDisconnect  # noqa\nfrom starlette.websockets import WebSocketState as WebSocketState  # noqa"
    },
    {
      "chunk_id": 24,
      "source": "__internal__/data_repo/fastapi/fastapi/types.py",
      "content": "import types\nfrom enum import Enum\nfrom typing import Any, Callable, Dict, Set, Type, TypeVar, Union\n\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 25,
      "source": "__internal__/data_repo/fastapi/fastapi/types.py",
      "content": "DecoratedCallable = TypeVar(\"DecoratedCallable\", bound=Callable[..., Any])\nUnionType = getattr(types, \"UnionType\", Union)\nModelNameMap = Dict[Union[Type[BaseModel], Type[Enum]], str]\nIncEx = Union[Set[int], Set[str], Dict[int, Any], Dict[str, Any]]"
    },
    {
      "chunk_id": 26,
      "source": "__internal__/data_repo/fastapi/fastapi/cli.py",
      "content": "try:\n    from fastapi_cli.cli import main as cli_main\n\nexcept ImportError:  # pragma: no cover\n    cli_main = None  # type: ignore"
    },
    {
      "chunk_id": 27,
      "source": "__internal__/data_repo/fastapi/fastapi/cli.py",
      "content": "def main() -> None:\n    if not cli_main:  # type: ignore[truthy-function]\n        message = 'To use the fastapi command, please install \"fastapi[standard]\":\\n\\n\\tpip install \"fastapi[standard]\"\\n'\n        print(message)\n        raise RuntimeError(message)  # noqa: B904\n    cli_main()"
    },
    {
      "chunk_id": 28,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "```python"
    },
    {
      "chunk_id": 29,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "from enum import Enum\nfrom typing import (\n    Any,\n    Awaitable,\n    Callable,\n    Coroutine,\n    Dict,\n    List,\n    Optional,\n    Sequence,\n    Type,\n    TypeVar,\n    Union,\n)\n\nfrom fastapi import routing\nfrom fastapi.datastructures import Default, DefaultPlaceholder\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n    websocket_request_validation_exception_handler,\n)\nfrom fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\nfrom fastapi.logger import logger\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom fastapi.openapi.utils import get_openapi\nfrom fastapi.params import Depends\nfrom fastapi.types import DecoratedCallable, IncEx\nfrom fastapi.utils import generate_unique_id\nfrom starlette.applications import Starlette\nfrom starlette.datastructures import State\nfrom starlette.exceptions import HTTPException\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import HTMLResponse, JSONResponse, Response\nfrom starlette.routing import BaseRoute\nfrom starlette.types import ASGIApp, Lifespan, Receive, Scope, Send\nfrom typing_extensions import Annotated, Doc, deprecated\n\nAppType = TypeVar(\"AppType\", bound=\"FastAPI\")"
    },
    {
      "chunk_id": 30,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "class FastAPI(Starlette):\n    \"\"\"\n    `FastAPI` app class, the main entrypoint to use FastAPI.\n\n    Read more in the\n    [FastAPI docs for First Steps](https://fastapi.tiangolo.com/tutorial/first-steps/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI\n\n    app = FastAPI()\n    ```\n    \"\"\"\n\n    def __init__(\n        self: AppType,\n        *,\n        debug: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Boolean indicating if debug tracebacks should be returned on server\n                errors.\n\n                Read more in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#instantiating-the-application).\n                \"\"\"\n            ),\n        ] = False,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `app.get()`, `app.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        title: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The title of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(title=\"ChimichangApp\")\n                ```\n                \"\"\"\n            ),\n        ] = \"FastAPI\",\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A short summary of the API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(summary=\"Deadpond's favorite app. Nuff said.\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            str,\n            Doc(\n                '''\n                A description of the API. Supports Markdown (using\n                [CommonMark syntax](https://commonmark.org/)).\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    description=\"\"\"\n                                ChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n                                ## Items\n\n                                You can **read items**.\n\n                                ## Users\n\n                                You will be able to:\n\n                                * **Create users** (_not implemented_).\n                                * **Read users** (_not implemented_).\n\n                                \"\"\"\n                )\n                ```\n                '''\n            ),\n        ] = \"\",\n        version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version of the API.\n\n                **Note** This is the version of your application, not the version of\n                the OpenAPI specification nor the version of FastAPI being used.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(version=\"0.0.1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"0.1.0\",\n        openapi_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL where the OpenAPI schema will be served from.\n\n                If you set it to `None`, no OpenAPI schema will be served publicly, and\n                the default automatic endpoints `/docs` and `/redoc` will also be\n                disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#openapi-url).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/openapi.json\",\n        openapi_tags: Annotated[\n            Optional[List[Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                A list of tags used by OpenAPI, these are the same `tags` you can set\n                in the *path operations*, like:\n\n                * `@app.get(\"/users/\", tags=[\"users\"])`\n                * `@app.get(\"/items/\", tags=[\"items\"])`\n\n                The order of the tags can be used to specify the order shown in\n                tools like Swagger UI, used in the automatic path `/docs`.\n\n                It's not required to specify all the tags used.\n\n                The tags that are not declared MAY be organized randomly or based\n                on the tools' logic. Each tag name in the list MUST be unique.\n\n                The value of each item is a `dict` containing:\n\n                * `name`: The name of the tag.\n                * `description`: A short description of the tag.\n                    [CommonMark syntax](https://commonmark.org/) MAY be used for rich\n                    text representation.\n                * `externalDocs`: Additional external documentation for this tag. If\n                    provided, it would contain a `dict` with:\n                    * `description`: A short description of the target documentation.\n                        [CommonMark syntax](https://commonmark.org/) MAY be used for\n                        rich text representation.\n                    * `url`: The URL for the target documentation. Value MUST be in\n                        the form of a URL.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-tags).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                tags_metadata = [\n                    {\n                        \"name\": \"users\",\n                        \"description\": \"Operations with users. The **login** logic is also here.\",\n                    },\n                    {\n                        \"name\": \"items\",\n                        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n                        \"externalDocs\": {\n                            \"description\": \"Items external docs\",\n                            \"url\": \"https://fastapi.tiangolo.com/\",\n                        },\n                    },\n                ]\n\n                app = FastAPI(openapi_tags=tags_metadata)\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        servers: Annotated[\n            Optional[List[Dict[str, Union[str, Any]]]],\n            Doc(\n                \"\"\"\n                A `list` of `dict`s with connectivity information to a target server.\n\n                You would use it, for example, if your application is served from\n                different domains and you want to use the same Swagger UI in the\n                browser to interact with each of them (instead of having multiple\n                browser tabs open). Or if you want to leave fixed the possible URLs.\n\n                If the servers `list` is not provided, or is an empty `list`, the\n                default value would be a `dict` with a `url` value of `/`.\n\n                Each item in the `list` is a `dict` containing:\n\n                * `url`: A URL to the target host. This URL supports Server Variables\n                and MAY be relative, to indicate that the host location is relative\n                to the location where the OpenAPI document is being served. Variable\n                substitutions will be made when a variable is named in `{`brackets`}`.\n                * `description`: An optional string describing the host designated by\n                the URL. [CommonMark syntax](https://commonmark.org/) MAY be used for\n                rich text representation.\n                * `variables`: A `dict` between a variable name and its value. The value\n                    is used for substitution in the server's URL template.\n\n                Read more in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#additional-servers).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(\n                    servers=[\n                        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n                        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n                    ]\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of global dependencies, they will be applied to each\n                *path operation*, including in sub-routers.\n\n                Read more about it in the\n                [FastAPI docs for Global Dependencies](https://fastapi.tiangolo.com/tutorial/dependencies/global-dependencies/).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import func_dep_1, func_dep_2\n\n                app = FastAPI(dependencies=[Depends(func_dep_1), Depends(func_dep_2)])\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                app = FastAPI(default_response_class=ORJSONResponse)\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(redirect_slashes=True)  # the default\n\n                @app.get(\"/items/\")\n                async def read_items():\n                    return [{\"item_id\": \"Foo\"}]\n                ```\n\n                With this app, if a client goes to `/items` (without a trailing slash),\n                they will be automatically redirected with an HTTP status code of 307\n                to `/items/`.\n                \"\"\"\n            ),\n        ] = True,\n        docs_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the automatic interactive API documentation.\n                It is handled in the browser by Swagger UI.\n\n                The default URL is `/docs`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n                ```\n                \"\"\"\n            ),\n        ] = \"/docs\",\n        redoc_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The path to the alternative automatic interactive API documentation\n                provided by ReDoc.\n\n                The default URL is `/redoc`. You can disable it by setting it to `None`.\n\n                If `openapi_url` is set to `None`, this will be automatically disabled.\n\n                Read more in the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(docs_url=\"/documentation\", redoc_url=\"redocumentation\")\n                ```\n                \"\"\"\n            ),\n        ] = \"/redoc\",\n        swagger_ui_oauth2_redirect_url: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The OAuth2 redirect endpoint for the Swagger UI.\n\n                By default it is `/docs/oauth2-redirect`.\n\n                This is only used if you use OAuth2 (with the \"Authorize\" button)\n                with Swagger UI.\n                \"\"\"\n            ),\n        ] = \"/docs/oauth2-redirect\",\n        swagger_ui_init_oauth: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                OAuth2 configuration for the Swagger UI, by default shown at `/docs`.\n\n                Read more about the available configuration options in the\n                [Swagger UI docs](https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/).\n                \"\"\"\n            ),\n        ] = None,\n        middleware: Annotated[\n            Optional[Sequence[Middleware]],\n            Doc(\n                \"\"\"\n                List of middleware to be added when creating the application.\n\n                In FastAPI you would normally do this with `app.add_middleware()`\n                instead.\n\n                Read more in the\n                [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).\n                \"\"\"\n            ),\n        ] = None,\n        exception_handlers: Annotated[\n            Optional[\n                Dict[\n                    Union[int, Type[Exception]],\n                    Callable[[Request, Any], Coroutine[Any, Any, Response]],\n                ]\n            ],\n            Doc(\n                \"\"\"\n                A dictionary with handlers for exceptions.\n\n                In FastAPI, you would normally use the decorator\n                `@app.exception_handler()`.\n\n                Read more in the\n                [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n                \"\"\"\n            ),\n        ] = None,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        lifespan: Annotated[\n            Optional[Lifespan[AppType]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        terms_of_service: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A URL to the Terms of Service for your API.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(terms_of_service=\"http://example.com/terms/\")\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        contact: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the contact information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) The name of the contact person/organization.\n                * `url`: (`str`) A URL pointing to the contact information. MUST be in\n                    the format of a URL.\n                * `email`: (`str`) The email address of the contact person/organization.\n                    MUST be in the format of an email address.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    contact={\n                        \"name\": \"Deadpoolio the Amazing\",\n                        \"url\": \"http://x-force.example.com/contact/\",\n                        \"email\": \"dp@x-force.example.com\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        license_info: Annotated[\n            Optional[Dict[str, Union[str, Any]]],\n            Doc(\n                \"\"\"\n                A dictionary with the license information for the exposed API.\n\n                It can contain several fields.\n\n                * `name`: (`str`) **REQUIRED** (if a `license_info` is set). The\n                    license name used for the API.\n                * `identifier`: (`str`) An [SPDX](https://spdx.dev/) license expression\n                    for the API. The `identifier` field is mutually exclusive of the `url`\n                    field. Available since OpenAPI 3.1.0, FastAPI 0.99.0.\n                * `url`: (`str`) A URL to the license used for the API. This MUST be\n                    the format of a URL.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more at the\n                [FastAPI docs for Metadata and Docs URLs](https://fastapi.tiangolo.com/tutorial/metadata/#metadata-for-api).\n\n                **Example**\n\n                ```python\n                app = FastAPI(\n                    license_info={\n                        \"name\": \"Apache 2.0\",\n                        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n                    }\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        openapi_prefix: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A URL prefix for the OpenAPI URL.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                \"openapi_prefix\" has been deprecated in favor of \"root_path\", which\n                follows more closely the ASGI standard, is simpler, and more\n                automatic.\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                A path prefix handled by a proxy that is not seen by the application\n                but is seen by external clients, which affects things like Swagger UI.\n\n                Read more about it at the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path=\"/api/v1\")\n                ```\n                \"\"\"\n            ),\n        ] = \"\",\n        root_path_in_servers: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To disable automatically generating the URLs in the `servers` field\n                in the autogenerated OpenAPI using the `root_path`.\n\n                Read more about it in the\n                [FastAPI docs for Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#disable-automatic-server-from-root_path).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI(root_path_in_servers=False)\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        webhooks: Annotated[\n            Optional[routing.APIRouter],\n            Doc(\n                \"\"\"\n                Add OpenAPI webhooks. This is similar to `callbacks` but it doesn't\n                depend on specific *path operations*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Note**: This is available since OpenAPI 3.1.0, FastAPI 0.99.0.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* as deprecated. You probably don't need it,\n                but it's available.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in the generated OpenAPI.\n                You probably don't need it, but it's available.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        swagger_ui_parameters: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Parameters to configure Swagger UI, the autogenerated interactive API\n                documentation (by default at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs about how to Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n        separate_input_output_schemas: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to generate separate OpenAPI schemas for request body and\n                response body when the results would be more precise.\n\n                This is particularly useful when automatically generating clients.\n\n                For example, if you have a model like:\n\n                ```python\n                from pydantic import BaseModel\n\n                class Item(BaseModel):\n                    name: str\n                    tags: list[str] = []\n                ```\n\n                When `Item` is used for input, a request body, `tags` is not required,\n                the client doesn't have to provide it.\n\n                But when using `Item` for output, for a response body, `tags` is always\n                available because it has a default value, even if it's just an empty\n                list. So, the client should be able to always expect it.\n\n                In this case, there would be two different schemas, one for input and\n                another one for output.\n                \"\"\"\n            ),\n        ] = True,\n        **extra: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Extra keyword arguments to be stored in the app, not used by FastAPI\n                anywhere.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        self.debug = debug\n        self.title = title\n        self.summary = summary\n        self.description = description\n        self.version = version\n        self.terms_of_service = terms_of_service\n        self.contact = contact\n        self.license_info = license_info\n        self.openapi_url = openapi_url\n        self.openapi_tags = openapi_tags\n        self.root_path_in_servers = root_path_in_servers\n        self.docs_url = docs_url\n        self.redoc_url = redoc_url\n        self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n        self.swagger_ui_init_oauth = swagger_ui_init_oauth\n        self.swagger_ui_parameters = swagger_ui_parameters\n        self.servers = servers or []\n        self.separate_input_output_schemas = separate_input_output_schemas\n        self.extra = extra\n        self.openapi_version: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The version string of OpenAPI.\n\n                FastAPI will generate OpenAPI version 3.1.0, and will output that as\n                the OpenAPI version. But some tools, even though they might be\n                compatible with OpenAPI 3.1.0, might not recognize it as a valid.\n\n                So you could override this value to trick those tools into using\n                the generated OpenAPI. Have in mind that this is a hack. But if you\n                avoid using features added in OpenAPI 3.1.0, it might work for your\n                use case.\n\n                This is not passed as a parameter to the `FastAPI` class to avoid\n                giving the false idea that FastAPI would generate a different OpenAPI\n                schema. It is only available as an attribute.\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                app = FastAPI()\n\n                app.openapi_version = \"3.0.2\"\n                ```\n                \"\"\"\n            ),\n        ] = \"3.1.0\"\n        self.openapi_schema: Optional[Dict[str, Any]] = None\n        if self.openapi_url:\n            assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n            assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n        # TODO: remove when discarding the openapi_prefix parameter\n        if openapi_prefix:\n            logger.warning(\n                '\"openapi_prefix\" has been deprecated in favor of \"root_path\", which '\n                \"follows more closely the ASGI standard, is simpler, and more \"\n                \"automatic. Check the docs at \"\n                \"https://fastapi.tiangolo.com/advanced/sub-applications/\"\n            )\n        self.webhooks: Annotated[\n            routing.APIRouter,\n            Doc(\n                \"\"\"\n                The `app.webhooks` attribute is an `APIRouter` with the *path\n                operations* that will be used just for documentation of webhooks.\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).\n                \"\"\"\n            ),\n        ] = webhooks or routing.APIRouter()\n        self.root_path = root_path or openapi_prefix\n        self.state: Annotated[\n            State,\n            Doc(\n                \"\"\"\n                A state object for the application. This is the same object for the\n                entire application, it doesn't change from request to request.\n\n                You normally wouldn't use this in FastAPI, for most of the cases you\n                would instead use FastAPI dependencies.\n\n                This is simply inherited from Starlette.\n\n                Read more about it in the\n                [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).\n                \"\"\"\n            ),\n        ] = State()\n        self.dependency_overrides: Annotated[\n            Dict[Callable[..., Any], Callable[..., Any]],\n            Doc(\n                \"\"\"\n                A dictionary with overrides for the dependencies.\n\n                Each key is the original dependency callable, and the value is the\n                actual dependency that should be called.\n\n                This is for testing, to replace expensive dependencies with testing\n                versions.\n\n                Read more about it in the\n                [FastAPI docs for Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/).\n                \"\"\"\n            ),\n        ] = {}\n        self.router: routing.APIRouter = routing.APIRouter(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            dependency_overrides_provider=self,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n            default_response_class=default_response_class,\n            dependencies=dependencies,\n            callbacks=callbacks,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            responses=responses,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n        self.exception_handlers: Dict[\n            Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]\n        ] = {} if exception_handlers is None else dict(exception_handlers)\n        self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n        self.exception_handlers.setdefault(\n            RequestValidationError, request_validation_exception_handler\n        )\n        self.exception_handlers.setdefault(\n            WebSocketRequestValidationError,\n            # Starlette still has incorrect type specification for the handlers\n            websocket_request_validation_exception_handler,  # type: ignore\n        )\n\n        self.user_middleware: List[Middleware] = (\n            [] if middleware is None else list(middleware)\n        )\n        self.middleware_stack: Union[ASGIApp, None] = None\n        self.setup()"
    },
    {
      "chunk_id": 31,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def openapi(self) -> Dict[str, Any]:\n        \"\"\"\n        Generate the OpenAPI schema of the application. This is called by FastAPI\n        internally.\n\n        The first time it is called it stores the result in the attribute\n        `app.openapi_schema`, and next times it is called, it just returns that same\n        result. To avoid the cost of generating the schema every time.\n\n        If you need to modify the generated OpenAPI schema, you could modify it.\n\n        Read more in the\n        [FastAPI docs for OpenAPI](https://fastapi.tiangolo.com/how-to/extending-openapi/).\n        \"\"\"\n        if not self.openapi_schema:\n            self.openapi_schema = get_openapi(\n                title=self.title,\n                version=self.version,\n                openapi_version=self.openapi_version,\n                summary=self.summary,\n                description=self.description,\n                terms_of_service=self.terms_of_service,\n                contact=self.contact,\n                license_info=self.license_info,\n                routes=self.routes,\n                webhooks=self.webhooks.routes,\n                tags=self.openapi_tags,\n                servers=self.servers,\n                separate_input_output_schemas=self.separate_input_output_schemas,\n            )\n        return self.openapi_schema"
    },
    {
      "chunk_id": 32,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def setup(self) -> None:\n        if self.openapi_url:\n            urls = (server_data.get(\"url\") for server_data in self.servers)\n            server_urls = {url for url in urls if url}\n\n            async def openapi(req: Request) -> JSONResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                if root_path not in server_urls:\n                    if root_path and self.root_path_in_servers:\n                        self.servers.insert(0, {\"url\": root_path})\n                        server_urls.add(root_path)\n                return JSONResponse(self.openapi())\n\n            self.add_route(self.openapi_url, openapi, include_in_schema=False)\n        if self.openapi_url and self.docs_url:\n\n            async def swagger_ui_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                oauth2_redirect_url = self.swagger_ui_oauth2_redirect_url\n                if oauth2_redirect_url:\n                    oauth2_redirect_url = root_path + oauth2_redirect_url\n                return get_swagger_ui_html(\n                    openapi_url=openapi_url,\n                    title=f\"{self.title} - Swagger UI\",\n                    oauth2_redirect_url=oauth2_redirect_url,\n                    init_oauth=self.swagger_ui_init_oauth,\n                    swagger_ui_parameters=self.swagger_ui_parameters,\n                )\n\n            self.add_route(self.docs_url, swagger_ui_html, include_in_schema=False)\n\n            if self.swagger_ui_oauth2_redirect_url:\n\n                async def swagger_ui_redirect(req: Request) -> HTMLResponse:\n                    return get_swagger_ui_oauth2_redirect_html()\n\n                self.add_route(\n                    self.swagger_ui_oauth2_redirect_url,\n                    swagger_ui_redirect,\n                    include_in_schema=False,\n                )\n        if self.openapi_url and self.redoc_url:\n\n            async def redoc_html(req: Request) -> HTMLResponse:\n                root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n                openapi_url = root_path + self.openapi_url\n                return get_redoc_html(\n                    openapi_url=openapi_url, title=f\"{self.title} - ReDoc\"\n                )\n\n            self.add_route(self.redoc_url, redoc_html, include_in_schema=False)"
    },
    {
      "chunk_id": 33,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n        if self.root_path:\n            scope[\"root_path\"] = self.root_path\n        await super().__call__(scope, receive, send)"
    },
    {
      "chunk_id": 34,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> None:\n        self.router.add_api_route(\n            path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )"
    },
    {
      "chunk_id": 35,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[routing.APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.router.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator"
    },
    {
      "chunk_id": 36,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[Depends]] = None,\n    ) -> None:\n        self.router.add_api_websocket_route(\n            path,\n            endpoint,\n            name=name,\n            dependencies=dependencies,\n        )"
    },
    {
      "chunk_id": 37,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ```python\n        from fastapi import FastAPI, WebSocket\n\n        app = FastAPI()\n\n        @app.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path,\n                func,\n                name=name,\n                dependencies=dependencies,\n            )\n            return func\n\n        return decorator"
    },
    {
      "chunk_id": 38,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def include_router(\n        self,\n        router: Annotated[routing.APIRouter, Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n\n                **Example**\n\n                ```python\n                from fastapi import Depends, FastAPI\n\n                from .dependencies import get_token_header\n                from .internal import admin\n\n                app = FastAPI()\n\n                app.include_router(\n                    admin.router,\n                    dependencies=[Depends(get_token_header)],\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all the *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    deprecated=True,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    include_in_schema=False,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = True,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Default response class to be used for the *path operations* in this\n                router.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n\n                **Example**\n\n                ```python\n                from fastapi import FastAPI\n                from fastapi.responses import ORJSONResponse\n\n                from .internal import old_api\n\n                app = FastAPI()\n\n                app.include_router(\n                    old_api.router,\n                    default_response_class=ORJSONResponse,\n                )\n                ```\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        \"\"\"\n        Include an `APIRouter` in the same app.\n\n        Read more about it in the\n        [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        from .users import users_router\n\n        app = FastAPI()\n\n        app.include_router(users_router)\n        ```\n        \"\"\"\n        self.router.include_router(\n            router,\n            prefix=prefix,\n            tags=tags,\n            dependencies=dependencies,\n            responses=responses,\n            deprecated=deprecated,\n            include_in_schema=include_in_schema,\n            default_response_class=default_response_class,\n            callbacks=callbacks,\n            generate_unique_id_function=generate_unique_id_function,\n        )"
    },
    {
      "chunk_id": 39,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n        ```\n        \"\"\"\n        return self.router.get(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )"
    },
    {
      "chunk_id": 40,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[routing.APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP PUT operation.\n\n        ## Example\n\n        ```python\n        from fastapi import FastAPI\n        from pydantic import BaseModel\n\n        class Item(BaseModel):\n            name: str\n            description: str | None = None\n\n        app = FastAPI()\n\n        @app.put(\"/items/{item_id}\")\n        def replace_item(item_id: str, item: Item):\n            return {\"message\": \"Item replaced\", \"id\": item_id}\n        ```\n        \"\"\"\n        return self.router.put(\n            path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )"
    },
    {
      "chunk_id": 41,
      "source": "__internal__/data_repo/fastapi/fastapi/applications.py",
      "content": "def post(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path"
    },
    {
      "chunk_id": 42,
      "source": "__internal__/data_repo/fastapi/fastapi/templating.py",
      "content": "from starlette.templating import Jinja2Templates as Jinja2Templates  # noqa"
    },
    {
      "chunk_id": 43,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "import warnings\nfrom enum import Enum\nfrom typing import Any, Callable, Dict, List, Optional, Sequence, Union\n\nfrom fastapi.openapi.models import Example\nfrom pydantic.fields import FieldInfo\nfrom typing_extensions import Annotated, deprecated\n\nfrom ._compat import (\n    PYDANTIC_V2,\n    PYDANTIC_VERSION_MINOR_TUPLE,\n    Undefined,\n)\n\n_Unset: Any = Undefined"
    },
    {
      "chunk_id": 44,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class ParamTypes(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\""
    },
    {
      "chunk_id": 45,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Param(FieldInfo):\n    in_: ParamTypes\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been deprecated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\""
    },
    {
      "chunk_id": 46,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Path(Param):\n    in_ = ParamTypes.path\n\n    def __init__(\n        self,\n        default: Any = ...,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        assert default is ..., \"Path parameters cannot have a default value\"\n        self.in_ = self.in_\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 47,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Query(Param):\n    in_ = ParamTypes.query\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 48,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Header(Param):\n    in_ = ParamTypes.header\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        convert_underscores: bool = True,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.convert_underscores = convert_underscores\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 49,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Cookie(Param):\n    in_ = ParamTypes.cookie\n\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 50,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Body(FieldInfo):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        embed: Union[bool, None] = None,\n        media_type: str = \"application/json\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        self.embed = embed\n        self.media_type = media_type\n        if example is not _Unset:\n            warnings.warn(\n                \"`example` has been deprecated, please use `examples` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        self.example = example\n        self.include_in_schema = include_in_schema\n        self.openapi_examples = openapi_examples\n        kwargs = dict(\n            default=default,\n            default_factory=default_factory,\n            alias=alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            discriminator=discriminator,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            **extra,\n        )\n        if examples is not None:\n            kwargs[\"examples\"] = examples\n        if regex is not None:\n            warnings.warn(\n                \"`regex` has been deprecated, please use `pattern` instead\",\n                category=DeprecationWarning,\n                stacklevel=4,\n            )\n        current_json_schema_extra = json_schema_extra or extra\n        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n            self.deprecated = deprecated\n        else:\n            kwargs[\"deprecated\"] = deprecated\n        if PYDANTIC_V2:\n            kwargs.update(\n                {\n                    \"annotation\": annotation,\n                    \"alias_priority\": alias_priority,\n                    \"validation_alias\": validation_alias,\n                    \"serialization_alias\": serialization_alias,\n                    \"strict\": strict,\n                    \"json_schema_extra\": current_json_schema_extra,\n                }\n            )\n            kwargs[\"pattern\"] = pattern or regex\n        else:\n            kwargs[\"regex\"] = pattern or regex\n            kwargs.update(**current_json_schema_extra)\n\n        use_kwargs = {k: v for k, v in kwargs.items() if v is not _Unset}\n\n        super().__init__(**use_kwargs)\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}({self.default})\""
    },
    {
      "chunk_id": 51,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Form(Body):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"application/x-www-form-urlencoded\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 52,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class File(Form):\n    def __init__(\n        self,\n        default: Any = Undefined,\n        *,\n        default_factory: Union[Callable[[], Any], None] = _Unset,\n        annotation: Optional[Any] = None,\n        media_type: str = \"multipart/form-data\",\n        alias: Optional[str] = None,\n        alias_priority: Union[int, None] = _Unset,\n        validation_alias: Union[str, None] = None,\n        serialization_alias: Union[str, None] = None,\n        title: Optional[str] = None,\n        description: Optional[str] = None,\n        gt: Optional[float] = None,\n        ge: Optional[float] = None,\n        lt: Optional[float] = None,\n        le: Optional[float] = None,\n        min_length: Optional[int] = None,\n        max_length: Optional[int] = None,\n        pattern: Optional[str] = None,\n        regex: Annotated[\n            Optional[str],\n            deprecated(\n                \"Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead.\"\n            ),\n        ] = None,\n        discriminator: Union[str, None] = None,\n        strict: Union[bool, None] = _Unset,\n        multiple_of: Union[float, None] = _Unset,\n        allow_inf_nan: Union[bool, None] = _Unset,\n        max_digits: Union[int, None] = _Unset,\n        decimal_places: Union[int, None] = _Unset,\n        examples: Optional[List[Any]] = None,\n        example: Annotated[\n            Optional[Any],\n            deprecated(\n                \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n                \"although still supported. Use examples instead.\"\n            ),\n        ] = _Unset,\n        openapi_examples: Optional[Dict[str, Example]] = None,\n        deprecated: Union[deprecated, str, bool, None] = None,\n        include_in_schema: bool = True,\n        json_schema_extra: Union[Dict[str, Any], None] = None,\n        **extra: Any,\n    ):\n        super().__init__(\n            default=default,\n            default_factory=default_factory,\n            annotation=annotation,\n            media_type=media_type,\n            alias=alias,\n            alias_priority=alias_priority,\n            validation_alias=validation_alias,\n            serialization_alias=serialization_alias,\n            title=title,\n            description=description,\n            gt=gt,\n            ge=ge,\n            lt=lt,\n            le=le,\n            min_length=min_length,\n            max_length=max_length,\n            pattern=pattern,\n            regex=regex,\n            discriminator=discriminator,\n            strict=strict,\n            multiple_of=multiple_of,\n            allow_inf_nan=allow_inf_nan,\n            max_digits=max_digits,\n            decimal_places=decimal_places,\n            deprecated=deprecated,\n            example=example,\n            examples=examples,\n            openapi_examples=openapi_examples,\n            include_in_schema=include_in_schema,\n            json_schema_extra=json_schema_extra,\n            **extra,\n        )"
    },
    {
      "chunk_id": 53,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Depends:\n    def __init__(\n        self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True\n    ):\n        self.dependency = dependency\n        self.use_cache = use_cache\n\n    def __repr__(self) -> str:\n        attr = getattr(self.dependency, \"__name__\", type(self.dependency).__name__)\n        cache = \"\" if self.use_cache else \", use_cache=False\"\n        return f\"{self.__class__.__name__}({attr}{cache})\""
    },
    {
      "chunk_id": 54,
      "source": "__internal__/data_repo/fastapi/fastapi/params.py",
      "content": "class Security(Depends):\n    def __init__(\n        self,\n        dependency: Optional[Callable[..., Any]] = None,\n        *,\n        scopes: Optional[Sequence[str]] = None,\n        use_cache: bool = True,\n    ):\n        super().__init__(dependency=dependency, use_cache=use_cache)\n        self.scopes = scopes or []"
    },
    {
      "chunk_id": 55,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "```python"
    },
    {
      "chunk_id": 56,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "import asyncio\nimport dataclasses\nimport email.message\nimport inspect\nimport json\nfrom contextlib import AsyncExitStack, asynccontextmanager\nfrom enum import Enum, IntEnum\nfrom typing import (\n    Any,\n    AsyncIterator,\n    Callable,\n    Coroutine,\n    Dict,\n    List,\n    Mapping,\n    Optional,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom fastapi import params\nfrom fastapi._compat import (\n    ModelField,\n    Undefined,\n    _get_model_config,\n    _model_dump,\n    _normalize_errors,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import Default, DefaultPlaceholder\nfrom fastapi.dependencies.models import Dependant\nfrom fastapi.dependencies.utils import (\n    _should_embed_body_fields,\n    get_body_field,\n    get_dependant,\n    get_flat_dependant,\n    get_parameterless_sub_dependant,\n    get_typed_return_annotation,\n    solve_dependencies,\n)\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import (\n    FastAPIError,\n    RequestValidationError,\n    ResponseValidationError,\n    WebSocketRequestValidationError,\n)\nfrom fastapi.types import DecoratedCallable, IncEx\nfrom fastapi.utils import (\n    create_cloned_field,\n    create_model_field,\n    generate_unique_id,\n    get_value_or_default,\n    is_body_allowed_for_status_code,\n)\nfrom pydantic import BaseModel\nfrom starlette import routing\nfrom starlette.concurrency import run_in_threadpool\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse, Response\nfrom starlette.routing import (\n    BaseRoute,\n    Match,\n    compile_path,\n    get_name,\n    request_response,\n    websocket_session,\n)\nfrom starlette.routing import Mount as Mount  # noqa\nfrom starlette.types import AppType, ASGIApp, Lifespan, Scope\nfrom starlette.websockets import WebSocket\nfrom typing_extensions import Annotated, Doc, deprecated"
    },
    {
      "chunk_id": 57,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "def _prepare_response_content(\n    res: Any,\n    *,\n    exclude_unset: bool,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n) -> Any:\n    if isinstance(res, BaseModel):\n        read_with_orm_mode = getattr(_get_model_config(res), \"read_with_orm_mode\", None)\n        if read_with_orm_mode:\n            return res\n        return _model_dump(\n            res,\n            by_alias=True,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n        )\n    elif isinstance(res, list):\n        return [\n            _prepare_response_content(\n                item,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for item in res\n        ]\n    elif isinstance(res, dict):\n        return {\n            k: _prepare_response_content(\n                v,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n            for k, v in res.items()\n        }\n    elif dataclasses.is_dataclass(res):\n        return dataclasses.asdict(res)\n    return res"
    },
    {
      "chunk_id": 58,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "def _merge_lifespan_context(\n    original_context: Lifespan[Any], nested_context: Lifespan[Any]\n) -> Lifespan[Any]:\n    @asynccontextmanager\n    async def merged_lifespan(\n        app: AppType,\n    ) -> AsyncIterator[Optional[Mapping[str, Any]]]:\n        async with original_context(app) as maybe_original_state:\n            async with nested_context(app) as maybe_nested_state:\n                if maybe_nested_state is None and maybe_original_state is None:\n                    yield None\n                else:\n                    yield {**(maybe_nested_state or {}), **(maybe_original_state or {})}\n\n    return merged_lifespan  # type: ignore[return-value]"
    },
    {
      "chunk_id": 59,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "async def serialize_response(\n    *,\n    field: Optional[ModelField] = None,\n    response_content: Any,\n    include: Optional[IncEx] = None,\n    exclude: Optional[IncEx] = None,\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        if not hasattr(field, \"serialize\"):\n            response_content = _prepare_response_content(\n                response_content,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, list):\n            errors.extend(errors_)\n        elif errors_:\n            errors.append(errors_)\n        if errors:\n            raise ResponseValidationError(\n                errors=_normalize_errors(errors), body=response_content\n            )\n\n        if hasattr(field, \"serialize\"):\n            return field.serialize(\n                value,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n        )\n    else:\n        return jsonable_encoder(response_content)"
    },
    {
      "chunk_id": 60,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "async def run_endpoint_function(\n    *, dependant: Dependant, values: Dict[str, Any], is_coroutine: bool\n) -> Any:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n\n    if is_coroutine:\n        return await dependant.call(**values)\n    else:\n        return await run_in_threadpool(dependant.call, **values)"
    },
    {
      "chunk_id": 61,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "def get_request_handler(\n    dependant: Dependant,\n    body_field: Optional[ModelField] = None,\n    status_code: Optional[int] = None,\n    response_class: Union[Type[Response], DefaultPlaceholder] = Default(JSONResponse),\n    response_field: Optional[ModelField] = None,\n    response_model_include: Optional[IncEx] = None,\n    response_model_exclude: Optional[IncEx] = None,\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    response_model_exclude_defaults: bool = False,\n    response_model_exclude_none: bool = False,\n    dependency_overrides_provider: Optional[Any] = None,\n    embed_body_fields: bool = False,\n) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(body_field.field_info, params.Form)\n    if isinstance(response_class, DefaultPlaceholder):\n        actual_response_class: Type[Response] = response_class.value\n    else:\n        actual_response_class = response_class\n\n    async def app(request: Request) -> Response:\n        response: Union[Response, None] = None\n        async with AsyncExitStack() as file_stack:\n            try:\n                body: Any = None\n                if body_field:\n                    if is_body_form:\n                        body = await request.form()\n                        file_stack.push_async_callback(body.close)\n                    else:\n                        body_bytes = await request.body()\n                        if body_bytes:\n                            json_body: Any = Undefined\n                            content_type_value = request.headers.get(\"content-type\")\n                            if not content_type_value:\n                                json_body = await request.json()\n                            else:\n                                message = email.message.Message()\n                                message[\"content-type\"] = content_type_value\n                                if message.get_content_maintype() == \"application\":\n                                    subtype = message.get_content_subtype()\n                                    if subtype == \"json\" or subtype.endswith(\"+json\"):\n                                        json_body = await request.json()\n                            if json_body != Undefined:\n                                body = json_body\n                            else:\n                                body = body_bytes\n            except json.JSONDecodeError as e:\n                validation_error = RequestValidationError(\n                    [\n                        {\n                            \"type\": \"json_invalid\",\n                            \"loc\": (\"body\", e.pos),\n                            \"msg\": \"JSON decode error\",\n                            \"input\": {},\n                            \"ctx\": {\"error\": e.msg},\n                        }\n                    ],\n                    body=e.doc,\n                )\n                raise validation_error from e\n            except HTTPException:\n                raise\n            except Exception as e:\n                http_error = HTTPException(\n                    status_code=400, detail=\"There was an error parsing the body\"\n                )\n                raise http_error from e\n            errors: List[Any] = []\n            async with AsyncExitStack() as async_exit_stack:\n                solved_result = await solve_dependencies(\n                    request=request,\n                    dependant=dependant,\n                    body=body,\n                    dependency_overrides_provider=dependency_overrides_provider,\n                    async_exit_stack=async_exit_stack,\n                    embed_body_fields=embed_body_fields,\n                )\n                errors = solved_result.errors\n                if not errors:\n                    raw_response = await run_endpoint_function(\n                        dependant=dependant,\n                        values=solved_result.values,\n                        is_coroutine=is_coroutine,\n                    )\n                    if isinstance(raw_response, Response):\n                        if raw_response.background is None:\n                            raw_response.background = solved_result.background_tasks\n                        response = raw_response\n                    else:\n                        response_args: Dict[str, Any] = {\n                            \"background\": solved_result.background_tasks\n                        }\n                        current_status_code = (\n                            status_code\n                            if status_code\n                            else solved_result.response.status_code\n                        )\n                        if current_status_code is not None:\n                            response_args[\"status_code\"] = current_status_code\n                        if solved_result.response.status_code:\n                            response_args[\"status_code\"] = (\n                                solved_result.response.status_code\n                            )\n                        content = await serialize_response(\n                            field=response_field,\n                            response_content=raw_response,\n                            include=response_model_include,\n                            exclude=response_model_exclude,\n                            by_alias=response_model_by_alias,\n                            exclude_unset=response_model_exclude_unset,\n                            exclude_defaults=response_model_exclude_defaults,\n                            exclude_none=response_model_exclude_none,\n                            is_coroutine=is_coroutine,\n                        )\n                        response = actual_response_class(content, **response_args)\n                        if not is_body_allowed_for_status_code(response.status_code):\n                            response.body = b\"\"\n                        response.headers.raw.extend(solved_result.response.headers.raw)\n            if errors:\n                validation_error = RequestValidationError(\n                    _normalize_errors(errors), body=body\n                )\n                raise validation_error\n        if response is None:\n            raise FastAPIError(\n                \"No response object was returned. There's a high chance that the \"\n                \"application code is raising an exception and a dependency with yield \"\n                \"has a block with a bare except, or a block with except Exception, \"\n                \"and is not raising the exception again. Read more about it in the \"\n                \"docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except\"\n            )\n        return response\n\n    return app"
    },
    {
      "chunk_id": 62,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "def get_websocket_app(\n    dependant: Dependant,\n    dependency_overrides_provider: Optional[Any] = None,\n    embed_body_fields: bool = False,\n) -> Callable[[WebSocket], Coroutine[Any, Any, Any]]:\n    async def app(websocket: WebSocket) -> None:\n        async with AsyncExitStack() as async_exit_stack:\n            websocket.scope[\"fastapi_astack\"] = async_exit_stack\n            solved_result = await solve_dependencies(\n                request=websocket,\n                dependant=dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n                async_exit_stack=async_exit_stack,\n                embed_body_fields=embed_body_fields,\n            )\n            if solved_result.errors:\n                raise WebSocketRequestValidationError(\n                    _normalize_errors(solved_result.errors)\n                )\n            assert dependant.call is not None, \"dependant.call must be a function\"\n            await dependant.call(**solved_result.values)\n\n    return app"
    },
    {
      "chunk_id": 63,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "class APIWebSocketRoute(routing.WebSocketRoute):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        name: Optional[str] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        dependency_overrides_provider: Optional[Any] = None,\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        self.name = get_name(endpoint) if name is None else name\n        self.dependencies = list(dependencies or [])\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n        self._flat_dependant = get_flat_dependant(self.dependant)\n        self._embed_body_fields = _should_embed_body_fields(\n            self._flat_dependant.body_params\n        )\n        self.app = websocket_session(\n            get_websocket_app(\n                dependant=self.dependant,\n                dependency_overrides_provider=dependency_overrides_provider,\n                embed_body_fields=self._embed_body_fields,\n            )\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope"
    },
    {
      "chunk_id": 64,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "class APIRoute(routing.Route):\n    def __init__(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        name: Optional[str] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        dependency_overrides_provider: Optional[Any] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[\"APIRoute\"], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        self.path = path\n        self.endpoint = endpoint\n        if isinstance(response_model, DefaultPlaceholder):\n            return_annotation = get_typed_return_annotation(endpoint)\n            if lenient_issubclass(return_annotation, Response):\n                response_model = None\n            else:\n                response_model = return_annotation\n        self.response_model = response_model\n        self.summary = summary\n        self.response_description = response_description\n        self.deprecated = deprecated\n        self.operation_id = operation_id\n        self.response_model_include = response_model_include\n        self.response_model_exclude = response_model_exclude\n        self.response_model_by_alias = response_model_by_alias\n        self.response_model_exclude_unset = response_model_exclude_unset\n        self.response_model_exclude_defaults = response_model_exclude_defaults\n        self.response_model_exclude_none = response_model_exclude_none\n        self.include_in_schema = include_in_schema\n        self.response_class = response_class\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.callbacks = callbacks\n        self.openapi_extra = openapi_extra\n        self.generate_unique_id_function = generate_unique_id_function\n        self.tags = tags or []\n        self.responses = responses or {}\n        self.name = get_name(endpoint) if name is None else name\n        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n        if methods is None:\n            methods = [\"GET\"]\n        self.methods: Set[str] = {method.upper() for method in methods}\n        if isinstance(generate_unique_id_function, DefaultPlaceholder):\n            current_generate_unique_id: Callable[[APIRoute], str] = (\n                generate_unique_id_function.value\n            )\n        else:\n            current_generate_unique_id = generate_unique_id_function\n        self.unique_id = self.operation_id or current_generate_unique_id(self)\n        if isinstance(status_code, IntEnum):\n            status_code = int(status_code)\n        self.status_code = status_code\n        if self.response_model:\n            assert is_body_allowed_for_status_code(\n                status_code\n            ), f\"Status code {status_code} must not have a response body\"\n            response_name = \"Response_\" + self.unique_id\n            self.response_field = create_model_field(\n                name=response_name,\n                type_=self.response_model,\n                mode=\"serialization\",\n            )\n            self.secure_cloned_response_field: Optional[ModelField] = (\n                create_cloned_field(self.response_field)\n            )\n        else:\n            self.response_field = None  # type: ignore\n            self.secure_cloned_response_field = None\n        self.dependencies = list(dependencies or [])\n        self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n        self.description = self.description.split(\"\\f\")[0].strip()\n        response_fields = {}\n        for additional_status_code, response in self.responses.items():\n            assert isinstance(response, dict), \"An additional response must be a dict\"\n            model = response.get(\"model\")\n            if model:\n                assert is_body_allowed_for_status_code(\n                    additional_status_code\n                ), f\"Status code {additional_status_code} must not have a response body\"\n                response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                response_field = create_model_field(\n                    name=response_name, type_=model, mode=\"serialization\"\n                )\n                response_fields[additional_status_code] = response_field\n        if response_fields:\n            self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n        else:\n            self.response_fields = {}\n\n        assert callable(endpoint), \"An endpoint must be a callable\"\n        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n        for depends in self.dependencies[::-1]:\n            self.dependant.dependencies.insert(\n                0,\n                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n            )\n        self._flat_dependant = get_flat_dependant(self.dependant)\n        self._embed_body_fields = _should_embed_body_fields(\n            self._flat_dependant.body_params\n        )\n        self.body_field = get_body_field(\n            flat_dependant=self._flat_dependant,\n            name=self.unique_id,\n            embed_body_fields=self._embed_body_fields,\n        )\n        self.app = request_response(self.get_route_handler())\n\n    def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n        return get_request_handler(\n            dependant=self.dependant,\n            body_field=self.body_field,\n            status_code=self.status_code,\n            response_class=self.response_class,\n            response_field=self.secure_cloned_response_field,\n            response_model_include=self.response_model_include,\n            response_model_exclude=self.response_model_exclude,\n            response_model_by_alias=self.response_model_by_alias,\n            response_model_exclude_unset=self.response_model_exclude_unset,\n            response_model_exclude_defaults=self.response_model_exclude_defaults,\n            response_model_exclude_none=self.response_model_exclude_none,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n            embed_body_fields=self._embed_body_fields,\n        )\n\n    def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n        match, child_scope = super().matches(scope)\n        if match != Match.NONE:\n            child_scope[\"route\"] = self\n        return match, child_scope"
    },
    {
      "chunk_id": 65,
      "source": "__internal__/data_repo/fastapi/fastapi/routing.py",
      "content": "class APIRouter(routing.Router):\n    \"\"\"\n    `APIRouter` class, used to group *path operations*, for example to structure\n    an app in multiple files. It would then be included in the `FastAPI` app, or\n    in another `APIRouter` (ultimately included in the app).\n\n    Read more about it in the\n    [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/).\n\n    ## Example\n\n    ```python\n    from fastapi import APIRouter, FastAPI\n\n    app = FastAPI()\n    router = APIRouter()\n\n\n    @router.get(\"/users/\", tags=[\"users\"])\n    async def read_users():\n        return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n\n\n    app.include_router(router)\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        routes: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                **Note**: you probably shouldn't use this parameter, it is inherited\n                from Starlette and supported for compatibility.\n\n                ---\n\n                A list of routes to serve incoming HTTP and WebSocket requests.\n                \"\"\"\n            ),\n            deprecated(\n                \"\"\"\n                You normally wouldn't use this parameter with FastAPI, it is inherited\n                from Starlette and supported for compatibility.\n\n                In FastAPI, you normally would use the *path operation methods*,\n                like `router.get()`, `router.post()`, etc.\n                \"\"\"\n            ),\n        ] = None,\n        redirect_slashes: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Whether to detect and redirect slashes in URLs when the client doesn't\n                use the same format.\n                \"\"\"\n            ),\n        ] = True,\n        default: Annotated[\n            Optional[ASGIApp],\n            Doc(\n                \"\"\"\n                Default function handler for this router. Used to handle\n                404 Not Found errors.\n                \"\"\"\n            ),\n        ] = None,\n        dependency_overrides_provider: Annotated[\n            Optional[Any],\n            Doc(\n                \"\"\"\n                Only used internally by FastAPI to handle dependency overrides.\n\n                You shouldn't need to use it. It normally points to the `FastAPI` app\n                object.\n                \"\"\"\n            ),\n        ] = None,\n        route_class: Annotated[\n            Type[APIRoute],\n            Doc(\n                \"\"\"\n                Custom route (*path operation*) class to be used by this router.\n\n                Read more about it in the\n                [FastAPI docs for Custom Request and APIRoute class](https://fastapi.tiangolo.com/how-to/custom-request-and-route/#custom-apiroute-class-in-a-router).\n                \"\"\"\n            ),\n        ] = APIRoute,\n        on_startup: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of startup event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        on_shutdown: Annotated[\n            Optional[Sequence[Callable[[], Any]]],\n            Doc(\n                \"\"\"\n                A list of shutdown event handler functions.\n\n                You should instead use the `lifespan` handlers.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        lifespan: Annotated[\n            Optional[Lifespan[Any]],\n            Doc(\n                \"\"\"\n                A `Lifespan` context manager handler. This replaces `startup` and\n                `shutdown` functions with a single context manager.\n\n                Read more in the\n                [FastAPI docs for `lifespan`](https://fastapi.tiangolo.com/advanced/events/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                To include (or not) all the *path operations* in this router in the\n                generated OpenAPI.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        super().__init__(\n            routes=routes,\n            redirect_slashes=redirect_slashes,\n            default=default,\n            on_startup=on_startup,\n            on_shutdown=on_shutdown,\n            lifespan=lifespan,\n        )\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        self.prefix = prefix\n        self.tags: List[Union[str, Enum]] = tags or []\n        self.dependencies = list(dependencies or [])\n        self.deprecated = deprecated\n        self.include_in_schema = include_in_schema\n        self.responses = responses or {}\n        self.callbacks = callbacks or []\n        self.dependency_overrides_provider = dependency_overrides_provider\n        self.route_class = route_class\n        self.default_response_class = default_response_class\n        self.generate_unique_id_function = generate_unique_id_function\n\n    def route(\n        self,\n        path: str,\n        methods: Optional[List[str]] = None,\n        name: Optional[str] = None,\n        include_in_schema: bool = True,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_route(\n                path,\n                func,\n                methods=methods,\n                name=name,\n                include_in_schema=include_in_schema,\n            )\n            return func\n\n        return decorator\n\n    def add_api_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[Union[Set[str], List[str]]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Union[Type[Response], DefaultPlaceholder] = Default(\n            JSONResponse\n        ),\n        name: Optional[str] = None,\n        route_class_override: Optional[Type[APIRoute]] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Union[\n            Callable[[APIRoute], str], DefaultPlaceholder\n        ] = Default(generate_unique_id),\n    ) -> None:\n        route_class = route_class_override or self.route_class\n        responses = responses or {}\n        combined_responses = {**self.responses, **responses}\n        current_response_class = get_value_or_default(\n            response_class, self.default_response_class\n        )\n        current_tags = self.tags.copy()\n        if tags:\n            current_tags.extend(tags)\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n        current_callbacks = self.callbacks.copy()\n        if callbacks:\n            current_callbacks.extend(callbacks)\n        current_generate_unique_id = get_value_or_default(\n            generate_unique_id_function, self.generate_unique_id_function\n        )\n        route = route_class(\n            self.prefix + path,\n            endpoint=endpoint,\n            response_model=response_model,\n            status_code=status_code,\n            tags=current_tags,\n            dependencies=current_dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=combined_responses,\n            deprecated=deprecated or self.deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema and self.include_in_schema,\n            response_class=current_response_class,\n            name=name,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n            callbacks=current_callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=current_generate_unique_id,\n        )\n        self.routes.append(route)\n\n    def api_route(\n        self,\n        path: str,\n        *,\n        response_model: Any = Default(None),\n        status_code: Optional[int] = None,\n        tags: Optional[List[Union[str, Enum]]] = None,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n        summary: Optional[str] = None,\n        description: Optional[str] = None,\n        response_description: str = \"Successful Response\",\n        responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n        deprecated: Optional[bool] = None,\n        methods: Optional[List[str]] = None,\n        operation_id: Optional[str] = None,\n        response_model_include: Optional[IncEx] = None,\n        response_model_exclude: Optional[IncEx] = None,\n        response_model_by_alias: bool = True,\n        response_model_exclude_unset: bool = False,\n        response_model_exclude_defaults: bool = False,\n        response_model_exclude_none: bool = False,\n        include_in_schema: bool = True,\n        response_class: Type[Response] = Default(JSONResponse),\n        name: Optional[str] = None,\n        callbacks: Optional[List[BaseRoute]] = None,\n        openapi_extra: Optional[Dict[str, Any]] = None,\n        generate_unique_id_function: Callable[[APIRoute], str] = Default(\n            generate_unique_id\n        ),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_route(\n                path,\n                func,\n                response_model=response_model,\n                status_code=status_code,\n                tags=tags,\n                dependencies=dependencies,\n                summary=summary,\n                description=description,\n                response_description=response_description,\n                responses=responses,\n                deprecated=deprecated,\n                methods=methods,\n                operation_id=operation_id,\n                response_model_include=response_model_include,\n                response_model_exclude=response_model_exclude,\n                response_model_by_alias=response_model_by_alias,\n                response_model_exclude_unset=response_model_exclude_unset,\n                response_model_exclude_defaults=response_model_exclude_defaults,\n                response_model_exclude_none=response_model_exclude_none,\n                include_in_schema=include_in_schema,\n                response_class=response_class,\n                name=name,\n                callbacks=callbacks,\n                openapi_extra=openapi_extra,\n                generate_unique_id_function=generate_unique_id_function,\n            )\n            return func\n\n        return decorator\n\n    def add_api_websocket_route(\n        self,\n        path: str,\n        endpoint: Callable[..., Any],\n        name: Optional[str] = None,\n        *,\n        dependencies: Optional[Sequence[params.Depends]] = None,\n    ) -> None:\n        current_dependencies = self.dependencies.copy()\n        if dependencies:\n            current_dependencies.extend(dependencies)\n\n        route = APIWebSocketRoute(\n            self.prefix + path,\n            endpoint=endpoint,\n            name=name,\n            dependencies=current_dependencies,\n            dependency_overrides_provider=self.dependency_overrides_provider,\n        )\n        self.routes.append(route)\n\n    def websocket(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                WebSocket path.\n                \"\"\"\n            ),\n        ],\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A name for the WebSocket. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        *,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be used for this\n                WebSocket.\n\n                Read more about it in the\n                [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n                \"\"\"\n            ),\n        ] = None,\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Decorate a WebSocket function.\n\n        Read more about it in the\n        [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n        **Example**\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI, WebSocket\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            await websocket.accept()\n            while True:\n                data = await websocket.receive_text()\n                await websocket.send_text(f\"Message text was: {data}\")\n\n        app.include_router(router)\n        ```\n        \"\"\"\n\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_api_websocket_route(\n                path, func, name=name, dependencies=dependencies\n            )\n            return func\n\n        return decorator\n\n    def websocket_route(\n        self, path: str, name: Union[str, None] = None\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n            self.add_websocket_route(path, func, name=name)\n            return func\n\n        return decorator\n\n    def include_router(\n        self,\n        router: Annotated[\"APIRouter\", Doc(\"The `APIRouter` to include.\")],\n        *,\n        prefix: Annotated[str, Doc(\"An optional path prefix for the router.\")] = \"\",\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to all the *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to all the\n                *path operations* in this router.\n\n                Read more about it in the\n                [FastAPI docs for Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        default_response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                The default response class to be used.\n\n                Read more in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#default-response-class).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses to be shown in OpenAPI.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Additional Responses in OpenAPI](https://fastapi.tiangolo.com/advanced/additional-responses/).\n\n                And in the\n                [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies).\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                OpenAPI callbacks that should apply to all *path operations* in this\n                router.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark all *path operations* in this router as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include (or not) all the *path operations* in this router in the\n                generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = True,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> None:\n        if prefix:\n            assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n            assert not prefix.endswith(\n                \"/\"\n            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n        else:\n            for r in router.routes:\n                path = getattr(r, \"path\")  # noqa: B009\n                name = getattr(r, \"name\", \"unknown\")\n                if path is not None and not path:\n                    raise FastAPIError(\n                        f\"Prefix and path cannot be both empty (path operation: {name})\"\n                    )\n        if responses is None:\n            responses = {}\n        for route in router.routes:\n            if isinstance(route, APIRoute):\n                combined_responses = {**responses, **route.responses}\n                use_response_class = get_value_or_default(\n                    route.response_class,\n                    router.default_response_class,\n                    default_response_class,\n                    self.default_response_class,\n                )\n                current_tags = []\n                if tags:\n                    current_tags.extend(tags)\n                if route.tags:\n                    current_tags.extend(route.tags)\n                current_dependencies: List[params.Depends] = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                current_callbacks = []\n                if callbacks:\n                    current_callbacks.extend(callbacks)\n                if route.callbacks:\n                    current_callbacks.extend(route.callbacks)\n                current_generate_unique_id = get_value_or_default(\n                    route.generate_unique_id_function,\n                    router.generate_unique_id_function,\n                    generate_unique_id_function,\n                    self.generate_unique_id_function,\n                )\n                self.add_api_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    response_model=route.response_model,\n                    status_code=route.status_code,\n                    tags=current_tags,\n                    dependencies=current_dependencies,\n                    summary=route.summary,\n                    description=route.description,\n                    response_description=route.response_description,\n                    responses=combined_responses,\n                    deprecated=route.deprecated or deprecated or self.deprecated,\n                    methods=route.methods,\n                    operation_id=route.operation_id,\n                    response_model_include=route.response_model_include,\n                    response_model_exclude=route.response_model_exclude,\n                    response_model_by_alias=route.response_model_by_alias,\n                    response_model_exclude_unset=route.response_model_exclude_unset,\n                    response_model_exclude_defaults=route.response_model_exclude_defaults,\n                    response_model_exclude_none=route.response_model_exclude_none,\n                    include_in_schema=route.include_in_schema\n                    and self.include_in_schema\n                    and include_in_schema,\n                    response_class=use_response_class,\n                    name=route.name,\n                    route_class_override=type(route),\n                    callbacks=current_callbacks,\n                    openapi_extra=route.openapi_extra,\n                    generate_unique_id_function=current_generate_unique_id,\n                )\n            elif isinstance(route, routing.Route):\n                methods = list(route.methods or [])\n                self.add_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    methods=methods,\n                    include_in_schema=route.include_in_schema,\n                    name=route.name,\n                )\n            elif isinstance(route, APIWebSocketRoute):\n                current_dependencies = []\n                if dependencies:\n                    current_dependencies.extend(dependencies)\n                if route.dependencies:\n                    current_dependencies.extend(route.dependencies)\n                self.add_api_websocket_route(\n                    prefix + route.path,\n                    route.endpoint,\n                    dependencies=current_dependencies,\n                    name=route.name,\n                )\n            elif isinstance(route, routing.WebSocketRoute):\n                self.add_websocket_route(\n                    prefix + route.path, route.endpoint, name=route.name\n                )\n        for handler in router.on_startup:\n            self.add_event_handler(\"startup\", handler)\n        for handler in router.on_shutdown:\n            self.add_event_handler(\"shutdown\", handler)\n        self.lifespan_context = _merge_lifespan_context(\n            self.lifespan_context,\n            router.lifespan_context,\n        )\n\n    def get(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP GET operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.get(\"/items/\")\n        def read_items():\n            return [{\"name\": \"Empanada\"}, {\"name\": \"Arepa\"}]\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"GET\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def put(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Custom operation ID to be used by this *path operation*.\n\n                By default, it is generated automatically.\n\n                If you provide a custom operation ID, you need to make sure it is\n                unique for the whole API.\n\n                You can customize the\n                operation ID generation with the parameter\n                `generate_unique_id_function` in the `FastAPI` class.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_include: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to include only certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_exclude: Annotated[\n            Optional[IncEx],\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to exclude certain fields in the\n                response data.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = None,\n        response_model_by_alias: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response model\n                should be serialized by alias when an alias is used.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude).\n                \"\"\"\n            ),\n        ] = True,\n        response_model_exclude_unset: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that were not set and\n                have their default values. This is different from\n                `response_model_exclude_defaults` in that if the fields are set,\n                they will be included in the response, even if the value is the same\n                as the default.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_defaults: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data\n                should have all the fields, including the ones that have the same value\n                as the default. This is different from `response_model_exclude_unset`\n                in that if the fields are set but contain the same default values,\n                they will be excluded from the response.\n\n                When `True`, default values are omitted from the response.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#use-the-response_model_exclude_unset-parameter).\n                \"\"\"\n            ),\n        ] = False,\n        response_model_exclude_none: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Configuration passed to Pydantic to define if the response data should\n                exclude fields set to `None`.\n\n                This is much simpler (less smart) than `response_model_exclude_unset`\n                and `response_model_exclude_defaults`. You probably want to use one of\n                those two instead of this one, as those allow returning `None` values\n                when it makes sense.\n\n                Read more about it in the\n                [FastAPI docs for Response Model - Return Type](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_exclude_none).\n                \"\"\"\n            ),\n        ] = False,\n        include_in_schema: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                Include this *path operation* in the generated OpenAPI schema.\n\n                This affects the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Query Parameters and String Validations](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#exclude-from-openapi).\n                \"\"\"\n            ),\n        ] = True,\n        response_class: Annotated[\n            Type[Response],\n            Doc(\n                \"\"\"\n                Response class to be used for this *path operation*.\n\n                This will not be used if you return a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/#redirectresponse).\n                \"\"\"\n            ),\n        ] = Default(JSONResponse),\n        name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Name for this *path operation*. Only used internally.\n                \"\"\"\n            ),\n        ] = None,\n        callbacks: Annotated[\n            Optional[List[BaseRoute]],\n            Doc(\n                \"\"\"\n                List of *path operations* that will be used as OpenAPI callbacks.\n\n                This is only for OpenAPI documentation, the callbacks won't be used\n                directly.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).\n                \"\"\"\n            ),\n        ] = None,\n        openapi_extra: Annotated[\n            Optional[Dict[str, Any]],\n            Doc(\n                \"\"\"\n                Extra metadata to be included in the OpenAPI schema for this *path\n                operation*.\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).\n                \"\"\"\n            ),\n        ] = None,\n        generate_unique_id_function: Annotated[\n            Callable[[APIRoute], str],\n            Doc(\n                \"\"\"\n                Customize the function used to generate unique IDs for the *path\n                operations* shown in the generated OpenAPI.\n\n                This is particularly useful when automatically generating clients or\n                SDKs for your API.\n\n                Read more about it in the\n                [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).\n                \"\"\"\n            ),\n        ] = Default(generate_unique_id),\n    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n        \"\"\"\n        Add a *path operation* using an HTTP DELETE operation.\n\n        ## Example\n\n        ```python\n        from fastapi import APIRouter, FastAPI\n\n        app = FastAPI()\n        router = APIRouter()\n\n        @router.delete(\"/items/{item_id}\")\n        def delete_item(item_id: str):\n            return {\"message\": \"Item deleted\"}\n\n        app.include_router(router)\n        ```\n        \"\"\"\n        return self.api_route(\n            path=path,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags,\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses,\n            deprecated=deprecated,\n            methods=[\"DELETE\"],\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=response_model_exclude_unset,\n            response_model_exclude_defaults=response_model_exclude_defaults,\n            response_model_exclude_none=response_model_exclude_none,\n            include_in_schema=include_in_schema,\n            response_class=response_class,\n            name=name,\n            callbacks=callbacks,\n            openapi_extra=openapi_extra,\n            generate_unique_id_function=generate_unique_id_function,\n        )\n\n    def options(\n        self,\n        path: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL path to be used for this *path operation*.\n\n                For example, in `http://example.com/items`, the path is `/items`.\n                \"\"\"\n            ),\n        ],\n        *,\n        response_model: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                The type to use for the response.\n\n                It could be any valid Pydantic *field* type. So, it doesn't have to\n                be a Pydantic model, it could be other things, like a `list`, `dict`,\n                etc.\n\n                It will be used for:\n\n                * Documentation: the generated OpenAPI (and the UI at `/docs`) will\n                    show it as the response (JSON Schema).\n                * Serialization: you could return an arbitrary object and the\n                    `response_model` would be used to serialize that object into the\n                    corresponding JSON.\n                * Filtering: the JSON sent to the client will only contain the data\n                    (fields) defined in the `response_model`. If you returned an object\n                    that contains an attribute `password` but the `response_model` does\n                    not include that field, the JSON sent to the client would not have\n                    that `password`.\n                * Validation: whatever you return will be serialized with the\n                    `response_model`, converting any data as necessary to generate the\n                    corresponding JSON. But if the data in the object returned is not\n                    valid, that would mean a violation of the contract with the client,\n                    so it's an error from the API developer. So, FastAPI will raise an\n                    error and return a 500 error code (Internal Server Error).\n\n                Read more about it in the\n                [FastAPI docs for Response Model](https://fastapi.tiangolo.com/tutorial/response-model/).\n                \"\"\"\n            ),\n        ] = Default(None),\n        status_code: Annotated[\n            Optional[int],\n            Doc(\n                \"\"\"\n                The default status code to be used for the response.\n\n                You could override the status code by returning a response directly.\n\n                Read more about it in the\n                [FastAPI docs for Response Status Code](https://fastapi.tiangolo.com/tutorial/response-status-code/).\n                \"\"\"\n            ),\n        ] = None,\n        tags: Annotated[\n            Optional[List[Union[str, Enum]]],\n            Doc(\n                \"\"\"\n                A list of tags to be applied to the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#tags).\n                \"\"\"\n            ),\n        ] = None,\n        dependencies: Annotated[\n            Optional[Sequence[params.Depends]],\n            Doc(\n                \"\"\"\n                A list of dependencies (using `Depends()`) to be applied to the\n                *path operation*.\n\n                Read more about it in the\n                [FastAPI docs for Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/).\n                \"\"\"\n            ),\n        ] = None,\n        summary: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A summary for the *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                A description for the *path operation*.\n\n                If not provided, it will be extracted automatically from the docstring\n                of the *path operation function*.\n\n                It can contain Markdown.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n\n                Read more about it in the\n                [FastAPI docs for Path Operation Configuration](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/).\n                \"\"\"\n            ),\n        ] = None,\n        response_description: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The description for the default response.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = \"Successful Response\",\n        responses: Annotated[\n            Optional[Dict[Union[int, str], Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                Additional responses that could be returned by this *path operation*.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        deprecated: Annotated[\n            Optional[bool],\n            Doc(\n                \"\"\"\n                Mark this *path operation* as deprecated.\n\n                It will be added to the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        operation_id: Annotated["
    },
    {
      "chunk_id": 66,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "from typing import (\n    Any,\n    BinaryIO,\n    Callable,\n    Dict,\n    Iterable,\n    Optional,\n    Type,\n    TypeVar,\n    cast,\n)\n\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    CoreSchema,\n    GetJsonSchemaHandler,\n    JsonSchemaValue,\n    with_info_plain_validator_function,\n)\nfrom starlette.datastructures import URL as URL  # noqa: F401\nfrom starlette.datastructures import Address as Address  # noqa: F401\nfrom starlette.datastructures import FormData as FormData  # noqa: F401\nfrom starlette.datastructures import Headers as Headers  # noqa: F401\nfrom starlette.datastructures import QueryParams as QueryParams  # noqa: F401\nfrom starlette.datastructures import State as State  # noqa: F401\nfrom starlette.datastructures import UploadFile as StarletteUploadFile\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 67,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "class UploadFile(StarletteUploadFile):\n    \"\"\"\n    A file uploaded in a request.\n\n    Define it as a *path operation function* (or dependency) parameter.\n\n    If you are using a regular `def` function, you can use the `upload_file.file`\n    attribute to access the raw standard Python file (blocking, not async), useful and\n    needed for non-async code.\n\n    Read more about it in the\n    [FastAPI docs for Request Files](https://fastapi.tiangolo.com/tutorial/request-files/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import FastAPI, File, UploadFile\n\n    app = FastAPI()\n\n\n    @app.post(\"/files/\")\n    async def create_file(file: Annotated[bytes, File()]):\n        return {\"file_size\": len(file)}\n\n\n    @app.post(\"/uploadfile/\")\n    async def create_upload_file(file: UploadFile):\n        return {\"filename\": file.filename}\n    ```\n    \"\"\"\n\n    file: Annotated[\n        BinaryIO,\n        Doc(\"The standard Python file object (non-async).\"),\n    ]\n    filename: Annotated[Optional[str], Doc(\"The original file name.\")]\n    size: Annotated[Optional[int], Doc(\"The size of the file in bytes.\")]\n    headers: Annotated[Headers, Doc(\"The headers of the request.\")]\n    content_type: Annotated[\n        Optional[str], Doc(\"The content type of the request, from the headers.\")\n    ]"
    },
    {
      "chunk_id": 68,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "async def write(\n        self,\n        data: Annotated[\n            bytes,\n            Doc(\n                \"\"\"\n                The bytes to write to the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Write some bytes to the file.\n\n        You normally wouldn't use this from a file you read in a request.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().write(data)"
    },
    {
      "chunk_id": 69,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "async def read(\n        self,\n        size: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The number of bytes to read from the file.\n                \"\"\"\n            ),\n        ] = -1,\n    ) -> bytes:\n        \"\"\"\n        Read some bytes from the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().read(size)"
    },
    {
      "chunk_id": 70,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "async def seek(\n        self,\n        offset: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                The position in bytes to seek to in the file.\n                \"\"\"\n            ),\n        ],\n    ) -> None:\n        \"\"\"\n        Move to a position in the file.\n\n        Any next read or write will be done from that position.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().seek(offset)"
    },
    {
      "chunk_id": 71,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "async def close(self) -> None:\n        \"\"\"\n        Close the file.\n\n        To be awaitable, compatible with async, this is run in threadpool.\n        \"\"\"\n        return await super().close()"
    },
    {
      "chunk_id": 72,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "@classmethod\n    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable[..., Any]]:\n        yield cls.validate"
    },
    {
      "chunk_id": 73,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "@classmethod\n    def validate(cls: Type[\"UploadFile\"], v: Any) -> Any:\n        if not isinstance(v, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(v)}\")\n        return v"
    },
    {
      "chunk_id": 74,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "@classmethod\n    def _validate(cls, __input_value: Any, _: Any) -> \"UploadFile\":\n        if not isinstance(__input_value, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(__input_value)}\")\n        return cast(UploadFile, __input_value)"
    },
    {
      "chunk_id": 75,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "if not PYDANTIC_V2:\n\n        @classmethod\n        def __modify_schema__(cls, field_schema: Dict[str, Any]) -> None:\n            field_schema.update({\"type\": \"string\", \"format\": \"binary\"})"
    },
    {
      "chunk_id": 76,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "@classmethod\n    def __get_pydantic_json_schema__(\n        cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n    ) -> JsonSchemaValue:\n        return {\"type\": \"string\", \"format\": \"binary\"}"
    },
    {
      "chunk_id": 77,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "@classmethod\n    def __get_pydantic_core_schema__(\n        cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n    ) -> CoreSchema:\n        return with_info_plain_validator_function(cls._validate)"
    },
    {
      "chunk_id": 78,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "class DefaultPlaceholder:\n    \"\"\"\n    You shouldn't use this class directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n\n    def __init__(self, value: Any):\n        self.value = value\n\n    def __bool__(self) -> bool:\n        return bool(self.value)\n\n    def __eq__(self, o: object) -> bool:\n        return isinstance(o, DefaultPlaceholder) and o.value == self.value"
    },
    {
      "chunk_id": 79,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "DefaultType = TypeVar(\"DefaultType\")"
    },
    {
      "chunk_id": 80,
      "source": "__internal__/data_repo/fastapi/fastapi/datastructures.py",
      "content": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore"
    },
    {
      "chunk_id": 81,
      "source": "__internal__/data_repo/fastapi/fastapi/responses.py",
      "content": "from typing import Any\n\nfrom starlette.responses import FileResponse as FileResponse  # noqa\nfrom starlette.responses import HTMLResponse as HTMLResponse  # noqa\nfrom starlette.responses import JSONResponse as JSONResponse  # noqa\nfrom starlette.responses import PlainTextResponse as PlainTextResponse  # noqa\nfrom starlette.responses import RedirectResponse as RedirectResponse  # noqa\nfrom starlette.responses import Response as Response  # noqa\nfrom starlette.responses import StreamingResponse as StreamingResponse  # noqa\n\ntry:\n    import ujson\nexcept ImportError:  # pragma: nocover\n    ujson = None  # type: ignore\n\n\ntry:\n    import orjson\nexcept ImportError:  # pragma: nocover\n    orjson = None  # type: ignore"
    },
    {
      "chunk_id": 82,
      "source": "__internal__/data_repo/fastapi/fastapi/responses.py",
      "content": "class UJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance ujson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n        return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")"
    },
    {
      "chunk_id": 83,
      "source": "__internal__/data_repo/fastapi/fastapi/responses.py",
      "content": "class ORJSONResponse(JSONResponse):\n    \"\"\"\n    JSON response using the high-performance orjson library to serialize data to JSON.\n\n    Read more about it in the\n    [FastAPI docs for Custom Response - HTML, Stream, File, others](https://fastapi.tiangolo.com/advanced/custom-response/).\n    \"\"\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n        return orjson.dumps(\n            content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n        )"
    },
    {
      "chunk_id": 84,
      "source": "__internal__/data_repo/fastapi/fastapi/exception_handlers.py",
      "content": "from fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\nfrom fastapi.utils import is_body_allowed_for_status_code\nfrom fastapi.websockets import WebSocket\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse, Response\nfrom starlette.status import HTTP_422_UNPROCESSABLE_ENTITY, WS_1008_POLICY_VIOLATION"
    },
    {
      "chunk_id": 85,
      "source": "__internal__/data_repo/fastapi/fastapi/exception_handlers.py",
      "content": "async def http_exception_handler(request: Request, exc: HTTPException) -> Response:\n    headers = getattr(exc, \"headers\", None)\n    if not is_body_allowed_for_status_code(exc.status_code):\n        return Response(status_code=exc.status_code, headers=headers)\n    return JSONResponse(\n        {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n    )"
    },
    {
      "chunk_id": 86,
      "source": "__internal__/data_repo/fastapi/fastapi/exception_handlers.py",
      "content": "async def request_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\"detail\": jsonable_encoder(exc.errors())},\n    )"
    },
    {
      "chunk_id": 87,
      "source": "__internal__/data_repo/fastapi/fastapi/exception_handlers.py",
      "content": "async def websocket_request_validation_exception_handler(\n    websocket: WebSocket, exc: WebSocketRequestValidationError\n) -> None:\n    await websocket.close(\n        code=WS_1008_POLICY_VIOLATION, reason=jsonable_encoder(exc.errors())\n    )"
    },
    {
      "chunk_id": 88,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "from collections import deque\nfrom copy import copy\nfrom dataclasses import dataclass, is_dataclass\nfrom enum import Enum\nfrom functools import lru_cache\nfrom typing import (\n    Any,\n    Callable,\n    Deque,\n    Dict,\n    FrozenSet,\n    List,\n    Mapping,\n    Sequence,\n    Set,\n    Tuple,\n    Type,\n    Union,\n)\n\nfrom fastapi.exceptions import RequestErrorModel\nfrom fastapi.types import IncEx, ModelNameMap, UnionType\nfrom pydantic import BaseModel, create_model\nfrom pydantic.version import VERSION as PYDANTIC_VERSION\nfrom starlette.datastructures import UploadFile\nfrom typing_extensions import Annotated, Literal, get_args, get_origin"
    },
    {
      "chunk_id": 89,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "PYDANTIC_VERSION_MINOR_TUPLE = tuple(int(x) for x in PYDANTIC_VERSION.split(\".\")[:2])\nPYDANTIC_V2 = PYDANTIC_VERSION_MINOR_TUPLE[0] == 2\n\nsequence_annotation_to_type = {\n    Sequence: list,\n    List: list,\n    list: list,\n    Tuple: tuple,\n    tuple: tuple,\n    Set: set,\n    set: set,\n    FrozenSet: frozenset,\n    frozenset: frozenset,\n    Deque: deque,\n    deque: deque,\n}\n\nsequence_types = tuple(sequence_annotation_to_type.keys())\n\nUrl: Type[Any]"
    },
    {
      "chunk_id": 90,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "if PYDANTIC_V2:\n    from pydantic import PydanticSchemaGenerationError as PydanticSchemaGenerationError\n    from pydantic import TypeAdapter\n    from pydantic import ValidationError as ValidationError\n    from pydantic._internal._schema_generation_shared import (  # type: ignore[attr-defined]\n        GetJsonSchemaHandler as GetJsonSchemaHandler,\n    )\n    from pydantic._internal._typing_extra import eval_type_lenient\n    from pydantic._internal._utils import lenient_issubclass as lenient_issubclass\n    from pydantic.fields import FieldInfo\n    from pydantic.json_schema import GenerateJsonSchema as GenerateJsonSchema\n    from pydantic.json_schema import JsonSchemaValue as JsonSchemaValue\n    from pydantic_core import CoreSchema as CoreSchema\n    from pydantic_core import PydanticUndefined, PydanticUndefinedType\n    from pydantic_core import Url as Url\n\n    try:\n        from pydantic_core.core_schema import (\n            with_info_plain_validator_function as with_info_plain_validator_function,\n        )\n    except ImportError:  # pragma: no cover\n        from pydantic_core.core_schema import (\n            general_plain_validator_function as with_info_plain_validator_function,  # noqa: F401\n        )\n\n    RequiredParam = PydanticUndefined\n    Undefined = PydanticUndefined\n    UndefinedType = PydanticUndefinedType\n    evaluate_forwardref = eval_type_lenient\n    Validator = Any\n\n    class BaseConfig:\n        pass\n\n    class ErrorWrapper(Exception):\n        pass\n\n    @dataclass\n    class ModelField:\n        field_info: FieldInfo\n        name: str\n        mode: Literal[\"validation\", \"serialization\"] = \"validation\"\n\n        @property\n        def alias(self) -> str:\n            a = self.field_info.alias\n            return a if a is not None else self.name\n\n        @property\n        def required(self) -> bool:\n            return self.field_info.is_required()\n\n        @property\n        def default(self) -> Any:\n            return self.get_default()\n\n        @property\n        def type_(self) -> Any:\n            return self.field_info.annotation\n\n        def __post_init__(self) -> None:\n            self._type_adapter: TypeAdapter[Any] = TypeAdapter(\n                Annotated[self.field_info.annotation, self.field_info]\n            )\n\n        def get_default(self) -> Any:\n            if self.field_info.is_required():\n                return Undefined\n            return self.field_info.get_default(call_default_factory=True)\n\n        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n        ) -> Tuple[Any, Union[List[Dict[str, Any]], None]]:\n            try:\n                return (\n                    self._type_adapter.validate_python(value, from_attributes=True),\n                    None,\n                )\n            except ValidationError as exc:\n                return None, _regenerate_error_with_loc(\n                    errors=exc.errors(include_url=False), loc_prefix=loc\n                )\n\n        def serialize(\n            self,\n            value: Any,\n            *,\n            mode: Literal[\"json\", \"python\"] = \"json\",\n            include: Union[IncEx, None] = None,\n            exclude: Union[IncEx, None] = None,\n            by_alias: bool = True,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n        ) -> Any:\n            return self._type_adapter.dump_python(\n                value,\n                mode=mode,\n                include=include,\n                exclude=exclude,\n                by_alias=by_alias,\n                exclude_unset=exclude_unset,\n                exclude_defaults=exclude_defaults,\n                exclude_none=exclude_none,\n            )\n\n        def __hash__(self) -> int:\n            return id(self)"
    },
    {
      "chunk_id": 91,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def get_annotation_from_field_info(\n        annotation: Any, field_info: FieldInfo, field_name: str\n    ) -> Any:\n        return annotation\n\n    def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        return errors  # type: ignore[return-value]\n\n    def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.model_rebuild()\n\n    def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.model_dump(mode=mode, **kwargs)\n\n    def _get_model_config(model: BaseModel) -> Any:\n        return model.model_config\n\n    def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        json_schema = field_mapping[(field, override_mode or field.mode)]\n        if \"$ref\" not in json_schema:\n            json_schema[\"title\"] = (\n                field.field_info.title or field.alias.title().replace(\"_\", \" \")\n            )\n        return json_schema\n\n    def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        return {}\n\n    def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        override_mode: Union[Literal[\"validation\"], None] = (\n            None if separate_input_output_schemas else \"validation\"\n        )\n        inputs = [\n            (field, override_mode or field.mode, field._type_adapter.core_schema)\n            for field in fields\n        ]\n        field_mapping, definitions = schema_generator.generate_definitions(\n            inputs=inputs\n        )\n        return field_mapping, definitions  # type: ignore[return-value]\n\n    def is_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        return field_annotation_is_scalar(\n            field.field_info.annotation\n        ) and not isinstance(field.field_info, params.Body)\n\n    def is_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_sequence(field.field_info.annotation)\n\n    def is_scalar_sequence_field(field: ModelField) -> bool:\n        return field_annotation_is_scalar_sequence(field.field_info.annotation)\n\n    def is_bytes_field(field: ModelField) -> bool:\n        return is_bytes_or_nonable_bytes_annotation(field.type_)\n\n    def is_bytes_sequence_field(field: ModelField) -> bool:\n        return is_bytes_sequence_annotation(field.type_)\n\n    def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        cls = type(field_info)\n        merged_field_info = cls.from_annotation(annotation)\n        new_field_info = copy(field_info)\n        new_field_info.metadata = merged_field_info.metadata\n        new_field_info.annotation = merged_field_info.annotation\n        return new_field_info\n\n    def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        origin_type = (\n            get_origin(field.field_info.annotation) or field.field_info.annotation\n        )\n        assert issubclass(origin_type, sequence_types)  # type: ignore[arg-type]\n        return sequence_annotation_to_type[origin_type](value)  # type: ignore[no-any-return]\n\n    def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        error = ValidationError.from_exception_data(\n            \"Field required\", [{\"type\": \"missing\", \"loc\": loc, \"input\": {}}]\n        ).errors(include_url=False)[0]\n        error[\"input\"] = None\n        return error  # type: ignore[return-value]\n\n    def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        field_params = {f.name: (f.field_info.annotation, f.field_info) for f in fields}\n        BodyModel: Type[BaseModel] = create_model(model_name, **field_params)  # type: ignore[call-overload]\n        return BodyModel\n\n    def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return [\n            ModelField(field_info=field_info, name=name)\n            for name, field_info in model.model_fields.items()\n        ]"
    },
    {
      "chunk_id": 92,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "else:\n    from fastapi.openapi.constants import REF_PREFIX as REF_PREFIX\n    from pydantic import AnyUrl as Url  # noqa: F401\n    from pydantic import (  # type: ignore[assignment]\n        BaseConfig as BaseConfig,  # noqa: F401\n    )\n    from pydantic import ValidationError as ValidationError  # noqa: F401\n    from pydantic.class_validators import (  # type: ignore[no-redef]\n        Validator as Validator,  # noqa: F401\n    )\n    from pydantic.error_wrappers import (  # type: ignore[no-redef]\n        ErrorWrapper as ErrorWrapper,  # noqa: F401\n    )\n    from pydantic.errors import MissingError\n    from pydantic.fields import (  # type: ignore[attr-defined]\n        SHAPE_FROZENSET,\n        SHAPE_LIST,\n        SHAPE_SEQUENCE,\n        SHAPE_SET,\n        SHAPE_SINGLETON,\n        SHAPE_TUPLE,\n        SHAPE_TUPLE_ELLIPSIS,\n    )\n    from pydantic.fields import FieldInfo as FieldInfo\n    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n        ModelField as ModelField,  # noqa: F401\n    )\n\n    RequiredParam: Any = Ellipsis  # type: ignore[no-redef]\n    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n        Undefined as Undefined,\n    )\n    from pydantic.fields import (  # type: ignore[no-redef, attr-defined]\n        UndefinedType as UndefinedType,  # noqa: F401\n    )\n    from pydantic.schema import (\n        field_schema,\n        get_flat_models_from_fields,\n        get_model_name_map,\n        model_process_schema,\n    )\n    from pydantic.schema import (  # type: ignore[no-redef]  # noqa: F401\n        get_annotation_from_field_info as get_annotation_from_field_info,\n    )\n    from pydantic.typing import (  # type: ignore[no-redef]\n        evaluate_forwardref as evaluate_forwardref,  # noqa: F401\n    )\n    from pydantic.utils import (  # type: ignore[no-redef]\n        lenient_issubclass as lenient_issubclass,  # noqa: F401\n    )\n\n    GetJsonSchemaHandler = Any  # type: ignore[assignment,misc]\n    JsonSchemaValue = Dict[str, Any]  # type: ignore[misc]\n    CoreSchema = Any  # type: ignore[assignment,misc]\n\n    sequence_shapes = {\n        SHAPE_LIST,\n        SHAPE_SET,\n        SHAPE_FROZENSET,\n        SHAPE_TUPLE,\n        SHAPE_SEQUENCE,\n        SHAPE_TUPLE_ELLIPSIS,\n    }\n    sequence_shape_to_type = {\n        SHAPE_LIST: list,\n        SHAPE_SET: set,\n        SHAPE_TUPLE: tuple,\n        SHAPE_SEQUENCE: list,\n        SHAPE_TUPLE_ELLIPSIS: list,\n    }\n\n    @dataclass\n    class GenerateJsonSchema:  # type: ignore[no-redef]\n        ref_template: str\n\n    class PydanticSchemaGenerationError(Exception):  # type: ignore[no-redef]\n        pass\n\n    def with_info_plain_validator_function(  # type: ignore[misc]\n        function: Callable[..., Any],\n        *,\n        ref: Union[str, None] = None,\n        metadata: Any = None,\n        serialization: Any = None,\n    ) -> Any:\n        return {}\n\n    def get_model_definitions(\n        *,\n        flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n        model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n    ) -> Dict[str, Any]:\n        definitions: Dict[str, Dict[str, Any]] = {}\n        for model in flat_models:\n            m_schema, m_definitions, m_nested_models = model_process_schema(\n                model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n            )\n            definitions.update(m_definitions)\n            model_name = model_name_map[model]\n            if \"description\" in m_schema:\n                m_schema[\"description\"] = m_schema[\"description\"].split(\"\\f\")[0]\n            definitions[model_name] = m_schema\n        return definitions\n\n    def is_pv1_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        field_info = field.field_info\n        if not (\n            field.shape == SHAPE_SINGLETON  # type: ignore[attr-defined]\n            and not lenient_issubclass(field.type_, BaseModel)\n            and not lenient_issubclass(field.type_, dict)\n            and not field_annotation_is_sequence(field.type_)\n            and not is_dataclass(field.type_)\n            and not isinstance(field_info, params.Body)\n        ):\n            return False\n        if field.sub_fields:  # type: ignore[attr-defined]\n            if not all(\n                is_pv1_scalar_field(f)\n                for f in field.sub_fields  # type: ignore[attr-defined]\n            ):\n                return False\n        return True\n\n    def is_pv1_scalar_sequence_field(field: ModelField) -> bool:\n        if (field.shape in sequence_shapes) and not lenient_issubclass(  # type: ignore[attr-defined]\n            field.type_, BaseModel\n        ):\n            if field.sub_fields is not None:  # type: ignore[attr-defined]\n                for sub_field in field.sub_fields:  # type: ignore[attr-defined]\n                    if not is_pv1_scalar_field(sub_field):\n                        return False\n            return True\n        if _annotation_is_sequence(field.type_):\n            return True\n        return False\n\n    def _normalize_errors(errors: Sequence[Any]) -> List[Dict[str, Any]]:\n        use_errors: List[Any] = []\n        for error in errors:\n            if isinstance(error, ErrorWrapper):\n                new_errors = ValidationError(  # type: ignore[call-arg]\n                    errors=[error], model=RequestErrorModel\n                ).errors()\n                use_errors.extend(new_errors)\n            elif isinstance(error, list):\n                use_errors.extend(_normalize_errors(error))\n            else:\n                use_errors.append(error)\n        return use_errors\n\n    def _model_rebuild(model: Type[BaseModel]) -> None:\n        model.update_forward_refs()\n\n    def _model_dump(\n        model: BaseModel, mode: Literal[\"json\", \"python\"] = \"json\", **kwargs: Any\n    ) -> Any:\n        return model.dict(**kwargs)\n\n    def _get_model_config(model: BaseModel) -> Any:\n        return model.__config__  # type: ignore[attr-defined]\n\n    def get_schema_from_model_field(\n        *,\n        field: ModelField,\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        field_mapping: Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        separate_input_output_schemas: bool = True,\n    ) -> Dict[str, Any]:\n        return field_schema(  # type: ignore[no-any-return]\n            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n        )[0]\n\n    def get_compat_model_name_map(fields: List[ModelField]) -> ModelNameMap:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return get_model_name_map(models)  # type: ignore[no-any-return]\n\n    def get_definitions(\n        *,\n        fields: List[ModelField],\n        schema_generator: GenerateJsonSchema,\n        model_name_map: ModelNameMap,\n        separate_input_output_schemas: bool = True,\n    ) -> Tuple[\n        Dict[\n            Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n        ],\n        Dict[str, Dict[str, Any]],\n    ]:\n        models = get_flat_models_from_fields(fields, known_models=set())\n        return {}, get_model_definitions(\n            flat_models=models, model_name_map=model_name_map\n        )\n\n    def is_scalar_field(field: ModelField) -> bool:\n        return is_pv1_scalar_field(field)\n\n    def is_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes or _annotation_is_sequence(field.type_)  # type: ignore[attr-defined]\n\n    def is_scalar_sequence_field(field: ModelField) -> bool:\n        return is_pv1_scalar_sequence_field(field)\n\n    def is_bytes_field(field: ModelField) -> bool:\n        return lenient_issubclass(field.type_, bytes)\n\n    def is_bytes_sequence_field(field: ModelField) -> bool:\n        return field.shape in sequence_shapes and lenient_issubclass(field.type_, bytes)  # type: ignore[attr-defined]\n\n    def copy_field_info(*, field_info: FieldInfo, annotation: Any) -> FieldInfo:\n        return copy(field_info)\n\n    def serialize_sequence_value(*, field: ModelField, value: Any) -> Sequence[Any]:\n        return sequence_shape_to_type[field.shape](value)  # type: ignore[no-any-return,attr-defined]\n\n    def get_missing_field_error(loc: Tuple[str, ...]) -> Dict[str, Any]:\n        missing_field_error = ErrorWrapper(MissingError(), loc=loc)  # type: ignore[call-arg]\n        new_error = ValidationError([missing_field_error], RequestErrorModel)\n        return new_error.errors()[0]  # type: ignore[return-value]\n\n    def create_body_model(\n        *, fields: Sequence[ModelField], model_name: str\n    ) -> Type[BaseModel]:\n        BodyModel = create_model(model_name)\n        for f in fields:\n            BodyModel.__fields__[f.name] = f  # type: ignore[index]\n        return BodyModel\n\n    def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return list(model.__fields__.values())  # type: ignore[attr-defined]"
    },
    {
      "chunk_id": 93,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def _regenerate_error_with_loc(\n    *, errors: Sequence[Any], loc_prefix: Tuple[Union[str, int], ...]\n) -> List[Dict[str, Any]]:\n    updated_loc_errors: List[Any] = [\n        {**err, \"loc\": loc_prefix + err.get(\"loc\", ())}\n        for err in _normalize_errors(errors)\n    ]\n\n    return updated_loc_errors"
    },
    {
      "chunk_id": 94,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def _annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    if lenient_issubclass(annotation, (str, bytes)):\n        return False\n    return lenient_issubclass(annotation, sequence_types)"
    },
    {
      "chunk_id": 95,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def field_annotation_is_sequence(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if field_annotation_is_sequence(arg):\n                return True\n        return False\n    return _annotation_is_sequence(annotation) or _annotation_is_sequence(\n        get_origin(annotation)\n    )"
    },
    {
      "chunk_id": 96,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def value_is_sequence(value: Any) -> bool:\n    return isinstance(value, sequence_types) and not isinstance(value, (str, bytes))  # type: ignore[arg-type]"
    },
    {
      "chunk_id": 97,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def _annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    return (\n        lenient_issubclass(annotation, (BaseModel, Mapping, UploadFile))\n        or _annotation_is_sequence(annotation)\n        or is_dataclass(annotation)\n    )"
    },
    {
      "chunk_id": 98,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def field_annotation_is_complex(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        return any(field_annotation_is_complex(arg) for arg in get_args(annotation))\n\n    return (\n        _annotation_is_complex(annotation)\n        or _annotation_is_complex(origin)\n        or hasattr(origin, \"__pydantic_core_schema__\")\n        or hasattr(origin, \"__get_pydantic_core_schema__\")\n    )"
    },
    {
      "chunk_id": 99,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def field_annotation_is_scalar(annotation: Any) -> bool:\n    return annotation is Ellipsis or not field_annotation_is_complex(annotation)"
    },
    {
      "chunk_id": 100,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def field_annotation_is_scalar_sequence(annotation: Union[Type[Any], None]) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one_scalar_sequence = False\n        for arg in get_args(annotation):\n            if field_annotation_is_scalar_sequence(arg):\n                at_least_one_scalar_sequence = True\n                continue\n            elif not field_annotation_is_scalar(arg):\n                return False\n        return at_least_one_scalar_sequence\n    return field_annotation_is_sequence(annotation) and all(\n        field_annotation_is_scalar(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )"
    },
    {
      "chunk_id": 101,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def is_bytes_or_nonable_bytes_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, bytes):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, bytes):\n                return True\n    return False"
    },
    {
      "chunk_id": 102,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def is_uploadfile_or_nonable_uploadfile_annotation(annotation: Any) -> bool:\n    if lenient_issubclass(annotation, UploadFile):\n        return True\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        for arg in get_args(annotation):\n            if lenient_issubclass(arg, UploadFile):\n                return True\n    return False"
    },
    {
      "chunk_id": 103,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def is_bytes_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_bytes_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_bytes_or_nonable_bytes_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )"
    },
    {
      "chunk_id": 104,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "def is_uploadfile_sequence_annotation(annotation: Any) -> bool:\n    origin = get_origin(annotation)\n    if origin is Union or origin is UnionType:\n        at_least_one = False\n        for arg in get_args(annotation):\n            if is_uploadfile_sequence_annotation(arg):\n                at_least_one = True\n                continue\n        return at_least_one\n    return field_annotation_is_sequence(annotation) and all(\n        is_uploadfile_or_nonable_uploadfile_annotation(sub_annotation)\n        for sub_annotation in get_args(annotation)\n    )"
    },
    {
      "chunk_id": 105,
      "source": "__internal__/data_repo/fastapi/fastapi/_compat.py",
      "content": "@lru_cache\ndef get_cached_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n    return get_model_fields(model)"
    },
    {
      "chunk_id": 106,
      "source": "__internal__/data_repo/fastapi/fastapi/concurrency.py",
      "content": "from contextlib import asynccontextmanager as asynccontextmanager\nfrom typing import AsyncGenerator, ContextManager, TypeVar\n\nimport anyio.to_thread\nfrom anyio import CapacityLimiter\nfrom starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\nfrom starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\nfrom starlette.concurrency import (  # noqa\n    run_until_first_complete as run_until_first_complete,\n)\n\n_T = TypeVar(\"_T\")"
    },
    {
      "chunk_id": 107,
      "source": "__internal__/data_repo/fastapi/fastapi/concurrency.py",
      "content": "@asynccontextmanager\nasync def contextmanager_in_threadpool(\n    cm: ContextManager[_T],\n) -> AsyncGenerator[_T, None]:\n    # blocking __exit__ from running waiting on a free thread\n    # can create race conditions/deadlocks if the context manager itself\n    # has its own internal pool (e.g. a database connection pool)\n    # to avoid this we let __exit__ run without a capacity limit\n    # since we're creating a new limiter for each call, any non-zero limit\n    # works (1 is arbitrary)\n    exit_limiter = CapacityLimiter(1)\n    try:\n        yield await run_in_threadpool(cm.__enter__)\n    except Exception as e:\n        ok = bool(\n            await anyio.to_thread.run_sync(\n                cm.__exit__, type(e), e, e.__traceback__, limiter=exit_limiter\n            )\n        )\n        if not ok:\n            raise e\n    else:\n        await anyio.to_thread.run_sync(\n            cm.__exit__, None, None, None, limiter=exit_limiter\n        )"
    },
    {
      "chunk_id": 108,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "from typing import Any, Dict, Optional, Sequence, Type, Union\n\nfrom pydantic import BaseModel, create_model\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom starlette.exceptions import WebSocketException as StarletteWebSocketException\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 109,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class HTTPException(StarletteHTTPException):\n    \"\"\"\n    An HTTP exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for Handling Errors](https://fastapi.tiangolo.com/tutorial/handling-errors/).\n\n    ## Example\n\n    ```python\n    from fastapi import FastAPI, HTTPException\n\n    app = FastAPI()\n\n    items = {\"foo\": \"The Foo Wrestlers\"}\n\n\n    @app.get(\"/items/{item_id}\")\n    async def read_item(item_id: str):\n        if item_id not in items:\n            raise HTTPException(status_code=404, detail=\"Item not found\")\n        return {\"item\": items[item_id]}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        status_code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                HTTP status code to send to the client.\n                \"\"\"\n            ),\n        ],\n        detail: Annotated[\n            Any,\n            Doc(\n                \"\"\"\n                Any data to be sent to the client in the `detail` key of the JSON\n                response.\n                \"\"\"\n            ),\n        ] = None,\n        headers: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                Any headers to send to the client in the response.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(status_code=status_code, detail=detail, headers=headers)"
    },
    {
      "chunk_id": 110,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class WebSocketException(StarletteWebSocketException):\n    \"\"\"\n    A WebSocket exception you can raise in your own code to show errors to the client.\n\n    This is for client errors, invalid authentication, invalid data, etc. Not for server\n    errors in your code.\n\n    Read more about it in the\n    [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import (\n        Cookie,\n        FastAPI,\n        WebSocket,\n        WebSocketException,\n        status,\n    )\n\n    app = FastAPI()\n\n    @app.websocket(\"/items/{item_id}/ws\")\n    async def websocket_endpoint(\n        *,\n        websocket: WebSocket,\n        session: Annotated[str | None, Cookie()] = None,\n        item_id: str,\n    ):\n        if session is None:\n            raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n        await websocket.accept()\n        while True:\n            data = await websocket.receive_text()\n            await websocket.send_text(f\"Session cookie is: {session}\")\n            await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        code: Annotated[\n            int,\n            Doc(\n                \"\"\"\n                A closing code from the\n                [valid codes defined in the specification](https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1).\n                \"\"\"\n            ),\n        ],\n        reason: Annotated[\n            Union[str, None],\n            Doc(\n                \"\"\"\n                The reason to close the WebSocket connection.\n\n                It is UTF-8-encoded data. The interpretation of the reason is up to the\n                application, it is not specified by the WebSocket specification.\n\n                It could contain text that could be human-readable or interpretable\n                by the client code, etc.\n                \"\"\"\n            ),\n        ] = None,\n    ) -> None:\n        super().__init__(code=code, reason=reason)"
    },
    {
      "chunk_id": 111,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "RequestErrorModel: Type[BaseModel] = create_model(\"Request\")\nWebSocketErrorModel: Type[BaseModel] = create_model(\"WebSocket\")"
    },
    {
      "chunk_id": 112,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class FastAPIError(RuntimeError):\n    \"\"\"\n    A generic, FastAPI-specific error.\n    \"\"\""
    },
    {
      "chunk_id": 113,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class ValidationException(Exception):\n    def __init__(self, errors: Sequence[Any]) -> None:\n        self._errors = errors\n\n    def errors(self) -> Sequence[Any]:\n        return self._errors"
    },
    {
      "chunk_id": 114,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class RequestValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body"
    },
    {
      "chunk_id": 115,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class WebSocketRequestValidationError(ValidationException):\n    pass"
    },
    {
      "chunk_id": 116,
      "source": "__internal__/data_repo/fastapi/fastapi/exceptions.py",
      "content": "class ResponseValidationError(ValidationException):\n    def __init__(self, errors: Sequence[Any], *, body: Any = None) -> None:\n        super().__init__(errors)\n        self.body = body\n\n    def __str__(self) -> str:\n        message = f\"{len(self._errors)} validation errors:\\n\"\n        for err in self._errors:\n            message += f\"  {err}\\n\"\n        return message"
    },
    {
      "chunk_id": 117,
      "source": "__internal__/data_repo/fastapi/fastapi/background.py",
      "content": "from typing import Any, Callable\n\nfrom starlette.background import BackgroundTasks as StarletteBackgroundTasks\nfrom typing_extensions import Annotated, Doc, ParamSpec\n\nP = ParamSpec(\"P\")"
    },
    {
      "chunk_id": 118,
      "source": "__internal__/data_repo/fastapi/fastapi/background.py",
      "content": "class BackgroundTasks(StarletteBackgroundTasks):\n    \"\"\"\n    A collection of background tasks that will be called after a response has been\n    sent to the client.\n\n    Read more about it in the\n    [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n\n    ## Example\n\n    ```python\n    from fastapi import BackgroundTasks, FastAPI\n\n    app = FastAPI()\n\n\n    def write_notification(email: str, message=\"\"):\n        with open(\"log.txt\", mode=\"w\") as email_file:\n            content = f\"notification for {email}: {message}\"\n            email_file.write(content)\n\n\n    @app.post(\"/send-notification/{email}\")\n    async def send_notification(email: str, background_tasks: BackgroundTasks):\n        background_tasks.add_task(write_notification, email, message=\"some notification\")\n        return {\"message\": \"Notification sent in the background\"}\n    ```\n    \"\"\""
    },
    {
      "chunk_id": 119,
      "source": "__internal__/data_repo/fastapi/fastapi/background.py",
      "content": "def add_task(\n        self,\n        func: Annotated[\n            Callable[P, Any],\n            Doc(\n                \"\"\"\n                The function to call after the response is sent.\n\n                It can be a regular `def` function or an `async def` function.\n                \"\"\"\n            ),\n        ],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> None:\n        \"\"\"\n        Add a function to be called in the background after the response is sent.\n\n        Read more about it in the\n        [FastAPI docs for Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/).\n        \"\"\"\n        return super().add_task(func, *args, **kwargs)"
    },
    {
      "chunk_id": 120,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "import dataclasses\nimport datetime\nfrom collections import defaultdict, deque\nfrom decimal import Decimal\nfrom enum import Enum\nfrom ipaddress import (\n    IPv4Address,\n    IPv4Interface,\n    IPv4Network,\n    IPv6Address,\n    IPv6Interface,\n    IPv6Network,\n)\nfrom pathlib import Path, PurePath\nfrom re import Pattern\nfrom types import GeneratorType\nfrom typing import Any, Callable, Dict, List, Optional, Tuple, Type, Union\nfrom uuid import UUID\n\nfrom fastapi.types import IncEx\nfrom pydantic import BaseModel\nfrom pydantic.color import Color\nfrom pydantic.networks import AnyUrl, NameEmail\nfrom pydantic.types import SecretBytes, SecretStr\nfrom typing_extensions import Annotated, Doc\n\nfrom ._compat import PYDANTIC_V2, UndefinedType, Url, _model_dump"
    },
    {
      "chunk_id": 121,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "def isoformat(o: Union[datetime.date, datetime.time]) -> str:\n    return o.isoformat()"
    },
    {
      "chunk_id": 122,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "def decimal_encoder(dec_value: Decimal) -> Union[int, float]:\n    \"\"\"\n    Encodes a Decimal as int of there's no exponent, otherwise float\n\n    This is useful when we use ConstrainedDecimal to represent Numeric(x,0)\n    where a integer (but not int typed) is used. Encoding this as a float\n    results in failed round-tripping between encode and parse.\n    Our Id type is a prime example of this.\n\n    >>> decimal_encoder(Decimal(\"1.0\"))\n    1.0\n\n    >>> decimal_encoder(Decimal(\"1\"))\n    1\n    \"\"\"\n    if dec_value.as_tuple().exponent >= 0:  # type: ignore[operator]\n        return int(dec_value)\n    else:\n        return float(dec_value)"
    },
    {
      "chunk_id": 123,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "ENCODERS_BY_TYPE: Dict[Type[Any], Callable[[Any], Any]] = {\n    bytes: lambda o: o.decode(),\n    Color: str,\n    datetime.date: isoformat,\n    datetime.datetime: isoformat,\n    datetime.time: isoformat,\n    datetime.timedelta: lambda td: td.total_seconds(),\n    Decimal: decimal_encoder,\n    Enum: lambda o: o.value,\n    frozenset: list,\n    deque: list,\n    GeneratorType: list,\n    IPv4Address: str,\n    IPv4Interface: str,\n    IPv4Network: str,\n    IPv6Address: str,\n    IPv6Interface: str,\n    IPv6Network: str,\n    NameEmail: str,\n    Path: str,\n    Pattern: lambda o: o.pattern,\n    SecretBytes: str,\n    SecretStr: str,\n    set: list,\n    UUID: str,\n    Url: str,\n    AnyUrl: str,\n}"
    },
    {
      "chunk_id": 124,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "def generate_encoders_by_class_tuples(\n    type_encoder_map: Dict[Any, Callable[[Any], Any]],\n) -> Dict[Callable[[Any], Any], Tuple[Any, ...]]:\n    encoders_by_class_tuples: Dict[Callable[[Any], Any], Tuple[Any, ...]] = defaultdict(\n        tuple\n    )\n    for type_, encoder in type_encoder_map.items():\n        encoders_by_class_tuples[encoder] += (type_,)\n    return encoders_by_class_tuples"
    },
    {
      "chunk_id": 125,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)"
    },
    {
      "chunk_id": 126,
      "source": "__internal__/data_repo/fastapi/fastapi/encoders.py",
      "content": "def jsonable_encoder(\n    obj: Annotated[\n        Any,\n        Doc(\n            \"\"\"\n            The input object to convert to JSON.\n            \"\"\"\n        ),\n    ],\n    include: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `include` parameter, passed to Pydantic models to set the\n            fields to include.\n            \"\"\"\n        ),\n    ] = None,\n    exclude: Annotated[\n        Optional[IncEx],\n        Doc(\n            \"\"\"\n            Pydantic's `exclude` parameter, passed to Pydantic models to set the\n            fields to exclude.\n            \"\"\"\n        ),\n    ] = None,\n    by_alias: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `by_alias` parameter, passed to Pydantic models to define if\n            the output should use the alias names (when provided) or the Python\n            attribute names. In an API, if you set an alias, it's probably because you\n            want to use it in the result, so you probably want to leave this set to\n            `True`.\n            \"\"\"\n        ),\n    ] = True,\n    exclude_unset: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_unset` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that were not explicitly\n            set (and that only had their default values).\n            \"\"\"\n        ),\n    ] = False,\n    exclude_defaults: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_defaults` parameter, passed to Pydantic models to define\n            if it should exclude from the output the fields that had the same default\n            value, even when they were explicitly set.\n            \"\"\"\n        ),\n    ] = False,\n    exclude_none: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Pydantic's `exclude_none` parameter, passed to Pydantic models to define\n            if it should exclude from the output any fields that have a `None` value.\n            \"\"\"\n        ),\n    ] = False,\n    custom_encoder: Annotated[\n        Optional[Dict[Any, Callable[[Any], Any]]],\n        Doc(\n            \"\"\"\n            Pydantic's `custom_encoder` parameter, passed to Pydantic models to define\n            a custom encoder.\n            \"\"\"\n        ),\n    ] = None,\n    sqlalchemy_safe: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Exclude from the output any fields that start with the name `_sa`.\n\n            This is mainly a hack for compatibility with SQLAlchemy objects, they\n            store internal SQLAlchemy-specific state in attributes named with `_sa`,\n            and those objects can't (and shouldn't be) serialized to JSON.\n            \"\"\"\n        ),\n    ] = True,\n) -> Any:\n    \"\"\"\n    Convert any object to something that can be encoded in JSON.\n\n    This is used internally by FastAPI to make sure anything you return can be\n    encoded as JSON before it is sent to the client.\n\n    You can also use it yourself, for example to convert objects before saving them\n    in a database that supports only JSON.\n\n    Read more about it in the\n    [FastAPI docs for JSON Compatible Encoder](https://fastapi.tiangolo.com/tutorial/encoder/).\n    \"\"\"\n    custom_encoder = custom_encoder or {}\n    if custom_encoder:\n        if type(obj) in custom_encoder:\n            return custom_encoder[type(obj)](obj)\n        else:\n            for encoder_type, encoder_instance in custom_encoder.items():\n                if isinstance(obj, encoder_type):\n                    return encoder_instance(obj)\n    if include is not None and not isinstance(include, (set, dict)):\n        include = set(include)\n    if exclude is not None and not isinstance(exclude, (set, dict)):\n        exclude = set(exclude)\n    if isinstance(obj, BaseModel):\n        # TODO: remove when deprecating Pydantic v1\n        encoders: Dict[Any, Any] = {}\n        if not PYDANTIC_V2:\n            encoders = getattr(obj.__config__, \"json_encoders\", {})  # type: ignore[attr-defined]\n            if custom_encoder:\n                encoders.update(custom_encoder)\n        obj_dict = _model_dump(\n            obj,\n            mode=\"json\",\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n        )\n        if \"__root__\" in obj_dict:\n            obj_dict = obj_dict[\"__root__\"]\n        return jsonable_encoder(\n            obj_dict,\n            exclude_none=exclude_none,\n            exclude_defaults=exclude_defaults,\n            # TODO: remove when deprecating Pydantic v1\n            custom_encoder=encoders,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if dataclasses.is_dataclass(obj):\n        obj_dict = dataclasses.asdict(obj)\n        return jsonable_encoder(\n            obj_dict,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n            exclude_defaults=exclude_defaults,\n            exclude_none=exclude_none,\n            custom_encoder=custom_encoder,\n            sqlalchemy_safe=sqlalchemy_safe,\n        )\n    if isinstance(obj, Enum):\n        return obj.value\n    if isinstance(obj, PurePath):\n        return str(obj)\n    if isinstance(obj, (str, int, float, type(None))):\n        return obj\n    if isinstance(obj, UndefinedType):\n        return None\n    if isinstance(obj, dict):\n        encoded_dict = {}\n        allowed_keys = set(obj.keys())\n        if include is not None:\n            allowed_keys &= set(include)\n        if exclude is not None:\n            allowed_keys -= set(exclude)\n        for key, value in obj.items():\n            if (\n                (\n                    not sqlalchemy_safe\n                    or (not isinstance(key, str))\n                    or (not key.startswith(\"_sa\"))\n                )\n                and (value is not None or not exclude_none)\n                and key in allowed_keys\n            ):\n                encoded_key = jsonable_encoder(\n                    key,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_value = jsonable_encoder(\n                    value,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n                encoded_dict[encoded_key] = encoded_value\n        return encoded_dict\n    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple, deque)):\n        encoded_list = []\n        for item in obj:\n            encoded_list.append(\n                jsonable_encoder(\n                    item,\n                    include=include,\n                    exclude=exclude,\n                    by_alias=by_alias,\n                    exclude_unset=exclude_unset,\n                    exclude_defaults=exclude_defaults,\n                    exclude_none=exclude_none,\n                    custom_encoder=custom_encoder,\n                    sqlalchemy_safe=sqlalchemy_safe,\n                )\n            )\n        return encoded_list\n\n    if type(obj) in ENCODERS_BY_TYPE:\n        return ENCODERS_BY_TYPE[type(obj)](obj)\n    for encoder, classes_tuple in encoders_by_class_tuples.items():\n        if isinstance(obj, classes_tuple):\n            return encoder(obj)\n\n    try:\n        data = dict(obj)\n    except Exception as e:\n        errors: List[Exception] = []\n        errors.append(e)\n        try:\n            data = vars(obj)\n        except Exception as e:\n            errors.append(e)\n            raise ValueError(errors) from e\n    return jsonable_encoder(\n        data,\n        include=include,\n        exclude=exclude,\n        by_alias=by_alias,\n        exclude_unset=exclude_unset,\n        exclude_defaults=exclude_defaults,\n        exclude_none=exclude_none,\n        custom_encoder=custom_encoder,\n        sqlalchemy_safe=sqlalchemy_safe,\n    )"
    },
    {
      "chunk_id": 127,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "import re\nimport warnings\nfrom dataclasses import is_dataclass\nfrom typing import (\n    TYPE_CHECKING,\n    Any,\n    Dict,\n    MutableMapping,\n    Optional,\n    Set,\n    Type,\n    Union,\n    cast,\n)\nfrom weakref import WeakKeyDictionary\n\nimport fastapi\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    BaseConfig,\n    ModelField,\n    PydanticSchemaGenerationError,\n    Undefined,\n    UndefinedType,\n    Validator,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import DefaultPlaceholder, DefaultType\nfrom pydantic import BaseModel, create_model\nfrom pydantic.fields import FieldInfo\nfrom typing_extensions import Literal\n\nif TYPE_CHECKING:  # pragma: nocover\n    from .routing import APIRoute\n\n# Cache for `create_cloned_field`\n_CLONED_TYPES_CACHE: MutableMapping[Type[BaseModel], Type[BaseModel]] = (\n    WeakKeyDictionary()\n)"
    },
    {
      "chunk_id": 128,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n    if status_code is None:\n        return True\n    # Ref: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#patterned-fields-1\n    if status_code in {\n        \"default\",\n        \"1XX\",\n        \"2XX\",\n        \"3XX\",\n        \"4XX\",\n        \"5XX\",\n    }:\n        return True\n    current_status_code = int(status_code)\n    return not (current_status_code < 200 or current_status_code in {204, 205, 304})"
    },
    {
      "chunk_id": 129,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def get_path_param_names(path: str) -> Set[str]:\n    return set(re.findall(\"{(.*?)}\", path))"
    },
    {
      "chunk_id": 130,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def create_model_field(\n    name: str,\n    type_: Any,\n    class_validators: Optional[Dict[str, Validator]] = None,\n    default: Optional[Any] = Undefined,\n    required: Union[bool, UndefinedType] = Undefined,\n    model_config: Type[BaseConfig] = BaseConfig,\n    field_info: Optional[FieldInfo] = None,\n    alias: Optional[str] = None,\n    mode: Literal[\"validation\", \"serialization\"] = \"validation\",\n) -> ModelField:\n    class_validators = class_validators or {}\n    if PYDANTIC_V2:\n        field_info = field_info or FieldInfo(\n            annotation=type_, default=default, alias=alias\n        )\n    else:\n        field_info = field_info or FieldInfo()\n    kwargs = {\"name\": name, \"field_info\": field_info}\n    if PYDANTIC_V2:\n        kwargs.update({\"mode\": mode})\n    else:\n        kwargs.update(\n            {\n                \"type_\": type_,\n                \"class_validators\": class_validators,\n                \"default\": default,\n                \"required\": required,\n                \"model_config\": model_config,\n                \"alias\": alias,\n            }\n        )\n    try:\n        return ModelField(**kwargs)  # type: ignore[arg-type]\n    except (RuntimeError, PydanticSchemaGenerationError):\n        raise fastapi.exceptions.FastAPIError(\n            \"Invalid args for response field! Hint: \"\n            f\"check that {type_} is a valid Pydantic field type. \"\n            \"If you are using a return type annotation that is not a valid Pydantic \"\n            \"field (e.g. Union[Response, dict, None]) you can disable generating the \"\n            \"response model from the type annotation with the path operation decorator \"\n            \"parameter response_model=None. Read more: \"\n            \"https://fastapi.tiangolo.com/tutorial/response-model/\"\n        ) from None"
    },
    {
      "chunk_id": 131,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def create_cloned_field(\n    field: ModelField,\n    *,\n    cloned_types: Optional[MutableMapping[Type[BaseModel], Type[BaseModel]]] = None,\n) -> ModelField:\n    if PYDANTIC_V2:\n        return field\n    # cloned_types caches already cloned types to support recursive models and improve\n    # performance by avoiding unnecessary cloning\n    if cloned_types is None:\n        cloned_types = _CLONED_TYPES_CACHE\n\n    original_type = field.type_\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = cloned_types.get(original_type)\n        if use_type is None:\n            use_type = create_model(original_type.__name__, __base__=original_type)\n            cloned_types[original_type] = use_type\n            for f in original_type.__fields__.values():\n                use_type.__fields__[f.name] = create_cloned_field(\n                    f, cloned_types=cloned_types\n                )\n    new_field = create_model_field(name=field.name, type_=use_type)\n    new_field.has_alias = field.has_alias  # type: ignore[attr-defined]\n    new_field.alias = field.alias  # type: ignore[misc]\n    new_field.class_validators = field.class_validators  # type: ignore[attr-defined]\n    new_field.default = field.default  # type: ignore[misc]\n    new_field.required = field.required  # type: ignore[misc]\n    new_field.model_config = field.model_config  # type: ignore[attr-defined]\n    new_field.field_info = field.field_info\n    new_field.allow_none = field.allow_none  # type: ignore[attr-defined]\n    new_field.validate_always = field.validate_always  # type: ignore[attr-defined]\n    if field.sub_fields:  # type: ignore[attr-defined]\n        new_field.sub_fields = [  # type: ignore[attr-defined]\n            create_cloned_field(sub_field, cloned_types=cloned_types)\n            for sub_field in field.sub_fields  # type: ignore[attr-defined]\n        ]\n    if field.key_field:  # type: ignore[attr-defined]\n        new_field.key_field = create_cloned_field(  # type: ignore[attr-defined]\n            field.key_field,  # type: ignore[attr-defined]\n            cloned_types=cloned_types,\n        )\n    new_field.validators = field.validators  # type: ignore[attr-defined]\n    new_field.pre_validators = field.pre_validators  # type: ignore[attr-defined]\n    new_field.post_validators = field.post_validators  # type: ignore[attr-defined]\n    new_field.parse_json = field.parse_json  # type: ignore[attr-defined]\n    new_field.shape = field.shape  # type: ignore[attr-defined]\n    new_field.populate_validators()  # type: ignore[attr-defined]\n    return new_field"
    },
    {
      "chunk_id": 132,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def generate_operation_id_for_path(\n    *, name: str, path: str, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.utils.generate_operation_id_for_path() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    operation_id = f\"{name}{path}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    operation_id = f\"{operation_id}_{method.lower()}\"\n    return operation_id"
    },
    {
      "chunk_id": 133,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def generate_unique_id(route: \"APIRoute\") -> str:\n    operation_id = f\"{route.name}{route.path_format}\"\n    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n    assert route.methods\n    operation_id = f\"{operation_id}_{list(route.methods)[0].lower()}\"\n    return operation_id"
    },
    {
      "chunk_id": 134,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n    for key, value in update_dict.items():\n        if (\n            key in main_dict\n            and isinstance(main_dict[key], dict)\n            and isinstance(value, dict)\n        ):\n            deep_dict_update(main_dict[key], value)\n        elif (\n            key in main_dict\n            and isinstance(main_dict[key], list)\n            and isinstance(update_dict[key], list)\n        ):\n            main_dict[key] = main_dict[key] + update_dict[key]\n        else:\n            main_dict[key] = value"
    },
    {
      "chunk_id": 135,
      "source": "__internal__/data_repo/fastapi/fastapi/utils.py",
      "content": "def get_value_or_default(\n    first_item: Union[DefaultPlaceholder, DefaultType],\n    *extra_items: Union[DefaultPlaceholder, DefaultType],\n) -> Union[DefaultPlaceholder, DefaultType]:\n    \"\"\"\n    Pass items or `DefaultPlaceholder`s by descending priority.\n\n    The first one to _not_ be a `DefaultPlaceholder` will be returned.\n\n    Otherwise, the first item (a `DefaultPlaceholder`) will be returned.\n    \"\"\"\n    items = (first_item,) + extra_items\n    for item in items:\n        if not isinstance(item, DefaultPlaceholder):\n            return item\n    return first_item"
    },
    {
      "chunk_id": 136,
      "source": "__internal__/data_repo/fastapi/fastapi/security/__init__.py",
      "content": "from .api_key import APIKeyCookie as APIKeyCookie\nfrom .api_key import APIKeyHeader as APIKeyHeader\nfrom .api_key import APIKeyQuery as APIKeyQuery\nfrom .http import HTTPAuthorizationCredentials as HTTPAuthorizationCredentials\nfrom .http import HTTPBasic as HTTPBasic\nfrom .http import HTTPBasicCredentials as HTTPBasicCredentials\nfrom .http import HTTPBearer as HTTPBearer\nfrom .http import HTTPDigest as HTTPDigest\nfrom .oauth2 import OAuth2 as OAuth2\nfrom .oauth2 import OAuth2AuthorizationCodeBearer as OAuth2AuthorizationCodeBearer\nfrom .oauth2 import OAuth2PasswordBearer as OAuth2PasswordBearer\nfrom .oauth2 import OAuth2PasswordRequestForm as OAuth2PasswordRequestForm\nfrom .oauth2 import OAuth2PasswordRequestFormStrict as OAuth2PasswordRequestFormStrict\nfrom .oauth2 import SecurityScopes as SecurityScopes\nfrom .open_id_connect_url import OpenIdConnect as OpenIdConnect"
    },
    {
      "chunk_id": 137,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "import binascii\nfrom base64 import b64decode\nfrom typing import Optional\n\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.openapi.models import HTTPBase as HTTPBaseModel\nfrom fastapi.openapi.models import HTTPBearer as HTTPBearerModel\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.utils import get_authorization_scheme_param\nfrom pydantic import BaseModel\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 138,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPBasicCredentials(BaseModel):\n    \"\"\"\n    The HTTP Basic credentials given as the result of using `HTTPBasic` in a\n    dependency.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n    \"\"\"\n\n    username: Annotated[str, Doc(\"The HTTP Basic username.\")]\n    password: Annotated[str, Doc(\"The HTTP Basic password.\")]"
    },
    {
      "chunk_id": 139,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPAuthorizationCredentials(BaseModel):\n    \"\"\"\n    The HTTP authorization credentials in the result of using `HTTPBearer` or\n    `HTTPDigest` in a dependency.\n\n    The HTTP authorization header value is split by the first space.\n\n    The first part is the `scheme`, the second part is the `credentials`.\n\n    For example, in an HTTP Bearer token scheme, the client will send a header\n    like:\n\n    ```\n    Authorization: Bearer deadbeef12346\n    ```\n\n    In this case:\n\n    * `scheme` will have the value `\"Bearer\"`\n    * `credentials` will have the value `\"deadbeef12346\"`\n    \"\"\"\n\n    scheme: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization scheme extracted from the header value.\n            \"\"\"\n        ),\n    ]\n    credentials: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTTP authorization credentials extracted from the header value.\n            \"\"\"\n        ),\n    ]"
    },
    {
      "chunk_id": 140,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPBase(SecurityBase):\n    def __init__(\n        self,\n        *,\n        scheme: str,\n        scheme_name: Optional[str] = None,\n        description: Optional[str] = None,\n        auto_error: bool = True,\n    ):\n        self.model = HTTPBaseModel(scheme=scheme, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)"
    },
    {
      "chunk_id": 141,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPBasic(HTTPBase):\n    \"\"\"\n    HTTP Basic authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPBasicCredentials` object containing the\n    `username` and the `password`.\n\n    Read more about it in the\n    [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPBasic, HTTPBasicCredentials\n\n    app = FastAPI()\n\n    security = HTTPBasic()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n        return {\"username\": credentials.username, \"password\": credentials.password}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        realm: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                HTTP Basic authentication realm.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Basic authentication is not provided (a\n                header), `HTTPBasic` will automatically cancel the request and send the\n                client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Basic authentication\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP Basic\n                authentication or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.realm = realm\n        self.auto_error = auto_error\n\n    async def __call__(  # type: ignore\n        self, request: Request\n    ) -> Optional[HTTPBasicCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if self.realm:\n            unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n        else:\n            unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n        if not authorization or scheme.lower() != \"basic\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers=unauthorized_headers,\n                )\n            else:\n                return None\n        invalid_user_credentials_exc = HTTPException(\n            status_code=HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers=unauthorized_headers,\n        )\n        try:\n            data = b64decode(param).decode(\"ascii\")\n        except (ValueError, UnicodeDecodeError, binascii.Error):\n            raise invalid_user_credentials_exc  # noqa: B904\n        username, separator, password = data.partition(\":\")\n        if not separator:\n            raise invalid_user_credentials_exc\n        return HTTPBasicCredentials(username=username, password=password)"
    },
    {
      "chunk_id": 142,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPBearer(HTTPBase):\n    \"\"\"\n    HTTP Bearer token authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n\n    app = FastAPI()\n\n    security = HTTPBearer()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        bearerFormat: Annotated[Optional[str], Doc(\"Bearer token format.\")] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Bearer token is not provided (in an\n                `Authorization` header), `HTTPBearer` will automatically cancel the\n                request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Bearer token\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in an HTTP\n                Bearer token or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN,\n                    detail=\"Invalid authentication credentials\",\n                )\n            else:\n                return None\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)"
    },
    {
      "chunk_id": 143,
      "source": "__internal__/data_repo/fastapi/fastapi/security/http.py",
      "content": "class HTTPDigest(HTTPBase):\n    \"\"\"\n    HTTP Digest authentication.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be an `HTTPAuthorizationCredentials` object containing\n    the `scheme` and the `credentials`.\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n\n    app = FastAPI()\n\n    security = HTTPDigest()\n\n\n    @app.get(\"/users/me\")\n    def read_current_user(\n        credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]\n    ):\n        return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the HTTP Digest is not provided, `HTTPDigest` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Digest is not\n                available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in HTTP\n                Digest or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error\n\n    async def __call__(\n        self, request: Request\n    ) -> Optional[HTTPAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"digest\":\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN,\n                detail=\"Invalid authentication credentials\",\n            )\n        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)"
    },
    {
      "chunk_id": 144,
      "source": "__internal__/data_repo/fastapi/fastapi/security/base.py",
      "content": "from fastapi.openapi.models import SecurityBase as SecurityBaseModel"
    },
    {
      "chunk_id": 145,
      "source": "__internal__/data_repo/fastapi/fastapi/security/base.py",
      "content": "class SecurityBase:\n    \"\"\"\n    Base class for security models.\n    \"\"\"\n    def __init__(self, scheme_name: str):\n        self.scheme_name = scheme_name\n        self.model = SecurityBaseModel"
    },
    {
      "chunk_id": 146,
      "source": "__internal__/data_repo/fastapi/fastapi/security/base.py",
      "content": "def some_other_function():\n    pass"
    },
    {
      "chunk_id": 147,
      "source": "__internal__/data_repo/fastapi/fastapi/security/open_id_connect_url.py",
      "content": "from typing import Optional\n\nfrom fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\nfrom fastapi.security.base import SecurityBase\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 148,
      "source": "__internal__/data_repo/fastapi/fastapi/security/open_id_connect_url.py",
      "content": "class OpenIdConnect(SecurityBase):\n    \"\"\"\n    OpenID Connect authentication class. An instance of it would be used as a\n    dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        openIdConnectUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n            The OpenID Connect URL.\n            \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OpenID Connect authentication, it will automatically cancel the request\n                and send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OpenID\n                Connect or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OpenIdConnectModel(\n            openIdConnectUrl=openIdConnectUrl, description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error"
    },
    {
      "chunk_id": 149,
      "source": "__internal__/data_repo/fastapi/fastapi/security/open_id_connect_url.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization"
    },
    {
      "chunk_id": 150,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "from typing import Any, Dict, List, Optional, Union, cast\n\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.openapi.models import OAuth2 as OAuth2Model\nfrom fastapi.openapi.models import OAuthFlows as OAuthFlowsModel\nfrom fastapi.param_functions import Form\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.utils import get_authorization_scheme_param\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n\n# TODO: import from typing when deprecating Python 3.9\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 151,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class OAuth2PasswordRequestForm:\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon characters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        grant_type: Annotated[\n            Union[str, None],\n            Form(pattern=\"password\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". Nevertheless, this dependency class is permissive and\n                allows not passing it. If you want to enforce it, use instead the\n                `OAuth2PasswordRequestFormStrict` dependency.\n                \"\"\"\n            ),\n        ] = None,\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.grant_type = grant_type\n        self.username = username\n        self.password = password\n        self.scopes = scope.split()\n        self.client_id = client_id\n        self.client_secret = client_secret"
    },
    {
      "chunk_id": 152,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n    \"\"\"\n    This is a dependency class to collect the `username` and `password` as form data\n    for an OAuth2 password flow.\n\n    The OAuth2 specification dictates that for a password flow the data should be\n    collected using form data (instead of JSON) and that it should have the specific\n    fields `username` and `password`.\n\n    All the initialization parameters are extracted from the request.\n\n    The only difference between `OAuth2PasswordRequestFormStrict` and\n    `OAuth2PasswordRequestForm` is that `OAuth2PasswordRequestFormStrict` requires the\n    client to send the form field `grant_type` with the value `\"password\"`, which\n    is required in the OAuth2 specification (it seems that for no particular reason),\n    while for `OAuth2PasswordRequestForm` `grant_type` is optional.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n\n    ## Example\n\n    ```python\n    from typing import Annotated\n\n    from fastapi import Depends, FastAPI\n    from fastapi.security import OAuth2PasswordRequestForm\n\n    app = FastAPI()\n\n\n    @app.post(\"/login\")\n    def login(form_data: Annotated[OAuth2PasswordRequestFormStrict, Depends()]):\n        data = {}\n        data[\"scopes\"] = []\n        for scope in form_data.scopes:\n            data[\"scopes\"].append(scope)\n        if form_data.client_id:\n            data[\"client_id\"] = form_data.client_id\n        if form_data.client_secret:\n            data[\"client_secret\"] = form_data.client_secret\n        return data\n    ```\n\n    Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n    You could have custom internal logic to separate it by colon characters (`:`) or\n    similar, and get the two parts `items` and `read`. Many applications do that to\n    group and organize permissions, you could do it as well in your application, just\n    know that that it is application specific, it's not part of the specification.\n\n\n    grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n        This dependency is strict about it. If you want to be permissive, use instead the\n        OAuth2PasswordRequestForm dependency class.\n    username: username string. The OAuth2 spec requires the exact field name \"username\".\n    password: password string. The OAuth2 spec requires the exact field name \"password\".\n    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n        \"items:read items:write users:read profile openid\"\n    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n        using HTTP Basic auth, as: client_id:client_secret\n    \"\"\"\n\n    def __init__(\n        self,\n        grant_type: Annotated[\n            str,\n            Form(pattern=\"password\"),\n            Doc(\n                \"\"\"\n                The OAuth2 spec says it is required and MUST be the fixed string\n                \"password\". This dependency is strict about it. If you want to be\n                permissive, use instead the `OAuth2PasswordRequestForm` dependency\n                class.\n                \"\"\"\n            ),\n        ],\n        username: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `username` string. The OAuth2 spec requires the exact field name\n                `username`.\n                \"\"\"\n            ),\n        ],\n        password: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                `password` string. The OAuth2 spec requires the exact field name\n                `password\".\n                \"\"\"\n            ),\n        ],\n        scope: Annotated[\n            str,\n            Form(),\n            Doc(\n                \"\"\"\n                A single string with actually several scopes separated by spaces. Each\n                scope is also a string.\n\n                For example, a single string with:\n\n                ```python\n                \"items:read items:write users:read profile openid\"\n                ````\n\n                would represent the scopes:\n\n                * `items:read`\n                * `items:write`\n                * `users:read`\n                * `profile`\n                * `openid`\n                \"\"\"\n            ),\n        ] = \"\",\n        client_id: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_id`, it can be sent as part of the form fields.\n                But the OAuth2 specification recommends sending the `client_id` and\n                `client_secret` (if any) using HTTP Basic auth.\n                \"\"\"\n            ),\n        ] = None,\n        client_secret: Annotated[\n            Union[str, None],\n            Form(),\n            Doc(\n                \"\"\"\n                If there's a `client_password` (and a `client_id`), they can be sent\n                as part of the form fields. But the OAuth2 specification recommends\n                sending the `client_id` and `client_secret` (if any) using HTTP Basic\n                auth.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        super().__init__(\n            grant_type=grant_type,\n            username=username,\n            password=password,\n            scope=scope,\n            client_id=client_id,\n            client_secret=client_secret,\n        )"
    },
    {
      "chunk_id": 153,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class OAuth2(SecurityBase):\n    \"\"\"\n    This is the base class for OAuth2 authentication, an instance of it would be used\n    as a dependency. All other OAuth2 classes inherit from it and customize it for\n    each OAuth2 flow.\n\n    You normally would not create a new class inheriting from it but use one of the\n    existing subclasses, and maybe compose them if you want to support multiple flows.\n\n    Read more about it in the\n    [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/).\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        flows: Annotated[\n            Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]],\n            Doc(\n                \"\"\"\n                The dictionary of OAuth2 flows.\n                \"\"\"\n            ),\n        ] = OAuthFlowsModel(),\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model = OAuth2Model(\n            flows=cast(OAuthFlowsModel, flows), description=description\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error"
    },
    {
      "chunk_id": 154,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        if not authorization:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return authorization"
    },
    {
      "chunk_id": 155,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class OAuth2PasswordBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with a password.\n    An instance of it would be used as a dependency.\n\n    Read more about it in the\n    [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).\n    \"\"\"\n\n    def __init__(\n        self,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token. This would be the *path operation*\n                that has `OAuth2PasswordRequestForm` as a dependency.\n                \"\"\"\n            ),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )"
    },
    {
      "chunk_id": 156,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None\n        return param"
    },
    {
      "chunk_id": 157,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class OAuth2AuthorizationCodeBearer(OAuth2):\n    \"\"\"\n    OAuth2 flow for authentication using a bearer token obtained with an OAuth2 code\n    flow. An instance of it would be used as a dependency.\n    \"\"\"\n\n    def __init__(\n        self,\n        authorizationUrl: str,\n        tokenUrl: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                The URL to obtain the OAuth2 token.\n                \"\"\"\n            ),\n        ],\n        refreshUrl: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                The URL to refresh the token and obtain a new one.\n                \"\"\"\n            ),\n        ] = None,\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        scopes: Annotated[\n            Optional[Dict[str, str]],\n            Doc(\n                \"\"\"\n                The OAuth2 scopes that would be required by the *path operations* that\n                use this dependency.\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if no HTTP Authorization header is provided, required for\n                OAuth2 authentication, it will automatically cancel the request and\n                send the client an error.\n\n                If `auto_error` is set to `False`, when the HTTP Authorization header\n                is not available, instead of erroring out, the dependency result will\n                be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, with OAuth2\n                or in a cookie).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        if not scopes:\n            scopes = {}\n        flows = OAuthFlowsModel(\n            authorizationCode=cast(\n                Any,\n                {\n                    \"authorizationUrl\": authorizationUrl,\n                    \"tokenUrl\": tokenUrl,\n                    \"refreshUrl\": refreshUrl,\n                    \"scopes\": scopes,\n                },\n            )\n        )\n        super().__init__(\n            flows=flows,\n            scheme_name=scheme_name,\n            description=description,\n            auto_error=auto_error,\n        )"
    },
    {
      "chunk_id": 158,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, param = get_authorization_scheme_param(authorization)\n        if not authorization or scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_401_UNAUTHORIZED,\n                    detail=\"Not authenticated\",\n                    headers={\"WWW-Authenticate\": \"Bearer\"},\n                )\n            else:\n                return None  # pragma: nocover\n        return param"
    },
    {
      "chunk_id": 159,
      "source": "__internal__/data_repo/fastapi/fastapi/security/oauth2.py",
      "content": "class SecurityScopes:\n    \"\"\"\n    This is a special class that you can define in a parameter in a dependency to\n    obtain the OAuth2 scopes required by all the dependencies in the same chain.\n\n    This way, multiple dependencies can have different scopes, even when used in the\n    same *path operation*. And with this, you can access all the scopes required in\n    all those dependencies in a single place.\n\n    Read more about it in the\n    [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).\n    \"\"\"\n\n    def __init__(\n        self,\n        scopes: Annotated[\n            Optional[List[str]],\n            Doc(\n                \"\"\"\n                This will be filled by FastAPI.\n                \"\"\"\n            ),\n        ] = None,\n    ):\n        self.scopes: Annotated[\n            List[str],\n            Doc(\n                \"\"\"\n                The list of all the scopes required by dependencies.\n                \"\"\"\n            ),\n        ] = scopes or []\n        self.scope_str: Annotated[\n            str,\n            Doc(\n                \"\"\"\n                All the scopes required by all the dependencies in a single string\n                separated by spaces, as defined in the OAuth2 specification.\n                \"\"\"\n            ),\n        ] = \" \".join(self.scopes)"
    },
    {
      "chunk_id": 160,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "from typing import Optional\n\nfrom fastapi.openapi.models import APIKey, APIKeyIn\nfrom fastapi.security.base import SecurityBase\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_403_FORBIDDEN\nfrom typing_extensions import Annotated, Doc"
    },
    {
      "chunk_id": 161,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "class APIKeyBase(SecurityBase):\n    pass"
    },
    {
      "chunk_id": 162,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "class APIKeyQuery(APIKeyBase):\n    \"\"\"\n    API key authentication using a query parameter.\n\n    This defines the name of the query parameter that should be provided in the request\n    with the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the query parameter automatically and provides it as the\n    dependency result. But it doesn't define how to send that API key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyQuery\n\n    app = FastAPI()\n\n    query_scheme = APIKeyQuery(name=\"api_key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(api_key: str = Depends(query_scheme)):\n        return {\"api_key\": api_key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[\n            str,\n            Doc(\"Query parameter name.\"),\n        ],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the query parameter is not provided, `APIKeyQuery` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the query parameter is not\n                available, instead of erroring out, the dependency result will be\n                `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a query\n                parameter or in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error"
    },
    {
      "chunk_id": 163,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.query_params.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key"
    },
    {
      "chunk_id": 164,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "class APIKeyHeader(APIKeyBase):\n    \"\"\"\n    API key authentication using a header.\n\n    This defines the name of the header that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the header automatically and provides it as the dependency\n    result. But it doesn't define how to send that key to the client.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyHeader\n\n    app = FastAPI()\n\n    header_scheme = APIKeyHeader(name=\"x-key\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(key: str = Depends(header_scheme)):\n        return {\"key\": key}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Header name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the header is not provided, `APIKeyHeader` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the header is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a header or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error"
    },
    {
      "chunk_id": 165,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.headers.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key"
    },
    {
      "chunk_id": 166,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "class APIKeyCookie(APIKeyBase):\n    \"\"\"\n    API key authentication using a cookie.\n\n    This defines the name of the cookie that should be provided in the request with\n    the API key and integrates that into the OpenAPI documentation. It extracts\n    the key value sent in the cookie automatically and provides it as the dependency\n    result. But it doesn't define how to set that cookie.\n\n    ## Usage\n\n    Create an instance object and use that object as the dependency in `Depends()`.\n\n    The dependency result will be a string containing the key value.\n\n    ## Example\n\n    ```python\n    from fastapi import Depends, FastAPI\n    from fastapi.security import APIKeyCookie\n\n    app = FastAPI()\n\n    cookie_scheme = APIKeyCookie(name=\"session\")\n\n\n    @app.get(\"/items/\")\n    async def read_items(session: str = Depends(cookie_scheme)):\n        return {\"session\": session}\n    ```\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: Annotated[str, Doc(\"Cookie name.\")],\n        scheme_name: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme name.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        description: Annotated[\n            Optional[str],\n            Doc(\n                \"\"\"\n                Security scheme description.\n\n                It will be included in the generated OpenAPI (e.g. visible at `/docs`).\n                \"\"\"\n            ),\n        ] = None,\n        auto_error: Annotated[\n            bool,\n            Doc(\n                \"\"\"\n                By default, if the cookie is not provided, `APIKeyCookie` will\n                automatically cancel the request and send the client an error.\n\n                If `auto_error` is set to `False`, when the cookie is not available,\n                instead of erroring out, the dependency result will be `None`.\n\n                This is useful when you want to have optional authentication.\n\n                It is also useful when you want to have authentication that can be\n                provided in one of multiple optional ways (for example, in a cookie or\n                in an HTTP Bearer token).\n                \"\"\"\n            ),\n        ] = True,\n    ):\n        self.model: APIKey = APIKey(\n            **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n            name=name,\n            description=description,\n        )\n        self.scheme_name = scheme_name or self.__class__.__name__\n        self.auto_error = auto_error"
    },
    {
      "chunk_id": 167,
      "source": "__internal__/data_repo/fastapi/fastapi/security/api_key.py",
      "content": "async def __call__(self, request: Request) -> Optional[str]:\n        api_key = request.cookies.get(self.model.name)\n        if not api_key:\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        return api_key"
    },
    {
      "chunk_id": 168,
      "source": "__internal__/data_repo/fastapi/fastapi/security/utils.py",
      "content": "from typing import Optional, Tuple"
    },
    {
      "chunk_id": 169,
      "source": "__internal__/data_repo/fastapi/fastapi/security/utils.py",
      "content": "def get_authorization_scheme_param(\n    authorization_header_value: Optional[str],\n) -> Tuple[str, str]:\n    if not authorization_header_value:\n        return \"\", \"\"\n    scheme, _, param = authorization_header_value.partition(\" \")\n    return scheme, param"
    },
    {
      "chunk_id": 170,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/__init__.py",
      "content": "from starlette.middleware import Middleware as Middleware"
    },
    {
      "chunk_id": 171,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/trustedhost.py",
      "content": "from starlette.middleware.trustedhost import (  # noqa\n    TrustedHostMiddleware as TrustedHostMiddleware,\n)"
    },
    {
      "chunk_id": 172,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/gzip.py",
      "content": "from starlette.middleware.gzip import GZipMiddleware as GZipMiddleware  # noqa"
    },
    {
      "chunk_id": 173,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/wsgi.py",
      "content": "from starlette.middleware.wsgi import WSGIMiddleware as WSGIMiddleware  # noqa"
    },
    {
      "chunk_id": 174,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/cors.py",
      "content": "from starlette.middleware.cors import CORSMiddleware as CORSMiddleware  # noqa"
    },
    {
      "chunk_id": 175,
      "source": "__internal__/data_repo/fastapi/fastapi/middleware/httpsredirect.py",
      "content": "from starlette.middleware.httpsredirect import (  # noqa\n    HTTPSRedirectMiddleware as HTTPSRedirectMiddleware,\n)"
    },
    {
      "chunk_id": 176,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 177,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/models.py",
      "content": "from dataclasses import dataclass, field\nfrom typing import Any, Callable, List, Optional, Sequence, Tuple\n\nfrom fastapi._compat import ModelField\nfrom fastapi.security.base import SecurityBase"
    },
    {
      "chunk_id": 178,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/models.py",
      "content": "@dataclass\nclass SecurityRequirement:\n    security_scheme: SecurityBase\n    scopes: Optional[Sequence[str]] = None"
    },
    {
      "chunk_id": 179,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/models.py",
      "content": "@dataclass\nclass Dependant:\n    path_params: List[ModelField] = field(default_factory=list)\n    query_params: List[ModelField] = field(default_factory=list)\n    header_params: List[ModelField] = field(default_factory=list)\n    cookie_params: List[ModelField] = field(default_factory=list)\n    body_params: List[ModelField] = field(default_factory=list)\n    dependencies: List[\"Dependant\"] = field(default_factory=list)\n    security_requirements: List[SecurityRequirement] = field(default_factory=list)\n    name: Optional[str] = None\n    call: Optional[Callable[..., Any]] = None\n    request_param_name: Optional[str] = None\n    websocket_param_name: Optional[str] = None\n    http_connection_param_name: Optional[str] = None\n    response_param_name: Optional[str] = None\n    background_tasks_param_name: Optional[str] = None\n    security_scopes_param_name: Optional[str] = None\n    security_scopes: Optional[List[str]] = None\n    use_cache: bool = True\n    path: Optional[str] = None\n    cache_key: Tuple[Optional[Callable[..., Any]], Tuple[str, ...]] = field(init=False)"
    },
    {
      "chunk_id": 180,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/models.py",
      "content": "def __post_init__(self) -> None:\n        self.cache_key = (self.call, tuple(sorted(set(self.security_scopes or []))))"
    },
    {
      "chunk_id": 181,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "```python"
    },
    {
      "chunk_id": 182,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "import inspect\nfrom contextlib import AsyncExitStack, contextmanager\nfrom copy import copy, deepcopy\nfrom dataclasses import dataclass\nfrom typing import (\n    Any,\n    Callable,\n    Coroutine,\n    Dict,\n    ForwardRef,\n    List,\n    Mapping,\n    Optional,\n    Sequence,\n    Tuple,\n    Type,\n    Union,\n    cast,\n)\n\nimport anyio\nfrom fastapi import params\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    ErrorWrapper,\n    ModelField,\n    RequiredParam,\n    Undefined,\n    _regenerate_error_with_loc,\n    copy_field_info,\n    create_body_model,\n    evaluate_forwardref,\n    field_annotation_is_scalar,\n    get_annotation_from_field_info,\n    get_cached_model_fields,\n    get_missing_field_error,\n    is_bytes_field,\n    is_bytes_sequence_field,\n    is_scalar_field,\n    is_scalar_sequence_field,\n    is_sequence_field,\n    is_uploadfile_or_nonable_uploadfile_annotation,\n    is_uploadfile_sequence_annotation,\n    lenient_issubclass,\n    sequence_types,\n    serialize_sequence_value,\n    value_is_sequence,\n)\nfrom fastapi.background import BackgroundTasks\nfrom fastapi.concurrency import (\n    asynccontextmanager,\n    contextmanager_in_threadpool,\n)\nfrom fastapi.dependencies.models import Dependant, SecurityRequirement\nfrom fastapi.logger import logger\nfrom fastapi.security.base import SecurityBase\nfrom fastapi.security.oauth2 import OAuth2, SecurityScopes\nfrom fastapi.security.open_id_connect_url import OpenIdConnect\nfrom fastapi.utils import create_model_field, get_path_param_names\nfrom pydantic import BaseModel\nfrom pydantic.fields import FieldInfo\nfrom starlette.background import BackgroundTasks as StarletteBackgroundTasks\nfrom starlette.concurrency import run_in_threadpool\nfrom starlette.datastructures import (\n    FormData,\n    Headers,\n    ImmutableMultiDict,\n    QueryParams,\n    UploadFile,\n)\nfrom starlette.requests import HTTPConnection, Request\nfrom starlette.responses import Response\nfrom starlette.websockets import WebSocket\nfrom typing_extensions import Annotated, get_args, get_origin\n\nmultipart_not_installed_error = (\n    'Form data requires \"python-multipart\" to be installed. \\n'\n    'You can install \"python-multipart\" with: \\n\\n'\n    \"pip install python-multipart\\n\"\n)\nmultipart_incorrect_install_error = (\n    'Form data requires \"python-multipart\" to be installed. '\n    'It seems you installed \"multipart\" instead. \\n'\n    'You can remove \"multipart\" with: \\n\\n'\n    \"pip uninstall multipart\\n\\n\"\n)"
    },
    {
      "chunk_id": 183,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def ensure_multipart_is_installed() -> None:\n    try:\n        from python_multipart import __version__\n\n        # Import an attribute that can be mocked/deleted in testing\n        assert __version__ > \"0.0.12\"\n    except (ImportError, AssertionError):\n        try:\n            # __version__ is available in both multiparts, and can be mocked\n            from multipart import __version__  # type: ignore[no-redef,import-untyped]\n\n            assert __version__\n            try:\n                # parse_options_header is only available in the right multipart\n                from multipart.multipart import (  # type: ignore[import-untyped]\n                    parse_options_header,\n                )\n\n                assert parse_options_header\n            except ImportError:\n                logger.error(multipart_incorrect_install_error)\n                raise RuntimeError(multipart_incorrect_install_error) from None\n        except ImportError:\n            logger.error(multipart_not_installed_error)\n            raise RuntimeError(multipart_not_installed_error) from None"
    },
    {
      "chunk_id": 184,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_param_sub_dependant(\n    *,\n    param_name: str,\n    depends: params.Depends,\n    path: str,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    assert depends.dependency\n    return get_sub_dependant(\n        depends=depends,\n        dependency=depends.dependency,\n        path=path,\n        name=param_name,\n        security_scopes=security_scopes,\n    )"
    },
    {
      "chunk_id": 185,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n    assert callable(\n        depends.dependency\n    ), \"A parameter-less dependency must have a callable dependency\"\n    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)"
    },
    {
      "chunk_id": 186,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_sub_dependant(\n    *,\n    depends: params.Depends,\n    dependency: Callable[..., Any],\n    path: str,\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n) -> Dependant:\n    security_requirement = None\n    security_scopes = security_scopes or []\n    if isinstance(depends, params.Security):\n        dependency_scopes = depends.scopes\n        security_scopes.extend(dependency_scopes)\n    if isinstance(dependency, SecurityBase):\n        use_scopes: List[str] = []\n        if isinstance(dependency, (OAuth2, OpenIdConnect)):\n            use_scopes = security_scopes\n        security_requirement = SecurityRequirement(\n            security_scheme=dependency, scopes=use_scopes\n        )\n    sub_dependant = get_dependant(\n        path=path,\n        call=dependency,\n        name=name,\n        security_scopes=security_scopes,\n        use_cache=depends.use_cache,\n    )\n    if security_requirement:\n        sub_dependant.security_requirements.append(security_requirement)\n    return sub_dependant"
    },
    {
      "chunk_id": 187,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "CacheKey = Tuple[Optional[Callable[..., Any]], Tuple[str, ...]]"
    },
    {
      "chunk_id": 188,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_flat_dependant(\n    dependant: Dependant,\n    *,\n    skip_repeats: bool = False,\n    visited: Optional[List[CacheKey]] = None,\n) -> Dependant:\n    if visited is None:\n        visited = []\n    visited.append(dependant.cache_key)\n\n    flat_dependant = Dependant(\n        path_params=dependant.path_params.copy(),\n        query_params=dependant.query_params.copy(),\n        header_params=dependant.header_params.copy(),\n        cookie_params=dependant.cookie_params.copy(),\n        body_params=dependant.body_params.copy(),\n        security_requirements=dependant.security_requirements.copy(),\n        use_cache=dependant.use_cache,\n        path=dependant.path,\n    )\n    for sub_dependant in dependant.dependencies:\n        if skip_repeats and sub_dependant.cache_key in visited:\n            continue\n        flat_sub = get_flat_dependant(\n            sub_dependant, skip_repeats=skip_repeats, visited=visited\n        )\n        flat_dependant.path_params.extend(flat_sub.path_params)\n        flat_dependant.query_params.extend(flat_sub.query_params)\n        flat_dependant.header_params.extend(flat_sub.header_params)\n        flat_dependant.cookie_params.extend(flat_sub.cookie_params)\n        flat_dependant.body_params.extend(flat_sub.body_params)\n        flat_dependant.security_requirements.extend(flat_sub.security_requirements)\n    return flat_dependant"
    },
    {
      "chunk_id": 189,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def _get_flat_fields_from_params(fields: List[ModelField]) -> List[ModelField]:\n    if not fields:\n        return fields\n    first_field = fields[0]\n    if len(fields) == 1 and lenient_issubclass(first_field.type_, BaseModel):\n        fields_to_extract = get_cached_model_fields(first_field.type_)\n        return fields_to_extract\n    return fields"
    },
    {
      "chunk_id": 190,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_flat_params(dependant: Dependant) -> List[ModelField]:\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    path_params = _get_flat_fields_from_params(flat_dependant.path_params)\n    query_params = _get_flat_fields_from_params(flat_dependant.query_params)\n    header_params = _get_flat_fields_from_params(flat_dependant.header_params)\n    cookie_params = _get_flat_fields_from_params(flat_dependant.cookie_params)\n    return path_params + query_params + header_params + cookie_params"
    },
    {
      "chunk_id": 191,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:\n    signature = inspect.signature(call)\n    globalns = getattr(call, \"__globals__\", {})\n    typed_params = [\n        inspect.Parameter(\n            name=param.name,\n            kind=param.kind,\n            default=param.default,\n            annotation=get_typed_annotation(param.annotation, globalns),\n        )\n        for param in signature.parameters.values()\n    ]\n    typed_signature = inspect.Signature(typed_params)\n    return typed_signature"
    },
    {
      "chunk_id": 192,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_typed_annotation(annotation: Any, globalns: Dict[str, Any]) -> Any:\n    if isinstance(annotation, str):\n        annotation = ForwardRef(annotation)\n        annotation = evaluate_forwardref(annotation, globalns, globalns)\n    return annotation"
    },
    {
      "chunk_id": 193,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_typed_return_annotation(call: Callable[..., Any]) -> Any:\n    signature = inspect.signature(call)\n    annotation = signature.return_annotation\n\n    if annotation is inspect.Signature.empty:\n        return None\n\n    globalns = getattr(call, \"__globals__\", {})\n    return get_typed_annotation(annotation, globalns)"
    },
    {
      "chunk_id": 194,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_dependant(\n    *,\n    path: str,\n    call: Callable[..., Any],\n    name: Optional[str] = None,\n    security_scopes: Optional[List[str]] = None,\n    use_cache: bool = True,\n) -> Dependant:\n    path_param_names = get_path_param_names(path)\n    endpoint_signature = get_typed_signature(call)\n    signature_params = endpoint_signature.parameters\n    dependant = Dependant(\n        call=call,\n        name=name,\n        path=path,\n        security_scopes=security_scopes,\n        use_cache=use_cache,\n    )\n    for param_name, param in signature_params.items():\n        is_path_param = param_name in path_param_names\n        param_details = analyze_param(\n            param_name=param_name,\n            annotation=param.annotation,\n            value=param.default,\n            is_path_param=is_path_param,\n        )\n        if param_details.depends is not None:\n            sub_dependant = get_param_sub_dependant(\n                param_name=param_name,\n                depends=param_details.depends,\n                path=path,\n                security_scopes=security_scopes,\n            )\n            dependant.dependencies.append(sub_dependant)\n            continue\n        if add_non_field_param_to_dependency(\n            param_name=param_name,\n            type_annotation=param_details.type_annotation,\n            dependant=dependant,\n        ):\n            assert (\n                param_details.field is None\n            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n            continue\n        assert param_details.field is not None\n        if isinstance(param_details.field.field_info, params.Body):\n            dependant.body_params.append(param_details.field)\n        else:\n            add_param_to_fields(field=param_details.field, dependant=dependant)\n    return dependant"
    },
    {
      "chunk_id": 195,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def add_non_field_param_to_dependency(\n    *, param_name: str, type_annotation: Any, dependant: Dependant\n) -> Optional[bool]:\n    if lenient_issubclass(type_annotation, Request):\n        dependant.request_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, WebSocket):\n        dependant.websocket_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, HTTPConnection):\n        dependant.http_connection_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, Response):\n        dependant.response_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, StarletteBackgroundTasks):\n        dependant.background_tasks_param_name = param_name\n        return True\n    elif lenient_issubclass(type_annotation, SecurityScopes):\n        dependant.security_scopes_param_name = param_name\n        return True\n    return None"
    },
    {
      "chunk_id": 196,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "@dataclass\nclass ParamDetails:\n    type_annotation: Any\n    depends: Optional[params.Depends]\n    field: Optional[ModelField]"
    },
    {
      "chunk_id": 197,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def analyze_param(\n    *,\n    param_name: str,\n    annotation: Any,\n    value: Any,\n    is_path_param: bool,\n) -> ParamDetails:\n    field_info = None\n    depends = None\n    type_annotation: Any = Any\n    use_annotation: Any = Any\n    if annotation is not inspect.Signature.empty:\n        use_annotation = annotation\n        type_annotation = annotation\n    # Extract Annotated info\n    if get_origin(use_annotation) is Annotated:\n        annotated_args = get_args(annotation)\n        type_annotation = annotated_args[0]\n        fastapi_annotations = [\n            arg\n            for arg in annotated_args[1:]\n            if isinstance(arg, (FieldInfo, params.Depends))\n        ]\n        fastapi_specific_annotations = [\n            arg\n            for arg in fastapi_annotations\n            if isinstance(arg, (params.Param, params.Body, params.Depends))\n        ]\n        if fastapi_specific_annotations:\n            fastapi_annotation: Union[FieldInfo, params.Depends, None] = (\n                fastapi_specific_annotations[-1]\n            )\n        else:\n            fastapi_annotation = None\n        # Set default for Annotated FieldInfo\n        if isinstance(fastapi_annotation, FieldInfo):\n            # Copy `field_info` because we mutate `field_info.default` below.\n            field_info = copy_field_info(\n                field_info=fastapi_annotation, annotation=use_annotation\n            )\n            assert (\n                field_info.default is Undefined or field_info.default is RequiredParam\n            ), (\n                f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n                f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n            )\n            if value is not inspect.Signature.empty:\n                assert not is_path_param, \"Path parameters cannot have default values\"\n                field_info.default = value\n            else:\n                field_info.default = RequiredParam\n        # Get Annotated Depends\n        elif isinstance(fastapi_annotation, params.Depends):\n            depends = fastapi_annotation\n    # Get Depends from default value\n    if isinstance(value, params.Depends):\n        assert depends is None, (\n            \"Cannot specify `Depends` in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        assert field_info is None, (\n            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n            f\" default value together for {param_name!r}\"\n        )\n        depends = value\n    # Get FieldInfo from default value\n    elif isinstance(value, FieldInfo):\n        assert field_info is None, (\n            \"Cannot specify FastAPI annotations in `Annotated` and default value\"\n            f\" together for {param_name!r}\"\n        )\n        field_info = value\n        if PYDANTIC_V2:\n            field_info.annotation = type_annotation\n\n    # Get Depends from type annotation\n    if depends is not None and depends.dependency is None:\n        # Copy `depends` before mutating it\n        depends = copy(depends)\n        depends.dependency = type_annotation\n\n    # Handle non-param type annotations like Request\n    if lenient_issubclass(\n        type_annotation,\n        (\n            Request,\n            WebSocket,\n            HTTPConnection,\n            Response,\n            StarletteBackgroundTasks,\n            SecurityScopes,\n        ),\n    ):\n        assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n        assert (\n            field_info is None\n        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n    # Handle default assignations, neither field_info nor depends was not found in Annotated nor default value\n    elif field_info is None and depends is None:\n        default_value = value if value is not inspect.Signature.empty else RequiredParam\n        if is_path_param:\n            # We might check here that `default_value is RequiredParam`, but the fact is that the same\n            # parameter might sometimes be a path parameter and sometimes not. See\n            # `tests/test_infer_param_optionality.py` for an example.\n            field_info = params.Path(annotation=use_annotation)\n        elif is_uploadfile_or_nonable_uploadfile_annotation(\n            type_annotation\n        ) or is_uploadfile_sequence_annotation(type_annotation):\n            field_info = params.File(annotation=use_annotation, default=default_value)\n        elif not field_annotation_is_scalar(annotation=type_annotation):\n            field_info = params.Body(annotation=use_annotation, default=default_value)\n        else:\n            field_info = params.Query(annotation=use_annotation, default=default_value)\n\n    field = None\n    # It's a field_info, not a dependency\n    if field_info is not None:\n        # Handle field_info.in_\n        if is_path_param:\n            assert isinstance(field_info, params.Path), (\n                f\"Cannot use `{field_info.__class__.__name__}` for path param\"\n                f\" {param_name!r}\"\n            )\n        elif (\n            isinstance(field_info, params.Param)\n            and getattr(field_info, \"in_\", None) is None\n        ):\n            field_info.in_ = params.ParamTypes.query\n        use_annotation_from_field_info = get_annotation_from_field_info(\n            use_annotation,\n            field_info,\n            param_name,\n        )\n        if isinstance(field_info, params.Form):\n            ensure_multipart_is_installed()\n        if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n            alias = param_name.replace(\"_\", \"-\")\n        else:\n            alias = field_info.alias or param_name\n        field_info.alias = alias\n        field = create_model_field(\n            name=param_name,\n            type_=use_annotation_from_field_info,\n            default=field_info.default,\n            alias=alias,\n            required=field_info.default in (RequiredParam, Undefined),\n            field_info=field_info,\n        )\n        if is_path_param:\n            assert is_scalar_field(\n                field=field\n            ), \"Path params must be of one of the supported types\"\n        elif isinstance(field_info, params.Query):\n            assert (\n                is_scalar_field(field)\n                or is_scalar_sequence_field(field)\n                or (\n                    lenient_issubclass(field.type_, BaseModel)\n                    # For Pydantic v1\n                    and getattr(field, \"shape\", 1) == 1\n                )\n            )\n\n    return ParamDetails(type_annotation=type_annotation, depends=depends, field=field)"
    },
    {
      "chunk_id": 198,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n    field_info = field.field_info\n    field_info_in = getattr(field_info, \"in_\", None)\n    if field_info_in == params.ParamTypes.path:\n        dependant.path_params.append(field)\n    elif field_info_in == params.ParamTypes.query:\n        dependant.query_params.append(field)\n    elif field_info_in == params.ParamTypes.header:\n        dependant.header_params.append(field)\n    else:\n        assert (\n            field_info_in == params.ParamTypes.cookie\n        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n        dependant.cookie_params.append(field)"
    },
    {
      "chunk_id": 199,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def is_coroutine_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isroutine(call):\n        return inspect.iscoroutinefunction(call)\n    if inspect.isclass(call):\n        return False\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.iscoroutinefunction(dunder_call)"
    },
    {
      "chunk_id": 200,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def is_async_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isasyncgenfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isasyncgenfunction(dunder_call)"
    },
    {
      "chunk_id": 201,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def is_gen_callable(call: Callable[..., Any]) -> bool:\n    if inspect.isgeneratorfunction(call):\n        return True\n    dunder_call = getattr(call, \"__call__\", None)  # noqa: B004\n    return inspect.isgeneratorfunction(dunder_call)"
    },
    {
      "chunk_id": 202,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "async def solve_generator(\n    *, call: Callable[..., Any], stack: AsyncExitStack, sub_values: Dict[str, Any]\n) -> Any:\n    if is_gen_callable(call):\n        cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n    elif is_async_gen_callable(call):\n        cm = asynccontextmanager(call)(**sub_values)\n    return await stack.enter_async_context(cm)"
    },
    {
      "chunk_id": 203,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "@dataclass\nclass SolvedDependency:\n    values: Dict[str, Any]\n    errors: List[Any]\n    background_tasks: Optional[StarletteBackgroundTasks]\n    response: Response\n    dependency_cache: Dict[Tuple[Callable[..., Any], Tuple[str]], Any]"
    },
    {
      "chunk_id": 204,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "async def solve_dependencies(\n    *,\n    request: Union[Request, WebSocket],\n    dependant: Dependant,\n    body: Optional[Union[Dict[str, Any], FormData]] = None,\n    background_tasks: Optional[StarletteBackgroundTasks] = None,\n    response: Optional[Response] = None,\n    dependency_overrides_provider: Optional[Any] = None,\n    dependency_cache: Optional[Dict[Tuple[Callable[..., Any], Tuple[str]], Any]] = None,\n    async_exit_stack: AsyncExitStack,\n    embed_body_fields: bool,\n) -> SolvedDependency:\n    values: Dict[str, Any] = {}\n    errors: List[Any] = []\n    if response is None:\n        response = Response()\n        del response.headers[\"content-length\"]\n        response.status_code = None  # type: ignore\n    dependency_cache = dependency_cache or {}\n    sub_dependant: Dependant\n    for sub_dependant in dependant.dependencies:\n        sub_dependant.call = cast(Callable[..., Any], sub_dependant.call)\n        sub_dependant.cache_key = cast(\n            Tuple[Callable[..., Any], Tuple[str]], sub_dependant.cache_key\n        )\n        call = sub_dependant.call\n        use_sub_dependant = sub_dependant\n        if (\n            dependency_overrides_provider\n            and dependency_overrides_provider.dependency_overrides\n        ):\n            original_call = sub_dependant.call\n            call = getattr(\n                dependency_overrides_provider, \"dependency_overrides\", {}\n            ).get(original_call, original_call)\n            use_path: str = sub_dependant.path  # type: ignore\n            use_sub_dependant = get_dependant(\n                path=use_path,\n                call=call,\n                name=sub_dependant.name,\n                security_scopes=sub_dependant.security_scopes,\n            )\n\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=use_sub_dependant,\n            body=body,\n            background_tasks=background_tasks,\n            response=response,\n            dependency_overrides_provider=dependency_overrides_provider,\n            dependency_cache=dependency_cache,\n            async_exit_stack=async_exit_stack,\n            embed_body_fields=embed_body_fields,\n        )\n        background_tasks = solved_result.background_tasks\n        dependency_cache.update(solved_result.dependency_cache)\n        if solved_result.errors:\n            errors.extend(solved_result.errors)\n            continue\n        if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n            solved = dependency_cache[sub_dependant.cache_key]\n        elif is_gen_callable(call) or is_async_gen_callable(call):\n            solved = await solve_generator(\n                call=call, stack=async_exit_stack, sub_values=solved_result.values\n            )\n        elif is_coroutine_callable(call):\n            solved = await call(**solved_result.values)\n        else:\n            solved = await run_in_threadpool(call, **solved_result.values)\n        if sub_dependant.name is not None:\n            values[sub_dependant.name] = solved\n        if sub_dependant.cache_key not in dependency_cache:\n            dependency_cache[sub_dependant.cache_key] = solved\n    path_values, path_errors = request_params_to_args(\n        dependant.path_params, request.path_params\n    )\n    query_values, query_errors = request_params_to_args(\n        dependant.query_params, request.query_params\n    )\n    header_values, header_errors = request_params_to_args(\n        dependant.header_params, request.headers\n    )\n    cookie_values, cookie_errors = request_params_to_args(\n        dependant.cookie_params, request.cookies\n    )\n    values.update(path_values)\n    values.update(query_values)\n    values.update(header_values)\n    values.update(cookie_values)\n    errors += path_errors + query_errors + header_errors + cookie_errors\n    if dependant.body_params:\n        (\n            body_values,\n            body_errors,\n        ) = await request_body_to_args(  # body_params checked above\n            body_fields=dependant.body_params,\n            received_body=body,\n            embed_body_fields=embed_body_fields,\n        )\n        values.update(body_values)\n        errors.extend(body_errors)\n    if dependant.http_connection_param_name:\n        values[dependant.http_connection_param_name] = request\n    if dependant.request_param_name and isinstance(request, Request):\n        values[dependant.request_param_name] = request\n    elif dependant.websocket_param_name and isinstance(request, WebSocket):\n        values[dependant.websocket_param_name] = request\n    if dependant.background_tasks_param_name:\n        if background_tasks is None:\n            background_tasks = BackgroundTasks()\n        values[dependant.background_tasks_param_name] = background_tasks\n    if dependant.response_param_name:\n        values[dependant.response_param_name] = response\n    if dependant.security_scopes_param_name:\n        values[dependant.security_scopes_param_name] = SecurityScopes(\n            scopes=dependant.security_scopes\n        )\n    return SolvedDependency(\n        values=values,\n        errors=errors,\n        background_tasks=background_tasks,\n        response=response,\n        dependency_cache=dependency_cache,\n    )"
    },
    {
      "chunk_id": 205,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def _validate_value_with_model_field(\n    *, field: ModelField, value: Any, values: Dict[str, Any], loc: Tuple[str, ...]\n) -> Tuple[Any, List[Any]]:\n    if value is None:\n        if field.required:\n            return None, [get_missing_field_error(loc=loc)]\n        else:\n            return deepcopy(field.default), []\n    v_, errors_ = field.validate(value, values, loc=loc)\n    if isinstance(errors_, ErrorWrapper):\n        return None, [errors_]\n    elif isinstance(errors_, list):\n        new_errors = _regenerate_error_with_loc(errors=errors_, loc_prefix=())\n        return None, new_errors\n    else:\n        return v_, []"
    },
    {
      "chunk_id": 206,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def _get_multidict_value(\n    field: ModelField, values: Mapping[str, Any], alias: Union[str, None] = None\n) -> Any:\n    alias = alias or field.alias\n    if is_sequence_field(field) and isinstance(values, (ImmutableMultiDict, Headers)):\n        value = values.getlist(alias)\n    else:\n        value = values.get(alias, None)\n    if (\n        value is None\n        or (\n            isinstance(field.field_info, params.Form)\n            and isinstance(value, str)  # For type checks\n            and value == \"\"\n        )\n        or (is_sequence_field(field) and len(value) == 0)\n    ):\n        if field.required:\n            return\n        else:\n            return deepcopy(field.default)\n    return value"
    },
    {
      "chunk_id": 207,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def request_params_to_args(\n    fields: Sequence[ModelField],\n    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n) -> Tuple[Dict[str, Any], List[Any]]:\n    values: Dict[str, Any] = {}\n    errors: List[Dict[str, Any]] = []\n\n    if not fields:\n        return values, errors\n\n    first_field = fields[0]\n    fields_to_extract = fields\n    single_not_embedded_field = False\n    if len(fields) == 1 and lenient_issubclass(first_field.type_, BaseModel):\n        fields_to_extract = get_cached_model_fields(first_field.type_)\n        single_not_embedded_field = True\n\n    params_to_process: Dict[str, Any] = {}\n\n    processed_keys = set()\n\n    for field in fields_to_extract:\n        alias = None\n        if isinstance(received_params, Headers):\n            # Handle fields extracted from a Pydantic Model for a header, each field\n            # doesn't have a FieldInfo of type Header with the default convert_underscores=True\n            convert_underscores = getattr(field.field_info, \"convert_underscores\", True)\n            if convert_underscores:\n                alias = (\n                    field.alias\n                    if field.alias != field.name\n                    else field.name.replace(\"_\", \"-\")\n                )\n        value = _get_multidict_value(field, received_params, alias=alias)\n        if value is not None:\n            params_to_process[field.name] = value\n        processed_keys.add(alias or field.alias)\n        processed_keys.add(field.name)\n\n    for key, value in received_params.items():\n        if key not in processed_keys:\n            params_to_process[key] = value\n\n    if single_not_embedded_field:\n        field_info = first_field.field_info\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        loc: Tuple[str, ...] = (field_info.in_.value,)\n        v_, errors_ = _validate_value_with_model_field(\n            field=first_field, value=params_to_process, values=values, loc=loc\n        )\n        return {first_field.name: v_}, errors_\n\n    for field in fields:\n        value = _get_multidict_value(field, received_params)\n        field_info = field.field_info\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        loc = (field_info.in_.value, field.alias)\n        v_, errors_ = _validate_value_with_model_field(\n            field=field, value=value, values=values, loc=loc\n        )\n        if errors_:\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors"
    },
    {
      "chunk_id": 208,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n    if not fields:\n        return False\n    # More than one dependency could have the same field, it would show up as multiple\n    # fields but it's the same one, so count them by name\n    body_param_names_set = {field.name for field in fields}\n    # A top level field has to be a single field, not multiple\n    if len(body_param_names_set) > 1:\n        return True\n    first_field = fields[0]\n    # If it explicitly specifies it is embedded, it has to be embedded\n    if getattr(first_field.field_info, \"embed\", None):\n        return True\n    # If it's a Form (or File) field, it has to be a BaseModel to be top level\n    # otherwise it has to be embedded, so that the key value pair can be extracted\n    if isinstance(first_field.field_info, params.Form) and not lenient_issubclass(\n        first_field.type_, BaseModel\n    ):\n        return True\n    return False"
    },
    {
      "chunk_id": 209,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "async def _extract_form_body(\n    body_fields: List[ModelField],\n    received_body: FormData,\n) -> Dict[str, Any]:\n    values = {}\n    first_field = body_fields[0]\n    first_field_info = first_field.field_info\n\n    for field in body_fields:\n        value = _get_multidict_value(field, received_body)\n        if (\n            isinstance(first_field_info, params.File)\n            and is_bytes_field(field)\n            and isinstance(value, UploadFile)\n        ):\n            value = await value.read()\n        elif (\n            is_bytes_sequence_field(field)\n            and isinstance(first_field_info, params.File)\n            and value_is_sequence(value)\n        ):\n            # For types\n            assert isinstance(value, sequence_types)  # type: ignore[arg-type]\n            results: List[Union[bytes, str]] = []\n\n            async def process_fn(\n                fn: Callable[[], Coroutine[Any, Any, Any]],\n            ) -> None:\n                result = await fn()\n                results.append(result)  # noqa: B023\n\n            async with anyio.create_task_group() as tg:\n                for sub_value in value:\n                    tg.start_soon(process_fn, sub_value.read)\n            value = serialize_sequence_value(field=field, value=results)\n        if value is not None:\n            values[field.alias] = value\n    for key, value in received_body.items():\n        if key not in values:\n            values[key] = value\n    return values"
    },
    {
      "chunk_id": 210,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "async def request_body_to_args(\n    body_fields: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n    embed_body_fields: bool,\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    values: Dict[str, Any] = {}\n    errors: List[Dict[str, Any]] = []\n    assert body_fields, \"request_body_to_args() should be called with fields\"\n    single_not_embedded_field = len(body_fields) == 1 and not embed_body_fields\n    first_field = body_fields[0]\n    body_to_process = received_body\n\n    fields_to_extract: List[ModelField] = body_fields\n\n    if single_not_embedded_field and lenient_issubclass(first_field.type_, BaseModel):\n        fields_to_extract = get_cached_model_fields(first_field.type_)\n\n    if isinstance(received_body, FormData):\n        body_to_process = await _extract_form_body(fields_to_extract, received_body)\n\n    if single_not_embedded_field:\n        loc: Tuple[str, ...] = (\"body\",)\n        v_, errors_ = _validate_value_with_model_field(\n            field=first_field, value=body_to_process, values=values, loc=loc\n        )\n        return {first_field.name: v_}, errors_\n    for field in body_fields:\n        loc = (\"body\", field.alias)\n        value: Optional[Any] = None\n        if body_to_process is not None:\n            try:\n                value = body_to_process.get(field.alias)\n            # If the received body is a list, not a dict\n            except AttributeError:\n                errors.append(get_missing_field_error(loc))\n                continue\n        v_, errors_ = _validate_value_with_model_field(\n            field=field, value=value, values=values, loc=loc\n        )\n        if errors_:\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors"
    },
    {
      "chunk_id": 211,
      "source": "__internal__/data_repo/fastapi/fastapi/dependencies/utils.py",
      "content": "def get_body_field(\n    *, flat_dependant: Dependant, name: str, embed_body_fields: bool\n) -> Optional[ModelField]:\n    \"\"\"\n    Get a ModelField representing the request body for a path operation, combining\n    all body parameters into a single field if necessary.\n\n    Used to check if it's form data (with `isinstance(body_field, params.Form)`)\n    or JSON and to generate the JSON Schema for a request body.\n\n    This is **not** used to validate/parse the request body, that's done with each\n    individual body parameter.\n    \"\"\"\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    if not embed_body_fields:\n        return first_param\n    model_name = \"Body_\" + name\n    BodyModel = create_body_model(\n        fields=flat_dependant.body_params, model_name=model_name\n    )\n    required = any(True for f in flat_dependant.body_params if f.required)\n    BodyFieldInfo_kwargs: Dict[str, Any] = {\n        \"annotation\": BodyModel,\n        \"alias\": \"body\",\n    }\n    if not required:\n        BodyFieldInfo_kwargs[\"default\"] = None\n    if any(isinstance(f.field_info, params.File) for f in flat_dependant.body_params):\n        BodyFieldInfo: Type[params.Body] = params.File\n    elif any(isinstance(f.field_info, params.Form) for f in flat_dependant.body_params):\n        BodyFieldInfo = params.Form\n    else:\n        BodyFieldInfo = params.Body\n\n        body_param_media_types = [\n            f.field_info.media_type\n            for f in flat_dependant.body_params\n            if isinstance(f.field_info, params.Body)\n        ]\n        if len(set(body_param_media_types)) == 1:\n            BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n    final_field = create_model_field(\n        name=\"body\",\n        type_=BodyModel,\n        required=required,\n        alias=\"body\",\n        field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n    )\n    return final_field\n```"
    },
    {
      "chunk_id": 212,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 213,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/constants.py",
      "content": "METHODS_WITH_BODY = {\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"}"
    },
    {
      "chunk_id": 214,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/constants.py",
      "content": "REF_PREFIX = \"#/components/schemas/\"\nREF_TEMPLATE = \"#/components/schemas/{model}\""
    },
    {
      "chunk_id": 215,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "from enum import Enum\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Set, Type, Union\n\nfrom fastapi._compat import (\n    PYDANTIC_V2,\n    CoreSchema,\n    GetJsonSchemaHandler,\n    JsonSchemaValue,\n    _model_rebuild,\n    with_info_plain_validator_function,\n)\nfrom fastapi.logger import logger\nfrom pydantic import AnyUrl, BaseModel, Field\nfrom typing_extensions import Annotated, Literal, TypedDict\nfrom typing_extensions import deprecated as typing_deprecated"
    },
    {
      "chunk_id": 216,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "try:\n    import email_validator\n\n    assert email_validator  # make autoflake ignore the unused import\n    from pydantic import EmailStr\nexcept ImportError:  # pragma: no cover\n\n    class EmailStr(str):  # type: ignore\n        @classmethod\n        def __get_validators__(cls) -> Iterable[Callable[..., Any]]:\n            yield cls.validate\n\n        @classmethod\n        def validate(cls, v: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(v)\n\n        @classmethod\n        def _validate(cls, __input_value: Any, _: Any) -> str:\n            logger.warning(\n                \"email-validator not installed, email fields will be treated as str.\\n\"\n                \"To install, run: pip install email-validator\"\n            )\n            return str(__input_value)\n\n        @classmethod\n        def __get_pydantic_json_schema__(\n            cls, core_schema: CoreSchema, handler: GetJsonSchemaHandler\n        ) -> JsonSchemaValue:\n            return {\"type\": \"string\", \"format\": \"email\"}\n\n        @classmethod\n        def __get_pydantic_core_schema__(\n            cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n        ) -> CoreSchema:\n            return with_info_plain_validator_function(cls._validate)"
    },
    {
      "chunk_id": 217,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class BaseModelWithConfig(BaseModel):\n    if PYDANTIC_V2:\n        model_config = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\""
    },
    {
      "chunk_id": 218,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Contact(BaseModelWithConfig):\n    name: Optional[str] = None\n    url: Optional[AnyUrl] = None\n    email: Optional[EmailStr] = None"
    },
    {
      "chunk_id": 219,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class License(BaseModelWithConfig):\n    name: str\n    identifier: Optional[str] = None\n    url: Optional[AnyUrl] = None"
    },
    {
      "chunk_id": 220,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Info(BaseModelWithConfig):\n    title: str\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    termsOfService: Optional[str] = None\n    contact: Optional[Contact] = None\n    license: Optional[License] = None\n    version: str"
    },
    {
      "chunk_id": 221,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class ServerVariable(BaseModelWithConfig):\n    enum: Annotated[Optional[List[str]], Field(min_length=1)] = None\n    default: str\n    description: Optional[str] = None"
    },
    {
      "chunk_id": 222,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Server(BaseModelWithConfig):\n    url: Union[AnyUrl, str]\n    description: Optional[str] = None\n    variables: Optional[Dict[str, ServerVariable]] = None"
    },
    {
      "chunk_id": 223,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Reference(BaseModel):\n    ref: str = Field(alias=\"$ref\")"
    },
    {
      "chunk_id": 224,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Discriminator(BaseModel):\n    propertyName: str\n    mapping: Optional[Dict[str, str]] = None"
    },
    {
      "chunk_id": 225,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class XML(BaseModelWithConfig):\n    name: Optional[str] = None\n    namespace: Optional[str] = None\n    prefix: Optional[str] = None\n    attribute: Optional[bool] = None\n    wrapped: Optional[bool] = None"
    },
    {
      "chunk_id": 226,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class ExternalDocumentation(BaseModelWithConfig):\n    description: Optional[str] = None\n    url: AnyUrl"
    },
    {
      "chunk_id": 227,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Schema(BaseModelWithConfig):\n    schema_: Optional[str] = Field(default=None, alias=\"$schema\")\n    vocabulary: Optional[str] = Field(default=None, alias=\"$vocabulary\")\n    id: Optional[str] = Field(default=None, alias=\"$id\")\n    anchor: Optional[str] = Field(default=None, alias=\"$anchor\")\n    dynamicAnchor: Optional[str] = Field(default=None, alias=\"$dynamicAnchor\")\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    dynamicRef: Optional[str] = Field(default=None, alias=\"$dynamicRef\")\n    defs: Optional[Dict[str, \"SchemaOrBool\"]] = Field(default=None, alias=\"$defs\")\n    comment: Optional[str] = Field(default=None, alias=\"$comment\")\n    allOf: Optional[List[\"SchemaOrBool\"]] = None\n    anyOf: Optional[List[\"SchemaOrBool\"]] = None\n    oneOf: Optional[List[\"SchemaOrBool\"]] = None\n    not_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"not\")\n    if_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"if\")\n    then: Optional[\"SchemaOrBool\"] = None\n    else_: Optional[\"SchemaOrBool\"] = Field(default=None, alias=\"else\")\n    dependentSchemas: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    prefixItems: Optional[List[\"SchemaOrBool\"]] = None\n    items: Optional[Union[\"SchemaOrBool\", List[\"SchemaOrBool\"]]] = None\n    contains: Optional[\"SchemaOrBool\"] = None\n    properties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    patternProperties: Optional[Dict[str, \"SchemaOrBool\"]] = None\n    additionalProperties: Optional[\"SchemaOrBool\"] = None\n    propertyNames: Optional[\"SchemaOrBool\"] = None\n    unevaluatedItems: Optional[\"SchemaOrBool\"] = None\n    unevaluatedProperties: Optional[\"SchemaOrBool\"] = None\n    type: Optional[str] = None\n    enum: Optional[List[Any]] = None\n    const: Optional[Any] = None\n    multipleOf: Optional[float] = Field(default=None, gt=0)\n    maximum: Optional[float] = None\n    exclusiveMaximum: Optional[float] = None\n    minimum: Optional[float] = None\n    exclusiveMinimum: Optional[float] = None\n    maxLength: Optional[int] = Field(default=None, ge=0)\n    minLength: Optional[int] = Field(default=None, ge=0)\n    pattern: Optional[str] = None\n    maxItems: Optional[int] = Field(default=None, ge=0)\n    minItems: Optional[int] = Field(default=None, ge=0)\n    uniqueItems: Optional[bool] = None\n    maxContains: Optional[int] = Field(default=None, ge=0)\n    minContains: Optional[int] = Field(default=None, ge=0)\n    maxProperties: Optional[int] = Field(default=None, ge=0)\n    minProperties: Optional[int] = Field(default=None, ge=0)\n    required: Optional[List[str]] = None\n    dependentRequired: Optional[Dict[str, Set[str]]] = None\n    format: Optional[str] = None\n    contentEncoding: Optional[str] = None\n    contentMediaType: Optional[str] = None\n    contentSchema: Optional[\"SchemaOrBool\"] = None\n    title: Optional[str] = None\n    description: Optional[str] = None\n    default: Optional[Any] = None\n    deprecated: Optional[bool] = None\n    readOnly: Optional[bool] = None\n    writeOnly: Optional[bool] = None\n    examples: Optional[List[Any]] = None\n    discriminator: Optional[Discriminator] = None\n    xml: Optional[XML] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    example: Annotated[\n        Optional[Any],\n        typing_deprecated(\n            \"Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, \"\n            \"although still supported. Use examples instead.\"\n        ),\n    ] = None"
    },
    {
      "chunk_id": 228,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "SchemaOrBool = Union[Schema, bool]"
    },
    {
      "chunk_id": 229,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Example(TypedDict, total=False):\n    summary: Optional[str]\n    description: Optional[str]\n    value: Optional[Any]\n    externalValue: Optional[AnyUrl]\n\n    if PYDANTIC_V2:  # type: ignore [misc]\n        __pydantic_config__ = {\"extra\": \"allow\"}\n\n    else:\n\n        class Config:\n            extra = \"allow\""
    },
    {
      "chunk_id": 230,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class ParameterInType(Enum):\n    query = \"query\"\n    header = \"header\"\n    path = \"path\"\n    cookie = \"cookie\""
    },
    {
      "chunk_id": 231,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Encoding(BaseModelWithConfig):\n    contentType: Optional[str] = None\n    headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None"
    },
    {
      "chunk_id": 232,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class MediaType(BaseModelWithConfig):\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    encoding: Optional[Dict[str, Encoding]] = None"
    },
    {
      "chunk_id": 233,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class ParameterBase(BaseModelWithConfig):\n    description: Optional[str] = None\n    required: Optional[bool] = None\n    deprecated: Optional[bool] = None\n    style: Optional[str] = None\n    explode: Optional[bool] = None\n    allowReserved: Optional[bool] = None\n    schema_: Optional[Union[Schema, Reference]] = Field(default=None, alias=\"schema\")\n    example: Optional[Any] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    content: Optional[Dict[str, MediaType]] = None"
    },
    {
      "chunk_id": 234,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Parameter(ParameterBase):\n    name: str\n    in_: ParameterInType = Field(alias=\"in\")"
    },
    {
      "chunk_id": 235,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Header(ParameterBase):\n    pass"
    },
    {
      "chunk_id": 236,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class RequestBody(BaseModelWithConfig):\n    description: Optional[str] = None\n    content: Dict[str, MediaType]\n    required: Optional[bool] = None"
    },
    {
      "chunk_id": 237,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Link(BaseModelWithConfig):\n    operationRef: Optional[str] = None\n    operationId: Optional[str] = None\n    parameters: Optional[Dict[str, Union[Any, str]]] = None\n    requestBody: Optional[Union[Any, str]] = None\n    description: Optional[str] = None\n    server: Optional[Server] = None"
    },
    {
      "chunk_id": 238,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Response(BaseModelWithConfig):\n    description: str\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    content: Optional[Dict[str, MediaType]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None"
    },
    {
      "chunk_id": 239,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Operation(BaseModelWithConfig):\n    tags: Optional[List[str]] = None\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None\n    operationId: Optional[str] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None\n    requestBody: Optional[Union[RequestBody, Reference]] = None\n    responses: Optional[Dict[str, Union[Response, Any]]] = None\n    callbacks: Optional[Dict[str, Union[Dict[str, \"PathItem\"], Reference]]] = None\n    deprecated: Optional[bool] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    servers: Optional[List[Server]] = None"
    },
    {
      "chunk_id": 240,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class PathItem(BaseModelWithConfig):\n    ref: Optional[str] = Field(default=None, alias=\"$ref\")\n    summary: Optional[str] = None\n    description: Optional[str] = None\n    get: Optional[Operation] = None\n    put: Optional[Operation] = None\n    post: Optional[Operation] = None\n    delete: Optional[Operation] = None\n    options: Optional[Operation] = None\n    head: Optional[Operation] = None\n    patch: Optional[Operation] = None\n    trace: Optional[Operation] = None\n    servers: Optional[List[Server]] = None\n    parameters: Optional[List[Union[Parameter, Reference]]] = None"
    },
    {
      "chunk_id": 241,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class SecuritySchemeType(Enum):\n    apiKey = \"apiKey\"\n    http = \"http\"\n    oauth2 = \"oauth2\"\n    openIdConnect = \"openIdConnect\""
    },
    {
      "chunk_id": 242,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class SecurityBase(BaseModelWithConfig):\n    type_: SecuritySchemeType = Field(alias=\"type\")\n    description: Optional[str] = None"
    },
    {
      "chunk_id": 243,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class APIKeyIn(Enum):\n    query = \"query\"\n    header = \"header\"\n    cookie = \"cookie\""
    },
    {
      "chunk_id": 244,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class APIKey(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.apiKey, alias=\"type\")\n    in_: APIKeyIn = Field(alias=\"in\")\n    name: str"
    },
    {
      "chunk_id": 245,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class HTTPBase(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.http, alias=\"type\")\n    scheme: str"
    },
    {
      "chunk_id": 246,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class HTTPBearer(HTTPBase):\n    scheme: Literal[\"bearer\"] = \"bearer\"\n    bearerFormat: Optional[str] = None"
    },
    {
      "chunk_id": 247,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlow(BaseModelWithConfig):\n    refreshUrl: Optional[str] = None\n    scopes: Dict[str, str] = {}"
    },
    {
      "chunk_id": 248,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlowImplicit(OAuthFlow):\n    authorizationUrl: str"
    },
    {
      "chunk_id": 249,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlowPassword(OAuthFlow):\n    tokenUrl: str"
    },
    {
      "chunk_id": 250,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlowClientCredentials(OAuthFlow):\n    tokenUrl: str"
    },
    {
      "chunk_id": 251,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlowAuthorizationCode(OAuthFlow):\n    authorizationUrl: str\n    tokenUrl: str"
    },
    {
      "chunk_id": 252,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuthFlows(BaseModelWithConfig):\n    implicit: Optional[OAuthFlowImplicit] = None\n    password: Optional[OAuthFlowPassword] = None\n    clientCredentials: Optional[OAuthFlowClientCredentials] = None\n    authorizationCode: Optional[OAuthFlowAuthorizationCode] = None"
    },
    {
      "chunk_id": 253,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OAuth2(SecurityBase):\n    type_: SecuritySchemeType = Field(default=SecuritySchemeType.oauth2, alias=\"type\")\n    flows: OAuthFlows"
    },
    {
      "chunk_id": 254,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OpenIdConnect(SecurityBase):\n    type_: SecuritySchemeType = Field(\n        default=SecuritySchemeType.openIdConnect, alias=\"type\"\n    )\n    openIdConnectUrl: str"
    },
    {
      "chunk_id": 255,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "SecurityScheme = Union[APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer]"
    },
    {
      "chunk_id": 256,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Components(BaseModelWithConfig):\n    schemas: Optional[Dict[str, Union[Schema, Reference]]] = None\n    responses: Optional[Dict[str, Union[Response, Reference]]] = None\n    parameters: Optional[Dict[str, Union[Parameter, Reference]]] = None\n    examples: Optional[Dict[str, Union[Example, Reference]]] = None\n    requestBodies: Optional[Dict[str, Union[RequestBody, Reference]]] = None\n    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n    securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None\n    links: Optional[Dict[str, Union[Link, Reference]]] = None\n    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference, Any]]] = None\n    pathItems: Optional[Dict[str, Union[PathItem, Reference]]] = None"
    },
    {
      "chunk_id": 257,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class Tag(BaseModelWithConfig):\n    name: str\n    description: Optional[str] = None\n    externalDocs: Optional[ExternalDocumentation] = None"
    },
    {
      "chunk_id": 258,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "class OpenAPI(BaseModelWithConfig):\n    openapi: str\n    info: Info\n    jsonSchemaDialect: Optional[str] = None\n    servers: Optional[List[Server]] = None\n    paths: Optional[Dict[str, Union[PathItem, Any]]] = None\n    webhooks: Optional[Dict[str, Union[PathItem, Reference]]] = None\n    components: Optional[Components] = None\n    security: Optional[List[Dict[str, List[str]]]] = None\n    tags: Optional[List[Tag]] = None\n    externalDocs: Optional[ExternalDocumentation] = None"
    },
    {
      "chunk_id": 259,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/models.py",
      "content": "_model_rebuild(Schema)\n_model_rebuild(Operation)\n_model_rebuild(Encoding)"
    },
    {
      "chunk_id": 260,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/docs.py",
      "content": "import json\nfrom typing import Any, Dict, Optional\n\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.responses import HTMLResponse\nfrom typing_extensions import Annotated, Doc\n\nswagger_ui_default_parameters: Annotated[\n    Dict[str, Any],\n    Doc(\n        \"\"\"\n        Default configurations for Swagger UI.\n\n        You can use it as a template to add any other configurations needed.\n        \"\"\"\n    ),\n] = {\n    \"dom_id\": \"#swagger-ui\",\n    \"layout\": \"BaseLayout\",\n    \"deepLinking\": True,\n    \"showExtensions\": True,\n    \"showCommonExtensions\": True,\n}"
    },
    {
      "chunk_id": 261,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/docs.py",
      "content": "def get_swagger_ui_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that Swagger UI should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    swagger_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js\",\n    swagger_css_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the Swagger UI CSS.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css\",\n    swagger_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    oauth2_redirect_url: Annotated[\n        Optional[str],\n        Doc(\n            \"\"\"\n            The OAuth2 redirect URL, it is normally automatically handled by FastAPI.\n            \"\"\"\n        ),\n    ] = None,\n    init_oauth: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            A dictionary with Swagger UI OAuth2 initialization configurations.\n            \"\"\"\n        ),\n    ] = None,\n    swagger_ui_parameters: Annotated[\n        Optional[Dict[str, Any]],\n        Doc(\n            \"\"\"\n            Configuration parameters for Swagger UI.\n\n            It defaults to [swagger_ui_default_parameters][fastapi.openapi.docs.swagger_ui_default_parameters].\n            \"\"\"\n        ),\n    ] = None,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML  that loads Swagger UI for the interactive\n    API docs (normally served at `/docs`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load Swagger UI's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Configure Swagger UI](https://fastapi.tiangolo.com/how-to/configure-swagger-ui/)\n    and the [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()\n    if swagger_ui_parameters:\n        current_swagger_ui_parameters.update(swagger_ui_parameters)\n\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"{swagger_css_url}\">\n    <link rel=\"shortcut icon\" href=\"{swagger_favicon_url}\">\n    <title>{title}</title>\n    </head>\n    <body>\n    <div id=\"swagger-ui\">\n    </div>\n    <script src=\"{swagger_js_url}\"></script>\n    <!-- `SwaggerUIBundle` is now available on the page -->\n    <script>\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    \"\"\"\n\n    for key, value in current_swagger_ui_parameters.items():\n        html += f\"{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\\n\"\n\n    if oauth2_redirect_url:\n        html += f\"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',\"\n\n    html += \"\"\"\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })\"\"\"\n\n    if init_oauth:\n        html += f\"\"\"\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        \"\"\"\n\n    html += \"\"\"\n    </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 262,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/docs.py",
      "content": "def get_redoc_html(\n    *,\n    openapi_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The OpenAPI URL that ReDoc should load and use.\n\n            This is normally done automatically by FastAPI using the default URL\n            `/openapi.json`.\n            \"\"\"\n        ),\n    ],\n    title: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The HTML `<title>` content, normally shown in the browser tab.\n            \"\"\"\n        ),\n    ],\n    redoc_js_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL to use to load the ReDoc JavaScript.\n\n            It is normally set to a CDN URL.\n            \"\"\"\n        ),\n    ] = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n    redoc_favicon_url: Annotated[\n        str,\n        Doc(\n            \"\"\"\n            The URL of the favicon to use. It is normally shown in the browser tab.\n            \"\"\"\n        ),\n    ] = \"https://fastapi.tiangolo.com/img/favicon.png\",\n    with_google_fonts: Annotated[\n        bool,\n        Doc(\n            \"\"\"\n            Load and use Google Fonts.\n            \"\"\"\n        ),\n    ] = True,\n) -> HTMLResponse:\n    \"\"\"\n    Generate and return the HTML response that loads ReDoc for the alternative\n    API docs (normally served at `/redoc`).\n\n    You would only call this function yourself if you needed to override some parts,\n    for example the URLs to use to load ReDoc's JavaScript and CSS.\n\n    Read more about it in the\n    [FastAPI docs for Custom Docs UI Static Assets (Self-Hosting)](https://fastapi.tiangolo.com/how-to/custom-docs-ui-assets/).\n    \"\"\"\n    html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>{title}</title>\n    <!-- needed for adaptive design -->\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    \"\"\"\n    if with_google_fonts:\n        html += \"\"\"\n    <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n    \"\"\"\n    html += f\"\"\"\n    <link rel=\"shortcut icon\" href=\"{redoc_favicon_url}\">\n    <!--\n    ReDoc doesn't change outer page styles\n    -->\n    <style>\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    </style>\n    </head>\n    <body>\n    <noscript>\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    </noscript>\n    <redoc spec-url=\"{openapi_url}\"></redoc>\n    <script src=\"{redoc_js_url}\"> </script>\n    </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 263,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/docs.py",
      "content": "def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n    \"\"\"\n    Generate the HTML response with the OAuth2 redirection for Swagger UI.\n\n    You normally don't need to use or change this.\n    \"\"\"\n    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n    html = \"\"\"\n    <!doctype html>\n    <html lang=\"en-US\">\n    <head>\n        <title>Swagger UI: OAuth2 Redirect</title>\n    </head>\n    <body>\n    <script>\n        'use strict';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace('?', '&');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split(\"&\");\n            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n            qp = qp ? JSON.parse('{' + arr.join() + '}',\n                    function (key, value) {\n                        return key === \"\" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n            ) && !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"warning\",\n                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                            (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n                            (qp.error_uri ? \"More info: \"+qp.error_uri : \"\");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: \"auth\",\n                        level: \"error\",\n                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== 'loading') {\n            run();\n        } else {\n            document.addEventListener('DOMContentLoaded', function () {\n                run();\n            });\n        }\n    </script>\n    </body>\n    </html>\n        \"\"\"\n    return HTMLResponse(content=html)"
    },
    {
      "chunk_id": 264,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "```python"
    },
    {
      "chunk_id": 265,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "import http.client\nimport inspect\nimport warnings\nfrom typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Type, Union, cast\n\nfrom fastapi import routing\nfrom fastapi._compat import (\n    GenerateJsonSchema,\n    JsonSchemaValue,\n    ModelField,\n    Undefined,\n    get_compat_model_name_map,\n    get_definitions,\n    get_schema_from_model_field,\n    lenient_issubclass,\n)\nfrom fastapi.datastructures import DefaultPlaceholder\nfrom fastapi.dependencies.models import Dependant\nfrom fastapi.dependencies.utils import (\n    _get_flat_fields_from_params,\n    get_flat_dependant,\n    get_flat_params,\n)\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX, REF_TEMPLATE\nfrom fastapi.openapi.models import OpenAPI\nfrom fastapi.params import Body, ParamTypes\nfrom fastapi.responses import Response\nfrom fastapi.types import ModelNameMap\nfrom fastapi.utils import (\n    deep_dict_update,\n    generate_operation_id_for_path,\n    is_body_allowed_for_status_code,\n)\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import BaseRoute\nfrom starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\nfrom typing_extensions import Literal"
    },
    {
      "chunk_id": 266,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "validation_error_definition = {\n    \"title\": \"ValidationError\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"loc\": {\n            \"title\": \"Location\",\n            \"type\": \"array\",\n            \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n        },\n        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n    },\n    \"required\": [\"loc\", \"msg\", \"type\"],\n}"
    },
    {
      "chunk_id": 267,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "validation_error_response_definition = {\n    \"title\": \"HTTPValidationError\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"detail\": {\n            \"title\": \"Detail\",\n            \"type\": \"array\",\n            \"items\": {\"$ref\": REF_PREFIX + \"ValidationError\"},\n        }\n    },\n}"
    },
    {
      "chunk_id": 268,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "status_code_ranges: Dict[str, str] = {\n    \"1XX\": \"Information\",\n    \"2XX\": \"Success\",\n    \"3XX\": \"Redirection\",\n    \"4XX\": \"Client Error\",\n    \"5XX\": \"Server Error\",\n    \"DEFAULT\": \"Default Response\",\n}"
    },
    {
      "chunk_id": 269,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_openapi_security_definitions(\n    flat_dependant: Dependant,\n) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n    security_definitions = {}\n    operation_security = []\n    for security_requirement in flat_dependant.security_requirements:\n        security_definition = jsonable_encoder(\n            security_requirement.security_scheme.model,\n            by_alias=True,\n            exclude_none=True,\n        )\n        security_name = security_requirement.security_scheme.scheme_name\n        security_definitions[security_name] = security_definition\n        operation_security.append({security_name: security_requirement.scopes})\n    return security_definitions, operation_security"
    },
    {
      "chunk_id": 270,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def _get_openapi_operation_parameters(\n    *,\n    dependant: Dependant,\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> List[Dict[str, Any]]:\n    parameters = []\n    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n    path_params = _get_flat_fields_from_params(flat_dependant.path_params)\n    query_params = _get_flat_fields_from_params(flat_dependant.query_params)\n    header_params = _get_flat_fields_from_params(flat_dependant.header_params)\n    cookie_params = _get_flat_fields_from_params(flat_dependant.cookie_params)\n    parameter_groups = [\n        (ParamTypes.path, path_params),\n        (ParamTypes.query, query_params),\n        (ParamTypes.header, header_params),\n        (ParamTypes.cookie, cookie_params),\n    ]\n    for param_type, param_group in parameter_groups:\n        for param in param_group:\n            field_info = param.field_info\n            if not getattr(field_info, \"include_in_schema\", True):\n                continue\n            param_schema = get_schema_from_model_field(\n                field=param,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            parameter = {\n                \"name\": param.alias,\n                \"in\": param_type.value,\n                \"required\": param.required,\n                \"schema\": param_schema,\n            }\n            if field_info.description:\n                parameter[\"description\"] = field_info.description\n            openapi_examples = getattr(field_info, \"openapi_examples\", None)\n            example = getattr(field_info, \"example\", None)\n            if openapi_examples:\n                parameter[\"examples\"] = jsonable_encoder(openapi_examples)\n            elif example != Undefined:\n                parameter[\"example\"] = jsonable_encoder(example)\n            if getattr(field_info, \"deprecated\", None):\n                parameter[\"deprecated\"] = True\n            parameters.append(parameter)\n    return parameters"
    },
    {
      "chunk_id": 271,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_openapi_operation_request_body(\n    *,\n    body_field: Optional[ModelField],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Optional[Dict[str, Any]]:\n    if not body_field:\n        return None\n    assert isinstance(body_field, ModelField)\n    body_schema = get_schema_from_model_field(\n        field=body_field,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        field_mapping=field_mapping,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    field_info = cast(Body, body_field.field_info)\n    request_media_type = field_info.media_type\n    required = body_field.required\n    request_body_oai: Dict[str, Any] = {}\n    if required:\n        request_body_oai[\"required\"] = required\n    request_media_content: Dict[str, Any] = {\"schema\": body_schema}\n    if field_info.openapi_examples:\n        request_media_content[\"examples\"] = jsonable_encoder(\n            field_info.openapi_examples\n        )\n    elif field_info.example != Undefined:\n        request_media_content[\"example\"] = jsonable_encoder(field_info.example)\n    request_body_oai[\"content\"] = {request_media_type: request_media_content}\n    return request_body_oai"
    },
    {
      "chunk_id": 272,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def generate_operation_id(\n    *, route: routing.APIRoute, method: str\n) -> str:  # pragma: nocover\n    warnings.warn(\n        \"fastapi.openapi.utils.generate_operation_id() was deprecated, \"\n        \"it is not used internally, and will be removed soon\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    if route.operation_id:\n        return route.operation_id\n    path: str = route.path_format\n    return generate_operation_id_for_path(name=route.name, path=path, method=method)"
    },
    {
      "chunk_id": 273,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n    if route.summary:\n        return route.summary\n    return route.name.replace(\"_\", \" \").title()"
    },
    {
      "chunk_id": 274,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_openapi_operation_metadata(\n    *, route: routing.APIRoute, method: str, operation_ids: Set[str]\n) -> Dict[str, Any]:\n    operation: Dict[str, Any] = {}\n    if route.tags:\n        operation[\"tags\"] = route.tags\n    operation[\"summary\"] = generate_operation_summary(route=route, method=method)\n    if route.description:\n        operation[\"description\"] = route.description\n    operation_id = route.operation_id or route.unique_id\n    if operation_id in operation_ids:\n        message = (\n            f\"Duplicate Operation ID {operation_id} for function \"\n            + f\"{route.endpoint.__name__}\"\n        )\n        file_name = getattr(route.endpoint, \"__globals__\", {}).get(\"__file__\")\n        if file_name:\n            message += f\" at {file_name}\"\n        warnings.warn(message, stacklevel=1)\n    operation_ids.add(operation_id)\n    operation[\"operationId\"] = operation_id\n    if route.deprecated:\n        operation[\"deprecated\"] = route.deprecated\n    return operation"
    },
    {
      "chunk_id": 275,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_openapi_path(\n    *,\n    route: routing.APIRoute,\n    operation_ids: Set[str],\n    schema_generator: GenerateJsonSchema,\n    model_name_map: ModelNameMap,\n    field_mapping: Dict[\n        Tuple[ModelField, Literal[\"validation\", \"serialization\"]], JsonSchemaValue\n    ],\n    separate_input_output_schemas: bool = True,\n) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n    path = {}\n    security_schemes: Dict[str, Any] = {}\n    definitions: Dict[str, Any] = {}\n    assert route.methods is not None, \"Methods must be a list\"\n    if isinstance(route.response_class, DefaultPlaceholder):\n        current_response_class: Type[Response] = route.response_class.value\n    else:\n        current_response_class = route.response_class\n    assert current_response_class, \"A response class is needed to generate OpenAPI\"\n    route_response_media_type: Optional[str] = current_response_class.media_type\n    if route.include_in_schema:\n        for method in route.methods:\n            operation = get_openapi_operation_metadata(\n                route=route, method=method, operation_ids=operation_ids\n            )\n            parameters: List[Dict[str, Any]] = []\n            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n            security_definitions, operation_security = get_openapi_security_definitions(\n                flat_dependant=flat_dependant\n            )\n            if operation_security:\n                operation.setdefault(\"security\", []).extend(operation_security)\n            if security_definitions:\n                security_schemes.update(security_definitions)\n            operation_parameters = _get_openapi_operation_parameters(\n                dependant=route.dependant,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            parameters.extend(operation_parameters)\n            if parameters:\n                all_parameters = {\n                    (param[\"in\"], param[\"name\"]): param for param in parameters\n                }\n                required_parameters = {\n                    (param[\"in\"], param[\"name\"]): param\n                    for param in parameters\n                    if param.get(\"required\")\n                }\n                all_parameters.update(required_parameters)\n                operation[\"parameters\"] = list(all_parameters.values())\n            if method in METHODS_WITH_BODY:\n                request_body_oai = get_openapi_operation_request_body(\n                    body_field=route.body_field,\n                    schema_generator=schema_generator,\n                    model_name_map=model_name_map,\n                    field_mapping=field_mapping,\n                    separate_input_output_schemas=separate_input_output_schemas,\n                )\n                if request_body_oai:\n                    operation[\"requestBody\"] = request_body_oai\n            if route.callbacks:\n                callbacks = {}\n                for callback in route.callbacks:\n                    if isinstance(callback, routing.APIRoute):\n                        (\n                            cb_path,\n                            cb_security_schemes,\n                            cb_definitions,\n                        ) = get_openapi_path(\n                            route=callback,\n                            operation_ids=operation_ids,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        callbacks[callback.name] = {callback.path: cb_path}\n                operation[\"callbacks\"] = callbacks\n            if route.status_code is not None:\n                status_code = str(route.status_code)\n            else:\n                response_signature = inspect.signature(current_response_class.__init__)\n                status_code_param = response_signature.parameters.get(\"status_code\")\n                if status_code_param is not None:\n                    if isinstance(status_code_param.default, int):\n                        status_code = str(status_code_param.default)\n            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                \"description\"\n            ] = route.response_description\n            if route_response_media_type and is_body_allowed_for_status_code(\n                route.status_code\n            ):\n                response_schema = {\"type\": \"string\"}\n                if lenient_issubclass(current_response_class, JSONResponse):\n                    if route.response_field:\n                        response_schema = get_schema_from_model_field(\n                            field=route.response_field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                    else:\n                        response_schema = {}\n                operation.setdefault(\"responses\", {}).setdefault(\n                    status_code, {}\n                ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                    \"schema\"\n                ] = response_schema\n            if route.responses:\n                operation_responses = operation.setdefault(\"responses\", {})\n                for (\n                    additional_status_code,\n                    additional_response,\n                ) in route.responses.items():\n                    process_response = additional_response.copy()\n                    process_response.pop(\"model\", None)\n                    status_code_key = str(additional_status_code).upper()\n                    if status_code_key == \"DEFAULT\":\n                        status_code_key = \"default\"\n                    openapi_response = operation_responses.setdefault(\n                        status_code_key, {}\n                    )\n                    assert isinstance(\n                        process_response, dict\n                    ), \"An additional response must be a dict\"\n                    field = route.response_fields.get(additional_status_code)\n                    additional_field_schema: Optional[Dict[str, Any]] = None\n                    if field:\n                        additional_field_schema = get_schema_from_model_field(\n                            field=field,\n                            schema_generator=schema_generator,\n                            model_name_map=model_name_map,\n                            field_mapping=field_mapping,\n                            separate_input_output_schemas=separate_input_output_schemas,\n                        )\n                        media_type = route_response_media_type or \"application/json\"\n                        additional_schema = (\n                            process_response.setdefault(\"content\", {})\n                            .setdefault(media_type, {})\n                            .setdefault(\"schema\", {})\n                        )\n                        deep_dict_update(additional_schema, additional_field_schema)\n                    status_text: Optional[str] = status_code_ranges.get(\n                        str(additional_status_code).upper()\n                    ) or http.client.responses.get(int(additional_status_code))\n                    description = (\n                        process_response.get(\"description\")\n                        or openapi_response.get(\"description\")\n                        or status_text\n                        or \"Additional Response\"\n                    )\n                    deep_dict_update(openapi_response, process_response)\n                    openapi_response[\"description\"] = description\n            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n            all_route_params = get_flat_params(route.dependant)\n            if (all_route_params or route.body_field) and not any(\n                status in operation[\"responses\"]\n                for status in [http422, \"4XX\", \"default\"]\n            ):\n                operation[\"responses\"][http422] = {\n                    \"description\": \"Validation Error\",\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\"$ref\": REF_PREFIX + \"HTTPValidationError\"}\n                        }\n                    },\n                }\n                if \"ValidationError\" not in definitions:\n                    definitions.update(\n                        {\n                            \"ValidationError\": validation_error_definition,\n                            \"HTTPValidationError\": validation_error_response_definition,\n                        }\n                    )\n            if route.openapi_extra:\n                deep_dict_update(operation, route.openapi_extra)\n            path[method.lower()] = operation\n    return path, security_schemes, definitions"
    },
    {
      "chunk_id": 276,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_fields_from_routes(\n    routes: Sequence[BaseRoute],\n) -> List[ModelField]:\n    body_fields_from_routes: List[ModelField] = []\n    responses_from_routes: List[ModelField] = []\n    request_fields_from_routes: List[ModelField] = []\n    callback_flat_models: List[ModelField] = []\n    for route in routes:\n        if getattr(route, \"include_in_schema\", None) and isinstance(\n            route, routing.APIRoute\n        ):\n            if route.body_field:\n                assert isinstance(\n                    route.body_field, ModelField\n                ), \"A request body must be a Pydantic Field\"\n                body_fields_from_routes.append(route.body_field)\n            if route.response_field:\n                responses_from_routes.append(route.response_field)\n            if route.response_fields:\n                responses_from_routes.extend(route.response_fields.values())\n            if route.callbacks:\n                callback_flat_models.extend(get_fields_from_routes(route.callbacks))\n            params = get_flat_params(route.dependant)\n            request_fields_from_routes.extend(params)\n\n    flat_models = callback_flat_models + list(\n        body_fields_from_routes + responses_from_routes + request_fields_from_routes\n    )\n    return flat_models"
    },
    {
      "chunk_id": 277,
      "source": "__internal__/data_repo/fastapi/fastapi/openapi/utils.py",
      "content": "def get_openapi(\n    *,\n    title: str,\n    version: str,\n    openapi_version: str = \"3.1.0\",\n    summary: Optional[str] = None,\n    description: Optional[str] = None,\n    routes: Sequence[BaseRoute],\n    webhooks: Optional[Sequence[BaseRoute]] = None,\n    tags: Optional[List[Dict[str, Any]]] = None,\n    servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n    terms_of_service: Optional[str] = None,\n    contact: Optional[Dict[str, Union[str, Any]]] = None,\n    license_info: Optional[Dict[str, Union[str, Any]]] = None,\n    separate_input_output_schemas: bool = True,\n) -> Dict[str, Any]:\n    info: Dict[str, Any] = {\"title\": title, \"version\": version}\n    if summary:\n        info[\"summary\"] = summary\n    if description:\n        info[\"description\"] = description\n    if terms_of_service:\n        info[\"termsOfService\"] = terms_of_service\n    if contact:\n        info[\"contact\"] = contact\n    if license_info:\n        info[\"license\"] = license_info\n    output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n    if servers:\n        output[\"servers\"] = servers\n    components: Dict[str, Dict[str, Any]] = {}\n    paths: Dict[str, Dict[str, Any]] = {}\n    webhook_paths: Dict[str, Dict[str, Any]] = {}\n    operation_ids: Set[str] = set()\n    all_fields = get_fields_from_routes(list(routes or []) + list(webhooks or []))\n    model_name_map = get_compat_model_name_map(all_fields)\n    schema_generator = GenerateJsonSchema(ref_template=REF_TEMPLATE)\n    field_mapping, definitions = get_definitions(\n        fields=all_fields,\n        schema_generator=schema_generator,\n        model_name_map=model_name_map,\n        separate_input_output_schemas=separate_input_output_schemas,\n    )\n    for route in routes or []:\n        if isinstance(route, routing.APIRoute):\n            result = get_openapi_path(\n                route=route,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    paths.setdefault(route.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    for webhook in webhooks or []:\n        if isinstance(webhook, routing.APIRoute):\n            result = get_openapi_path(\n                route=webhook,\n                operation_ids=operation_ids,\n                schema_generator=schema_generator,\n                model_name_map=model_name_map,\n                field_mapping=field_mapping,\n                separate_input_output_schemas=separate_input_output_schemas,\n            )\n            if result:\n                path, security_schemes, path_definitions = result\n                if path:\n                    webhook_paths.setdefault(webhook.path_format, {}).update(path)\n                if security_schemes:\n                    components.setdefault(\"securitySchemes\", {}).update(\n                        security_schemes\n                    )\n                if path_definitions:\n                    definitions.update(path_definitions)\n    if definitions:\n        components[\"schemas\"] = {k: definitions[k] for k in sorted(definitions)}\n    if components:\n        output[\"components\"] = components\n    output[\"paths\"] = paths\n    if webhook_paths:\n        output[\"webhooks\"] = webhook_paths\n    if tags:\n        output[\"tags\"] = tags\n    return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)  # type: ignore\n```"
    },
    {
      "chunk_id": 278,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 279,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 280,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 281,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "class BaseItem(BaseModel):\n    \"\"\"Base model for items.\"\"\"\n    description: str\n    type: str"
    },
    {
      "chunk_id": 282,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "class CarItem(BaseItem):\n    type: str = \"car\""
    },
    {
      "chunk_id": 283,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "class PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int"
    },
    {
      "chunk_id": 284,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "items = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}"
    },
    {
      "chunk_id": 285,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 286,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 287,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 288,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 289,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "class BaseItem(BaseModel):\n    \"\"\"Base model for items.\"\"\"\n    description: str\n    type: str"
    },
    {
      "chunk_id": 290,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "class CarItem(BaseItem):\n    type: str = \"car\""
    },
    {
      "chunk_id": 291,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "class PlaneItem(BaseItem):\n    type: str = \"plane\"\n    size: int"
    },
    {
      "chunk_id": 292,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "items = {\n    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n    \"item2\": {\n        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n        \"type\": \"plane\",\n        \"size\": 5,\n    },\n}"
    },
    {
      "chunk_id": 293,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial003_py310.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 294,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005_py39.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 295,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 296,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005_py39.py",
      "content": "@app.get(\"/keyword-weights/\", response_model=dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}"
    },
    {
      "chunk_id": 297,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 298,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "class UserBase(BaseModel):\n    \"\"\"Base model for user.\"\"\"\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 299,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "class UserIn(UserBase):\n    \"\"\"Model for user input.\"\"\"\n    password: str"
    },
    {
      "chunk_id": 300,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "class UserOut(UserBase):\n    \"\"\"Model for user output.\"\"\"\n    pass"
    },
    {
      "chunk_id": 301,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "class UserInDB(UserBase):\n    \"\"\"Model for user in database.\"\"\"\n    hashed_password: str"
    },
    {
      "chunk_id": 302,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "def fake_password_hasher(raw_password: str):\n    \"\"\"Fake password hasher.\"\"\"\n    return \"supersecret\" + raw_password"
    },
    {
      "chunk_id": 303,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "def fake_save_user(user_in: UserIn):\n    \"\"\"Fake save user function.\"\"\"\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db"
    },
    {
      "chunk_id": 304,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    \"\"\"Create a new user.\"\"\"\n    user_saved = fake_save_user(user_in)\n    return user_saved"
    },
    {
      "chunk_id": 305,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 306,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 307,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name and description.\n    \"\"\"\n    name: str\n    description: str"
    },
    {
      "chunk_id": 308,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004_py39.py",
      "content": "items = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]"
    },
    {
      "chunk_id": 309,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004_py39.py",
      "content": "@app.get(\"/items/\", response_model=list[Item])\nasync def read_items():\n    return items"
    },
    {
      "chunk_id": 310,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 311,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "class UserBase(BaseModel):\n    \"\"\"Base model for user.\"\"\"\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 312,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "class UserIn(UserBase):\n    \"\"\"Model for user input.\"\"\"\n    password: str"
    },
    {
      "chunk_id": 313,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "class UserOut(UserBase):\n    \"\"\"Model for user output.\"\"\"\n    pass"
    },
    {
      "chunk_id": 314,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "class UserInDB(UserBase):\n    \"\"\"Model for user in the database.\"\"\"\n    hashed_password: str"
    },
    {
      "chunk_id": 315,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "def fake_password_hasher(raw_password: str):\n    \"\"\"Fake password hasher.\"\"\"\n    return \"supersecret\" + raw_password"
    },
    {
      "chunk_id": 316,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "def fake_save_user(user_in: UserIn):\n    \"\"\"Fake save user function.\"\"\"\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db"
    },
    {
      "chunk_id": 317,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial002_py310.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    \"\"\"Create a new user.\"\"\"\n    user_saved = fake_save_user(user_in)\n    return user_saved"
    },
    {
      "chunk_id": 318,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 319,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 320,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 321,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "class UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 322,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password"
    },
    {
      "chunk_id": 323,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db"
    },
    {
      "chunk_id": 324,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved"
    },
    {
      "chunk_id": 325,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005.py",
      "content": "from typing import Dict"
    },
    {
      "chunk_id": 326,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 327,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 328,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial005.py",
      "content": "@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\nasync def read_keyword_weights():\n    return {\"foo\": 2.3, \"bar\": 3.4}"
    },
    {
      "chunk_id": 329,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 330,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A class representing an item with a name and description.\n    \"\"\"\n    name: str\n    description: str"
    },
    {
      "chunk_id": 331,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004.py",
      "content": "items = [\n    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n]"
    },
    {
      "chunk_id": 332,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial004.py",
      "content": "@app.get(\"/items/\", response_model=List[Item])\nasync def read_items():\n    return items"
    },
    {
      "chunk_id": 333,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 334,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 335,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 336,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "class UserInDB(BaseModel):\n    username: str\n    hashed_password: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 337,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "def fake_password_hasher(raw_password: str):\n    return \"supersecret\" + raw_password"
    },
    {
      "chunk_id": 338,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "def fake_save_user(user_in: UserIn):\n    hashed_password = fake_password_hasher(user_in.password)\n    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n    print(\"User saved! ..not really\")\n    return user_in_db"
    },
    {
      "chunk_id": 339,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_models/tutorial001_py310.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user_in: UserIn):\n    user_saved = fake_save_user(user_in)\n    return user_saved"
    },
    {
      "chunk_id": 340,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 341,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001.py",
      "content": "app = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}"
    },
    {
      "chunk_id": 342,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Union[str, None] = Body(default=None),\n    size: Union[int, None] = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)"
    },
    {
      "chunk_id": 343,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 344,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py39.py",
      "content": "from fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 345,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 346,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py39.py",
      "content": "items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}"
    },
    {
      "chunk_id": 347,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)"
    },
    {
      "chunk_id": 348,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 349,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py310.py",
      "content": "from fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 350,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 351,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py310.py",
      "content": "items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}"
    },
    {
      "chunk_id": 352,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[str | None, Body()] = None,\n    size: Annotated[int | None, Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)"
    },
    {
      "chunk_id": 353,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 354,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an.py",
      "content": "app = FastAPI()\n\nitems = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}"
    },
    {
      "chunk_id": 355,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: Annotated[Union[str, None], Body()] = None,\n    size: Annotated[Union[int, None], Body()] = None,\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)"
    },
    {
      "chunk_id": 356,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_py310.py",
      "content": "from fastapi import Body, FastAPI, status\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 357,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 358,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_py310.py",
      "content": "items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}"
    },
    {
      "chunk_id": 359,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_status_codes/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def upsert_item(\n    item_id: str,\n    name: str | None = Body(default=None),\n    size: int | None = Body(default=None),\n):\n    if item_id in items:\n        item = items[item_id]\n        item[\"name\"] = name\n        item[\"size\"] = size\n        return item\n    else:\n        item = {\"name\": name, \"size\": size}\n        items[item_id] = item\n        return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)"
    },
    {
      "chunk_id": 360,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 361,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/main.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 362,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 363,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/main.py",
      "content": "@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 364,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient"
    },
    {
      "chunk_id": 365,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 366,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "items = {}"
    },
    {
      "chunk_id": 367,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}"
    },
    {
      "chunk_id": 368,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 369,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial003.py",
      "content": "def test_read_items():\n    with TestClient(app) as client:\n        response = client.get(\"/items/foo\")\n        assert response.status_code == 200\n        assert response.json() == {\"name\": \"Fighters\"}"
    },
    {
      "chunk_id": 370,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 371,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/test_main.py",
      "content": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 372,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom fastapi.websockets import WebSocket\n\napp = FastAPI()"
    },
    {
      "chunk_id": 373,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial002.py",
      "content": "@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 374,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial002.py",
      "content": "@app.websocket(\"/ws\")\nasync def websocket(websocket: WebSocket):\n    await websocket.accept()\n    await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n    await websocket.close()"
    },
    {
      "chunk_id": 375,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial002.py",
      "content": "def test_read_main():\n    client = TestClient(app)\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 376,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial002.py",
      "content": "def test_websocket():\n    client = TestClient(app)\n    with client.websocket_connect(\"/ws\") as websocket:\n        data = websocket.receive_json()\n        assert data == {\"msg\": \"Hello WebSocket\"}"
    },
    {
      "chunk_id": 377,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient"
    },
    {
      "chunk_id": 378,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 379,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial001.py",
      "content": "@app.get(\"/\")\nasync def read_main():\n    return {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 380,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial001.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 381,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/tutorial001.py",
      "content": "def test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Hello World\"}"
    },
    {
      "chunk_id": 382,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 383,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/main.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()"
    },
    {
      "chunk_id": 384,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/main.py",
      "content": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 385,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/main.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]"
    },
    {
      "chunk_id": 386,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/main.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item"
    },
    {
      "chunk_id": 387,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 388,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }"
    },
    {
      "chunk_id": 389,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 390,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}"
    },
    {
      "chunk_id": 391,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }"
    },
    {
      "chunk_id": 392,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 393,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an/test_main.py",
      "content": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}"
    },
    {
      "chunk_id": 394,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 395,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 396,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "from fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 397,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "fake_secret_token = \"coneofsilence\""
    },
    {
      "chunk_id": 398,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "fake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}"
    },
    {
      "chunk_id": 399,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 400,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 401,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]"
    },
    {
      "chunk_id": 402,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/main.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item"
    },
    {
      "chunk_id": 403,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 404,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }"
    },
    {
      "chunk_id": 405,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 406,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}"
    },
    {
      "chunk_id": 407,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }"
    },
    {
      "chunk_id": 408,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 409,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py39/test_main.py",
      "content": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}"
    },
    {
      "chunk_id": 410,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 411,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 412,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "from fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 413,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "fake_secret_token = \"coneofsilence\""
    },
    {
      "chunk_id": 414,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "fake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}"
    },
    {
      "chunk_id": 415,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 416,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "class Item(BaseModel):\n    id: str\n    title: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 417,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]"
    },
    {
      "chunk_id": 418,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/main.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item"
    },
    {
      "chunk_id": 419,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 420,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }"
    },
    {
      "chunk_id": 421,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 422,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}"
    },
    {
      "chunk_id": 423,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }"
    },
    {
      "chunk_id": 424,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 425,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b/test_main.py",
      "content": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}"
    },
    {
      "chunk_id": 426,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 427,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "from fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 428,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "fake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}"
    },
    {
      "chunk_id": 429,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 430,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "class Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None"
    },
    {
      "chunk_id": 431,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]"
    },
    {
      "chunk_id": 432,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/main.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: str = Header()):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item"
    },
    {
      "chunk_id": 433,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 434,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }"
    },
    {
      "chunk_id": 435,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 436,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}"
    },
    {
      "chunk_id": 437,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }"
    },
    {
      "chunk_id": 438,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 439,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_py310/test_main.py",
      "content": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}"
    },
    {
      "chunk_id": 440,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 441,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/main.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header, HTTPException\nfrom pydantic import BaseModel\n\nfake_secret_token = \"coneofsilence\"\n\nfake_db = {\n    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n}\n\napp = FastAPI()"
    },
    {
      "chunk_id": 442,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/main.py",
      "content": "class Item(BaseModel):\n    id: str\n    title: str\n    description: str | None = None"
    },
    {
      "chunk_id": 443,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/main.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_main(item_id: str, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item_id not in fake_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return fake_db[item_id]"
    },
    {
      "chunk_id": 444,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/main.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item, x_token: Annotated[str, Header()]):\n    if x_token != fake_secret_token:\n        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n    if item.id in fake_db:\n        raise HTTPException(status_code=409, detail=\"Item already exists\")\n    fake_db[item.id] = item\n    return item"
    },
    {
      "chunk_id": 445,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 446,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_read_item():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foo\",\n        \"title\": \"Foo\",\n        \"description\": \"There goes my hero\",\n    }"
    },
    {
      "chunk_id": 447,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_read_item_bad_token():\n    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 448,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_read_nonexistent_item():\n    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Item not found\"}"
    },
    {
      "chunk_id": 449,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_create_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": \"foobar\",\n        \"title\": \"Foo Bar\",\n        \"description\": \"The Foo Barters\",\n    }"
    },
    {
      "chunk_id": 450,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_create_item_bad_token():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"hailhydra\"},\n        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"Invalid X-Token header\"}"
    },
    {
      "chunk_id": 451,
      "source": "__internal__/data_repo/fastapi/docs_src/app_testing/app_b_an_py310/test_main.py",
      "content": "def test_create_existing_item():\n    response = client.post(\n        \"/items/\",\n        headers={\"X-Token\": \"coneofsilence\"},\n        json={\n            \"id\": \"foo\",\n            \"title\": \"The Foo ID Stealers\",\n            \"description\": \"There goes my stealer\",\n        },\n    )\n    assert response.status_code == 409\n    assert response.json() == {\"detail\": \"Item already exists\"}"
    },
    {
      "chunk_id": 452,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_py310.py",
      "content": "from fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 453,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_py310.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"Model for handling cookies.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 454,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 455,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 456,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an.py",
      "content": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 457,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 458,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 459,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002.py",
      "content": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 460,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 461,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 462,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"Model for handling cookies.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 463,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 464,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_py310.py",
      "content": "from fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 465,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_py310.py",
      "content": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 466,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 467,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 468,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"Model for cookies.\"\"\"\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 469,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 470,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 471,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py39.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"\n    A model to represent cookies with session ID and optional trackers.\n    \"\"\"\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 472,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 473,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 474,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py310.py",
      "content": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 475,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 476,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 477,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py310.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"\n    A model to represent cookies with optional trackers.\n    \"\"\"\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 478,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 479,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 480,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py39.py",
      "content": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 481,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 482,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 483,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"Model for handling cookies.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 484,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    \"\"\"Endpoint to read items from cookies.\"\"\"\n    return cookies"
    },
    {
      "chunk_id": 485,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 486,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py39.py",
      "content": "class Cookies(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 487,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_pv1_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 488,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 489,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py310.py",
      "content": "class Cookies(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 490,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 491,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 492,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"\n    A model to represent cookies with optional trackers.\n    \"\"\"\n    session_id: str\n    fatebook_tracker: Union[str, None] = None\n    googall_tracker: Union[str, None] = None"
    },
    {
      "chunk_id": 493,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Annotated[Cookies, Cookie()]):\n    return cookies"
    },
    {
      "chunk_id": 494,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_py310.py",
      "content": "from fastapi import Cookie, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 495,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_py310.py",
      "content": "class Cookies(BaseModel):\n    \"\"\"\n    A model to represent cookies with optional trackers.\n    \"\"\"\n    session_id: str\n    fatebook_tracker: str | None = None\n    googall_tracker: str | None = None"
    },
    {
      "chunk_id": 496,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_param_models/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(cookies: Cookies = Cookie()):\n    return cookies"
    },
    {
      "chunk_id": 497,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008b_py310.py",
      "content": "def process_item(item: int | str):\n    print(item)"
    },
    {
      "chunk_id": 498,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "from datetime import datetime\nfrom typing import List, Union\n\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 499,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "class User(BaseModel):\n    \"\"\"\n    User model representing a user with an id, name, signup timestamp, and friends list.\n    \"\"\"\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: List[int] = []"
    },
    {
      "chunk_id": 500,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "external_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}"
    },
    {
      "chunk_id": 501,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "user = User(**external_data)"
    },
    {
      "chunk_id": 502,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "print(user)"
    },
    {
      "chunk_id": 503,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011.py",
      "content": "print(user.id)"
    },
    {
      "chunk_id": 504,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial012.py",
      "content": "from typing import Optional\n\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 505,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial012.py",
      "content": "class User(BaseModel):\n    \"\"\"\n    User model representing a person with a name and an optional age.\n    \"\"\"\n    name: str\n    age: Optional[int]"
    },
    {
      "chunk_id": 506,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial010.py",
      "content": "class Person:  \n    def __init__(self, name: str):  \n        self.name = name"
    },
    {
      "chunk_id": 507,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial010.py",
      "content": "def get_person_name(one_person: Person):  \n    return one_person.name"
    },
    {
      "chunk_id": 508,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008_py39.py",
      "content": "def process_items(prices: dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)"
    },
    {
      "chunk_id": 509,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial006_py39.py",
      "content": "def process_items(items: list[str]):\n    for item in items:\n        print(item)"
    },
    {
      "chunk_id": 510,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial003.py",
      "content": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + age\n    return name_with_age"
    },
    {
      "chunk_id": 511,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009c_py310.py",
      "content": "def say_hi(name: str | None):\n    print(f\"Hey {name}!\")"
    },
    {
      "chunk_id": 512,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009_py310.py",
      "content": "def say_hi(name: str | None = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")"
    },
    {
      "chunk_id": 513,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial007.py",
      "content": "from typing import Set, Tuple"
    },
    {
      "chunk_id": 514,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial007.py",
      "content": "def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n    return items_t, items_s"
    },
    {
      "chunk_id": 515,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial002.py",
      "content": "def get_full_name(first_name: str, last_name: str):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name"
    },
    {
      "chunk_id": 516,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial002.py",
      "content": "print(get_full_name(\"john\", \"doe\"))"
    },
    {
      "chunk_id": 517,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial013_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 518,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial013_py39.py",
      "content": "def say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\""
    },
    {
      "chunk_id": 519,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009b.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 520,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009b.py",
      "content": "def say_hi(name: Union[str, None] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")"
    },
    {
      "chunk_id": 521,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "from datetime import datetime\n\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 522,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "class User(BaseModel):\n    \"\"\"User model for storing user information.\"\"\"\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None = None\n    friends: list[int] = []"
    },
    {
      "chunk_id": 523,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "external_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}"
    },
    {
      "chunk_id": 524,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "user = User(**external_data)"
    },
    {
      "chunk_id": 525,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "print(user)"
    },
    {
      "chunk_id": 526,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py310.py",
      "content": "print(user.id)"
    },
    {
      "chunk_id": 527,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial001.py",
      "content": "def get_full_name(first_name, last_name):\n    full_name = first_name.title() + \" \" + last_name.title()\n    return full_name"
    },
    {
      "chunk_id": 528,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial001.py",
      "content": "print(get_full_name(\"john\", \"doe\"))"
    },
    {
      "chunk_id": 529,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial007_py39.py",
      "content": "def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n    return items_t, items_s"
    },
    {
      "chunk_id": 530,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008b.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 531,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008b.py",
      "content": "def process_item(item: Union[int, str]):\n    print(item)"
    },
    {
      "chunk_id": 532,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009.py",
      "content": "from typing import Optional"
    },
    {
      "chunk_id": 533,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009.py",
      "content": "def say_hi(name: Optional[str] = None):\n    if name is not None:\n        print(f\"Hey {name}!\")\n    else:\n        print(\"Hello World\")"
    },
    {
      "chunk_id": 534,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009c.py",
      "content": "from typing import Optional"
    },
    {
      "chunk_id": 535,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial009c.py",
      "content": "def say_hi(name: Optional[str]):\n    print(f\"Hey {name}!\")"
    },
    {
      "chunk_id": 536,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial005.py",
      "content": "def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n    return item_a, item_b, item_c, item_d, item_d, item_e"
    },
    {
      "chunk_id": 537,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial004.py",
      "content": "def get_name_with_age(name: str, age: int):\n    name_with_age = name + \" is this old: \" + str(age)\n    return name_with_age"
    },
    {
      "chunk_id": 538,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial006.py",
      "content": "from typing import List"
    },
    {
      "chunk_id": 539,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial006.py",
      "content": "def process_items(items: List[str]):\n    for item in items:\n        print(item)"
    },
    {
      "chunk_id": 540,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "from datetime import datetime\nfrom typing import Union\n\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 541,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "class User(BaseModel):\n    \"\"\"\n    User model representing a user with an id, name, signup timestamp, and friends list.\n    \"\"\"\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: Union[datetime, None] = None\n    friends: list[int] = []"
    },
    {
      "chunk_id": 542,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "external_data = {\n    \"id\": \"123\",\n    \"signup_ts\": \"2017-06-01 12:22\",\n    \"friends\": [1, \"2\", b\"3\"],\n}"
    },
    {
      "chunk_id": 543,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "user = User(**external_data)"
    },
    {
      "chunk_id": 544,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "print(user)"
    },
    {
      "chunk_id": 545,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial011_py39.py",
      "content": "print(user.id)"
    },
    {
      "chunk_id": 546,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008.py",
      "content": "from typing import Dict"
    },
    {
      "chunk_id": 547,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial008.py",
      "content": "def process_items(prices: Dict[str, float]):\n    for item_name, item_price in prices.items():\n        print(item_name)\n        print(item_price)"
    },
    {
      "chunk_id": 548,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial013.py",
      "content": "from typing_extensions import Annotated"
    },
    {
      "chunk_id": 549,
      "source": "__internal__/data_repo/fastapi/docs_src/python_types/tutorial013.py",
      "content": "def say_hello(name: Annotated[str, \"this is just metadata\"]) -> str:\n    return f\"Hello {name}\""
    },
    {
      "chunk_id": 550,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 551,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 552,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002.py",
      "content": "app = FastAPI(separate_input_output_schemas=False)"
    },
    {
      "chunk_id": 553,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 554,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 555,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 556,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name and an optional description.\n    \"\"\"\n    name: str\n    description: str | None = None"
    },
    {
      "chunk_id": 557,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py310.py",
      "content": "app = FastAPI(separate_input_output_schemas=False)"
    },
    {
      "chunk_id": 558,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py310.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 559,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 560,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 561,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 562,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 563,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 564,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> List[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 565,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "from typing import Optional"
    },
    {
      "chunk_id": 566,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 567,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A class representing an item with a name and an optional description.\n    \"\"\"\n    name: str\n    description: Optional[str] = None"
    },
    {
      "chunk_id": 568,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 569,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 570,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py39.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 571,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "from typing import Optional"
    },
    {
      "chunk_id": 572,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 573,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A class representing an item with a name and an optional description.\n    \"\"\"\n    name: str\n    description: Optional[str] = None"
    },
    {
      "chunk_id": 574,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "app = FastAPI(separate_input_output_schemas=False)"
    },
    {
      "chunk_id": 575,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 576,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial002_py39.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 577,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 578,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name and an optional description.\n    \"\"\"\n    name: str\n    description: str | None = None"
    },
    {
      "chunk_id": 579,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 580,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py310.py",
      "content": "@app.post(\"/items/\")\ndef create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 581,
      "source": "__internal__/data_repo/fastapi/docs_src/separate_openapi_schemas/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\ndef read_items() -> list[Item]:\n    return [\n        Item(\n            name=\"Portal Gun\",\n            description=\"Device to travel through the multi-rick-verse\",\n        ),\n        Item(name=\"Plumbus\"),\n    ]"
    },
    {
      "chunk_id": 582,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 583,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py310.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for image data.\"\"\"\n    url: str\n    name: str"
    },
    {
      "chunk_id": 584,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for item data.\"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None"
    },
    {
      "chunk_id": 585,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 586,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 587,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008_py39.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for an image with a URL and a name.\"\"\"\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 588,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008_py39.py",
      "content": "@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: list[Image]):\n    \"\"\"Endpoint to create multiple images.\"\"\"\n    return images"
    },
    {
      "chunk_id": 589,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 590,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py39.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 591,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None"
    },
    {
      "chunk_id": 592,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 593,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 594,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 595,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 596,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 597,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 598,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 599,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 600,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py39.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 601,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None"
    },
    {
      "chunk_id": 602,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 603,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 604,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py310.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for an image with a URL and a name.\"\"\"\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 605,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item with various attributes.\"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None"
    },
    {
      "chunk_id": 606,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    \"\"\"Update an item with the given item_id.\"\"\"\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 607,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007.py",
      "content": "from typing import List, Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 608,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 609,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None"
    },
    {
      "chunk_id": 610,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007.py",
      "content": "class Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: List[Item]"
    },
    {
      "chunk_id": 611,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007.py",
      "content": "@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer"
    },
    {
      "chunk_id": 612,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 613,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py310.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 614,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    images: list[Image] | None = None"
    },
    {
      "chunk_id": 615,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py310.py",
      "content": "class Offer(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    items: list[Item]"
    },
    {
      "chunk_id": 616,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py310.py",
      "content": "@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer"
    },
    {
      "chunk_id": 617,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 618,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []"
    },
    {
      "chunk_id": 619,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 620,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009_py39.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 621,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 622,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009_py39.py",
      "content": "@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: dict[int, float]):\n    return weights"
    },
    {
      "chunk_id": 623,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 624,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py39.py",
      "content": "class Image(BaseModel):\n    url: str\n    name: str"
    },
    {
      "chunk_id": 625,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    image: Union[Image, None] = None"
    },
    {
      "chunk_id": 626,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 627,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 628,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, tax, and tags.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 629,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 630,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 631,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list = []"
    },
    {
      "chunk_id": 632,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 633,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 634,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py39.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 635,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()\n    images: Union[list[Image], None] = None"
    },
    {
      "chunk_id": 636,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py39.py",
      "content": "class Offer(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    items: list[Item]"
    },
    {
      "chunk_id": 637,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial007_py39.py",
      "content": "@app.post(\"/offers/\")\nasync def create_offer(offer: Offer):\n    return offer"
    },
    {
      "chunk_id": 638,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 639,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py310.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for image data.\"\"\"\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 640,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for item data.\"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()\n    image: Image | None = None"
    },
    {
      "chunk_id": 641,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 642,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009.py",
      "content": "from typing import Dict"
    },
    {
      "chunk_id": 643,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 644,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 645,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial009.py",
      "content": "@app.post(\"/index-weights/\")\nasync def create_index_weights(weights: Dict[int, float]):\n    return weights"
    },
    {
      "chunk_id": 646,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 647,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 648,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None"
    },
    {
      "chunk_id": 649,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial005.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 650,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 651,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for image representation.\"\"\"\n    url: str\n    name: str"
    },
    {
      "chunk_id": 652,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for item representation.\"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    image: Union[Image, None] = None"
    },
    {
      "chunk_id": 653,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial004.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 654,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 655,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 656,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial003_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 657,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006.py",
      "content": "from typing import List, Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 658,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006.py",
      "content": "class Image(BaseModel):\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 659,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()\n    images: Union[List[Image], None] = None"
    },
    {
      "chunk_id": 660,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial006.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 661,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 662,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 663,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial002_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 664,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 665,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, tax, and tags.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list = []"
    },
    {
      "chunk_id": 666,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 667,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 668,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008.py",
      "content": "class Image(BaseModel):\n    \"\"\"Model for an image with a URL and a name.\"\"\"\n    url: HttpUrl\n    name: str"
    },
    {
      "chunk_id": 669,
      "source": "__internal__/data_repo/fastapi/docs_src/body_nested_models/tutorial008.py",
      "content": "@app.post(\"/images/multiple/\")\nasync def create_multiple_images(images: List[Image]):\n    \"\"\"Create multiple images.\"\"\"\n    return images"
    },
    {
      "chunk_id": 670,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 671,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 672,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial003.py",
      "content": "@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 673,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 674,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial002.py",
      "content": "my_awesome_api = FastAPI()"
    },
    {
      "chunk_id": 675,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial002.py",
      "content": "@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 676,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 677,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 678,
      "source": "__internal__/data_repo/fastapi/docs_src/first_steps/tutorial001.py",
      "content": "@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 679,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 680,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an.py",
      "content": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)"
    },
    {
      "chunk_id": 681,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an.py",
      "content": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q"
    },
    {
      "chunk_id": 682,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}"
    },
    {
      "chunk_id": 683,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 684,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002.py",
      "content": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)"
    },
    {
      "chunk_id": 685,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002.py",
      "content": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q"
    },
    {
      "chunk_id": 686,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}"
    },
    {
      "chunk_id": 687,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_py310.py",
      "content": "from fastapi import BackgroundTasks, Depends, FastAPI"
    },
    {
      "chunk_id": 688,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 689,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_py310.py",
      "content": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)"
    },
    {
      "chunk_id": 690,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_py310.py",
      "content": "def get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q"
    },
    {
      "chunk_id": 691,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_py310.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}"
    },
    {
      "chunk_id": 692,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial001.py",
      "content": "from fastapi import BackgroundTasks, FastAPI"
    },
    {
      "chunk_id": 693,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 694,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial001.py",
      "content": "def write_notification(email: str, message=\"\"):\n    with open(\"log.txt\", mode=\"w\") as email_file:\n        content = f\"notification for {email}: {message}\"\n        email_file.write(content)"
    },
    {
      "chunk_id": 695,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial001.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_notification, email, message=\"some notification\")\n    return {\"message\": \"Notification sent in the background\"}"
    },
    {
      "chunk_id": 696,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 697,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py39.py",
      "content": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)"
    },
    {
      "chunk_id": 698,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py39.py",
      "content": "def get_query(background_tasks: BackgroundTasks, q: Union[str, None] = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q"
    },
    {
      "chunk_id": 699,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py39.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}"
    },
    {
      "chunk_id": 700,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import BackgroundTasks, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 701,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py310.py",
      "content": "def write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message)"
    },
    {
      "chunk_id": 702,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py310.py",
      "content": "def get_query(background_tasks: BackgroundTasks, q: str | None = None):\n    if q:\n        message = f\"found query: {q}\\n\"\n        background_tasks.add_task(write_log, message)\n    return q"
    },
    {
      "chunk_id": 703,
      "source": "__internal__/data_repo/fastapi/docs_src/background_tasks/tutorial002_an_py310.py",
      "content": "@app.post(\"/send-notification/{email}\")\nasync def send_notification(\n    email: str, background_tasks: BackgroundTasks, q: Annotated[str, Depends(get_query)]\n):\n    message = f\"message to {email}\\n\"\n    background_tasks.add_task(write_log, message)\n    return {\"message\": \"Message sent\"}"
    },
    {
      "chunk_id": 704,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 705,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 706,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003.py",
      "content": "@app.get(\"/users/me\")\nasync def read_user_me():\n    return {\"user_id\": \"the current user\"}"
    },
    {
      "chunk_id": 707,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003.py",
      "content": "@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: str):\n    return {\"user_id\": user_id}"
    },
    {
      "chunk_id": 708,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003b.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 709,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003b.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 710,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003b.py",
      "content": "@app.get(\"/users\")\nasync def read_users():\n    return [\"Rick\", \"Morty\"]"
    },
    {
      "chunk_id": 711,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial003b.py",
      "content": "@app.get(\"/users\")\nasync def read_users2():\n    return [\"Bean\", \"Elfo\"]"
    },
    {
      "chunk_id": 712,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 713,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 714,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial002.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 715,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 716,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 717,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id):\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 718,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial005.py",
      "content": "from enum import Enum\n\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 719,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial005.py",
      "content": "class ModelName(str, Enum):\n    \"\"\"Enumeration for model names.\"\"\"\n    alexnet = \"alexnet\"\n    resnet = \"resnet\"\n    lenet = \"lenet\""
    },
    {
      "chunk_id": 720,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 721,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial005.py",
      "content": "@app.get(\"/models/{model_name}\")\nasync def get_model(model_name: ModelName):\n    if model_name is ModelName.alexnet:\n        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n    if model_name.value == \"lenet\":\n        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n\n    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}"
    },
    {
      "chunk_id": 722,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial004.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 723,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 724,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params/tutorial004.py",
      "content": "@app.get(\"/files/{file_path:path}\")\nasync def read_file(file_path: str):\n    return {\"file_path\": file_path}"
    },
    {
      "chunk_id": 725,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 726,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 727,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial003.py",
      "content": "@app.get(\"/items/\", include_in_schema=False)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 728,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007_pv1.py",
      "content": "from typing import List\n\nimport yaml\nfrom fastapi import FastAPI, HTTPException, Request\nfrom pydantic import BaseModel, ValidationError\n\napp = FastAPI()"
    },
    {
      "chunk_id": 729,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007_pv1.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name and tags.\n    \"\"\"\n    name: str\n    tags: List[str]"
    },
    {
      "chunk_id": 730,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007_pv1.py",
      "content": "@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.parse_obj(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors())\n    return item"
    },
    {
      "chunk_id": 731,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007.py",
      "content": "from typing import List\n\nimport yaml\nfrom fastapi import FastAPI, HTTPException, Request\nfrom pydantic import BaseModel, ValidationError\n\napp = FastAPI()"
    },
    {
      "chunk_id": 732,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name and tags.\n    \"\"\"\n    name: str\n    tags: List[str]"
    },
    {
      "chunk_id": 733,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial007.py",
      "content": "@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\"application/x-yaml\": {\"schema\": Item.model_json_schema()}},\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    try:\n        data = yaml.safe_load(raw_body)\n    except yaml.YAMLError:\n        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n    try:\n        item = Item.model_validate(data)\n    except ValidationError as e:\n        raise HTTPException(status_code=422, detail=e.errors(include_url=False))\n    return item"
    },
    {
      "chunk_id": 734,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.routing import APIRoute"
    },
    {
      "chunk_id": 735,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 736,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 737,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial002.py",
      "content": "def use_route_names_as_operation_ids(app: FastAPI) -> None:\n    \"\"\"\n    Simplify operation IDs so that generated API clients have simpler function\n    names.\n\n    Should be called only after all routes have been added.\n    \"\"\"\n    for route in app.routes:\n        if isinstance(route, APIRoute):\n            route.operation_id = route.name  # in this case, 'read_items'"
    },
    {
      "chunk_id": 738,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial002.py",
      "content": "use_route_names_as_operation_ids(app)"
    },
    {
      "chunk_id": 739,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 740,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 741,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial001.py",
      "content": "@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 742,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial005.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 743,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 744,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial005.py",
      "content": "@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\nasync def read_items():\n    return [{\"item_id\": \"portal-gun\"}]"
    },
    {
      "chunk_id": 745,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial004.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 746,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 747,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 748,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial004.py",
      "content": "@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \\f\n    :param item: User input.\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 749,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial006.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 750,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 751,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial006.py",
      "content": "def magic_data_reader(raw_body: bytes):\n    return {\n        \"size\": len(raw_body),\n        \"content\": {\n            \"name\": \"Maaaagic\",\n            \"price\": 42,\n            \"description\": \"Just kiddin', no magic here. \u2728\",\n        },\n    }"
    },
    {
      "chunk_id": 752,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_advanced_configuration/tutorial006.py",
      "content": "@app.post(\n    \"/items/\",\n    openapi_extra={\n        \"requestBody\": {\n            \"content\": {\n                \"application/json\": {\n                    \"schema\": {\n                        \"required\": [\"name\", \"price\"],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\"type\": \"string\"},\n                            \"price\": {\"type\": \"number\"},\n                            \"description\": {\"type\": \"string\"},\n                        },\n                    }\n                }\n            },\n            \"required\": True,\n        },\n    },\n)\nasync def create_item(request: Request):\n    raw_body = await request.body()\n    data = magic_data_reader(raw_body)\n    return data"
    },
    {
      "chunk_id": 753,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 754,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 755,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "app = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 756,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []"
    },
    {
      "chunk_id": 757,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)"
    },
    {
      "chunk_id": 758,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)"
    },
    {
      "chunk_id": 759,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)"
    },
    {
      "chunk_id": 760,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)"
    },
    {
      "chunk_id": 761,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "manager = ConnectionManager()"
    },
    {
      "chunk_id": 762,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 763,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003.py",
      "content": "@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")"
    },
    {
      "chunk_id": 764,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 765,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an.py",
      "content": "app = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 766,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 767,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an.py",
      "content": "async def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token"
    },
    {
      "chunk_id": 768,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an.py",
      "content": "@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")"
    },
    {
      "chunk_id": 769,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 770,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "from fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 771,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 772,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "html = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 773,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 774,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "async def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Union[str, None] = Cookie(default=None),\n    token: Union[str, None] = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token"
    },
    {
      "chunk_id": 775,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002.py",
      "content": "@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")"
    },
    {
      "chunk_id": 776,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "from fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 777,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 778,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "html = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 779,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 780,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "async def get_cookie_or_token(\n    websocket: WebSocket,\n    session: str | None = Cookie(default=None),\n    token: str | None = Query(default=None),\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token"
    },
    {
      "chunk_id": 781,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_py310.py",
      "content": "@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: str = Depends(get_cookie_or_token),\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")"
    },
    {
      "chunk_id": 782,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial001.py",
      "content": "from fastapi import FastAPI, WebSocket\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 783,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 784,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial001.py",
      "content": "html = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 785,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial001.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 786,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial001.py",
      "content": "@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")"
    },
    {
      "chunk_id": 787,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 788,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "from fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 789,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 790,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "html = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 791,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 792,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "async def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[Union[str, None], Cookie()] = None,\n    token: Annotated[Union[str, None], Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token"
    },
    {
      "chunk_id": 793,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py39.py",
      "content": "@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: Union[int, None] = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")"
    },
    {
      "chunk_id": 794,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "from fastapi import FastAPI, WebSocket, WebSocketDisconnect\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 795,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "html = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n            var client_id = Date.now()\n            document.querySelector(\"#ws-id\").textContent = client_id;\n            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n            ws.onmessage = function(event) {\n                var messages = document.getElementById('messages')\n                var message = document.createElement('li')\n                var content = document.createTextNode(event.data)\n                message.appendChild(content)\n                messages.appendChild(message)\n            };\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 796,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections: list[WebSocket] = []"
    },
    {
      "chunk_id": 797,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        self.active_connections.append(websocket)"
    },
    {
      "chunk_id": 798,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "def disconnect(self, websocket: WebSocket):\n        self.active_connections.remove(websocket)"
    },
    {
      "chunk_id": 799,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "async def send_personal_message(self, message: str, websocket: WebSocket):\n        await websocket.send_text(message)"
    },
    {
      "chunk_id": 800,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "async def broadcast(self, message: str):\n        for connection in self.active_connections:\n            await connection.send_text(message)"
    },
    {
      "chunk_id": 801,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "manager = ConnectionManager()"
    },
    {
      "chunk_id": 802,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 803,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial003_py39.py",
      "content": "@app.websocket(\"/ws/{client_id}\")\nasync def websocket_endpoint(websocket: WebSocket, client_id: int):\n    await manager.connect(websocket)\n    try:\n        while True:\n            data = await websocket.receive_text()\n            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n    except WebSocketDisconnect:\n        manager.disconnect(websocket)\n        await manager.broadcast(f\"Client #{client_id} left the chat\")"
    },
    {
      "chunk_id": 804,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import (\n    Cookie,\n    Depends,\n    FastAPI,\n    Query,\n    WebSocket,\n    WebSocketException,\n    status,\n)\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 805,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py310.py",
      "content": "app = FastAPI()\n\nhtml = \"\"\"\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Chat</title>\n    </head>\n    <body>\n        <h1>WebSocket Chat</h1>\n        <form action=\"\" onsubmit=\"sendMessage(event)\">\n            <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label>\n            <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label>\n            <button onclick=\"connect(event)\">Connect</button>\n            <hr>\n            <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label>\n            <button>Send</button>\n        </form>\n        <ul id='messages'>\n        </ul>\n        <script>\n        var ws = null;\n            function connect(event) {\n                var itemId = document.getElementById(\"itemId\")\n                var token = document.getElementById(\"token\")\n                ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value);\n                ws.onmessage = function(event) {\n                    var messages = document.getElementById('messages')\n                    var message = document.createElement('li')\n                    var content = document.createTextNode(event.data)\n                    message.appendChild(content)\n                    messages.appendChild(message)\n                };\n                event.preventDefault()\n            }\n            function sendMessage(event) {\n                var input = document.getElementById(\"messageText\")\n                ws.send(input.value)\n                input.value = ''\n                event.preventDefault()\n            }\n        </script>\n    </body>\n</html>\n\"\"\""
    },
    {
      "chunk_id": 806,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py310.py",
      "content": "@app.get(\"/\")\nasync def get():\n    return HTMLResponse(html)"
    },
    {
      "chunk_id": 807,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py310.py",
      "content": "async def get_cookie_or_token(\n    websocket: WebSocket,\n    session: Annotated[str | None, Cookie()] = None,\n    token: Annotated[str | None, Query()] = None,\n):\n    if session is None and token is None:\n        raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)\n    return session or token"
    },
    {
      "chunk_id": 808,
      "source": "__internal__/data_repo/fastapi/docs_src/websockets/tutorial002_an_py310.py",
      "content": "@app.websocket(\"/items/{item_id}/ws\")\nasync def websocket_endpoint(\n    *,\n    websocket: WebSocket,\n    item_id: str,\n    q: int | None = None,\n    cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],\n):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(\n            f\"Session cookie or query token value is: {cookie_or_token}\"\n        )\n        if q is not None:\n            await websocket.send_text(f\"Query parameter q is: {q}\")\n        await websocket.send_text(f\"Message text was: {data}, for item ID: {item_id}\")"
    },
    {
      "chunk_id": 809,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "from dataclasses import field  # (1)\nfrom typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic.dataclasses import dataclass  # (2)"
    },
    {
      "chunk_id": 810,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "@dataclass\nclass Item:\n    name: str\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 811,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "@dataclass\nclass Author:\n    name: str\n    items: List[Item] = field(default_factory=list)  # (3)"
    },
    {
      "chunk_id": 812,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 813,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\nasync def create_author_items(author_id: str, items: List[Item]):  # (5)\n    return {\"name\": author_id, \"items\": items}  # (6)"
    },
    {
      "chunk_id": 814,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial003.py",
      "content": "@app.get(\"/authors/\", response_model=List[Author])  # (7)\ndef get_authors():  # (8)\n    return [  # (9)\n        {\n            \"name\": \"Breaters\",\n            \"items\": [\n                {\n                    \"name\": \"Island In The Moon\",\n                    \"description\": \"A place to be playin' and havin' fun\",\n                },\n                {\"name\": \"Holy Buddies\"},\n            ],\n        },\n        {\n            \"name\": \"System of an Up\",\n            \"items\": [\n                {\n                    \"name\": \"Salt\",\n                    \"description\": \"The kombucha mushroom people's favorite\",\n                },\n                {\"name\": \"Pad Thai\"},\n                {\n                    \"name\": \"Lonely Night\",\n                    \"description\": \"The mostests lonliest nightiest of allest\",\n                },\n            ],\n        },\n    ]"
    },
    {
      "chunk_id": 815,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial002.py",
      "content": "from dataclasses import dataclass, field\nfrom typing import List, Union\n\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 816,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial002.py",
      "content": "@dataclass\nclass Item:\n    name: str\n    price: float\n    tags: List[str] = field(default_factory=list)\n    description: Union[str, None] = None\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 817,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 818,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial002.py",
      "content": "@app.get(\"/items/next\", response_model=Item)\nasync def read_next_item():\n    return {\n        \"name\": \"Island In The Moon\",\n        \"price\": 12.99,\n        \"description\": \"A place to be playin' and havin' fun\",\n        \"tags\": [\"breater\"],\n    }"
    },
    {
      "chunk_id": 819,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial001.py",
      "content": "from dataclasses import dataclass\nfrom typing import Union\n\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 820,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial001.py",
      "content": "@dataclass\nclass Item:\n    name: str\n    price: float\n    description: Union[str, None] = None\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 821,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 822,
      "source": "__internal__/data_repo/fastapi/docs_src/dataclasses/tutorial001.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 823,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001.py",
      "content": "from fastapi import FastAPI, Form"
    },
    {
      "chunk_id": 824,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 825,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001.py",
      "content": "@app.post(\"/login/\")\nasync def login(username: str = Form(), password: str = Form()):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 826,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 827,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an_py39.py",
      "content": "from fastapi import FastAPI, Form"
    },
    {
      "chunk_id": 828,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 829,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an_py39.py",
      "content": "@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 830,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an.py",
      "content": "from fastapi import FastAPI, Form\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 831,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 832,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms/tutorial001_an.py",
      "content": "@app.post(\"/login/\")\nasync def login(username: Annotated[str, Form()], password: Annotated[str, Form()]):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 833,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.gzip import GZipMiddleware"
    },
    {
      "chunk_id": 834,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 835,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial003.py",
      "content": "app.add_middleware(GZipMiddleware, minimum_size=1000, compresslevel=5)"
    },
    {
      "chunk_id": 836,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial003.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return \"somebigcontent\""
    },
    {
      "chunk_id": 837,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.trustedhost import TrustedHostMiddleware"
    },
    {
      "chunk_id": 838,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 839,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial002.py",
      "content": "app.add_middleware(\n    TrustedHostMiddleware, allowed_hosts=[\"example.com\", \"*.example.com\"]\n)"
    },
    {
      "chunk_id": 840,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial002.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 841,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware"
    },
    {
      "chunk_id": 842,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 843,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial001.py",
      "content": "app.add_middleware(HTTPSRedirectMiddleware)"
    },
    {
      "chunk_id": 844,
      "source": "__internal__/data_repo/fastapi/docs_src/advanced_middleware/tutorial001.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 845,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 846,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 847,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "@app.get(\"/app\")\ndef read_main():\n    return {\"message\": \"Hello World from main app\"}"
    },
    {
      "chunk_id": 848,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "subapi = FastAPI()"
    },
    {
      "chunk_id": 849,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "@subapi.get(\"/sub\")\ndef read_sub():\n    return {\"message\": \"Hello World from sub API\"}"
    },
    {
      "chunk_id": 850,
      "source": "__internal__/data_repo/fastapi/docs_src/sub_applications/tutorial001.py",
      "content": "app.mount(\"/subapi\", subapi)"
    },
    {
      "chunk_id": 851,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 852,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 853,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "class HeroBase(SQLModel):\n    \"\"\"\n    Base class for Hero model.\n    \"\"\"\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)"
    },
    {
      "chunk_id": 854,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "class Hero(HeroBase, table=True):\n    \"\"\"\n    Hero model with an ID and secret name.\n    \"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 855,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "class HeroPublic(HeroBase):\n    \"\"\"\n    Public representation of Hero model.\n    \"\"\"\n    id: int"
    },
    {
      "chunk_id": 856,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "class HeroCreate(HeroBase):\n    \"\"\"\n    Model for creating a new Hero.\n    \"\"\"\n    secret_name: str"
    },
    {
      "chunk_id": 857,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "class HeroUpdate(HeroBase):\n    \"\"\"\n    Model for updating an existing Hero.\n    \"\"\"\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None"
    },
    {
      "chunk_id": 858,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 859,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 860,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 861,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]\napp = FastAPI()"
    },
    {
      "chunk_id": 862,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 863,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 864,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 865,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 866,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 867,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 868,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "from typing import List, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 869,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "class HeroBase(SQLModel):\n    \"\"\"\n    Base class for Hero model.\n    \"\"\"\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)"
    },
    {
      "chunk_id": 870,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "class Hero(HeroBase, table=True):\n    \"\"\"\n    Hero model with an ID and secret name.\n    \"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 871,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "class HeroPublic(HeroBase):\n    \"\"\"\n    Public representation of Hero model.\n    \"\"\"\n    id: int"
    },
    {
      "chunk_id": 872,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "class HeroCreate(HeroBase):\n    \"\"\"\n    Model for creating a new Hero.\n    \"\"\"\n    secret_name: str"
    },
    {
      "chunk_id": 873,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "class HeroUpdate(HeroBase):\n    \"\"\"\n    Model for updating an existing Hero.\n    \"\"\"\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None"
    },
    {
      "chunk_id": 874,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 875,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 876,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 877,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 878,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 879,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 880,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.get(\"/heroes/\", response_model=List[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 881,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 882,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 883,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 884,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 885,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "class HeroBase(SQLModel):\n    \"\"\"\n    Base class for Hero model.\n    \"\"\"\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)"
    },
    {
      "chunk_id": 886,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "class Hero(HeroBase, table=True):\n    \"\"\"\n    Hero model with an ID and secret name.\n    \"\"\"\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 887,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "class HeroPublic(HeroBase):\n    \"\"\"\n    Public representation of Hero model.\n    \"\"\"\n    id: int"
    },
    {
      "chunk_id": 888,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "class HeroCreate(HeroBase):\n    \"\"\"\n    Model for creating a new Hero.\n    \"\"\"\n    secret_name: str"
    },
    {
      "chunk_id": 889,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "class HeroUpdate(HeroBase):\n    \"\"\"\n    Model for updating an existing Hero.\n    \"\"\"\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None"
    },
    {
      "chunk_id": 890,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 891,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 892,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 893,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 894,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 895,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 896,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 897,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 898,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 899,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py310.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 900,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "from typing import List, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 901,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"Hero model for the database.\"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 902,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 903,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 904,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 905,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 906,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 907,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 908,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 909,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 910,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 911,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 912,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"Hero model for the database.\"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 913,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 914,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 915,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 916,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 917,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 918,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 919,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 920,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 921,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py39.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 922,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 923,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"Hero model for the database.\"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 924,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 925,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 926,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]"
    },
    {
      "chunk_id": 927,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 928,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 929,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 930,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 931,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 932,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 933,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py39.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 934,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 935,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"Hero model for the database.\"\"\"\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 936,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 937,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 938,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 939,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]"
    },
    {
      "chunk_id": 940,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 941,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 942,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 943,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 944,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 945,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an_py310.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 946,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 947,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "class HeroBase(SQLModel):\n    \"\"\"\n    Base class for Hero model.\n    \"\"\"\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)"
    },
    {
      "chunk_id": 948,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "class Hero(HeroBase, table=True):\n    \"\"\"\n    Hero model with an ID and secret name.\n    \"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 949,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "class HeroPublic(HeroBase):\n    \"\"\"\n    Public representation of Hero model.\n    \"\"\"\n    id: int"
    },
    {
      "chunk_id": 950,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "class HeroCreate(HeroBase):\n    \"\"\"\n    Model for creating a new Hero.\n    \"\"\"\n    secret_name: str"
    },
    {
      "chunk_id": 951,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "class HeroUpdate(HeroBase):\n    \"\"\"\n    Model for updating an existing Hero.\n    \"\"\"\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None"
    },
    {
      "chunk_id": 952,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 953,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 954,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 955,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]\napp = FastAPI()"
    },
    {
      "chunk_id": 956,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 957,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 958,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 959,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 960,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 961,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py39.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 962,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 963,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)"
    },
    {
      "chunk_id": 964,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "class Hero(HeroBase, table=True):\n    id: int | None = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 965,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "class HeroPublic(HeroBase):\n    id: int"
    },
    {
      "chunk_id": 966,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "class HeroCreate(HeroBase):\n    secret_name: str"
    },
    {
      "chunk_id": 967,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "class HeroUpdate(HeroBase):\n    name: str | None = None\n    age: int | None = None\n    secret_name: str | None = None"
    },
    {
      "chunk_id": 968,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 969,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 970,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 971,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]\napp = FastAPI()"
    },
    {
      "chunk_id": 972,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 973,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: SessionDep):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 974,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 975,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 976,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 977,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_an_py310.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 978,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 979,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"\n    Hero model representing a hero entity.\n    \"\"\"\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 980,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 981,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 982,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 983,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "SessionDep = Annotated[Session, Depends(get_session)]"
    },
    {
      "chunk_id": 984,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 985,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 986,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: SessionDep) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 987,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: SessionDep,\n    offset: int = 0,\n    limit: Annotated[int, Query(le=100)] = 100,\n) -> List[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 988,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: SessionDep) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 989,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_an.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: SessionDep):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 990,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 991,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "class HeroBase(SQLModel):\n    name: str = Field(index=True)\n    age: Union[int, None] = Field(default=None, index=True)"
    },
    {
      "chunk_id": 992,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "class Hero(HeroBase, table=True):\n    id: Union[int, None] = Field(default=None, primary_key=True)\n    secret_name: str"
    },
    {
      "chunk_id": 993,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "class HeroPublic(HeroBase):\n    id: int"
    },
    {
      "chunk_id": 994,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "class HeroCreate(HeroBase):\n    secret_name: str"
    },
    {
      "chunk_id": 995,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "class HeroUpdate(HeroBase):\n    name: Union[str, None] = None\n    age: Union[int, None] = None\n    secret_name: Union[str, None] = None"
    },
    {
      "chunk_id": 996,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 997,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 998,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 999,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1000,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 1001,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.post(\"/heroes/\", response_model=HeroPublic)\ndef create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n    db_hero = Hero.model_validate(hero)\n    session.add(db_hero)\n    session.commit()\n    session.refresh(db_hero)\n    return db_hero"
    },
    {
      "chunk_id": 1002,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.get(\"/heroes/\", response_model=list[HeroPublic])\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n):\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 1003,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef read_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 1004,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\ndef update_hero(\n    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n):\n    hero_db = session.get(Hero, hero_id)\n    if not hero_db:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    hero_data = hero.model_dump(exclude_unset=True)\n    hero_db.sqlmodel_update(hero_data)\n    session.add(hero_db)\n    session.commit()\n    session.refresh(hero_db)\n    return hero_db"
    },
    {
      "chunk_id": 1005,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial002_py39.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 1006,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException, Query\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select"
    },
    {
      "chunk_id": 1007,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "class Hero(SQLModel, table=True):\n    \"\"\"Hero model for the database.\"\"\"\n    id: int | None = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    age: int | None = Field(default=None, index=True)\n    secret_name: str"
    },
    {
      "chunk_id": 1008,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "sqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, connect_args=connect_args)"
    },
    {
      "chunk_id": 1009,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "def create_db_and_tables():\n    SQLModel.metadata.create_all(engine)"
    },
    {
      "chunk_id": 1010,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "def get_session():\n    with Session(engine) as session:\n        yield session"
    },
    {
      "chunk_id": 1011,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1012,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()"
    },
    {
      "chunk_id": 1013,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "@app.post(\"/heroes/\")\ndef create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n    session.add(hero)\n    session.commit()\n    session.refresh(hero)\n    return hero"
    },
    {
      "chunk_id": 1014,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "@app.get(\"/heroes/\")\ndef read_heroes(\n    session: Session = Depends(get_session),\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n) -> list[Hero]:\n    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n    return heroes"
    },
    {
      "chunk_id": 1015,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "@app.get(\"/heroes/{hero_id}\")\ndef read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    return hero"
    },
    {
      "chunk_id": 1016,
      "source": "__internal__/data_repo/fastapi/docs_src/sql_databases/tutorial001_py310.py",
      "content": "@app.delete(\"/heroes/{hero_id}\")\ndef delete_hero(hero_id: int, session: Session = Depends(get_session)):\n    hero = session.get(Hero, hero_id)\n    if not hero:\n        raise HTTPException(status_code=404, detail=\"Hero not found\")\n    session.delete(hero)\n    session.commit()\n    return {\"ok\": True}"
    },
    {
      "chunk_id": 1017,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1018,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py310.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1019,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1020,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py310.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes | None, File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1021,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py310.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1022,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1023,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[List[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1024,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        List[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1025,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1026,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1027,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(\n    files: List[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1028,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: List[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1029,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1030,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1031,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1032,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}\n\n### CHUNK"
    },
    {
      "chunk_id": 1033,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1034,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an_py39.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1035,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1036,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1037,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an_py39.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1038,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1039,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py39.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1040,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1041,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[Union[bytes, None], File()] = None):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1042,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_an_py39.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1043,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an.py",
      "content": "from fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1044,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1045,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File(description=\"A file read as bytes\")]):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1046,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03_an.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: Annotated[UploadFile, File(description=\"A file read as UploadFile\")],\n):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1047,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1048,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(files: Annotated[List[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1049,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1050,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1051,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1052,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(files: List[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1053,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: List[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1054,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1055,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_py310.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1056,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1057,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_py310.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: bytes | None = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1058,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02_py310.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile | None = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1059,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1060,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1061,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: bytes = File()):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1062,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1063,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1064,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1065,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1066,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Union[bytes, None] = File(default=None)):\n    if not file:\n        return {\"message\": \"No file sent\"}\n    else:\n        return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1067,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_02.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: Union[UploadFile, None] = None):\n    if not file:\n        return {\"message\": \"No upload file sent\"}\n    else:\n        return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1068,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1069,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an_py39.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1070,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1071,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1072,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an_py39.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1073,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1074,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(files: Annotated[list[bytes], File()]):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1075,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an_py39.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1076,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_an_py39.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1077,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_py39.py",
      "content": "from fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 1078,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1079,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(\n    files: list[bytes] = File(description=\"Multiple files as bytes\"),\n):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1080,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_py39.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: list[UploadFile] = File(description=\"Multiple files as UploadFile\"),\n):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1081,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_py39.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1082,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1083,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(\n    files: Annotated[list[bytes], File(description=\"Multiple files as bytes\")],\n):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1084,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an_py39.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(\n    files: Annotated[\n        list[UploadFile], File(description=\"Multiple files as UploadFile\")\n    ],\n):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1085,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial003_an_py39.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1086,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an.py",
      "content": "from fastapi import FastAPI, File, UploadFile\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1087,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1088,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: Annotated[bytes, File()]):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1089,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_an.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1090,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_py39.py",
      "content": "from fastapi import FastAPI, File, UploadFile\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 1091,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1092,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_files(files: list[bytes] = File()):\n    return {\"file_sizes\": [len(file) for file in files]}"
    },
    {
      "chunk_id": 1093,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_py39.py",
      "content": "@app.post(\"/uploadfiles/\")\nasync def create_upload_files(files: list[UploadFile]):\n    return {\"filenames\": [file.filename for file in files]}"
    },
    {
      "chunk_id": 1094,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial002_py39.py",
      "content": "@app.get(\"/\")\nasync def main():\n    content = \"\"\"\n<body>\n<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n<input name=\"files\" type=\"file\" multiple>\n<input type=\"submit\">\n</form>\n</body>\n    \"\"\"\n    return HTMLResponse(content=content)"
    },
    {
      "chunk_id": 1095,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03.py",
      "content": "from fastapi import FastAPI, File, UploadFile"
    },
    {
      "chunk_id": 1096,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1097,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(file: bytes = File(description=\"A file read as bytes\")):\n    return {\"file_size\": len(file)}"
    },
    {
      "chunk_id": 1098,
      "source": "__internal__/data_repo/fastapi/docs_src/request_files/tutorial001_03.py",
      "content": "@app.post(\"/uploadfile/\")\nasync def create_upload_file(\n    file: UploadFile = File(description=\"A file read as UploadFile\"),\n):\n    return {\"filename\": file.filename}"
    },
    {
      "chunk_id": 1099,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1100,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}"
    },
    {
      "chunk_id": 1101,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1102,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "class TokenData(BaseModel):\n    username: str | None = None"
    },
    {
      "chunk_id": 1103,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1104,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1105,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1106,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1107,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1108,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1109,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1110,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1111,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user"
    },
    {
      "chunk_id": 1112,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "async def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1113,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1114,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1115,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_py310.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1116,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1117,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}"
    },
    {
      "chunk_id": 1118,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1119,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "class TokenData(BaseModel):\n    username: Union[str, None] = None"
    },
    {
      "chunk_id": 1120,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1121,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1122,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1123,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1124,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1125,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1126,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1127,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1128,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user"
    },
    {
      "chunk_id": 1129,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1130,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1131,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1132,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1133,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1134,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password"
    },
    {
      "chunk_id": 1135,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1136,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1137,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1138,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1139,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user"
    },
    {
      "chunk_id": 1140,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user"
    },
    {
      "chunk_id": 1141,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1142,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}"
    },
    {
      "chunk_id": 1143,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1144,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1145,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "fake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1146,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1147,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password"
    },
    {
      "chunk_id": 1148,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1149,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1150,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1151,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1152,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "def fake_decode_token(token):\n    user = get_user(fake_users_db, token)\n    return user"
    },
    {
      "chunk_id": 1153,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user"
    },
    {
      "chunk_id": 1154,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "async def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1155,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}"
    },
    {
      "chunk_id": 1156,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1157,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1158,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password"
    },
    {
      "chunk_id": 1159,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1160,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1161,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1162,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1163,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "def fake_decode_token(token):\n    # This doesn't provide any security at all\n    # Check the next version\n    user = get_user(fake_users_db, token)\n    return user"
    },
    {
      "chunk_id": 1164,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user"
    },
    {
      "chunk_id": 1165,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "async def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1166,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}"
    },
    {
      "chunk_id": 1167,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_py310.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1168,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError"
    },
    {
      "chunk_id": 1169,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1170,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1171,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: list[str] = []"
    },
    {
      "chunk_id": 1172,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1173,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1174,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1175,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1176,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1177,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1178,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1179,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1180,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1181,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "async def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1182,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1183,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1184,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1185,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py39.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1186,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError"
    },
    {
      "chunk_id": 1187,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1188,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1189,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "class TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []"
    },
    {
      "chunk_id": 1190,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1191,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1192,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1193,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1194,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1195,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1196,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1197,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1198,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1199,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1200,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1201,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1202,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1203,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py39.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1204,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1205,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1206,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\nclass UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1207,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1208,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1209,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1210,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1211,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1212,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1213,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1214,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1215,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1216,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1217,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1218,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1219,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007.py",
      "content": "import secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\napp = FastAPI()\n\nsecurity = HTTPBasic()"
    },
    {
      "chunk_id": 1220,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007.py",
      "content": "def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username"
    },
    {
      "chunk_id": 1221,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(username: str = Depends(get_current_username)):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 1222,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an_py39.py",
      "content": "import secrets\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials"
    },
    {
      "chunk_id": 1223,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an_py39.py",
      "content": "app = FastAPI()\n\nsecurity = HTTPBasic()"
    },
    {
      "chunk_id": 1224,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an_py39.py",
      "content": "def get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username"
    },
    {
      "chunk_id": 1225,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an_py39.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 1226,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1227,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}"
    },
    {
      "chunk_id": 1228,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1229,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "class TokenData(BaseModel):\n    username: str | None = None"
    },
    {
      "chunk_id": 1230,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1231,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1232,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1233,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1234,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1235,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1236,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1237,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1238,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user"
    },
    {
      "chunk_id": 1239,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1240,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1241,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1242,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py310.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1243,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1244,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "fake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1245,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password"
    },
    {
      "chunk_id": 1246,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1247,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1248,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1249,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1250,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "def fake_decode_token(token):\n    user = get_user(fake_users_db, token)\n    return user"
    },
    {
      "chunk_id": 1251,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user"
    },
    {
      "chunk_id": 1252,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1253,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}"
    },
    {
      "chunk_id": 1254,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py310.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1255,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1256,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "app = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1257,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1258,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )"
    },
    {
      "chunk_id": 1259,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user"
    },
    {
      "chunk_id": 1260,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user"
    },
    {
      "chunk_id": 1261,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1262,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002.py",
      "content": "class User(BaseModel):\n    \"\"\"User model for storing user information.\"\"\"\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1263,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002.py",
      "content": "def fake_decode_token(token):\n    \"\"\"Fake function to decode a token.\"\"\"\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )"
    },
    {
      "chunk_id": 1264,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    \"\"\"Get the current user based on the token.\"\"\"\n    user = fake_decode_token(token)\n    return user"
    },
    {
      "chunk_id": 1265,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    \"\"\"Endpoint to read the current user's information.\"\"\"\n    return current_user"
    },
    {
      "chunk_id": 1266,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1267,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1268,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an.py",
      "content": "security = HTTPBasic()"
    },
    {
      "chunk_id": 1269,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}"
    },
    {
      "chunk_id": 1270,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_py310.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1271,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_py310.py",
      "content": "class User(BaseModel):\n    \"\"\"User model for storing user information.\"\"\"\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1272,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_py310.py",
      "content": "def fake_decode_token(token):\n    \"\"\"Fake function to decode a token.\"\"\"\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )"
    },
    {
      "chunk_id": 1273,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_py310.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    \"\"\"Dependency to get the current user from the token.\"\"\"\n    user = fake_decode_token(token)\n    return user"
    },
    {
      "chunk_id": 1274,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_py310.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: User = Depends(get_current_user)):\n    \"\"\"Endpoint to read the current user's information.\"\"\"\n    return current_user"
    },
    {
      "chunk_id": 1275,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer"
    },
    {
      "chunk_id": 1276,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1277,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1278,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}"
    },
    {
      "chunk_id": 1279,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an.py",
      "content": "import secrets\n\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\nfrom typing_extensions import Annotated\n\napp = FastAPI()\n\nsecurity = HTTPBasic()"
    },
    {
      "chunk_id": 1280,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an.py",
      "content": "def get_current_username(\n    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n):\n    current_username_bytes = credentials.username.encode(\"utf8\")\n    correct_username_bytes = b\"stanleyjobson\"\n    is_correct_username = secrets.compare_digest(\n        current_username_bytes, correct_username_bytes\n    )\n    current_password_bytes = credentials.password.encode(\"utf8\")\n    correct_password_bytes = b\"swordfish\"\n    is_correct_password = secrets.compare_digest(\n        current_password_bytes, correct_password_bytes\n    )\n    if not (is_correct_username and is_correct_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return credentials.username"
    },
    {
      "chunk_id": 1281,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial007_an.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(username: Annotated[str, Depends(get_current_username)]):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 1282,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1283,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an_py39.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer"
    },
    {
      "chunk_id": 1284,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1285,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an_py39.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1286,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}"
    },
    {
      "chunk_id": 1287,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "from datetime import datetime, timedelta, timezone\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError"
    },
    {
      "chunk_id": 1288,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1289,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\nclass UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1290,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1291,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1292,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1293,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1294,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1295,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1296,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1297,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "async def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1298,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1299,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1300,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1301,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_py310.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1302,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1303,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1304,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py39.py",
      "content": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )"
    },
    {
      "chunk_id": 1305,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py39.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user"
    },
    {
      "chunk_id": 1306,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py39.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user"
    },
    {
      "chunk_id": 1307,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import List, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError"
    },
    {
      "chunk_id": 1308,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1309,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n    scopes: List[str] = []\n\nclass User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None\n\nclass UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1310,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1311,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1312,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1313,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1314,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1315,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1316,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1317,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "async def get_current_active_user(\n    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1318,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1319,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1320,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1321,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: User = Depends(get_current_user)):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1322,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1323,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}"
    },
    {
      "chunk_id": 1324,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1325,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "class TokenData(BaseModel):\n    username: Union[str, None] = None"
    },
    {
      "chunk_id": 1326,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1327,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1328,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1329,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1330,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1331,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1332,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1333,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1334,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "async def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user"
    },
    {
      "chunk_id": 1335,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "async def get_current_active_user(current_user: User = Depends(get_current_user)):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1336,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1337,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(current_user: User = Depends(get_current_active_user)):\n    return current_user"
    },
    {
      "chunk_id": 1338,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(current_user: User = Depends(get_current_active_user)):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1339,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, Security, status\nfrom fastapi.security import (\n    OAuth2PasswordBearer,\n    OAuth2PasswordRequestForm,\n    SecurityScopes,\n)\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel, ValidationError"
    },
    {
      "chunk_id": 1340,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Chains\",\n        \"email\": \"alicechains@example.com\",\n        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1341,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    username: str | None = None\n    scopes: list[str] = []\n\nclass User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None\n\nclass UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1342,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(\n    tokenUrl=\"token\",\n    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n)\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1343,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1344,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1345,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1346,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1347,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1348,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "async def get_current_user(\n    security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]\n):\n    if security_scopes.scopes:\n        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = \"Bearer\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": authenticate_value},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, username=username)\n    except (InvalidTokenError, ValidationError):\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )\n    return user"
    },
    {
      "chunk_id": 1349,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1350,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n        expires_delta=access_token_expires,\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1351,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1352,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1353,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial005_an_py310.py",
      "content": "@app.get(\"/status/\")\nasync def read_system_status(current_user: Annotated[User, Depends(get_current_user)]):\n    return {\"status\": \"ok\"}"
    },
    {
      "chunk_id": 1354,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials"
    },
    {
      "chunk_id": 1355,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1356,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006.py",
      "content": "security = HTTPBasic()"
    },
    {
      "chunk_id": 1357,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}"
    },
    {
      "chunk_id": 1358,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1359,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1360,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "fake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"fakehashedsecret\",\n        \"disabled\": False,\n    },\n    \"alice\": {\n        \"username\": \"alice\",\n        \"full_name\": \"Alice Wonderson\",\n        \"email\": \"alice@example.com\",\n        \"hashed_password\": \"fakehashedsecret2\",\n        \"disabled\": True,\n    },\n}"
    },
    {
      "chunk_id": 1361,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1362,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "def fake_hash_password(password: str):\n    return \"fakehashed\" + password"
    },
    {
      "chunk_id": 1363,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1364,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1365,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1366,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1367,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "def fake_decode_token(token):\n    user = get_user(fake_users_db, token)\n    return user"
    },
    {
      "chunk_id": 1368,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user"
    },
    {
      "chunk_id": 1369,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1370,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "@app.post(\"/token\")\nasync def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n    user_dict = fake_users_db.get(form_data.username)\n    if not user_dict:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n    user = UserInDB(**user_dict)\n    hashed_password = fake_hash_password(form_data.password)\n    if not hashed_password == user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n\n    return {\"access_token\": user.username, \"token_type\": \"bearer\"}"
    },
    {
      "chunk_id": 1371,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial003_an_py39.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1372,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Annotated, Union\n\nimport jwt\nfrom fastapi import Depends, FastAPI, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom jwt.exceptions import InvalidTokenError\nfrom passlib.context import CryptContext\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1373,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n\nfake_users_db = {\n    \"johndoe\": {\n        \"username\": \"johndoe\",\n        \"full_name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n        \"disabled\": False,\n    }\n}"
    },
    {
      "chunk_id": 1374,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "class Token(BaseModel):\n    access_token: str\n    token_type: str"
    },
    {
      "chunk_id": 1375,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "class TokenData(BaseModel):\n    username: Union[str, None] = None"
    },
    {
      "chunk_id": 1376,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: Union[str, None] = None\n    full_name: Union[str, None] = None\n    disabled: Union[bool, None] = None"
    },
    {
      "chunk_id": 1377,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "class UserInDB(User):\n    hashed_password: str"
    },
    {
      "chunk_id": 1378,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1379,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)"
    },
    {
      "chunk_id": 1380,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "def get_password_hash(password):\n    return pwd_context.hash(password)"
    },
    {
      "chunk_id": 1381,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "def get_user(db, username: str):\n    if username in db:\n        user_dict = db[username]\n        return UserInDB(**user_dict)"
    },
    {
      "chunk_id": 1382,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "def authenticate_user(fake_db, username: str, password: str):\n    user = get_user(fake_db, username)\n    if not user:\n        return False\n    if not verify_password(password, user.hashed_password):\n        return False\n    return user"
    },
    {
      "chunk_id": 1383,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt"
    },
    {
      "chunk_id": 1384,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except InvalidTokenError:\n        raise credentials_exception\n    user = get_user(fake_users_db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user"
    },
    {
      "chunk_id": 1385,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "async def get_current_active_user(\n    current_user: Annotated[User, Depends(get_current_user)],\n):\n    if current_user.disabled:\n        raise HTTPException(status_code=400, detail=\"Inactive user\")\n    return current_user"
    },
    {
      "chunk_id": 1386,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "@app.post(\"/token\")\nasync def login_for_access_token(\n    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n) -> Token:\n    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return Token(access_token=access_token, token_type=\"bearer\")"
    },
    {
      "chunk_id": 1387,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "@app.get(\"/users/me/\", response_model=User)\nasync def read_users_me(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return current_user"
    },
    {
      "chunk_id": 1388,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial004_an_py39.py",
      "content": "@app.get(\"/users/me/items/\")\nasync def read_own_items(\n    current_user: Annotated[User, Depends(get_current_active_user)],\n):\n    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]"
    },
    {
      "chunk_id": 1389,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1390,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "app = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1391,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str | None = None\n    full_name: str | None = None\n    disabled: bool | None = None"
    },
    {
      "chunk_id": 1392,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "def fake_decode_token(token):\n    return User(\n        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n    )"
    },
    {
      "chunk_id": 1393,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n    user = fake_decode_token(token)\n    return user"
    },
    {
      "chunk_id": 1394,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial002_an_py310.py",
      "content": "@app.get(\"/users/me\")\nasync def read_users_me(current_user: Annotated[User, Depends(get_current_user)]):\n    return current_user"
    },
    {
      "chunk_id": 1395,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.security import OAuth2PasswordBearer\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1396,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1397,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an.py",
      "content": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")"
    },
    {
      "chunk_id": 1398,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(token: Annotated[str, Depends(oauth2_scheme)]):\n    return {\"token\": token}"
    },
    {
      "chunk_id": 1399,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials"
    },
    {
      "chunk_id": 1400,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an_py39.py",
      "content": "app = FastAPI()\n\nsecurity = HTTPBasic()"
    },
    {
      "chunk_id": 1401,
      "source": "__internal__/data_repo/fastapi/docs_src/security/tutorial006_an_py39.py",
      "content": "@app.get(\"/users/me\")\ndef read_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):\n    return {\"username\": credentials.username, \"password\": credentials.password}"
    },
    {
      "chunk_id": 1402,
      "source": "__internal__/data_repo/fastapi/docs_src/conditional_openapi/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 1403,
      "source": "__internal__/data_repo/fastapi/docs_src/conditional_openapi/tutorial001.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"Settings for the application.\"\"\"\n    openapi_url: str = \"/openapi.json\""
    },
    {
      "chunk_id": 1404,
      "source": "__internal__/data_repo/fastapi/docs_src/conditional_openapi/tutorial001.py",
      "content": "settings = Settings()"
    },
    {
      "chunk_id": 1405,
      "source": "__internal__/data_repo/fastapi/docs_src/conditional_openapi/tutorial001.py",
      "content": "app = FastAPI(openapi_url=settings.openapi_url)"
    },
    {
      "chunk_id": 1406,
      "source": "__internal__/data_repo/fastapi/docs_src/conditional_openapi/tutorial001.py",
      "content": "@app.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 1407,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1408,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 1409,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}"
    },
    {
      "chunk_id": 1410,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}"
    },
    {
      "chunk_id": 1411,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 1412,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "async def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}"
    },
    {
      "chunk_id": 1413,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "app.dependency_overrides[common_parameters] = override_dependency"
    },
    {
      "chunk_id": 1414,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1415,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1416,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001.py",
      "content": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1417,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1418,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 1419,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}"
    },
    {
      "chunk_id": 1420,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}"
    },
    {
      "chunk_id": 1421,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 1422,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "async def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}"
    },
    {
      "chunk_id": 1423,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "app.dependency_overrides[common_parameters] = override_dependency"
    },
    {
      "chunk_id": 1424,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1425,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1426,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py39.py",
      "content": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1427,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1428,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 1429,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}"
    },
    {
      "chunk_id": 1430,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}"
    },
    {
      "chunk_id": 1431,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 1432,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "async def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}"
    },
    {
      "chunk_id": 1433,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "app.dependency_overrides[common_parameters] = override_dependency"
    },
    {
      "chunk_id": 1434,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1435,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1436,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an_py310.py",
      "content": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1437,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1438,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 1439,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Items!\", \"params\": commons}"
    },
    {
      "chunk_id": 1440,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return {\"message\": \"Hello Users!\", \"params\": commons}"
    },
    {
      "chunk_id": 1441,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 1442,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "async def override_dependency(q: Union[str, None] = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}"
    },
    {
      "chunk_id": 1443,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "app.dependency_overrides[common_parameters] = override_dependency"
    },
    {
      "chunk_id": 1444,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1445,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1446,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_an.py",
      "content": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1447,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "from fastapi import Depends, FastAPI\nfrom fastapi.testclient import TestClient\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1448,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 1449,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Items!\", \"params\": commons}"
    },
    {
      "chunk_id": 1450,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return {\"message\": \"Hello Users!\", \"params\": commons}"
    },
    {
      "chunk_id": 1451,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "client = TestClient(app)"
    },
    {
      "chunk_id": 1452,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "async def override_dependency(q: str | None = None):\n    return {\"q\": q, \"skip\": 5, \"limit\": 10}"
    },
    {
      "chunk_id": 1453,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "app.dependency_overrides[common_parameters] = override_dependency"
    },
    {
      "chunk_id": 1454,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "def test_override_in_items():\n    response = client.get(\"/items/\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1455,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "def test_override_in_items_with_q():\n    response = client.get(\"/items/?q=foo\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1456,
      "source": "__internal__/data_repo/fastapi/docs_src/dependency_testing/tutorial001_py310.py",
      "content": "def test_override_in_items_with_params():\n    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"Hello Items!\",\n        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n    }"
    },
    {
      "chunk_id": 1457,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an.py",
      "content": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1458,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1459,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1460,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an.py",
      "content": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1461,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1462,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1463,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1464,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1465,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(*, item_id: int = Path(title=\"The ID of the item to get\"), q: str):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1466,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1467,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1468,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1469,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an.py",
      "content": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1470,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1471,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", gt=0, le=1000)],\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1472,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an.py",
      "content": "from fastapi import FastAPI, Path\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1473,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1474,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1475,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1476,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1477,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(q: str, item_id: int = Path(title=\"The ID of the item to get\")):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1478,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an.py",
      "content": "from fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1479,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1480,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
    },
    {
      "chunk_id": 1481,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1482,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1483,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1484,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: Union[str, None] = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1485,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1486,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py39.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1487,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1488,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1489,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1490,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py310.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1491,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1492,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[str | None, Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1493,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1494,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an_py39.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1495,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1496,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    q: str, item_id: Annotated[int, Path(title=\"The ID of the item to get\")]\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1497,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1498,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1499,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial005.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", gt=0, le=1000),\n    q: str,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1500,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1501,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1502,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *, item_id: int = Path(title=\"The ID of the item to get\", ge=1), q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1503,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1504,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1505,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str,\n    size: float = Query(gt=0, lt=10.5),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
    },
    {
      "chunk_id": 1506,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1507,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an_py39.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1508,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1509,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial003_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1510,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1511,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an_py39.py",
      "content": "from fastapi import FastAPI, Path"
    },
    {
      "chunk_id": 1512,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1513,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial004_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=1)], q: str\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1514,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Path, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1515,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1516,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_an.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\")],\n    q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1517,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1518,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an_py39.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1519,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1520,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial006_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    *,\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str,\n    size: Annotated[float, Query(gt=0, lt=10.5)],\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if size:\n        results.update({\"size\": size})\n    return results"
    },
    {
      "chunk_id": 1521,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_py310.py",
      "content": "from fastapi import FastAPI, Path, Query"
    },
    {
      "chunk_id": 1522,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1523,
      "source": "__internal__/data_repo/fastapi/docs_src/path_params_numeric_validations/tutorial001_py310.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(\n    item_id: int = Path(title=\"The ID of the item to get\"),\n    q: str | None = Query(default=None, alias=\"item-query\"),\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1524,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "import strawberry\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter"
    },
    {
      "chunk_id": 1525,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "@strawberry.type\nclass User:\n    name: str\n    age: int"
    },
    {
      "chunk_id": 1526,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(name=\"Patrick\", age=100)"
    },
    {
      "chunk_id": 1527,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "schema = strawberry.Schema(query=Query)"
    },
    {
      "chunk_id": 1528,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "graphql_app = GraphQLRouter(schema)"
    },
    {
      "chunk_id": 1529,
      "source": "__internal__/data_repo/fastapi/docs_src/graphql/tutorial001.py",
      "content": "app = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")"
    },
    {
      "chunk_id": 1530,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial002.py",
      "content": "from fastapi import FastAPI, Response"
    },
    {
      "chunk_id": 1531,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1532,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial002.py",
      "content": "@app.get(\"/legacy/\")\ndef get_legacy_data():\n    data = \"\"\"<?xml version=\"1.0\"?>\n    <shampoo>\n    <Header>\n        Apply shampoo here.\n    </Header>\n    <Body>\n        You'll have to use soap here.\n    </Body>\n    </shampoo>\n    \"\"\"\n    return Response(content=data, media_type=\"application/xml\")"
    },
    {
      "chunk_id": 1533,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial001.py",
      "content": "from datetime import datetime\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1534,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item.\"\"\"\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 1535,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1536,
      "source": "__internal__/data_repo/fastapi/docs_src/response_directly/tutorial001.py",
      "content": "@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    return JSONResponse(content=json_compatible_item_data)"
    },
    {
      "chunk_id": 1537,
      "source": "__internal__/data_repo/fastapi/docs_src/debugging/tutorial001.py",
      "content": "import uvicorn\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 1538,
      "source": "__internal__/data_repo/fastapi/docs_src/debugging/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1539,
      "source": "__internal__/data_repo/fastapi/docs_src/debugging/tutorial001.py",
      "content": "@app.get(\"/\")\ndef root():\n    a = \"a\"\n    b = \"b\" + a\n    return {\"hello world\": b}"
    },
    {
      "chunk_id": 1540,
      "source": "__internal__/data_repo/fastapi/docs_src/debugging/tutorial001.py",
      "content": "if __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)"
    },
    {
      "chunk_id": 1541,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial002.py",
      "content": "from fastapi import FastAPI, Response"
    },
    {
      "chunk_id": 1542,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1543,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial002.py",
      "content": "@app.get(\"/headers-and-object/\")\ndef get_headers(response: Response):\n    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 1544,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 1545,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1546,
      "source": "__internal__/data_repo/fastapi/docs_src/response_headers/tutorial001.py",
      "content": "@app.get(\"/headers/\")\ndef get_headers():\n    content = {\"message\": \"Hello World\"}\n    headers = {\"X-Cat-Dog\": \"alone in the world\", \"Content-Language\": \"en-US\"}\n    return JSONResponse(content=content, headers=headers)"
    },
    {
      "chunk_id": 1547,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.wsgi import WSGIMiddleware\nfrom flask import Flask, request\nfrom markupsafe import escape"
    },
    {
      "chunk_id": 1548,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "flask_app = Flask(__name__)"
    },
    {
      "chunk_id": 1549,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "@flask_app.route(\"/\")\ndef flask_main():\n    name = request.args.get(\"name\", \"World\")\n    return f\"Hello, {escape(name)} from Flask!\""
    },
    {
      "chunk_id": 1550,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1551,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "@app.get(\"/v2\")\ndef read_main():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 1552,
      "source": "__internal__/data_repo/fastapi/docs_src/wsgi/tutorial001.py",
      "content": "app.mount(\"/v1\", WSGIMiddleware(flask_app))"
    },
    {
      "chunk_id": 1553,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1554,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1555,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}"
    },
    {
      "chunk_id": 1556,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1557,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1558,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1559,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1560,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1561,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1562,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1563,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1564,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[List[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1565,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012.py",
      "content": "from typing import List"
    },
    {
      "chunk_id": 1566,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1567,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1568,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: List[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1569,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1570,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1571,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1572,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1573,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1574,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1575,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1576,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1577,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1578,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1579,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1580,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1581,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1582,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1583,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1584,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1585,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1586,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1587,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1588,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1589,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1590,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1591,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1592,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1593,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1594,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1595,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1596,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}"
    },
    {
      "chunk_id": 1597,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1598,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1599,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, min_length=3, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1600,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1601,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1602,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: list[str] = Query(default=[\"foo\", \"bar\"])):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1603,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1604,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1605,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1606,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[list[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1607,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1608,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1609,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1610,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1611,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1612,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1613,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1614,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1615,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1616,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = \"fixedquery\"):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1617,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1618,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1619,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1620,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1621,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1622,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1623,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1624,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1625,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1626,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1627,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1628,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1629,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1630,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1631,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1632,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1633,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1634,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1635,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1636,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1637,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1638,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1639,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1640,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1641,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1642,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1643,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1644,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1645,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1646,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1647,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1648,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1649,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1650,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1651,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1652,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1653,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1654,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1655,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[list, Query()] = []):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1656,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1657,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1658,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1659,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1660,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1661,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1662,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1663,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1664,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1665,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1666,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_regex_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1667,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_regex_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1668,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_regex_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1669,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_regex_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None, Query(min_length=3, max_length=50, regex=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1670,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1671,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1672,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1673,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1674,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1675,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1676,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1677,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1678,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1679,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1680,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1681,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1682,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1683,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1684,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1685,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1686,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str | None = Query(default=None, max_length=50)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1687,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1688,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1689,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1690,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        str | None,\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1691,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1692,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1693,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: list[str] | None = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1694,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1695,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 1696,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1697,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1698,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1699,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1700,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial007_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1701,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1702,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1703,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1704,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1705,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1706,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}"
    },
    {
      "chunk_id": 1707,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an.py",
      "content": "from typing import List"
    },
    {
      "chunk_id": 1708,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1709,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1710,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial012_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[List[str], Query()] = [\"foo\", \"bar\"]):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1711,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1712,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[str, None] = Query(default=None, alias=\"item-query\")):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1713,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1714,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1715,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1716,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1717,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1718,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1719,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1720,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006d_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1721,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1722,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1723,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial005.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=\"fixedquery\", min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1724,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1725,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1726,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1727,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None, min_length=3, max_length=50, pattern=\"^fixedquery$\"\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1728,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1729,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1730,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str = Query(min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1731,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1732,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1733,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial003_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1734,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1735,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1736,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str = Query(default=..., min_length=3)):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1737,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1738,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1739,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1740,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial004_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None], Query(min_length=3, max_length=50, pattern=\"^fixedquery$\")\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1741,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1742,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1743,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1744,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str | None, Query(max_length=50)] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1745,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1746,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1747,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: str | None = Query(\n        default=None,\n        alias=\"item-query\",\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n        max_length=50,\n        pattern=\"^fixedquery$\",\n        deprecated=True,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1748,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1749,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1750,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[List[str], None], Query()] = None):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1751,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1752,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1753,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial009_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(alias=\"item-query\")] = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1754,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1755,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1756,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1757,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[list[str] | None, Query()] = None):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1758,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_py310.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1759,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1760,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: str | None = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}"
    },
    {
      "chunk_id": 1761,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1762,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1763,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1764,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)]):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1765,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1766,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1767,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial010_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            alias=\"item-query\",\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n            max_length=50,\n            pattern=\"^fixedquery$\",\n            deprecated=True,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1768,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1769,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial014.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n):\n    if hidden_query:\n        return {\"hidden_query\": hidden_query}\n    else:\n        return {\"hidden_query\": \"Not found\"}"
    },
    {
      "chunk_id": 1770,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001_py310.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 1771,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1772,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: str | None = None):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1773,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1774,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial011_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Union[list[str], None] = Query(default=None)):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1775,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 1776,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1777,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1778,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Union[str, None] = Query(\n        default=None,\n        title=\"Query string\",\n        description=\"Query string for the items to search in the database that have a good match\",\n        min_length=3,\n    ),\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1779,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 1780,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py39.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1781,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1782,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006c_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[Union[str, None], Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1783,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013.py",
      "content": "from fastapi import FastAPI, Query"
    },
    {
      "chunk_id": 1784,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1785,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial013.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: list = Query(default=[])):\n    query_items = {\"q\": q}\n    return query_items"
    },
    {
      "chunk_id": 1786,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an.py",
      "content": "from fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1787,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1788,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial006b_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1789,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Query\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1790,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1791,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params_str_validations/tutorial008_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    q: Annotated[\n        Union[str, None],\n        Query(\n            title=\"Query string\",\n            description=\"Query string for the items to search in the database that have a good match\",\n            min_length=3,\n        ),\n    ] = None,\n):\n    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 1792,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial003.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 1793,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial003.py",
      "content": "app = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n)"
    },
    {
      "chunk_id": 1794,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial003.py",
      "content": "@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}"
    },
    {
      "chunk_id": 1795,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial002.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 1796,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial002.py",
      "content": "app = FastAPI(root_path=\"/api/v1\")"
    },
    {
      "chunk_id": 1797,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial002.py",
      "content": "@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}"
    },
    {
      "chunk_id": 1798,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial001.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 1799,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1800,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial001.py",
      "content": "@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}"
    },
    {
      "chunk_id": 1801,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial004.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 1802,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial004.py",
      "content": "app = FastAPI(\n    servers=[\n        {\"url\": \"https://stag.example.com\", \"description\": \"Staging environment\"},\n        {\"url\": \"https://prod.example.com\", \"description\": \"Production environment\"},\n    ],\n    root_path=\"/api/v1\",\n    root_path_in_servers=False,\n)"
    },
    {
      "chunk_id": 1803,
      "source": "__internal__/data_repo/fastapi/docs_src/behind_a_proxy/tutorial004.py",
      "content": "@app.get(\"/app\")\ndef read_main(request: Request):\n    return {\"message\": \"Hello World\", \"root_path\": request.scope.get(\"root_path\")}"
    },
    {
      "chunk_id": 1804,
      "source": "__internal__/data_repo/fastapi/docs_src/middleware/tutorial001.py",
      "content": "import time"
    },
    {
      "chunk_id": 1805,
      "source": "__internal__/data_repo/fastapi/docs_src/middleware/tutorial001.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 1806,
      "source": "__internal__/data_repo/fastapi/docs_src/middleware/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1807,
      "source": "__internal__/data_repo/fastapi/docs_src/middleware/tutorial001.py",
      "content": "@app.middleware(\"http\")\nasync def add_process_time_header(request: Request, call_next):\n    start_time = time.perf_counter()\n    response = await call_next(request)\n    process_time = time.perf_counter() - start_time\n    response.headers[\"X-Process-Time\"] = str(process_time)\n    return response"
    },
    {
      "chunk_id": 1808,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1809,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1810,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1811,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1812,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1813,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1814,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1815,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1816,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1817,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1818,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1819,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1820,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1821,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }"
    },
    {
      "chunk_id": 1822,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1823,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1824,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1825,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            }\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1826,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1827,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1828,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1829,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1830,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1831,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1832,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1833,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1834,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1835,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1836,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1837,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1838,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1839,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str = Field(examples=[\"Foo\"])\n    description: Union[str, None] = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: Union[float, None] = Field(default=None, examples=[3.2])"
    },
    {
      "chunk_id": 1840,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1841,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field"
    },
    {
      "chunk_id": 1842,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1843,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and optional tax.\n    \"\"\"\n    name: str = Field(examples=[\"Foo\"])\n    description: str | None = Field(default=None, examples=[\"A very nice Item\"])\n    price: float = Field(examples=[35.4])\n    tax: float | None = Field(default=None, examples=[3.2])"
    },
    {
      "chunk_id": 1844,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial002_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1845,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1846,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }"
    },
    {
      "chunk_id": 1847,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1848,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1849,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1850,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1851,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1852,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1853,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        openapi_examples={\n            \"normal\": {\n                \"summary\": \"A normal example\",\n                \"description\": \"A **normal** item works correctly.\",\n                \"value\": {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n            },\n            \"converted\": {\n                \"summary\": \"An example with converted data\",\n                \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                \"value\": {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n            },\n            \"invalid\": {\n                \"summary\": \"Invalid data is rejected with an error\",\n                \"value\": {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            },\n        },\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1854,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1855,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1856,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item = Body(\n        examples=[\n            {\n                \"name\": \"Foo\",\n                \"description\": \"A very nice Item\",\n                \"price\": 35.4,\n                \"tax\": 3.2,\n            },\n            {\n                \"name\": \"Bar\",\n                \"price\": \"35.4\",\n            },\n            {\n                \"name\": \"Baz\",\n                \"price\": \"thirty five point four\",\n            },\n        ],\n    ),\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1857,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1858,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 1859,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial005_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            openapi_examples={\n                \"normal\": {\n                    \"summary\": \"A normal example\",\n                    \"description\": \"A **normal** item works correctly.\",\n                    \"value\": {\n                        \"name\": \"Foo\",\n                        \"description\": \"A very nice Item\",\n                        \"price\": 35.4,\n                        \"tax\": 3.2,\n                    },\n                },\n                \"converted\": {\n                    \"summary\": \"An example with converted data\",\n                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n                    \"value\": {\n                        \"name\": \"Bar\",\n                        \"price\": \"35.4\",\n                    },\n                },\n                \"invalid\": {\n                    \"summary\": \"Invalid data is rejected with an error\",\n                    \"value\": {\n                        \"name\": \"Baz\",\n                        \"price\": \"thirty five point four\",\n                    },\n                },\n            },\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1860,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1861,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1862,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial003_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1863,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1864,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1865,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial004_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Annotated[\n        Item,\n        Body(\n            examples=[\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                },\n                {\n                    \"name\": \"Bar\",\n                    \"price\": \"35.4\",\n                },\n                {\n                    \"name\": \"Baz\",\n                    \"price\": \"thirty five point four\",\n                },\n            ],\n        ),\n    ],\n):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1866,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1867,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }\n    }"
    },
    {
      "chunk_id": 1868,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1869,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1870,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n\n    class Config:\n        schema_extra = {\n            \"examples\": [\n                {\n                    \"name\": \"Foo\",\n                    \"description\": \"A very nice Item\",\n                    \"price\": 35.4,\n                    \"tax\": 3.2,\n                }\n            ]\n        }"
    },
    {
      "chunk_id": 1871,
      "source": "__internal__/data_repo/fastapi/docs_src/schema_extra_example/tutorial001_pv1.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1872,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001.py",
      "content": "from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1873,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: Union[time, None] = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }"
    },
    {
      "chunk_id": 1874,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py39.py",
      "content": "from datetime import datetime, time, timedelta\nfrom typing import Annotated, Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI"
    },
    {
      "chunk_id": 1875,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1876,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }"
    },
    {
      "chunk_id": 1877,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py310.py",
      "content": "from datetime import datetime, time, timedelta\nfrom typing import Annotated\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI"
    },
    {
      "chunk_id": 1878,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1879,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[time | None, Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }"
    },
    {
      "chunk_id": 1880,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an.py",
      "content": "from datetime import datetime, time, timedelta\nfrom typing import Union\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1881,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: Annotated[datetime, Body()],\n    end_datetime: Annotated[datetime, Body()],\n    process_after: Annotated[timedelta, Body()],\n    repeat_at: Annotated[Union[time, None], Body()] = None,\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }"
    },
    {
      "chunk_id": 1882,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_py310.py",
      "content": "from datetime import datetime, time, timedelta\nfrom uuid import UUID\n\nfrom fastapi import Body, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1883,
      "source": "__internal__/data_repo/fastapi/docs_src/extra_data_types/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def read_items(\n    item_id: UUID,\n    start_datetime: datetime = Body(),\n    end_datetime: datetime = Body(),\n    process_after: timedelta = Body(),\n    repeat_at: time | None = Body(default=None),\n):\n    start_process = start_datetime + process_after\n    duration = end_datetime - start_process\n    return {\n        \"item_id\": item_id,\n        \"start_datetime\": start_datetime,\n        \"end_datetime\": end_datetime,\n        \"process_after\": process_after,\n        \"repeat_at\": repeat_at,\n        \"start_process\": start_process,\n        \"duration\": duration,\n    }"
    },
    {
      "chunk_id": 1884,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1885,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Class to represent form data.\"\"\"\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}"
    },
    {
      "chunk_id": 1886,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    \"\"\"Endpoint to handle login.\"\"\"\n    return data"
    },
    {
      "chunk_id": 1887,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1888,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}"
    },
    {
      "chunk_id": 1889,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data"
    },
    {
      "chunk_id": 1890,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1891,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\""
    },
    {
      "chunk_id": 1892,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data"
    },
    {
      "chunk_id": 1893,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1894,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1895,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str"
    },
    {
      "chunk_id": 1896,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: FormData = Form()):\n    return data"
    },
    {
      "chunk_id": 1897,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Form\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1898,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an_py39.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str"
    },
    {
      "chunk_id": 1899,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an_py39.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data"
    },
    {
      "chunk_id": 1900,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Form\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1901,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1902,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an_py39.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str\n    model_config = {\"extra\": \"forbid\"}"
    },
    {
      "chunk_id": 1903,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_an_py39.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data"
    },
    {
      "chunk_id": 1904,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1905,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\""
    },
    {
      "chunk_id": 1906,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    \"\"\"Login endpoint.\"\"\"\n    return data"
    },
    {
      "chunk_id": 1907,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Form\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1908,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an_py39.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str\n\n    class Config:\n        extra = \"forbid\""
    },
    {
      "chunk_id": 1909,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial002_pv1_an_py39.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data"
    },
    {
      "chunk_id": 1910,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an.py",
      "content": "from fastapi import FastAPI, Form\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1911,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an.py",
      "content": "class FormData(BaseModel):\n    \"\"\"Model for form data.\"\"\"\n    username: str\n    password: str"
    },
    {
      "chunk_id": 1912,
      "source": "__internal__/data_repo/fastapi/docs_src/request_form_models/tutorial001_an.py",
      "content": "@app.post(\"/login/\")\nasync def login(data: Annotated[FormData, Form()]):\n    return data"
    },
    {
      "chunk_id": 1913,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1914,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with attributes:\n    - name: str\n    - description: Optional[str]\n    - price: float\n    - tax: Optional[float]\n    - tags: set[str]\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1915,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py310.py",
      "content": "@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1916,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1917,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 1918,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1919,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002b.py",
      "content": "from enum import Enum\n\nfrom fastapi import FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1920,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002b.py",
      "content": "class Tags(Enum):\n    items = \"items\"\n    users = \"users\""
    },
    {
      "chunk_id": 1921,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002b.py",
      "content": "@app.get(\"/items/\", tags=[Tags.items])\nasync def get_items():\n    return [\"Portal gun\", \"Plumbus\"]"
    },
    {
      "chunk_id": 1922,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002b.py",
      "content": "@app.get(\"/users/\", tags=[Tags.users])\nasync def read_users():\n    return [\"Rick\", \"Morty\"]"
    },
    {
      "chunk_id": 1923,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1924,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1925,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py310.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1926,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1927,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1928,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py39.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1929,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1930,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 1931,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002.py",
      "content": "@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1932,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002.py",
      "content": "@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]"
    },
    {
      "chunk_id": 1933,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002.py",
      "content": "@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]"
    },
    {
      "chunk_id": 1934,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1935,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1936,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004_py39.py",
      "content": "@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1937,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1938,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1939,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py310.py",
      "content": "@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1940,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py310.py",
      "content": "@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]"
    },
    {
      "chunk_id": 1941,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py310.py",
      "content": "@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]"
    },
    {
      "chunk_id": 1942,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1943,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 1944,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001.py",
      "content": "@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1945,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, status\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1946,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1947,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py39.py",
      "content": "@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1948,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1949,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with its attributes.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1950,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005_py310.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1951,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1952,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 1953,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial005.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    response_description=\"The created item\",\n)\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1954,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004.py",
      "content": "from typing import Set, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1955,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: Set[str] = set()"
    },
    {
      "chunk_id": 1956,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial004.py",
      "content": "@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\nasync def create_item(item: Item):\n    \"\"\"\n    Create an item with all the information:\n\n    - **name**: each item must have a name\n    - **description**: a long description\n    - **price**: required\n    - **tax**: if the item doesn't have tax, you can omit this\n    - **tags**: a set of unique tag strings for this item\n    \"\"\"\n    return item"
    },
    {
      "chunk_id": 1957,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1958,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1959,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial003_py39.py",
      "content": "@app.post(\n    \"/items/\",\n    response_model=Item,\n    summary=\"Create an item\",\n    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1960,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial006.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 1961,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1962,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial006.py",
      "content": "@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]"
    },
    {
      "chunk_id": 1963,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial006.py",
      "content": "@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]"
    },
    {
      "chunk_id": 1964,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial006.py",
      "content": "@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\nasync def read_elements():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 1965,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1966,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1967,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py39.py",
      "content": "@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1968,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py39.py",
      "content": "@app.get(\"/items/\", tags=[\"items\"])\nasync def read_items():\n    return [{\"name\": \"Foo\", \"price\": 42}]"
    },
    {
      "chunk_id": 1969,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial002_py39.py",
      "content": "@app.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"johndoe\"}]"
    },
    {
      "chunk_id": 1970,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py310.py",
      "content": "from fastapi import FastAPI, status\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 1971,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1972,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: set[str] = set()"
    },
    {
      "chunk_id": 1973,
      "source": "__internal__/data_repo/fastapi/docs_src/path_operation_configuration/tutorial001_py310.py",
      "content": "@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 1974,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1975,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1976,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1977,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1978,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1979,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1980,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1981,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name, description, price, and optional tax.\n    \"\"\"\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None"
    },
    {
      "chunk_id": 1982,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1983,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1984,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 1985,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1986,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 1987,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = Field(\n        default=None, title=\"The description of the item\", max_length=300\n    )\n    price: float = Field(gt=0, description=\"The price must be greater than zero\")\n    tax: float | None = None"
    },
    {
      "chunk_id": 1988,
      "source": "__internal__/data_repo/fastapi/docs_src/body_fields/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 1989,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 1990,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1991,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 1992,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 1993,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1994,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: Union[List[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 1995,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_py310.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 1996,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 1997,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: list[str] | None = Header(default=None)):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 1998,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 1999,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py310.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2000,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2001,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[list[str] | None, Header()] = None):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 2002,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2003,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}"
    },
    {
      "chunk_id": 2004,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2005,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}"
    },
    {
      "chunk_id": 2006,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_py310.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2007,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2008,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    strange_header: str | None = Header(default=None, convert_underscores=False),\n):\n    return {\"strange_header\": strange_header}"
    },
    {
      "chunk_id": 2009,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2010,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2011,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(user_agent: Union[str, None] = Header(default=None)):\n    return {\"User-Agent\": user_agent}"
    },
    {
      "chunk_id": 2012,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 2013,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2014,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}"
    },
    {
      "chunk_id": 2015,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2016,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2017,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}"
    },
    {
      "chunk_id": 2018,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 2019,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py39.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2020,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2021,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[\n        Union[str, None], Header(convert_underscores=False)\n    ] = None,\n):\n    return {\"strange_header\": strange_header}"
    },
    {
      "chunk_id": 2022,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2023,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: Union[list[str], None] = Header(default=None)):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 2024,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py39.py",
      "content": "from typing import Annotated, List, Union\n\nfrom fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2025,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2026,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial003_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(x_token: Annotated[Union[List[str], None], Header()] = None):\n    return {\"X-Token values\": x_token}"
    },
    {
      "chunk_id": 2027,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2028,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py310.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2029,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2030,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(\n    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n):\n    return {\"strange_header\": strange_header}"
    },
    {
      "chunk_id": 2031,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2032,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(user_agent: Annotated[Union[str, None], Header()] = None):\n    return {\"User-Agent\": user_agent}"
    },
    {
      "chunk_id": 2033,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_py310.py",
      "content": "from fastapi import FastAPI, Header"
    },
    {
      "chunk_id": 2034,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2035,
      "source": "__internal__/data_repo/fastapi/docs_src/header_params/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(user_agent: str | None = Header(default=None)):\n    return {\"User-Agent\": user_agent}"
    },
    {
      "chunk_id": 2036,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001.py",
      "content": "from datetime import datetime\nfrom typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nfake_db = {}"
    },
    {
      "chunk_id": 2037,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item.\"\"\"\n    title: str\n    timestamp: datetime\n    description: Union[str, None] = None"
    },
    {
      "chunk_id": 2038,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2039,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001.py",
      "content": "@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data"
    },
    {
      "chunk_id": 2040,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001_py310.py",
      "content": "from datetime import datetime\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\nfake_db = {}"
    },
    {
      "chunk_id": 2041,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item.\"\"\"\n    title: str\n    timestamp: datetime\n    description: str | None = None"
    },
    {
      "chunk_id": 2042,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2043,
      "source": "__internal__/data_repo/fastapi/docs_src/encoder/tutorial001_py310.py",
      "content": "@app.put(\"/items/{id}\")\ndef update_item(id: str, item: Item):\n    json_compatible_item_data = jsonable_encoder(item)\n    fake_db[id] = json_compatible_item_data"
    },
    {
      "chunk_id": 2044,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2045,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial003.py",
      "content": "app = FastAPI(swagger_ui_parameters={\"deepLinking\": False})"
    },
    {
      "chunk_id": 2046,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial003.py",
      "content": "@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}"
    },
    {
      "chunk_id": 2047,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2048,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial002.py",
      "content": "app = FastAPI(swagger_ui_parameters={\"syntaxHighlight.theme\": \"obsidian\"})"
    },
    {
      "chunk_id": 2049,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial002.py",
      "content": "@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}"
    },
    {
      "chunk_id": 2050,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2051,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial001.py",
      "content": "app = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": False})"
    },
    {
      "chunk_id": 2052,
      "source": "__internal__/data_repo/fastapi/docs_src/configure_swagger_ui/tutorial001.py",
      "content": "@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}"
    },
    {
      "chunk_id": 2053,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2054,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2055,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2056,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: str | None = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
    },
    {
      "chunk_id": 2057,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2058,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2059,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2060,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2061,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
    },
    {
      "chunk_id": 2062,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2063,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2064,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2065,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial003_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item):\n    return {\"item_id\": item_id, **item.dict()}"
    },
    {
      "chunk_id": 2066,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2067,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2068,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2069,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2070,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
    },
    {
      "chunk_id": 2071,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2072,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and optional tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2073,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2074,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial002_py310.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    item_dict = item.dict()\n    if item.tax:\n        price_with_tax = item.price + item.tax\n        item_dict.update({\"price_with_tax\": price_with_tax})\n    return item_dict"
    },
    {
      "chunk_id": 2075,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2076,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2077,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2078,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2079,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 2080,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2081,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2082,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2083,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2084,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial004.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, q: Union[str, None] = None):\n    result = {\"item_id\": item_id, **item.dict()}\n    if q:\n        result.update({\"q\": q})\n    return result"
    },
    {
      "chunk_id": 2085,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2086,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2087,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2088,
      "source": "__internal__/data_repo/fastapi/docs_src/body/tutorial001_py310.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 2089,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2090,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2091,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2092,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2093,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "CommonsDep = Annotated[dict, Depends(common_parameters)]"
    },
    {
      "chunk_id": 2094,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2095,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py310.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2096,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2097,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2098,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content"
    },
    {
      "chunk_id": 2099,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False"
    },
    {
      "chunk_id": 2100,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "checker = FixedContentQueryChecker(\"bar\")"
    },
    {
      "chunk_id": 2101,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011.py",
      "content": "@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: bool = Depends(checker)):\n    return {\"fixed_content_in_query\": fixed_content_included}"
    },
    {
      "chunk_id": 2102,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "from fastapi import Depends, FastAPI, Header, HTTPException"
    },
    {
      "chunk_id": 2103,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "async def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2104,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "async def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2105,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])"
    },
    {
      "chunk_id": 2106,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]"
    },
    {
      "chunk_id": 2107,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012.py",
      "content": "@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2108,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial010.py",
      "content": "class MySuperContextManager:\n    def __init__(self):\n        self.db = DBSession()"
    },
    {
      "chunk_id": 2109,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial010.py",
      "content": "def __enter__(self):\n        return self.db"
    },
    {
      "chunk_id": 2110,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial010.py",
      "content": "def __exit__(self, exc_type, exc_value, traceback):\n        self.db.close()"
    },
    {
      "chunk_id": 2111,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial010.py",
      "content": "async def get_db():\n    with MySuperContextManager() as db:\n        yield db"
    },
    {
      "chunk_id": 2112,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2113,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2114,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2115,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2116,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2117,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2118,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "from fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2119,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2120,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2121,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2122,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2123,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an.py",
      "content": "from typing import Any, Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2124,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2125,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2126,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2127,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2128,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2129,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2130,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2131,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2132,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2133,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2134,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException"
    },
    {
      "chunk_id": 2135,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2136,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c.py",
      "content": "class InternalError(Exception):\n    \"\"\"Custom exception for internal errors.\"\"\"\n    pass"
    },
    {
      "chunk_id": 2137,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")"
    },
    {
      "chunk_id": 2138,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2139,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2140,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2141,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2142,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2143,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons=Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2144,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2145,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2146,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an.py",
      "content": "CommonsDep = Annotated[dict, Depends(common_parameters)]"
    },
    {
      "chunk_id": 2147,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2148,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2149,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2150,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an_py39.py",
      "content": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content"
    },
    {
      "chunk_id": 2151,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an_py39.py",
      "content": "def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False"
    },
    {
      "chunk_id": 2152,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an_py39.py",
      "content": "checker = FixedContentQueryChecker(\"bar\")"
    },
    {
      "chunk_id": 2153,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an_py39.py",
      "content": "@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}"
    },
    {
      "chunk_id": 2154,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2155,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py39.py",
      "content": "def query_extractor(q: Union[str, None] = None):\n    return q"
    },
    {
      "chunk_id": 2156,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py39.py",
      "content": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q"
    },
    {
      "chunk_id": 2157,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}"
    },
    {
      "chunk_id": 2158,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2159,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an.py",
      "content": "def query_extractor(q: Union[str, None] = None):\n    return q"
    },
    {
      "chunk_id": 2160,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an.py",
      "content": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[Union[str, None], Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q"
    },
    {
      "chunk_id": 2161,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}"
    },
    {
      "chunk_id": 2162,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2163,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py39.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2164,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py39.py",
      "content": "CommonsDep = Annotated[dict, Depends(common_parameters)]"
    },
    {
      "chunk_id": 2165,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2166,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_02_an_py39.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: CommonsDep):\n    return commons"
    },
    {
      "chunk_id": 2167,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2168,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "async def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2169,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "async def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2170,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])"
    },
    {
      "chunk_id": 2171,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]"
    },
    {
      "chunk_id": 2172,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an_py39.py",
      "content": "@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2173,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2174,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an.py",
      "content": "class InternalError(Exception):\n    pass"
    },
    {
      "chunk_id": 2175,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")"
    },
    {
      "chunk_id": 2176,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2177,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial007.py",
      "content": "async def get_db():\n    db = DBSession()\n    try:\n        yield db\n    finally:\n        db.close()"
    },
    {
      "chunk_id": 2178,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2179,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2180,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2181,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2182,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2183,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2184,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an_py39.py",
      "content": "class InternalError(Exception):\n    \"\"\"Custom exception for internal errors.\"\"\"\n    pass"
    },
    {
      "chunk_id": 2185,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an_py39.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise"
    },
    {
      "chunk_id": 2186,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2187,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py310.py",
      "content": "from typing import Annotated, Any\n\nfrom fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2188,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2189,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2190,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2191,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2192,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2193,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2194,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2195,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2196,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2197,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2198,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an.py",
      "content": "class InternalError(Exception):\n    \"\"\"Custom exception for internal errors.\"\"\"\n    pass"
    },
    {
      "chunk_id": 2199,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise"
    },
    {
      "chunk_id": 2200,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d_an.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2201,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2202,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2203,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2204,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2205,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2206,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2207,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an.py",
      "content": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2208,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2209,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an.py",
      "content": "async def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2210,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an.py",
      "content": "async def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2211,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an.py",
      "content": "@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]"
    },
    {
      "chunk_id": 2212,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2213,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2214,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2215,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2216,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2217,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2218,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2219,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons"
    },
    {
      "chunk_id": 2220,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
    },
    {
      "chunk_id": 2221,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException"
    },
    {
      "chunk_id": 2222,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2223,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d.py",
      "content": "class InternalError(Exception):\n    \"\"\"Custom exception for internal errors.\"\"\"\n    pass"
    },
    {
      "chunk_id": 2224,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"We don't swallow the internal error here, we raise again \ud83d\ude0e\")\n        raise"
    },
    {
      "chunk_id": 2225,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008d.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2226,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException"
    },
    {
      "chunk_id": 2227,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2228,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "data = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}"
    },
    {
      "chunk_id": 2229,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "class OwnerError(Exception):\n    pass"
    },
    {
      "chunk_id": 2230,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")"
    },
    {
      "chunk_id": 2231,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: str = Depends(get_username)):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item"
    },
    {
      "chunk_id": 2232,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2233,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2234,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py39.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2235,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2236,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py39.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2237,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_py310.py",
      "content": "from fastapi import Cookie, Depends, FastAPI"
    },
    {
      "chunk_id": 2238,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2239,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_py310.py",
      "content": "def query_extractor(q: str | None = None):\n    return q"
    },
    {
      "chunk_id": 2240,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_py310.py",
      "content": "def query_or_cookie_extractor(\n    q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)\n):\n    if not q:\n        return last_query\n    return q"
    },
    {
      "chunk_id": 2241,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}"
    },
    {
      "chunk_id": 2242,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "from fastapi import Depends, FastAPI, Header, HTTPException\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2243,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "async def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2244,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "async def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2245,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])"
    },
    {
      "chunk_id": 2246,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]"
    },
    {
      "chunk_id": 2247,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial012_an.py",
      "content": "@app.get(\"/users/\")\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2248,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial009.py",
      "content": "from fastapi import Depends"
    },
    {
      "chunk_id": 2249,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial009.py",
      "content": "async def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()"
    },
    {
      "chunk_id": 2250,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial009.py",
      "content": "async def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)"
    },
    {
      "chunk_id": 2251,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial009.py",
      "content": "async def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)"
    },
    {
      "chunk_id": 2252,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends"
    },
    {
      "chunk_id": 2253,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an_py39.py",
      "content": "async def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()"
    },
    {
      "chunk_id": 2254,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an_py39.py",
      "content": "async def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)"
    },
    {
      "chunk_id": 2255,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an_py39.py",
      "content": "async def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)"
    },
    {
      "chunk_id": 2256,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2257,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2258,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2259,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2260,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2261,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an_py310.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2262,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 2263,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2264,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2265,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2266,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2267,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2268,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2269,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005.py",
      "content": "def query_extractor(q: Union[str, None] = None):\n    return q"
    },
    {
      "chunk_id": 2270,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005.py",
      "content": "def query_or_cookie_extractor(\n    q: str = Depends(query_extractor),\n    last_query: Union[str, None] = Cookie(default=None),\n):\n    if not q:\n        return last_query\n    return q"
    },
    {
      "chunk_id": 2271,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005.py",
      "content": "@app.get(\"/items/\")\nasync def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n    return {\"q_or_cookie\": query_or_default}"
    },
    {
      "chunk_id": 2272,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2273,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2274,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2275,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2276,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2277,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: CommonQueryParams = Depends()):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2278,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Cookie, Depends, FastAPI\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2279,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py310.py",
      "content": "def query_extractor(q: str | None = None):\n    return q"
    },
    {
      "chunk_id": 2280,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py310.py",
      "content": "def query_or_cookie_extractor(\n    q: Annotated[str, Depends(query_extractor)],\n    last_query: Annotated[str | None, Cookie()] = None,\n):\n    if not q:\n        return last_query\n    return q"
    },
    {
      "chunk_id": 2281,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial005_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_query(\n    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n):\n    return {\"q_or_cookie\": query_or_default}"
    },
    {
      "chunk_id": 2282,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006.py",
      "content": "from fastapi import Depends, FastAPI, Header, HTTPException"
    },
    {
      "chunk_id": 2283,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2284,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006.py",
      "content": "async def verify_token(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2285,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006.py",
      "content": "async def verify_key(x_key: str = Header()):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2286,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006.py",
      "content": "@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]"
    },
    {
      "chunk_id": 2287,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "from typing import Annotated, Any, Union"
    },
    {
      "chunk_id": 2288,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2289,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2290,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2291,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2292,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial003_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[Any, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2293,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 2294,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2295,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2296,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2297,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: Union[str, None] = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2298,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial004_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends()]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2299,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "from fastapi import Depends, FastAPI, HTTPException\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2300,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2301,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "data = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}"
    },
    {
      "chunk_id": 2302,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "class OwnerError(Exception):\n    pass"
    },
    {
      "chunk_id": 2303,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")"
    },
    {
      "chunk_id": 2304,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item"
    },
    {
      "chunk_id": 2305,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2306,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2307,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2308,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2309,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "class CommonQueryParams:\n    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n        self.q = q\n        self.skip = skip\n        self.limit = limit"
    },
    {
      "chunk_id": 2310,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):\n    response = {}\n    if commons.q:\n        response.update({\"q\": commons.q})\n    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n    response.update({\"items\": items})\n    return response"
    },
    {
      "chunk_id": 2311,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an.py",
      "content": "from fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2312,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an.py",
      "content": "class FixedContentQueryChecker:\n    def __init__(self, fixed_content: str):\n        self.fixed_content = fixed_content"
    },
    {
      "chunk_id": 2313,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an.py",
      "content": "def __call__(self, q: str = \"\"):\n        if q:\n            return self.fixed_content in q\n        return False"
    },
    {
      "chunk_id": 2314,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an.py",
      "content": "checker = FixedContentQueryChecker(\"bar\")"
    },
    {
      "chunk_id": 2315,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial011_an.py",
      "content": "@app.get(\"/query-checker/\")\nasync def read_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):\n    return {\"fixed_content_in_query\": fixed_content_included}"
    },
    {
      "chunk_id": 2316,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2317,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an.py",
      "content": "async def common_parameters(\n    q: Union[str, None] = None, skip: int = 0, limit: int = 100\n):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2318,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2319,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_an.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(common_parameters)]):\n    return commons"
    },
    {
      "chunk_id": 2320,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, Header, HTTPException\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2321,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an_py39.py",
      "content": "async def verify_token(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2322,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an_py39.py",
      "content": "async def verify_key(x_key: Annotated[str, Header()]):\n    if x_key != \"fake-super-secret-key\":\n        raise HTTPException(status_code=400, detail=\"X-Key header invalid\")\n    return x_key"
    },
    {
      "chunk_id": 2323,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial006_an_py39.py",
      "content": "@app.get(\"/items/\", dependencies=[Depends(verify_token), Depends(verify_key)])\nasync def read_items():\n    return [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]"
    },
    {
      "chunk_id": 2324,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2325,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an_py39.py",
      "content": "data = {\n    \"plumbus\": {\"description\": \"Freshly pickled plumbus\", \"owner\": \"Morty\"},\n    \"portal-gun\": {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"},\n}"
    },
    {
      "chunk_id": 2326,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an_py39.py",
      "content": "class OwnerError(Exception):\n    pass"
    },
    {
      "chunk_id": 2327,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an_py39.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except OwnerError as e:\n        raise HTTPException(status_code=400, detail=f\"Owner error: {e}\")"
    },
    {
      "chunk_id": 2328,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008b_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id not in data:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    item = data[item_id]\n    if item[\"owner\"] != username:\n        raise OwnerError(username)\n    return item"
    },
    {
      "chunk_id": 2329,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_py310.py",
      "content": "from fastapi import Depends, FastAPI"
    },
    {
      "chunk_id": 2330,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2331,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_py310.py",
      "content": "async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}"
    },
    {
      "chunk_id": 2332,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(commons: dict = Depends(common_parameters)):\n    return commons"
    },
    {
      "chunk_id": 2333,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial001_py310.py",
      "content": "@app.get(\"/users/\")\nasync def read_users(commons: dict = Depends(common_parameters)):\n    return commons"
    },
    {
      "chunk_id": 2334,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008.py",
      "content": "from fastapi import Depends"
    },
    {
      "chunk_id": 2335,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008.py",
      "content": "async def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()"
    },
    {
      "chunk_id": 2336,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008.py",
      "content": "async def dependency_b(dep_a=Depends(dependency_a)):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)"
    },
    {
      "chunk_id": 2337,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008.py",
      "content": "async def dependency_c(dep_b=Depends(dependency_b)):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)"
    },
    {
      "chunk_id": 2338,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an.py",
      "content": "from fastapi import Depends\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2339,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an.py",
      "content": "async def dependency_a():\n    dep_a = generate_dep_a()\n    try:\n        yield dep_a\n    finally:\n        dep_a.close()"
    },
    {
      "chunk_id": 2340,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an.py",
      "content": "async def dependency_b(dep_a: Annotated[DepA, Depends(dependency_a)]):\n    dep_b = generate_dep_b()\n    try:\n        yield dep_b\n    finally:\n        dep_b.close(dep_a)"
    },
    {
      "chunk_id": 2341,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008_an.py",
      "content": "async def dependency_c(dep_b: Annotated[DepB, Depends(dependency_b)]):\n    dep_c = generate_dep_c()\n    try:\n        yield dep_c\n    finally:\n        dep_c.close(dep_b)"
    },
    {
      "chunk_id": 2342,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an_py39.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Depends, FastAPI, HTTPException\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2343,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an_py39.py",
      "content": "class InternalError(Exception):\n    \"\"\"Custom exception for internal errors.\"\"\"\n    pass"
    },
    {
      "chunk_id": 2344,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an_py39.py",
      "content": "def get_username():\n    try:\n        yield \"Rick\"\n    except InternalError:\n        print(\"Oops, we didn't raise again, Britney \ud83d\ude31\")"
    },
    {
      "chunk_id": 2345,
      "source": "__internal__/data_repo/fastapi/docs_src/dependencies/tutorial008c_an_py39.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n    if item_id == \"portal-gun\":\n        raise InternalError(\n            f\"The portal gun is too dangerous to be owned by {username}\"\n        )\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n        )\n    return item_id"
    },
    {
      "chunk_id": 2346,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04_py310.py",
      "content": "from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse"
    },
    {
      "chunk_id": 2347,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2348,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04_py310.py",
      "content": "@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
    },
    {
      "chunk_id": 2349,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2350,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2351,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2352,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py310.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2353,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py310.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2354,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse"
    },
    {
      "chunk_id": 2355,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2356,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05.py",
      "content": "@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
    },
    {
      "chunk_id": 2357,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003.py",
      "content": "from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2358,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003.py",
      "content": "class UserIn(BaseModel):\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2359,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003.py",
      "content": "class UserOut(BaseModel):\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2360,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    return user"
    },
    {
      "chunk_id": 2361,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_py310.py",
      "content": "from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2362,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_py310.py",
      "content": "class UserIn(BaseModel):\n    \"\"\"Model for user input data.\"\"\"\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2363,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_py310.py",
      "content": "class UserOut(BaseModel):\n    \"\"\"Model for user output data.\"\"\"\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2364,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_py310.py",
      "content": "@app.post(\"/user/\", response_model=UserOut)\nasync def create_user(user: UserIn) -> Any:\n    \"\"\"Create a new user.\"\"\"\n    return user"
    },
    {
      "chunk_id": 2365,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2366,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01_py310.py",
      "content": "class BaseUser(BaseModel):\n    \"\"\"Base user model.\"\"\"\n    username: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2367,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01_py310.py",
      "content": "class UserIn(BaseUser):\n    \"\"\"User input model.\"\"\"\n    password: str"
    },
    {
      "chunk_id": 2368,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01_py310.py",
      "content": "@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    \"\"\"Create a new user.\"\"\"\n    return user"
    },
    {
      "chunk_id": 2369,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2370,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2371,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
    },
    {
      "chunk_id": 2372,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}"
    },
    {
      "chunk_id": 2373,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2374,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006_py310.py",
      "content": "@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2375,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2376,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2377,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py39.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item"
    },
    {
      "chunk_id": 2378,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
    },
    {
      "chunk_id": 2379,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2380,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2381,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py310.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item"
    },
    {
      "chunk_id": 2382,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items() -> list[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
    },
    {
      "chunk_id": 2383,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2384,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002.py",
      "content": "class UserIn(BaseModel):\n    \"\"\"\n    User input model for creating a new user.\n    \"\"\"\n    username: str\n    password: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2385,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002.py",
      "content": "@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> UserIn:\n    return user"
    },
    {
      "chunk_id": 2386,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05_py310.py",
      "content": "from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse"
    },
    {
      "chunk_id": 2387,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2388,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_05_py310.py",
      "content": "@app.get(\"/portal\", response_model=None)\nasync def get_portal(teleport: bool = False) -> Response | dict:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
    },
    {
      "chunk_id": 2389,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2390,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2391,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py39.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2392,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004_py39.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2393,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2394,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002_py310.py",
      "content": "class UserIn(BaseModel):\n    \"\"\"User input model for creating a new user.\"\"\"\n    username: str\n    password: str\n    email: EmailStr\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2395,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial002_py310.py",
      "content": "@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> UserIn:\n    \"\"\"Create a new user.\"\"\"\n    return user"
    },
    {
      "chunk_id": 2396,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001.py",
      "content": "from typing import Any, List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2397,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2398,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
    },
    {
      "chunk_id": 2399,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001.py",
      "content": "@app.get(\"/items/\", response_model=List[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
    },
    {
      "chunk_id": 2400,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py39.py",
      "content": "from typing import Any, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2401,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2402,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py39.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
    },
    {
      "chunk_id": 2403,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py39.py",
      "content": "@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
    },
    {
      "chunk_id": 2404,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2405,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2406,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float = 10.5"
    },
    {
      "chunk_id": 2407,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}"
    },
    {
      "chunk_id": 2408,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2409,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005_py310.py",
      "content": "@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2410,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, EmailStr\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2411,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01.py",
      "content": "class BaseUser(BaseModel):\n    \"\"\"Base user model.\"\"\"\n    username: str\n    email: EmailStr\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2412,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01.py",
      "content": "class UserIn(BaseUser):\n    \"\"\"User input model.\"\"\"\n    password: str"
    },
    {
      "chunk_id": 2413,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_01.py",
      "content": "@app.post(\"/user/\")\nasync def create_user(user: UserIn) -> BaseUser:\n    \"\"\"Create a new user.\"\"\"\n    return user"
    },
    {
      "chunk_id": 2414,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2415,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
    },
    {
      "chunk_id": 2416,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}"
    },
    {
      "chunk_id": 2417,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005.py",
      "content": "@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include={\"name\", \"description\"},\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2418,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial005.py",
      "content": "@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2419,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2420,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2421,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2422,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2423,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial004.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2424,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2425,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: float = 10.5"
    },
    {
      "chunk_id": 2426,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\n        \"name\": \"Baz\",\n        \"description\": \"There goes my baz\",\n        \"price\": 50.2,\n        \"tax\": 10.5,\n    },\n}"
    },
    {
      "chunk_id": 2427,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006.py",
      "content": "@app.get(\n    \"/items/{item_id}/name\",\n    response_model=Item,\n    response_model_include=[\"name\", \"description\"],\n)\nasync def read_item_name(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2428,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial006.py",
      "content": "@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\nasync def read_item_public_data(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2429,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_02.py",
      "content": "from fastapi import FastAPI, Response\nfrom fastapi.responses import JSONResponse, RedirectResponse"
    },
    {
      "chunk_id": 2430,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_02.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2431,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_02.py",
      "content": "@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Response:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})"
    },
    {
      "chunk_id": 2432,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py310.py",
      "content": "from typing import Any\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2433,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2434,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py310.py",
      "content": "@app.post(\"/items/\", response_model=Item)\nasync def create_item(item: Item) -> Any:\n    return item"
    },
    {
      "chunk_id": 2435,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_py310.py",
      "content": "@app.get(\"/items/\", response_model=list[Item])\nasync def read_items() -> Any:\n    return [\n        {\"name\": \"Portal Gun\", \"price\": 42.0},\n        {\"name\": \"Plumbus\", \"price\": 32.0},\n    ]"
    },
    {
      "chunk_id": 2436,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_03.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2437,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_03.py",
      "content": "@app.get(\"/teleport\")\nasync def get_teleport() -> RedirectResponse:\n    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")"
    },
    {
      "chunk_id": 2438,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2439,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04.py",
      "content": "from fastapi import FastAPI, Response\nfrom fastapi.responses import RedirectResponse"
    },
    {
      "chunk_id": 2440,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2441,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial003_04.py",
      "content": "@app.get(\"/portal\")\nasync def get_portal(teleport: bool = False) -> Union[Response, dict]:\n    if teleport:\n        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n    return {\"message\": \"Here's your interdimensional portal.\"}"
    },
    {
      "chunk_id": 2442,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2443,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2444,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item) -> Item:\n    return item"
    },
    {
      "chunk_id": 2445,
      "source": "__internal__/data_repo/fastapi/docs_src/response_model/tutorial001_01.py",
      "content": "@app.get(\"/items/\")\nasync def read_items() -> List[Item]:\n    return [\n        Item(name=\"Portal Gun\", price=42.0),\n        Item(name=\"Plumbus\", price=32.0),\n    ]"
    },
    {
      "chunk_id": 2446,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "from contextlib import asynccontextmanager\n\nfrom fastapi import FastAPI"
    },
    {
      "chunk_id": 2447,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "def fake_answer_to_everything_ml_model(x: float):\n    return x * 42"
    },
    {
      "chunk_id": 2448,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "ml_models = {}"
    },
    {
      "chunk_id": 2449,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # Load the ML model\n    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n    yield\n    # Clean up the ML models and release the resources\n    ml_models.clear()"
    },
    {
      "chunk_id": 2450,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "app = FastAPI(lifespan=lifespan)"
    },
    {
      "chunk_id": 2451,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial003.py",
      "content": "@app.get(\"/predict\")\nasync def predict(x: float):\n    result = ml_models[\"answer_to_everything\"](x)\n    return {\"result\": result}"
    },
    {
      "chunk_id": 2452,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2453,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2454,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial002.py",
      "content": "@app.on_event(\"shutdown\")\ndef shutdown_event():\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(\"Application shutdown\")"
    },
    {
      "chunk_id": 2455,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]"
    },
    {
      "chunk_id": 2456,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2457,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2458,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial001.py",
      "content": "items = {}"
    },
    {
      "chunk_id": 2459,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial001.py",
      "content": "@app.on_event(\"startup\")\nasync def startup_event():\n    items[\"foo\"] = {\"name\": \"Fighters\"}\n    items[\"bar\"] = {\"name\": \"Tenders\"}"
    },
    {
      "chunk_id": 2460,
      "source": "__internal__/data_repo/fastapi/docs_src/events/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_items(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2461,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2462,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2463,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2464,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2465,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002.py",
      "content": "@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item"
    },
    {
      "chunk_id": 2466,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2467,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2468,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2469,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2470,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2471,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py310.py",
      "content": "@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item"
    },
    {
      "chunk_id": 2472,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2473,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2474,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2475,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2476,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded"
    },
    {
      "chunk_id": 2477,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2478,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2479,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py39.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2480,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py39.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2481,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py39.py",
      "content": "@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded"
    },
    {
      "chunk_id": 2482,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2483,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: Union[str, None] = None\n    description: Union[str, None] = None\n    price: Union[float, None] = None\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2484,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py39.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2485,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py39.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2486,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial002_py39.py",
      "content": "@app.patch(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    stored_item_data = items[item_id]\n    stored_item_model = Item(**stored_item_data)\n    update_data = item.dict(exclude_unset=True)\n    updated_item = stored_item_model.copy(update=update_data)\n    items[item_id] = jsonable_encoder(updated_item)\n    return updated_item"
    },
    {
      "chunk_id": 2487,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py310.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2488,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str | None = None\n    description: str | None = None\n    price: float | None = None\n    tax: float = 10.5\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2489,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py310.py",
      "content": "items = {\n    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n}"
    },
    {
      "chunk_id": 2490,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py310.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: str):\n    return items[item_id]"
    },
    {
      "chunk_id": 2491,
      "source": "__internal__/data_repo/fastapi/docs_src/body_updates/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\", response_model=Item)\nasync def update_item(item_id: str, item: Item):\n    update_item_encoded = jsonable_encoder(item)\n    items[item_id] = update_item_encoded\n    return update_item_encoded"
    },
    {
      "chunk_id": 2492,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2493,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "def custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\""
    },
    {
      "chunk_id": 2494,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "app = FastAPI(generate_unique_id_function=custom_generate_unique_id)"
    },
    {
      "chunk_id": 2495,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2496,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2497,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str"
    },
    {
      "chunk_id": 2498,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}"
    },
    {
      "chunk_id": 2499,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2500,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003.py",
      "content": "@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}"
    },
    {
      "chunk_id": 2501,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2502,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2503,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2504,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str"
    },
    {
      "chunk_id": 2505,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}"
    },
    {
      "chunk_id": 2506,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "@app.get(\"/items/\", response_model=List[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2507,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002.py",
      "content": "@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}"
    },
    {
      "chunk_id": 2508,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2509,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2510,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2511,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}"
    },
    {
      "chunk_id": 2512,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001.py",
      "content": "@app.get(\"/items/\", response_model=List[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2513,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2514,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2515,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001_py39.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2516,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001_py39.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage)\nasync def create_item(item: Item):\n    return {\"message\": \"item received\"}"
    },
    {
      "chunk_id": 2517,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial001_py39.py",
      "content": "@app.get(\"/items/\", response_model=list[Item])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2518,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial004.py",
      "content": "import json\nfrom pathlib import Path"
    },
    {
      "chunk_id": 2519,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial004.py",
      "content": "file_path = Path(\"./openapi.json\")\nopenapi_content = json.loads(file_path.read_text())"
    },
    {
      "chunk_id": 2520,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial004.py",
      "content": "for path_data in openapi_content[\"paths\"].values():\n    for operation in path_data.values():\n        tag = operation[\"tags\"][0]\n        operation_id = operation[\"operationId\"]\n        to_remove = f\"{tag}-\"\n        new_operation_id = operation_id[len(to_remove) :]\n        operation[\"operationId\"] = new_operation_id"
    },
    {
      "chunk_id": 2521,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial004.py",
      "content": "file_path.write_text(json.dumps(openapi_content))"
    },
    {
      "chunk_id": 2522,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2523,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "def custom_generate_unique_id(route: APIRoute):\n    return f\"{route.tags[0]}-{route.name}\""
    },
    {
      "chunk_id": 2524,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "app = FastAPI(generate_unique_id_function=custom_generate_unique_id)"
    },
    {
      "chunk_id": 2525,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2526,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2527,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str"
    },
    {
      "chunk_id": 2528,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}"
    },
    {
      "chunk_id": 2529,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2530,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial003_py39.py",
      "content": "@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}"
    },
    {
      "chunk_id": 2531,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2532,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    price: float"
    },
    {
      "chunk_id": 2533,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "class ResponseMessage(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 2534,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    email: str"
    },
    {
      "chunk_id": 2535,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "@app.post(\"/items/\", response_model=ResponseMessage, tags=[\"items\"])\nasync def create_item(item: Item):\n    return {\"message\": \"Item received\"}"
    },
    {
      "chunk_id": 2536,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "@app.get(\"/items/\", response_model=list[Item], tags=[\"items\"])\nasync def get_items():\n    return [\n        {\"name\": \"Plumbus\", \"price\": 3},\n        {\"name\": \"Portal Gun\", \"price\": 9001},\n    ]"
    },
    {
      "chunk_id": 2537,
      "source": "__internal__/data_repo/fastapi/docs_src/generate_clients/tutorial002_py39.py",
      "content": "@app.post(\"/users/\", response_model=ResponseMessage, tags=[\"users\"])\nasync def create_user(user: User):\n    return {\"message\": \"User received\"}"
    },
    {
      "chunk_id": 2538,
      "source": "__internal__/data_repo/fastapi/docs_src/extending_openapi/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2539,
      "source": "__internal__/data_repo/fastapi/docs_src/extending_openapi/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]"
    },
    {
      "chunk_id": 2540,
      "source": "__internal__/data_repo/fastapi/docs_src/extending_openapi/tutorial001.py",
      "content": "def custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        summary=\"This is a very custom OpenAPI schema\",\n        description=\"Here's a longer description of the custom **OpenAPI** schema\",\n        routes=app.routes,\n    )\n    openapi_schema[\"info\"][\"x-logo\"] = {\n        \"url\": \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\"\n    }\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema"
    },
    {
      "chunk_id": 2541,
      "source": "__internal__/data_repo/fastapi/docs_src/extending_openapi/tutorial001.py",
      "content": "app.openapi = custom_openapi"
    },
    {
      "chunk_id": 2542,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "```python"
    },
    {
      "chunk_id": 2543,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "import os\nimport sys"
    },
    {
      "chunk_id": 2544,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "class MyClass:\n    \"\"\"This is a sample class.\"\"\"\n    \n    def __init__(self, value):\n        self.value = value"
    },
    {
      "chunk_id": 2545,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "def method_one(self):\n        print(\"Method One:\", self.value)"
    },
    {
      "chunk_id": 2546,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "def method_two(self):\n        print(\"Method Two:\", self.value)"
    },
    {
      "chunk_id": 2547,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/__init__.py",
      "content": "def standalone_function(param):\n    return param * 2\n```"
    },
    {
      "chunk_id": 2548,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2549,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/dependencies.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Header, HTTPException"
    },
    {
      "chunk_id": 2550,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/dependencies.py",
      "content": "async def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2551,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/dependencies.py",
      "content": "async def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")"
    },
    {
      "chunk_id": 2552,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/main.py",
      "content": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users"
    },
    {
      "chunk_id": 2553,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/main.py",
      "content": "app = FastAPI(dependencies=[Depends(get_query_token)])"
    },
    {
      "chunk_id": 2554,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/main.py",
      "content": "app.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)"
    },
    {
      "chunk_id": 2555,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/main.py",
      "content": "@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}"
    },
    {
      "chunk_id": 2556,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2557,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/users.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2558,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/users.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2559,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/users.py",
      "content": "@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2560,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/users.py",
      "content": "@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}"
    },
    {
      "chunk_id": 2561,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/users.py",
      "content": "@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 2562,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header"
    },
    {
      "chunk_id": 2563,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)"
    },
    {
      "chunk_id": 2564,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "fake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}"
    },
    {
      "chunk_id": 2565,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "@router.get(\"/\")\nasync def read_items():\n    return fake_items_db"
    },
    {
      "chunk_id": 2566,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}"
    },
    {
      "chunk_id": 2567,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/routers/items.py",
      "content": "@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}"
    },
    {
      "chunk_id": 2568,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/internal/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2569,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/internal/admin.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2570,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/internal/admin.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2571,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an_py39/internal/admin.py",
      "content": "@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}"
    },
    {
      "chunk_id": 2572,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2573,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/dependencies.py",
      "content": "from fastapi import Header, HTTPException\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2574,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/dependencies.py",
      "content": "async def get_token_header(x_token: Annotated[str, Header()]):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2575,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/dependencies.py",
      "content": "async def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")"
    },
    {
      "chunk_id": 2576,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/main.py",
      "content": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users"
    },
    {
      "chunk_id": 2577,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/main.py",
      "content": "app = FastAPI(dependencies=[Depends(get_query_token)])"
    },
    {
      "chunk_id": 2578,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/main.py",
      "content": "app.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)"
    },
    {
      "chunk_id": 2579,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/main.py",
      "content": "@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}"
    },
    {
      "chunk_id": 2580,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2581,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/users.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2582,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/users.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2583,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/users.py",
      "content": "@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2584,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/users.py",
      "content": "@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}"
    },
    {
      "chunk_id": 2585,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/users.py",
      "content": "@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 2586,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header"
    },
    {
      "chunk_id": 2587,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)"
    },
    {
      "chunk_id": 2588,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "fake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}"
    },
    {
      "chunk_id": 2589,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "@router.get(\"/\")\nasync def read_items():\n    return fake_items_db"
    },
    {
      "chunk_id": 2590,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}"
    },
    {
      "chunk_id": 2591,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/routers/items.py",
      "content": "@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}"
    },
    {
      "chunk_id": 2592,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/internal/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2593,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/internal/admin.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2594,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/internal/admin.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2595,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app_an/internal/admin.py",
      "content": "@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}"
    },
    {
      "chunk_id": 2596,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2597,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/dependencies.py",
      "content": "from fastapi import Header, HTTPException"
    },
    {
      "chunk_id": 2598,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/dependencies.py",
      "content": "async def get_token_header(x_token: str = Header()):\n    if x_token != \"fake-super-secret-token\":\n        raise HTTPException(status_code=400, detail=\"X-Token header invalid\")"
    },
    {
      "chunk_id": 2599,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/dependencies.py",
      "content": "async def get_query_token(token: str):\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")"
    },
    {
      "chunk_id": 2600,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/main.py",
      "content": "from fastapi import Depends, FastAPI\n\nfrom .dependencies import get_query_token, get_token_header\nfrom .internal import admin\nfrom .routers import items, users"
    },
    {
      "chunk_id": 2601,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/main.py",
      "content": "app = FastAPI(dependencies=[Depends(get_query_token)])"
    },
    {
      "chunk_id": 2602,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/main.py",
      "content": "app.include_router(users.router)\napp.include_router(items.router)\napp.include_router(\n    admin.router,\n    prefix=\"/admin\",\n    tags=[\"admin\"],\n    dependencies=[Depends(get_token_header)],\n    responses={418: {\"description\": \"I'm a teapot\"}},\n)"
    },
    {
      "chunk_id": 2603,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/main.py",
      "content": "@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello Bigger Applications!\"}"
    },
    {
      "chunk_id": 2604,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2605,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/users.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2606,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/users.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2607,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/users.py",
      "content": "@router.get(\"/users/\", tags=[\"users\"])\nasync def read_users():\n    return [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]"
    },
    {
      "chunk_id": 2608,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/users.py",
      "content": "@router.get(\"/users/me\", tags=[\"users\"])\nasync def read_user_me():\n    return {\"username\": \"fakecurrentuser\"}"
    },
    {
      "chunk_id": 2609,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/users.py",
      "content": "@router.get(\"/users/{username}\", tags=[\"users\"])\nasync def read_user(username: str):\n    return {\"username\": username}"
    },
    {
      "chunk_id": 2610,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException\n\nfrom ..dependencies import get_token_header"
    },
    {
      "chunk_id": 2611,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "router = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)"
    },
    {
      "chunk_id": 2612,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "fake_items_db = {\"plumbus\": {\"name\": \"Plumbus\"}, \"gun\": {\"name\": \"Portal Gun\"}}"
    },
    {
      "chunk_id": 2613,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "@router.get(\"/\")\nasync def read_items():\n    return fake_items_db"
    },
    {
      "chunk_id": 2614,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "@router.get(\"/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in fake_items_db:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"name\": fake_items_db[item_id][\"name\"], \"item_id\": item_id}"
    },
    {
      "chunk_id": 2615,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/routers/items.py",
      "content": "@router.put(\n    \"/{item_id}\",\n    tags=[\"custom\"],\n    responses={403: {\"description\": \"Operation forbidden\"}},\n)\nasync def update_item(item_id: str):\n    if item_id != \"plumbus\":\n        raise HTTPException(\n            status_code=403, detail=\"You can only update the item: plumbus\"\n        )\n    return {\"item_id\": item_id, \"name\": \"The great Plumbus\"}"
    },
    {
      "chunk_id": 2616,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/internal/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2617,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/internal/admin.py",
      "content": "from fastapi import APIRouter"
    },
    {
      "chunk_id": 2618,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/internal/admin.py",
      "content": "router = APIRouter()"
    },
    {
      "chunk_id": 2619,
      "source": "__internal__/data_repo/fastapi/docs_src/bigger_applications/app/internal/admin.py",
      "content": "@router.post(\"/\")\nasync def update_admin():\n    return {\"message\": \"Admin getting schwifty\"}"
    },
    {
      "chunk_id": 2620,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004_py310.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2621,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2622,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004_py310.py",
      "content": "@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: str | None = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
    },
    {
      "chunk_id": 2623,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2624,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2625,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2626,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
    },
    {
      "chunk_id": 2627,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003_py310.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2628,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2629,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial003_py310.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None, short: bool = False):\n    item = {\"item_id\": item_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
    },
    {
      "chunk_id": 2630,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006_py310.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2631,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2632,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006_py310.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
    },
    {
      "chunk_id": 2633,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2634,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2635,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2636,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: Union[str, None] = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 2637,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002_py310.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2638,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2639,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial002_py310.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str, q: str | None = None):\n    if q:\n        return {\"item_id\": item_id, \"q\": q}\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 2640,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2641,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2642,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial001.py",
      "content": "fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]"
    },
    {
      "chunk_id": 2643,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_item(skip: int = 0, limit: int = 10):\n    return fake_items_db[skip : skip + limit]"
    },
    {
      "chunk_id": 2644,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial005.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2645,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2646,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial005.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_user_item(item_id: str, needy: str):\n    item = {\"item_id\": item_id, \"needy\": needy}\n    return item"
    },
    {
      "chunk_id": 2647,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2648,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2649,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2650,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial004.py",
      "content": "@app.get(\"/users/{user_id}/items/{item_id}\")\nasync def read_user_item(\n    user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False\n):\n    item = {\"item_id\": item_id, \"owner_id\": user_id}\n    if q:\n        item.update({\"q\": q})\n    if not short:\n        item.update(\n            {\"description\": \"This is an amazing item that has a long description\"}\n        )\n    return item"
    },
    {
      "chunk_id": 2651,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2652,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2653,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2654,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
    },
    {
      "chunk_id": 2655,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006b.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2656,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006b.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2657,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006b.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2658,
      "source": "__internal__/data_repo/fastapi/docs_src/query_params/tutorial006b.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_user_item(\n    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n):\n    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n    return item"
    },
    {
      "chunk_id": 2659,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001.py",
      "content": "from fastapi import FastAPI, File, Form, UploadFile"
    },
    {
      "chunk_id": 2660,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2661,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(\n    file: bytes = File(), fileb: UploadFile = File(), token: str = Form()\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }"
    },
    {
      "chunk_id": 2662,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an_py39.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2663,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an_py39.py",
      "content": "from fastapi import FastAPI, File, Form, UploadFile"
    },
    {
      "chunk_id": 2664,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2665,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an_py39.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }"
    },
    {
      "chunk_id": 2666,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an.py",
      "content": "from fastapi import FastAPI, File, Form, UploadFile\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2667,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2668,
      "source": "__internal__/data_repo/fastapi/docs_src/request_forms_and_files/tutorial001_an.py",
      "content": "@app.post(\"/files/\")\nasync def create_file(\n    file: Annotated[bytes, File()],\n    fileb: Annotated[UploadFile, File()],\n    token: Annotated[str, Form()],\n):\n    return {\n        \"file_size\": len(file),\n        \"token\": token,\n        \"fileb_content_type\": fileb.content_type,\n    }"
    },
    {
      "chunk_id": 2669,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import APIRouter, FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2670,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "class Invoice(BaseModel):\n    id: str\n    title: Union[str, None] = None\n    customer: str\n    total: float"
    },
    {
      "chunk_id": 2671,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "class InvoiceEvent(BaseModel):\n    description: str\n    paid: bool"
    },
    {
      "chunk_id": 2672,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "class InvoiceEventReceived(BaseModel):\n    ok: bool"
    },
    {
      "chunk_id": 2673,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "invoices_callback_router = APIRouter()"
    },
    {
      "chunk_id": 2674,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "@invoices_callback_router.post(\n    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n)\ndef invoice_notification(body: InvoiceEvent):\n    pass"
    },
    {
      "chunk_id": 2675,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_callbacks/tutorial001.py",
      "content": "@app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\ndef create_invoice(invoice: Invoice, callback_url: Union[HttpUrl, None] = None):\n    \"\"\"\n    Create an invoice.\n\n    This will (let's imagine) let the API user (some external developer) create an\n    invoice.\n\n    And this path operation will:\n\n    * Send the invoice to the client.\n    * Collect the money from the client.\n    * Send a notification back to the API user (the external developer), as a callback.\n        * At this point is that the API will somehow send a POST request to the\n            external API with the notification of the invoice event\n            (e.g. \"payment successful\").\n    \"\"\"\n    # Send the invoice, collect the money, send the notification (the callback)\n    return {\"msg\": \"Invoice received\"}"
    },
    {
      "chunk_id": 2676,
      "source": "__internal__/data_repo/fastapi/docs_src/static_files/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles"
    },
    {
      "chunk_id": 2677,
      "source": "__internal__/data_repo/fastapi/docs_src/static_files/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2678,
      "source": "__internal__/data_repo/fastapi/docs_src/static_files/tutorial001.py",
      "content": "app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")"
    },
    {
      "chunk_id": 2679,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "import time\nfrom typing import Callable\n\nfrom fastapi import APIRouter, FastAPI, Request, Response\nfrom fastapi.routing import APIRoute"
    },
    {
      "chunk_id": 2680,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "class TimedRoute(APIRoute):\n    \"\"\"Custom route that measures response time.\"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)"
    },
    {
      "chunk_id": 2681,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            before = time.time()\n            response: Response = await original_route_handler(request)\n            duration = time.time() - before\n            response.headers[\"X-Response-Time\"] = str(duration)\n            print(f\"route duration: {duration}\")\n            print(f\"route response: {response}\")\n            print(f\"route response headers: {response.headers}\")\n            return response\n\n        return custom_route_handler"
    },
    {
      "chunk_id": 2682,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "app = FastAPI()\nrouter = APIRouter(route_class=TimedRoute)"
    },
    {
      "chunk_id": 2683,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "@app.get(\"/\")\nasync def not_timed():\n    return {\"message\": \"Not timed\"}"
    },
    {
      "chunk_id": 2684,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "@router.get(\"/timed\")\nasync def timed():\n    return {\"message\": \"It's the time of my life\"}"
    },
    {
      "chunk_id": 2685,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial003.py",
      "content": "app.include_router(router)"
    },
    {
      "chunk_id": 2686,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial002.py",
      "content": "from typing import Callable, List\n\nfrom fastapi import Body, FastAPI, HTTPException, Request, Response\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.routing import APIRoute"
    },
    {
      "chunk_id": 2687,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial002.py",
      "content": "class ValidationErrorLoggingRoute(APIRoute):\n    \"\"\"Custom route that logs validation errors.\"\"\"\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)"
    },
    {
      "chunk_id": 2688,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial002.py",
      "content": "def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            try:\n                return await original_route_handler(request)\n            except RequestValidationError as exc:\n                body = await request.body()\n                detail = {\"errors\": exc.errors(), \"body\": body.decode()}\n                raise HTTPException(status_code=422, detail=detail)\n\n        return custom_route_handler"
    },
    {
      "chunk_id": 2689,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial002.py",
      "content": "app = FastAPI()\napp.router.route_class = ValidationErrorLoggingRoute"
    },
    {
      "chunk_id": 2690,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial002.py",
      "content": "@app.post(\"/\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return sum(numbers)"
    },
    {
      "chunk_id": 2691,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial001.py",
      "content": "import gzip\nfrom typing import Callable, List\n\nfrom fastapi import Body, FastAPI, Request, Response\nfrom fastapi.routing import APIRoute"
    },
    {
      "chunk_id": 2692,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial001.py",
      "content": "class GzipRequest(Request):\n    async def body(self) -> bytes:\n        if not hasattr(self, \"_body\"):\n            body = await super().body()\n            if \"gzip\" in self.headers.getlist(\"Content-Encoding\"):\n                body = gzip.decompress(body)\n            self._body = body\n        return self._body"
    },
    {
      "chunk_id": 2693,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial001.py",
      "content": "class GzipRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = super().get_route_handler()\n\n        async def custom_route_handler(request: Request) -> Response:\n            request = GzipRequest(request.scope, request.receive)\n            return await original_route_handler(request)\n\n        return custom_route_handler"
    },
    {
      "chunk_id": 2694,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial001.py",
      "content": "app = FastAPI()\napp.router.route_class = GzipRoute"
    },
    {
      "chunk_id": 2695,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_request_and_route/tutorial001.py",
      "content": "@app.post(\"/sum\")\nasync def sum_numbers(numbers: List[int] = Body()):\n    return {\"sum\": sum(numbers)}"
    },
    {
      "chunk_id": 2696,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py310.py",
      "content": "from typing import Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2697,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py310.py",
      "content": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2698,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2699,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal"
    },
    {
      "chunk_id": 2700,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2701,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py39.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"Filter parameters for querying items.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2702,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2703,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2704,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2705,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2706,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2707,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2708,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2709,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2710,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1.py",
      "content": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2711,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2712,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py310.py",
      "content": "from typing import Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field"
    },
    {
      "chunk_id": 2713,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2714,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py310.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2715,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2716,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2717,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"\n    Parameters for filtering items.\n    \"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2718,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2719,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal"
    },
    {
      "chunk_id": 2720,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2721,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py39.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"\n    Parameters for filtering items.\n    \"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2722,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2723,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal"
    },
    {
      "chunk_id": 2724,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2725,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py39.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"\n    Parameters for filtering items.\n    \"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2726,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2727,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py310.py",
      "content": "from typing import Annotated, Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field"
    },
    {
      "chunk_id": 2728,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2729,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py310.py",
      "content": "class FilterParams(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2730,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2731,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py310.py",
      "content": "from typing import Annotated, Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2732,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py310.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"Filter parameters for item retrieval.\"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2733,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2734,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal"
    },
    {
      "chunk_id": 2735,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2736,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py39.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2737,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2738,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2739,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"Filter parameters for item retrieval.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2740,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2741,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal"
    },
    {
      "chunk_id": 2742,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2743,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py39.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"Filter parameters for item retrieval.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2744,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_pv1_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2745,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py310.py",
      "content": "from typing import Annotated, Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field"
    },
    {
      "chunk_id": 2746,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2747,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py310.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2748,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2749,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an.py",
      "content": "from typing import List\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Annotated, Literal\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2750,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"\n    Parameters for filtering items.\n    \"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: List[str] = []"
    },
    {
      "chunk_id": 2751,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: Annotated[FilterParams, Query()]):\n    return filter_query"
    },
    {
      "chunk_id": 2752,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py39.py",
      "content": "from fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import Literal"
    },
    {
      "chunk_id": 2753,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2754,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py39.py",
      "content": "class FilterParams(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2755,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial002_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    return filter_query"
    },
    {
      "chunk_id": 2756,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py310.py",
      "content": "from typing import Literal\n\nfrom fastapi import FastAPI, Query\nfrom pydantic import BaseModel, Field\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2757,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py310.py",
      "content": "class FilterParams(BaseModel):\n    \"\"\"Filter parameters for querying items.\"\"\"\n    limit: int = Field(100, gt=0, le=100)\n    offset: int = Field(0, ge=0)\n    order_by: Literal[\"created_at\", \"updated_at\"] = \"created_at\"\n    tags: list[str] = []"
    },
    {
      "chunk_id": 2758,
      "source": "__internal__/data_repo/fastapi/docs_src/query_param_models/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(filter_query: FilterParams = Query()):\n    \"\"\"Read items with given filter parameters.\"\"\"\n    return filter_query"
    },
    {
      "chunk_id": 2759,
      "source": "__internal__/data_repo/fastapi/docs_src/response_cookies/tutorial002.py",
      "content": "from fastapi import FastAPI, Response"
    },
    {
      "chunk_id": 2760,
      "source": "__internal__/data_repo/fastapi/docs_src/response_cookies/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2761,
      "source": "__internal__/data_repo/fastapi/docs_src/response_cookies/tutorial002.py",
      "content": "@app.post(\"/cookie-and-object/\")\ndef create_cookie(response: Response):\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return {\"message\": \"Come to the dark side, we have cookies\"}"
    },
    {
      "chunk_id": 2762,
      "source": "__internal__/data_repo/fastapi/docs_src/response_cookies/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2763,
      "source": "__internal__/data_repo/fastapi/docs_src/response_cookies/tutorial001.py",
      "content": "@app.post(\"/cookie/\")\ndef create_cookie():\n    content = {\"message\": \"Come to the dark side, we have cookies\"}\n    response = JSONResponse(content=content)\n    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n    return response"
    },
    {
      "chunk_id": 2764,
      "source": "__internal__/data_repo/fastapi/docs_src/templates/tutorial001.py",
      "content": "from fastapi import FastAPI, Request\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates"
    },
    {
      "chunk_id": 2765,
      "source": "__internal__/data_repo/fastapi/docs_src/templates/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2766,
      "source": "__internal__/data_repo/fastapi/docs_src/templates/tutorial001.py",
      "content": "app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")"
    },
    {
      "chunk_id": 2767,
      "source": "__internal__/data_repo/fastapi/docs_src/templates/tutorial001.py",
      "content": "templates = Jinja2Templates(directory=\"templates\")"
    },
    {
      "chunk_id": 2768,
      "source": "__internal__/data_repo/fastapi/docs_src/templates/tutorial001.py",
      "content": "@app.get(\"/items/{id}\", response_class=HTMLResponse)\nasync def read_item(request: Request, id: str):\n    return templates.TemplateResponse(\n        request=request, name=\"item.html\", context={\"id\": id}\n    )"
    },
    {
      "chunk_id": 2769,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2770,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings for the application.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2771,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001.py",
      "content": "settings = Settings()\napp = FastAPI()"
    },
    {
      "chunk_id": 2772,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001.py",
      "content": "@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2773,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001_pv1.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseSettings"
    },
    {
      "chunk_id": 2774,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001_pv1.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"Settings for the application.\"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2775,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001_pv1.py",
      "content": "settings = Settings()\napp = FastAPI()"
    },
    {
      "chunk_id": 2776,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/tutorial001_pv1.py",
      "content": "@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2777,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2778,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/main.py",
      "content": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings"
    },
    {
      "chunk_id": 2779,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2780,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return Settings()"
    },
    {
      "chunk_id": 2781,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2782,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 2783,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/test_main.py",
      "content": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")"
    },
    {
      "chunk_id": 2784,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/test_main.py",
      "content": "app.dependency_overrides[get_settings] = get_settings_override"
    },
    {
      "chunk_id": 2785,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/test_main.py",
      "content": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }"
    },
    {
      "chunk_id": 2786,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2787,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class for application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2788,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2789,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/main.py",
      "content": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\nfrom .config import Settings\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2790,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return Settings()"
    },
    {
      "chunk_id": 2791,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2792,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 2793,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/test_main.py",
      "content": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")"
    },
    {
      "chunk_id": 2794,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/test_main.py",
      "content": "app.dependency_overrides[get_settings] = get_settings_override"
    },
    {
      "chunk_id": 2795,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/test_main.py",
      "content": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }"
    },
    {
      "chunk_id": 2796,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2797,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class for application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2798,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2799,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/main.py",
      "content": "from fastapi import FastAPI\n\nfrom .config import settings"
    },
    {
      "chunk_id": 2800,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2801,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/main.py",
      "content": "@app.get(\"/info\")\nasync def info():\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2802,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2803,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class for application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2804,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app01/config.py",
      "content": "settings = Settings()"
    },
    {
      "chunk_id": 2805,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2806,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/main.py",
      "content": "from functools import lru_cache\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\nfrom .config import Settings"
    },
    {
      "chunk_id": 2807,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2808,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return Settings()"
    },
    {
      "chunk_id": 2809,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: Annotated[Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2810,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/test_main.py",
      "content": "from fastapi.testclient import TestClient\n\nfrom .config import Settings\nfrom .main import app, get_settings\n\nclient = TestClient(app)"
    },
    {
      "chunk_id": 2811,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/test_main.py",
      "content": "def get_settings_override():\n    return Settings(admin_email=\"testing_admin@example.com\")"
    },
    {
      "chunk_id": 2812,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/test_main.py",
      "content": "app.dependency_overrides[get_settings] = get_settings_override"
    },
    {
      "chunk_id": 2813,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/test_main.py",
      "content": "def test_app():\n    response = client.get(\"/info\")\n    data = response.json()\n    assert data == {\n        \"app_name\": \"Awesome API\",\n        \"admin_email\": \"testing_admin@example.com\",\n        \"items_per_user\": 50,\n    }"
    },
    {
      "chunk_id": 2814,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2815,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app02_an_py39/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class for application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50"
    },
    {
      "chunk_id": 2816,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2817,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/main.py",
      "content": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\nfrom typing_extensions import Annotated\n\nfrom . import config\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2818,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return config.Settings()"
    },
    {
      "chunk_id": 2819,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2820,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2821,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an_py39/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class to manage application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\""
    },
    {
      "chunk_id": 2822,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "```python"
    },
    {
      "chunk_id": 2823,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "import os\nimport sys"
    },
    {
      "chunk_id": 2824,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "class MyClass:\n    \"\"\"This is a sample class.\"\"\"\n    \n    def __init__(self, value):\n        self.value = value"
    },
    {
      "chunk_id": 2825,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "def method_one(self):\n        print(\"Method One\")"
    },
    {
      "chunk_id": 2826,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "def method_two(self):\n        print(\"Method Two\")"
    },
    {
      "chunk_id": 2827,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/__init__.py",
      "content": "def standalone_function():\n    print(\"This is a standalone function.\")\n```"
    },
    {
      "chunk_id": 2828,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/main.py",
      "content": "from functools import lru_cache\n\nfrom fastapi import Depends, FastAPI\n\nfrom . import config"
    },
    {
      "chunk_id": 2829,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2830,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return config.Settings()"
    },
    {
      "chunk_id": 2831,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: config.Settings = Depends(get_settings)):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2832,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/config.py",
      "content": "from pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 2833,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class to manage application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\""
    },
    {
      "chunk_id": 2834,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "```python"
    },
    {
      "chunk_id": 2835,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "import os\nimport sys"
    },
    {
      "chunk_id": 2836,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "class MyClass:\n    \"\"\"This is a sample class.\"\"\"\n    \n    def __init__(self, value):\n        self.value = value"
    },
    {
      "chunk_id": 2837,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "def method_one(self):\n        return self.value + 1"
    },
    {
      "chunk_id": 2838,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "def method_two(self):\n        return self.value * 2"
    },
    {
      "chunk_id": 2839,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/__init__.py",
      "content": "def standalone_function(param):\n    return param ** 2\n```"
    },
    {
      "chunk_id": 2840,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/main.py",
      "content": "from functools import lru_cache\nfrom typing import Annotated\n\nfrom fastapi import Depends, FastAPI\n\nfrom . import config"
    },
    {
      "chunk_id": 2841,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2842,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/main.py",
      "content": "@lru_cache\ndef get_settings():\n    return config.Settings()"
    },
    {
      "chunk_id": 2843,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/main.py",
      "content": "@app.get(\"/info\")\nasync def info(settings: Annotated[config.Settings, Depends(get_settings)]):\n    return {\n        \"app_name\": settings.app_name,\n        \"admin_email\": settings.admin_email,\n        \"items_per_user\": settings.items_per_user,\n    }"
    },
    {
      "chunk_id": 2844,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/config_pv1.py",
      "content": "from pydantic import BaseSettings"
    },
    {
      "chunk_id": 2845,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/config_pv1.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class to manage application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    class Config:\n        env_file = \".env\""
    },
    {
      "chunk_id": 2846,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/config.py",
      "content": "from pydantic_settings import BaseSettings, SettingsConfigDict"
    },
    {
      "chunk_id": 2847,
      "source": "__internal__/data_repo/fastapi/docs_src/settings/app03_an/config.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"\n    Settings class for application configuration.\n    \"\"\"\n    app_name: str = \"Awesome API\"\n    admin_email: str\n    items_per_user: int = 50\n\n    model_config = SettingsConfigDict(env_file=\".env\")"
    },
    {
      "chunk_id": 2848,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)\nfrom fastapi.staticfiles import StaticFiles"
    },
    {
      "chunk_id": 2849,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "app = FastAPI(docs_url=None, redoc_url=None)"
    },
    {
      "chunk_id": 2850,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")"
    },
    {
      "chunk_id": 2851,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n        swagger_css_url=\"/static/swagger-ui.css\",\n    )"
    },
    {
      "chunk_id": 2852,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()"
    },
    {
      "chunk_id": 2853,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"/static/redoc.standalone.js\",\n    )"
    },
    {
      "chunk_id": 2854,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial002.py",
      "content": "@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}"
    },
    {
      "chunk_id": 2855,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.openapi.docs import (\n    get_redoc_html,\n    get_swagger_ui_html,\n    get_swagger_ui_oauth2_redirect_html,\n)"
    },
    {
      "chunk_id": 2856,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "app = FastAPI(docs_url=None, redoc_url=None)"
    },
    {
      "chunk_id": 2857,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Swagger UI\",\n        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n        swagger_js_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui-bundle.js\",\n        swagger_css_url=\"https://unpkg.com/swagger-ui-dist@5/swagger-ui.css\",\n    )"
    },
    {
      "chunk_id": 2858,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\nasync def swagger_ui_redirect():\n    return get_swagger_ui_oauth2_redirect_html()"
    },
    {
      "chunk_id": 2859,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "@app.get(\"/redoc\", include_in_schema=False)\nasync def redoc_html():\n    return get_redoc_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - ReDoc\",\n        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n    )"
    },
    {
      "chunk_id": 2860,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_docs_ui/tutorial001.py",
      "content": "@app.get(\"/users/{username}\")\nasync def read_user(username: str):\n    return {\"message\": f\"Hello {username}\"}"
    },
    {
      "chunk_id": 2861,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_webhooks/tutorial001.py",
      "content": "from datetime import datetime\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2862,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_webhooks/tutorial001.py",
      "content": "class Subscription(BaseModel):\n    \"\"\"\n    Subscription model for user subscriptions.\n    \"\"\"\n    username: str\n    monthly_fee: float\n    start_date: datetime"
    },
    {
      "chunk_id": 2863,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_webhooks/tutorial001.py",
      "content": "@app.webhooks.post(\"new-subscription\")\ndef new_subscription(body: Subscription):\n    \"\"\"\n    When a new user subscribes to your service we'll send you a POST request with this\n    data to the URL that you register for the event `new-subscription` in the dashboard.\n    \"\"\""
    },
    {
      "chunk_id": 2864,
      "source": "__internal__/data_repo/fastapi/docs_src/openapi_webhooks/tutorial001.py",
      "content": "@app.get(\"/users/\")\ndef read_users():\n    return [\"Rick\", \"Morty\"]"
    },
    {
      "chunk_id": 2865,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/__init__.py",
      "content": "Sure! Please provide the Python code you would like me to analyze and chunk."
    },
    {
      "chunk_id": 2866,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/main.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 2867,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/main.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2868,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/main.py",
      "content": "@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Tomato\"}"
    },
    {
      "chunk_id": 2869,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/test_main.py",
      "content": "import pytest\nfrom httpx import ASGITransport, AsyncClient\n\nfrom .main import app"
    },
    {
      "chunk_id": 2870,
      "source": "__internal__/data_repo/fastapi/docs_src/async_tests/test_main.py",
      "content": "@pytest.mark.anyio\nasync def test_root():\n    async with AsyncClient(\n        transport=ASGITransport(app=app), base_url=\"http://test\"\n    ) as ac:\n        response = await ac.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Tomato\"}"
    },
    {
      "chunk_id": 2871,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI"
    },
    {
      "chunk_id": 2872,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2873,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(ads_id: Union[str, None] = Cookie(default=None)):\n    return {\"ads_id\": ads_id}"
    },
    {
      "chunk_id": 2874,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union"
    },
    {
      "chunk_id": 2875,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py39.py",
      "content": "from fastapi import Cookie, FastAPI"
    },
    {
      "chunk_id": 2876,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2877,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}"
    },
    {
      "chunk_id": 2878,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py310.py",
      "content": "from typing import Annotated"
    },
    {
      "chunk_id": 2879,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py310.py",
      "content": "from fastapi import Cookie, FastAPI"
    },
    {
      "chunk_id": 2880,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2881,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[str | None, Cookie()] = None):\n    return {\"ads_id\": ads_id}"
    },
    {
      "chunk_id": 2882,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Cookie, FastAPI\nfrom typing_extensions import Annotated"
    },
    {
      "chunk_id": 2883,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2884,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(ads_id: Annotated[Union[str, None], Cookie()] = None):\n    return {\"ads_id\": ads_id}"
    },
    {
      "chunk_id": 2885,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_py310.py",
      "content": "from fastapi import Cookie, FastAPI"
    },
    {
      "chunk_id": 2886,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2887,
      "source": "__internal__/data_repo/fastapi/docs_src/cookie_params/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(ads_id: str | None = Cookie(default=None)):\n    return {\"ads_id\": ads_id}"
    },
    {
      "chunk_id": 2888,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2889,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2890,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2891,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 2892,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2893,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2894,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2895,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 2896,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2897,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2898,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2899,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
    },
    {
      "chunk_id": 2900,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2901,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2902,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2903,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
    },
    {
      "chunk_id": 2904,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2905,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2906,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2907,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User, importance: int = Body()):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
    },
    {
      "chunk_id": 2908,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2909,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2910,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 2911,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2912,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2913,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 2914,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2915,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2916,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2917,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: str | None = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 2918,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2919,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2920,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py310.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2921,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
    },
    {
      "chunk_id": 2922,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "from typing import Union"
    },
    {
      "chunk_id": 2923,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2924,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2925,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2926,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "class User(BaseModel):\n    \"\"\"\n    Represents a user with a username and an optional full name.\n    \"\"\"\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2927,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
    },
    {
      "chunk_id": 2928,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002_py310.py",
      "content": "from fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2929,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Represents an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2930,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002_py310.py",
      "content": "class User(BaseModel):\n    \"\"\"\n    Represents a user with a username and an optional full name.\n    \"\"\"\n    username: str\n    full_name: str | None = None"
    },
    {
      "chunk_id": 2931,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial002_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item, user: User):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n    return results"
    },
    {
      "chunk_id": 2932,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2933,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model representing an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2934,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
    },
    {
      "chunk_id": 2935,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2936,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2937,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py39.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2938,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
    },
    {
      "chunk_id": 2939,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_py310.py",
      "content": "from fastapi import Body, FastAPI\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2940,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2941,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A model for an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2942,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 2943,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2944,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2945,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py310.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2946,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
    },
    {
      "chunk_id": 2947,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2948,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2949,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Item = Body(embed=True)):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 2950,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004.py",
      "content": "from typing import Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2951,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2952,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2953,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: int = Body(gt=0),\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 2954,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2955,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2956,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial005_an_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(item_id: int, item: Annotated[Item, Body(embed=True)]):\n    results = {\"item_id\": item_id, \"item\": item}\n    return results"
    },
    {
      "chunk_id": 2957,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2958,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2959,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2960,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial003_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: int, item: Item, user: User, importance: Annotated[int, Body()]\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    return results"
    },
    {
      "chunk_id": 2961,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import Body, FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2962,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py39.py",
      "content": "class Item(BaseModel):\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2963,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py39.py",
      "content": "class User(BaseModel):\n    username: str\n    full_name: Union[str, None] = None"
    },
    {
      "chunk_id": 2964,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial004_an_py39.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int,\n    item: Item,\n    user: User,\n    importance: Annotated[int, Body(gt=0)],\n    q: Union[str, None] = None,\n):\n    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n    if q:\n        results.update({\"q\": q})\n    return results"
    },
    {
      "chunk_id": 2965,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Path\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2966,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    A class representing an item with a name, description, price, and tax.\n    \"\"\"\n    name: str\n    description: Union[str, None] = None\n    price: float\n    tax: Union[float, None] = None"
    },
    {
      "chunk_id": 2967,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_an.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    item_id: Annotated[int, Path(title=\"The ID of the item to get\", ge=0, le=1000)],\n    q: Union[str, None] = None,\n    item: Union[Item, None] = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
    },
    {
      "chunk_id": 2968,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_py310.py",
      "content": "from fastapi import FastAPI, Path\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2969,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2970,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_py310.py",
      "content": "class Item(BaseModel):\n    \"\"\"\n    Item model for FastAPI.\n    \"\"\"\n    name: str\n    description: str | None = None\n    price: float\n    tax: float | None = None"
    },
    {
      "chunk_id": 2971,
      "source": "__internal__/data_repo/fastapi/docs_src/body_multiple_params/tutorial001_py310.py",
      "content": "@app.put(\"/items/{item_id}\")\nasync def update_item(\n    *,\n    item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n    q: str | None = None,\n    item: Item | None = None,\n):\n    results = {\"item_id\": item_id}\n    if q:\n        results.update({\"q\": q})\n    if item:\n        results.update({\"item\": item})\n    return results"
    },
    {
      "chunk_id": 2972,
      "source": "__internal__/data_repo/fastapi/docs_src/cors/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware"
    },
    {
      "chunk_id": 2973,
      "source": "__internal__/data_repo/fastapi/docs_src/cors/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2974,
      "source": "__internal__/data_repo/fastapi/docs_src/cors/tutorial001.py",
      "content": "origins = [\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8080\",\n]"
    },
    {
      "chunk_id": 2975,
      "source": "__internal__/data_repo/fastapi/docs_src/cors/tutorial001.py",
      "content": "app.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)"
    },
    {
      "chunk_id": 2976,
      "source": "__internal__/data_repo/fastapi/docs_src/cors/tutorial001.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 2977,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py310.py",
      "content": "from fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2978,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 2979,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 2980,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2981,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"Common headers for the API.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 2982,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 2983,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 2984,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 2985,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 2986,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2987,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2988,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 2989,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 2990,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2991,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2992,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1.py",
      "content": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 2993,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 2994,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py310.py",
      "content": "from fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2995,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 2996,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 2997,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 2998,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 2999,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3000,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    Common headers for the API.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 3001,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 3002,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3003,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    A model to represent common headers.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3004,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 3005,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3006,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    A model to represent common headers.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3007,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3008,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3009,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3010,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3011,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3012,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    A model to represent common headers.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3013,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3014,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3015,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py39.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3016,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3017,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3018,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3019,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"Common headers for the API.\"\"\"\n    \n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 3020,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3021,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py39.py",
      "content": "from typing import Annotated, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3022,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    class Config:\n        extra = \"forbid\"\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3023,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_pv1_an_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3024,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py310.py",
      "content": "from typing import Annotated\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3025,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3026,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_an_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3027,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an.py",
      "content": "from typing import List, Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\nfrom typing_extensions import Annotated\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3028,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    Common headers for the API.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: List[str] = []"
    },
    {
      "chunk_id": 3029,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_an.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: Annotated[CommonHeaders, Header()]):\n    return headers"
    },
    {
      "chunk_id": 3030,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py39.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3031,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py39.py",
      "content": "class CommonHeaders(BaseModel):\n    model_config = {\"extra\": \"forbid\"}\n\n    host: str\n    save_data: bool\n    if_modified_since: Union[str, None] = None\n    traceparent: Union[str, None] = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3032,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial002_py39.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 3033,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py310.py",
      "content": "from fastapi import FastAPI, Header\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3034,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py310.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3035,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py310.py",
      "content": "class CommonHeaders(BaseModel):\n    \"\"\"\n    A model to represent common headers.\n    \"\"\"\n    host: str\n    save_data: bool\n    if_modified_since: str | None = None\n    traceparent: str | None = None\n    x_tag: list[str] = []"
    },
    {
      "chunk_id": 3036,
      "source": "__internal__/data_repo/fastapi/docs_src/header_param_models/tutorial001_py310.py",
      "content": "@app.get(\"/items/\")\nasync def read_items(headers: CommonHeaders = Header()):\n    return headers"
    },
    {
      "chunk_id": 3037,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial003.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3038,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial003.py",
      "content": "app = FastAPI(docs_url=\"/documentation\", redoc_url=None)"
    },
    {
      "chunk_id": 3039,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial003.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]"
    },
    {
      "chunk_id": 3040,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001_1.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3041,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001_1.py",
      "content": "description = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\""
    },
    {
      "chunk_id": 3042,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001_1.py",
      "content": "app = FastAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"identifier\": \"MIT\",\n    },\n)"
    },
    {
      "chunk_id": 3043,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001_1.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]"
    },
    {
      "chunk_id": 3044,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial002.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3045,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial002.py",
      "content": "app = FastAPI(openapi_url=\"/api/v1/openapi.json\")"
    },
    {
      "chunk_id": 3046,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial002.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Foo\"}]"
    },
    {
      "chunk_id": 3047,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3048,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001.py",
      "content": "description = \"\"\"\nChimichangApp API helps you do awesome stuff. \ud83d\ude80\n\n## Items\n\nYou can **read items**.\n\n## Users\n\nYou will be able to:\n\n* **Create users** (_not implemented_).\n* **Read users** (_not implemented_).\n\"\"\""
    },
    {
      "chunk_id": 3049,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001.py",
      "content": "app = FastAPI(\n    title=\"ChimichangApp\",\n    description=description,\n    summary=\"Deadpool's favorite app. Nuff said.\",\n    version=\"0.0.1\",\n    terms_of_service=\"http://example.com/terms/\",\n    contact={\n        \"name\": \"Deadpoolio the Amazing\",\n        \"url\": \"http://x-force.example.com/contact/\",\n        \"email\": \"dp@x-force.example.com\",\n    },\n    license_info={\n        \"name\": \"Apache 2.0\",\n        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n    },\n)"
    },
    {
      "chunk_id": 3050,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial001.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"name\": \"Katana\"}]"
    },
    {
      "chunk_id": 3051,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial004.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3052,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial004.py",
      "content": "tags_metadata = [\n    {\n        \"name\": \"users\",\n        \"description\": \"Operations with users. The **login** logic is also here.\",\n    },\n    {\n        \"name\": \"items\",\n        \"description\": \"Manage items. So _fancy_ they have their own docs.\",\n        \"externalDocs\": {\n            \"description\": \"Items external docs\",\n            \"url\": \"https://fastapi.tiangolo.com/\",\n        },\n    },\n]"
    },
    {
      "chunk_id": 3053,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial004.py",
      "content": "app = FastAPI(openapi_tags=tags_metadata)"
    },
    {
      "chunk_id": 3054,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial004.py",
      "content": "@app.get(\"/users/\", tags=[\"users\"])\nasync def get_users():\n    return [{\"name\": \"Harry\"}, {\"name\": \"Ron\"}]"
    },
    {
      "chunk_id": 3055,
      "source": "__internal__/data_repo/fastapi/docs_src/metadata/tutorial004.py",
      "content": "@app.get(\"/items/\", tags=[\"items\"])\nasync def get_items():\n    return [{\"name\": \"wand\"}, {\"name\": \"flying broom\"}]"
    },
    {
      "chunk_id": 3056,
      "source": "__internal__/data_repo/fastapi/docs_src/using_request_directly/tutorial001.py",
      "content": "from fastapi import FastAPI, Request"
    },
    {
      "chunk_id": 3057,
      "source": "__internal__/data_repo/fastapi/docs_src/using_request_directly/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3058,
      "source": "__internal__/data_repo/fastapi/docs_src/using_request_directly/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\")\ndef read_root(item_id: str, request: Request):\n    client_host = request.client.host\n    return {\"client_host\": client_host, \"item_id\": item_id}"
    },
    {
      "chunk_id": 3059,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial003.py",
      "content": "from fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse"
    },
    {
      "chunk_id": 3060,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial003.py",
      "content": "class UnicornException(Exception):\n    \"\"\"Custom exception for unicorn-related errors.\"\"\"\n    \n    def __init__(self, name: str):\n        self.name = name"
    },
    {
      "chunk_id": 3061,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3062,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial003.py",
      "content": "@app.exception_handler(UnicornException)\nasync def unicorn_exception_handler(request: Request, exc: UnicornException):\n    return JSONResponse(\n        status_code=418,\n        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n    )"
    },
    {
      "chunk_id": 3063,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial003.py",
      "content": "@app.get(\"/unicorns/{name}\")\nasync def read_unicorn(name: str):\n    if name == \"yolo\":\n        raise UnicornException(name=name)\n    return {\"unicorn_name\": name}"
    },
    {
      "chunk_id": 3064,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial002.py",
      "content": "from fastapi import FastAPI, HTTPException"
    },
    {
      "chunk_id": 3065,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3066,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial002.py",
      "content": "items = {\"foo\": \"The Foo Wrestlers\"}"
    },
    {
      "chunk_id": 3067,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial002.py",
      "content": "@app.get(\"/items-header/{item_id}\")\nasync def read_item_header(item_id: str):\n    if item_id not in items:\n        raise HTTPException(\n            status_code=404,\n            detail=\"Item not found\",\n            headers={\"X-Error\": \"There goes my error\"},\n        )\n    return {\"item\": items[item_id]}"
    },
    {
      "chunk_id": 3068,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial001.py",
      "content": "from fastapi import FastAPI, HTTPException"
    },
    {
      "chunk_id": 3069,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3070,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial001.py",
      "content": "items = {\"foo\": \"The Foo Wrestlers\"}"
    },
    {
      "chunk_id": 3071,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: str):\n    if item_id not in items:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item\": items[item_id]}"
    },
    {
      "chunk_id": 3072,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial005.py",
      "content": "from fastapi import FastAPI, Request, status\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3073,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial005.py",
      "content": "@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n    )"
    },
    {
      "chunk_id": 3074,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial005.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item.\"\"\"\n    title: str\n    size: int"
    },
    {
      "chunk_id": 3075,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial005.py",
      "content": "@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item"
    },
    {
      "chunk_id": 3076,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial004.py",
      "content": "from fastapi import FastAPI, HTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as StarletteHTTPException"
    },
    {
      "chunk_id": 3077,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3078,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial004.py",
      "content": "@app.exception_handler(StarletteHTTPException)\nasync def http_exception_handler(request, exc):\n    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)"
    },
    {
      "chunk_id": 3079,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial004.py",
      "content": "@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    return PlainTextResponse(str(exc), status_code=400)"
    },
    {
      "chunk_id": 3080,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial004.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 3081,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial006.py",
      "content": "from fastapi import FastAPI, HTTPException\nfrom fastapi.exception_handlers import (\n    http_exception_handler,\n    request_validation_exception_handler,\n)\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException"
    },
    {
      "chunk_id": 3082,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial006.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3083,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial006.py",
      "content": "@app.exception_handler(StarletteHTTPException)\nasync def custom_http_exception_handler(request, exc):\n    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n    return await http_exception_handler(request, exc)"
    },
    {
      "chunk_id": 3084,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial006.py",
      "content": "@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request, exc):\n    print(f\"OMG! The client sent invalid data!: {exc}\")\n    return await request_validation_exception_handler(request, exc)"
    },
    {
      "chunk_id": 3085,
      "source": "__internal__/data_repo/fastapi/docs_src/handling_errors/tutorial006.py",
      "content": "@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 3:\n        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n    return {\"item_id\": item_id}"
    },
    {
      "chunk_id": 3086,
      "source": "__internal__/data_repo/fastapi/docs_src/response_change_status_code/tutorial001.py",
      "content": "from fastapi import FastAPI, Response, status"
    },
    {
      "chunk_id": 3087,
      "source": "__internal__/data_repo/fastapi/docs_src/response_change_status_code/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3088,
      "source": "__internal__/data_repo/fastapi/docs_src/response_change_status_code/tutorial001.py",
      "content": "tasks = {\"foo\": \"Listen to the Bar Fighters\"}"
    },
    {
      "chunk_id": 3089,
      "source": "__internal__/data_repo/fastapi/docs_src/response_change_status_code/tutorial001.py",
      "content": "@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\ndef get_or_create_task(task_id: str, response: Response):\n    if task_id not in tasks:\n        tasks[task_id] = \"This didn't exist before\"\n        response.status_code = status.HTTP_201_CREATED\n    return tasks[task_id]"
    },
    {
      "chunk_id": 3090,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3091,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial003.py",
      "content": "class Item(BaseModel):\n    id: str\n    value: str"
    },
    {
      "chunk_id": 3092,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial003.py",
      "content": "class Message(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 3093,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3094,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial003.py",
      "content": "@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        404: {\"model\": Message, \"description\": \"The item was not found\"},\n        200: {\n            \"description\": \"Item requested by ID\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"id\": \"bar\", \"value\": \"The bar tenders\"}\n                }\n            },\n        },\n    },\n)\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    else:\n        return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})"
    },
    {
      "chunk_id": 3095,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial002.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3096,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial002.py",
      "content": "class Item(BaseModel):\n    id: str\n    value: str"
    },
    {
      "chunk_id": 3097,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial002.py",
      "content": "@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={\n        200: {\n            \"content\": {\"image/png\": {}},\n            \"description\": \"Return the JSON item or an image.\",\n        }\n    },\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}"
    },
    {
      "chunk_id": 3098,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3099,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial001.py",
      "content": "class Item(BaseModel):\n    id: str\n    value: str"
    },
    {
      "chunk_id": 3100,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial001.py",
      "content": "class Message(BaseModel):\n    message: str"
    },
    {
      "chunk_id": 3101,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3102,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial001.py",
      "content": "@app.get(\"/items/{item_id}\", response_model=Item, responses={404: {\"model\": Message}})\nasync def read_item(item_id: str):\n    if item_id == \"foo\":\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n    return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})"
    },
    {
      "chunk_id": 3103,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial004.py",
      "content": "from typing import Union\n\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\nfrom pydantic import BaseModel"
    },
    {
      "chunk_id": 3104,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial004.py",
      "content": "class Item(BaseModel):\n    \"\"\"Model for an item.\"\"\"\n    id: str\n    value: str"
    },
    {
      "chunk_id": 3105,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial004.py",
      "content": "responses = {\n    404: {\"description\": \"Item not found\"},\n    302: {\"description\": \"The item was moved\"},\n    403: {\"description\": \"Not enough privileges\"},\n}"
    },
    {
      "chunk_id": 3106,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial004.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3107,
      "source": "__internal__/data_repo/fastapi/docs_src/additional_responses/tutorial004.py",
      "content": "@app.get(\n    \"/items/{item_id}\",\n    response_model=Item,\n    responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n)\nasync def read_item(item_id: str, img: Union[bool, None] = None):\n    if img:\n        return FileResponse(\"image.png\", media_type=\"image/png\")\n    else:\n        return {\"id\": \"foo\", \"value\": \"there goes my hero\"}"
    },
    {
      "chunk_id": 3108,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial010.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse"
    },
    {
      "chunk_id": 3109,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial010.py",
      "content": "app = FastAPI(default_response_class=ORJSONResponse)"
    },
    {
      "chunk_id": 3110,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial010.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 3111,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial003.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 3112,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial003.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3113,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial003.py",
      "content": "@app.get(\"/items/\")\nasync def read_items():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)"
    },
    {
      "chunk_id": 3114,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006c.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3115,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006c.py",
      "content": "@app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\nasync def redirect_pydantic():\n    return \"https://docs.pydantic.dev/\""
    },
    {
      "chunk_id": 3116,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001b.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse"
    },
    {
      "chunk_id": 3117,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001b.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3118,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001b.py",
      "content": "@app.get(\"/items/\", response_class=ORJSONResponse)\nasync def read_items():\n    return ORJSONResponse([{\"item_id\": \"Foo\"}])"
    },
    {
      "chunk_id": 3119,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial007.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3120,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial007.py",
      "content": "async def fake_video_streamer():\n    for i in range(10):\n        yield b\"some fake video bytes\""
    },
    {
      "chunk_id": 3121,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial007.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return StreamingResponse(fake_video_streamer())"
    },
    {
      "chunk_id": 3122,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial002.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse"
    },
    {
      "chunk_id": 3123,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3124,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial002.py",
      "content": "@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\""
    },
    {
      "chunk_id": 3125,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009b.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()"
    },
    {
      "chunk_id": 3126,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009b.py",
      "content": "@app.get(\"/\", response_class=FileResponse)\nasync def main():\n    return some_file_path"
    },
    {
      "chunk_id": 3127,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse"
    },
    {
      "chunk_id": 3128,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3129,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial001.py",
      "content": "@app.get(\"/items/\", response_class=UJSONResponse)\nasync def read_items():\n    return [{\"item_id\": \"Foo\"}]"
    },
    {
      "chunk_id": 3130,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()"
    },
    {
      "chunk_id": 3131,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009.py",
      "content": "@app.get(\"/\")\nasync def main():\n    return FileResponse(some_file_path)"
    },
    {
      "chunk_id": 3132,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009c.py",
      "content": "from typing import Any\n\nimport orjson\nfrom fastapi import FastAPI, Response\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3133,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009c.py",
      "content": "class CustomORJSONResponse(Response):\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -> bytes:\n        assert orjson is not None, \"orjson must be installed\"\n        return orjson.dumps(content, option=orjson.OPT_INDENT_2)"
    },
    {
      "chunk_id": 3134,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial009c.py",
      "content": "@app.get(\"/\", response_class=CustomORJSONResponse)\nasync def main():\n    return {\"message\": \"Hello World\"}"
    },
    {
      "chunk_id": 3135,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial005.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import PlainTextResponse"
    },
    {
      "chunk_id": 3136,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial005.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3137,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial005.py",
      "content": "@app.get(\"/\", response_class=PlainTextResponse)\nasync def main():\n    return \"Hello World\""
    },
    {
      "chunk_id": 3138,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial004.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3139,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial004.py",
      "content": "def generate_html_response():\n    html_content = \"\"\"\n    <html>\n        <head>\n            <title>Some HTML in here</title>\n        </head>\n        <body>\n            <h1>Look ma! HTML!</h1>\n        </body>\n    </html>\n    \"\"\"\n    return HTMLResponse(content=html_content, status_code=200)"
    },
    {
      "chunk_id": 3140,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial004.py",
      "content": "@app.get(\"/items/\", response_class=HTMLResponse)\nasync def read_items():\n    return generate_html_response()"
    },
    {
      "chunk_id": 3141,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3142,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006.py",
      "content": "@app.get(\"/typer\")\nasync def redirect_typer():\n    return RedirectResponse(\"https://typer.tiangolo.com\")"
    },
    {
      "chunk_id": 3143,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006b.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()"
    },
    {
      "chunk_id": 3144,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial006b.py",
      "content": "@app.get(\"/fastapi\", response_class=RedirectResponse)\nasync def redirect_fastapi():\n    return \"https://fastapi.tiangolo.com\""
    },
    {
      "chunk_id": 3145,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial008.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.responses import StreamingResponse\n\nsome_file_path = \"large-video-file.mp4\"\napp = FastAPI()"
    },
    {
      "chunk_id": 3146,
      "source": "__internal__/data_repo/fastapi/docs_src/custom_response/tutorial008.py",
      "content": "@app.get(\"/\")\ndef main():\n    def iterfile():  # (1)\n        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n            yield from file_like  # (3)\n\n    return StreamingResponse(iterfile(), media_type=\"video/mp4\")"
    },
    {
      "chunk_id": 3147,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial002.py",
      "content": "from fastapi import FastAPI, status"
    },
    {
      "chunk_id": 3148,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial002.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3149,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial002.py",
      "content": "@app.post(\"/items/\", status_code=status.HTTP_201_CREATED)\nasync def create_item(name: str):\n    return {\"name\": name}"
    },
    {
      "chunk_id": 3150,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial001.py",
      "content": "from fastapi import FastAPI"
    },
    {
      "chunk_id": 3151,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial001.py",
      "content": "app = FastAPI()"
    },
    {
      "chunk_id": 3152,
      "source": "__internal__/data_repo/fastapi/docs_src/response_status_code/tutorial001.py",
      "content": "@app.post(\"/items/\", status_code=201)\nasync def create_item(name: str):\n    return {\"name\": name}"
    },
    {
      "chunk_id": 3153,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "import logging\nfrom typing import Literal\n\nfrom github import Github\nfrom github.PullRequestReview import PullRequestReview\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 3154,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "class LabelSettings(BaseModel):\n    await_label: str | None = None\n    number: int\n\ndefault_config = {\"approved-2\": LabelSettings(await_label=\"awaiting-review\", number=2)}"
    },
    {
      "chunk_id": 3155,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "class Settings(BaseSettings):\n    github_repository: str\n    token: SecretStr\n    debug: bool | None = False\n    config: dict[str, LabelSettings] | Literal[\"\"] = default_config"
    },
    {
      "chunk_id": 3156,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "settings = Settings()\nif settings.debug:\n    logging.basicConfig(level=logging.DEBUG)\nelse:\n    logging.basicConfig(level=logging.INFO)\nlogging.debug(f\"Using config: {settings.json()}\")\ng = Github(settings.token.get_secret_value())\nrepo = g.get_repo(settings.github_repository)"
    },
    {
      "chunk_id": 3157,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "for pr in repo.get_pulls(state=\"open\"):\n    logging.info(f\"Checking PR: #{pr.number}\")\n    pr_labels = list(pr.get_labels())\n    pr_label_by_name = {label.name: label for label in pr_labels}\n    reviews = list(pr.get_reviews())\n    review_by_user: dict[str, PullRequestReview] = {}"
    },
    {
      "chunk_id": 3158,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "for review in reviews:\n        if review.user.login in review_by_user:\n            stored_review = review_by_user[review.user.login]\n            if review.submitted_at >= stored_review.submitted_at:\n                review_by_user[review.user.login] = review\n        else:\n            review_by_user[review.user.login] = review"
    },
    {
      "chunk_id": 3159,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "approved_reviews = [\n        review for review in review_by_user.values() if review.state == \"APPROVED\"\n    ]\n    config = settings.config or default_config"
    },
    {
      "chunk_id": 3160,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "for approved_label, conf in config.items():\n        logging.debug(f\"Processing config: {conf.json()}\")\n        if conf.await_label is None or (conf.await_label in pr_label_by_name):\n            logging.debug(f\"Processable PR: {pr.number}\")\n            if len(approved_reviews) >= conf.number:\n                logging.info(f\"Adding label to PR: {pr.number}\")\n                pr.add_to_labels(approved_label)\n                if conf.await_label:\n                    logging.info(f\"Removing label from PR: {pr.number}\")\n                    pr.remove_from_labels(conf.await_label)"
    },
    {
      "chunk_id": 3161,
      "source": "__internal__/data_repo/fastapi/scripts/label_approved.py",
      "content": "logging.info(\"Finished\")"
    },
    {
      "chunk_id": 3162,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "import logging\nimport secrets\nimport subprocess\nfrom collections import defaultdict\nfrom pathlib import Path\nfrom typing import Any\n\nimport httpx\nimport yaml\nfrom github import Github\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings\n\ngithub_graphql_url = \"https://api.github.com/graphql\"\n\n\nsponsors_query = \"\"\"\nquery Q($after: String) {\n  user(login: \"tiangolo\") {\n    sponsorshipsAsMaintainer(first: 100, after: $after) {\n      edges {\n        cursor\n        node {\n          sponsorEntity {\n            ... on Organization {\n              login\n              avatarUrl\n              url\n            }\n            ... on User {\n              login\n              avatarUrl\n              url\n            }\n          }\n          tier {\n            name\n            monthlyPriceInDollars\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\""
    },
    {
      "chunk_id": 3163,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "class SponsorEntity(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str\n\n\nclass Tier(BaseModel):\n    name: str\n    monthlyPriceInDollars: float\n\n\nclass SponsorshipAsMaintainerNode(BaseModel):\n    sponsorEntity: SponsorEntity\n    tier: Tier\n\n\nclass SponsorshipAsMaintainerEdge(BaseModel):\n    cursor: str\n    node: SponsorshipAsMaintainerNode\n\n\nclass SponsorshipAsMaintainer(BaseModel):\n    edges: list[SponsorshipAsMaintainerEdge]\n\n\nclass SponsorsUser(BaseModel):\n    sponsorshipsAsMaintainer: SponsorshipAsMaintainer\n\n\nclass SponsorsResponseData(BaseModel):\n    user: SponsorsUser\n\n\nclass SponsorsResponse(BaseModel):\n    data: SponsorsResponseData\n\n\nclass Settings(BaseSettings):\n    sponsors_token: SecretStr\n    pr_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30"
    },
    {
      "chunk_id": 3164,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: str | None = None,\n) -> dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.sponsors_token.get_secret_value()}\"}\n    variables = {\"after\": after}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(f\"Response was not 200, after: {after}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data"
    },
    {
      "chunk_id": 3165,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "def get_graphql_sponsor_edges(\n    *, settings: Settings, after: str | None = None\n) -> list[SponsorshipAsMaintainerEdge]:\n    data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n    graphql_response = SponsorsResponse.model_validate(data)\n    return graphql_response.data.user.sponsorshipsAsMaintainer.edges"
    },
    {
      "chunk_id": 3166,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "def get_individual_sponsors(\n    settings: Settings,\n) -> defaultdict[float, dict[str, SponsorEntity]]:\n    nodes: list[SponsorshipAsMaintainerNode] = []\n    edges = get_graphql_sponsor_edges(settings=settings)\n\n    while edges:\n        for edge in edges:\n            nodes.append(edge.node)\n        last_edge = edges[-1]\n        edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n\n    tiers: defaultdict[float, dict[str, SponsorEntity]] = defaultdict(dict)\n    for node in nodes:\n        tiers[node.tier.monthlyPriceInDollars][node.sponsorEntity.login] = (\n            node.sponsorEntity\n        )\n    return tiers"
    },
    {
      "chunk_id": 3167,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "def update_content(*, content_path: Path, new_content: Any) -> bool:\n    old_content = content_path.read_text(encoding=\"utf-8\")\n\n    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n    if old_content == new_content:\n        logging.info(f\"The content hasn't changed for {content_path}\")\n        return False\n    content_path.write_text(new_content, encoding=\"utf-8\")\n    logging.info(f\"Updated {content_path}\")\n    return True"
    },
    {
      "chunk_id": 3168,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.pr_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n\n    tiers = get_individual_sponsors(settings=settings)\n    keys = list(tiers.keys())\n    keys.sort(reverse=True)\n    sponsors = []\n    for key in keys:\n        sponsor_group = []\n        for login, sponsor in tiers[key].items():\n            sponsor_group.append(\n                {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n            )\n        sponsors.append(sponsor_group)\n    github_sponsors = {\n        \"sponsors\": sponsors,\n    }\n\n    # For local development\n    # github_sponsors_path = Path(\"../docs/en/data/github_sponsors.yml\")\n    github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n    updated = update_content(\n        content_path=github_sponsors_path, new_content=github_sponsors\n    )\n\n    if not updated:\n        logging.info(\"The data hasn't changed, finishing.\")\n        return\n\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-people-sponsors-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run(\n        [\n            \"git\",\n            \"add\",\n            str(github_sponsors_path),\n        ],\n        check=True,\n    )\n    logging.info(\"Committing updated file\")\n    message = \"\ud83d\udc65 Update FastAPI People - Sponsors\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")"
    },
    {
      "chunk_id": 3169,
      "source": "__internal__/data_repo/fastapi/scripts/sponsors.py",
      "content": "if __name__ == \"__main__\":\n    main()"
    },
    {
      "chunk_id": 3170,
      "source": "__internal__/data_repo/fastapi/scripts/topic_repos.py",
      "content": "import logging\nimport secrets\nimport subprocess\nfrom pathlib import Path\n\nimport yaml\nfrom github import Github\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 3171,
      "source": "__internal__/data_repo/fastapi/scripts/topic_repos.py",
      "content": "class Settings(BaseSettings):\n    github_repository: str\n    github_token: SecretStr"
    },
    {
      "chunk_id": 3172,
      "source": "__internal__/data_repo/fastapi/scripts/topic_repos.py",
      "content": "class Repo(BaseModel):\n    name: str\n    html_url: str\n    stars: int\n    owner_login: str\n    owner_html_url: str"
    },
    {
      "chunk_id": 3173,
      "source": "__internal__/data_repo/fastapi/scripts/topic_repos.py",
      "content": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value(), per_page=100)\n    r = g.get_repo(settings.github_repository)\n    repos = g.search_repositories(query=\"topic:fastapi\")\n    repos_list = list(repos)\n    final_repos: list[Repo] = []\n    for repo in repos_list[:100]:\n        if repo.full_name == settings.github_repository:\n            continue\n        final_repos.append(\n            Repo(\n                name=repo.name,\n                html_url=repo.html_url,\n                stars=repo.stargazers_count,\n                owner_login=repo.owner.login,\n                owner_html_url=repo.owner.html_url,\n            )\n        )\n    data = [repo.model_dump() for repo in final_repos]\n\n    # Local development\n    # repos_path = Path(\"../docs/en/data/topic_repos.yml\")\n    repos_path = Path(\"./docs/en/data/topic_repos.yml\")\n    repos_old_content = repos_path.read_text(encoding=\"utf-8\")\n    new_repos_content = yaml.dump(data, sort_keys=False, width=200, allow_unicode=True)\n    if repos_old_content == new_repos_content:\n        logging.info(\"The data hasn't changed. Finishing.\")\n        return\n    repos_path.write_text(new_repos_content, encoding=\"utf-8\")\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-topic-repos-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run([\"git\", \"add\", str(repos_path)], check=True)\n    logging.info(\"Committing updated file\")\n    message = \"\ud83d\udc65 Update FastAPI GitHub topic repositories\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = r.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")"
    },
    {
      "chunk_id": 3174,
      "source": "__internal__/data_repo/fastapi/scripts/topic_repos.py",
      "content": "if __name__ == \"__main__\":\n    main()"
    },
    {
      "chunk_id": 3175,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "import logging\nimport secrets\nimport subprocess\nfrom collections import Counter\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Any\n\nimport httpx\nimport yaml\nfrom github import Github\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 3176,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "github_graphql_url = \"https://api.github.com/graphql\""
    },
    {
      "chunk_id": 3177,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "prs_query = \"\"\"\nquery Q($after: String) {\n  repository(name: \"fastapi\", owner: \"fastapi\") {\n    pullRequests(first: 100, after: $after) {\n      edges {\n        cursor\n        node {\n          number\n          labels(first: 100) {\n            nodes {\n              name\n            }\n          }\n          author {\n            login\n            avatarUrl\n            url\n          }\n          title\n          createdAt\n          lastEditedAt\n          updatedAt\n          state\n          reviews(first:100) {\n            nodes {\n              author {\n                login\n                avatarUrl\n                url\n              }\n              state\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\"\"\""
    },
    {
      "chunk_id": 3178,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class Author(BaseModel):\n    login: str\n    avatarUrl: str\n    url: str"
    },
    {
      "chunk_id": 3179,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class LabelNode(BaseModel):\n    name: str"
    },
    {
      "chunk_id": 3180,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class Labels(BaseModel):\n    nodes: list[LabelNode]"
    },
    {
      "chunk_id": 3181,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class ReviewNode(BaseModel):\n    author: Author | None = None\n    state: str"
    },
    {
      "chunk_id": 3182,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class Reviews(BaseModel):\n    nodes: list[ReviewNode]"
    },
    {
      "chunk_id": 3183,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PullRequestNode(BaseModel):\n    number: int\n    labels: Labels\n    author: Author | None = None\n    title: str\n    createdAt: datetime\n    lastEditedAt: datetime | None = None\n    updatedAt: datetime | None = None\n    state: str\n    reviews: Reviews"
    },
    {
      "chunk_id": 3184,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PullRequestEdge(BaseModel):\n    cursor: str\n    node: PullRequestNode"
    },
    {
      "chunk_id": 3185,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PullRequests(BaseModel):\n    edges: list[PullRequestEdge]"
    },
    {
      "chunk_id": 3186,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PRsRepository(BaseModel):\n    pullRequests: PullRequests"
    },
    {
      "chunk_id": 3187,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PRsResponseData(BaseModel):\n    repository: PRsRepository"
    },
    {
      "chunk_id": 3188,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class PRsResponse(BaseModel):\n    data: PRsResponseData"
    },
    {
      "chunk_id": 3189,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class Settings(BaseSettings):\n    github_token: SecretStr\n    github_repository: str\n    httpx_timeout: int = 30"
    },
    {
      "chunk_id": 3190,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def get_graphql_response(\n    *,\n    settings: Settings,\n    query: str,\n    after: str | None = None,\n) -> dict[str, Any]:\n    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n    variables = {\"after\": after}\n    response = httpx.post(\n        github_graphql_url,\n        headers=headers,\n        timeout=settings.httpx_timeout,\n        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n    )\n    if response.status_code != 200:\n        logging.error(f\"Response was not 200, after: {after}\")\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    data = response.json()\n    if \"errors\" in data:\n        logging.error(f\"Errors in response, after: {after}\")\n        logging.error(data[\"errors\"])\n        logging.error(response.text)\n        raise RuntimeError(response.text)\n    return data"
    },
    {
      "chunk_id": 3191,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def get_graphql_pr_edges(\n    *, settings: Settings, after: str | None = None\n) -> list[PullRequestEdge]:\n    data = get_graphql_response(settings=settings, query=prs_query, after=after)\n    graphql_response = PRsResponse.model_validate(data)\n    return graphql_response.data.repository.pullRequests.edges"
    },
    {
      "chunk_id": 3192,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def get_pr_nodes(settings: Settings) -> list[PullRequestNode]:\n    pr_nodes: list[PullRequestNode] = []\n    pr_edges = get_graphql_pr_edges(settings=settings)\n\n    while pr_edges:\n        for edge in pr_edges:\n            pr_nodes.append(edge.node)\n        last_edge = pr_edges[-1]\n        pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n    return pr_nodes"
    },
    {
      "chunk_id": 3193,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "class ContributorsResults(BaseModel):\n    contributors: Counter[str]\n    translation_reviewers: Counter[str]\n    translators: Counter[str]\n    authors: dict[str, Author]"
    },
    {
      "chunk_id": 3194,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def get_contributors(pr_nodes: list[PullRequestNode]) -> ContributorsResults:\n    contributors = Counter[str]()\n    translation_reviewers = Counter[str]()\n    translators = Counter[str]()\n    authors: dict[str, Author] = {}\n\n    for pr in pr_nodes:\n        if pr.author:\n            authors[pr.author.login] = pr.author\n        is_lang = False\n        for label in pr.labels.nodes:\n            if label.name == \"lang-all\":\n                is_lang = True\n                break\n        for review in pr.reviews.nodes:\n            if review.author:\n                authors[review.author.login] = review.author\n                if is_lang:\n                    translation_reviewers[review.author.login] += 1\n        if pr.state == \"MERGED\" and pr.author:\n            if is_lang:\n                translators[pr.author.login] += 1\n            else:\n                contributors[pr.author.login] += 1\n    return ContributorsResults(\n        contributors=contributors,\n        translation_reviewers=translation_reviewers,\n        translators=translators,\n        authors=authors,\n    )"
    },
    {
      "chunk_id": 3195,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def get_users_to_write(\n    *,\n    counter: Counter[str],\n    authors: dict[str, Author],\n    min_count: int = 2,\n) -> dict[str, Any]:\n    users: dict[str, Any] = {}\n    for user, count in counter.most_common():\n        if count >= min_count:\n            author = authors[user]\n            users[user] = {\n                \"login\": user,\n                \"count\": count,\n                \"avatarUrl\": author.avatarUrl,\n                \"url\": author.url,\n            }\n    return users"
    },
    {
      "chunk_id": 3196,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def update_content(*, content_path: Path, new_content: Any) -> bool:\n    old_content = content_path.read_text(encoding=\"utf-8\")\n\n    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n    if old_content == new_content:\n        logging.info(f\"The content hasn't changed for {content_path}\")\n        return False\n    content_path.write_text(new_content, encoding=\"utf-8\")\n    logging.info(f\"Updated {content_path}\")\n    return True"
    },
    {
      "chunk_id": 3197,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n\n    pr_nodes = get_pr_nodes(settings=settings)\n    contributors_results = get_contributors(pr_nodes=pr_nodes)\n    authors = contributors_results.authors\n\n    top_contributors = get_users_to_write(\n        counter=contributors_results.contributors,\n        authors=authors,\n    )\n\n    top_translators = get_users_to_write(\n        counter=contributors_results.translators,\n        authors=authors,\n    )\n    top_translations_reviewers = get_users_to_write(\n        counter=contributors_results.translation_reviewers,\n        authors=authors,\n    )\n\n    # For local development\n    # contributors_path = Path(\"../docs/en/data/contributors.yml\")\n    contributors_path = Path(\"./docs/en/data/contributors.yml\")\n    # translators_path = Path(\"../docs/en/data/translators.yml\")\n    translators_path = Path(\"./docs/en/data/translators.yml\")\n    # translation_reviewers_path = Path(\"../docs/en/data/translation_reviewers.yml\")\n    translation_reviewers_path = Path(\"./docs/en/data/translation_reviewers.yml\")\n\n    updated = [\n        update_content(content_path=contributors_path, new_content=top_contributors),\n        update_content(content_path=translators_path, new_content=top_translators),\n        update_content(\n            content_path=translation_reviewers_path,\n            new_content=top_translations_reviewers,\n        ),\n    ]\n\n    if not any(updated):\n        logging.info(\"The data hasn't changed, finishing.\")\n        return\n\n    logging.info(\"Setting up GitHub Actions git user\")\n    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n    subprocess.run(\n        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n    )\n    branch_name = f\"fastapi-people-contributors-{secrets.token_hex(4)}\"\n    logging.info(f\"Creating a new branch {branch_name}\")\n    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n    logging.info(\"Adding updated file\")\n    subprocess.run(\n        [\n            \"git\",\n            \"add\",\n            str(contributors_path),\n            str(translators_path),\n            str(translation_reviewers_path),\n        ],\n        check=True,\n    )\n    logging.info(\"Committing updated file\")\n    message = \"\ud83d\udc65 Update FastAPI People - Contributors and Translators\"\n    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n    logging.info(\"Pushing branch\")\n    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n    logging.info(\"Creating PR\")\n    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n    logging.info(f\"Created PR: {pr.number}\")\n    logging.info(\"Finished\")"
    },
    {
      "chunk_id": 3198,
      "source": "__internal__/data_repo/fastapi/scripts/contributors.py",
      "content": "if __name__ == \"__main__\":\n    main()"
    },
    {
      "chunk_id": 3199,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "from functools import lru_cache\nfrom pathlib import Path\nfrom typing import Iterable\n\nimport typer\nimport yaml\nfrom pydantic_ai import Agent"
    },
    {
      "chunk_id": 3200,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "non_translated_sections = (\n    \"reference/\",\n    \"release-notes.md\",\n    \"fastapi-people.md\",\n    \"external-links.md\",\n    \"newsletter.md\",\n    \"management-tasks.md\",\n    \"management.md\",\n    \"contributing.md\",\n)"
    },
    {
      "chunk_id": 3201,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "general_prompt = \"\"\"\nFor technical terms in English that don't have a common translation term use the original term in English.\n\nFor code snippets or fragments, surrounded by backticks (`), don't translate the content, keep the original in English. For example, `list`, `dict`, keep them as is.\n\nThe content is written in markdown, write the translation in markdown as well. Don't add triple backticks (`) around the generated translation content.\n\nWhen there's an example of code, the console or a terminal, normally surrounded by triple backticks and a keyword like \"console\" or \"bash\" (e.g. ```console), do not translate the content, keep the original in English.\n\nThe original content will be surrounded by triple percentage signs (%) and you should translate it to the target language. Do not include the triple percentage signs in the translation.\n\"\"\""
    },
    {
      "chunk_id": 3202,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "@lru_cache\ndef get_langs() -> dict[str, str]:\n    return yaml.safe_load(Path(\"docs/language_names.yml\").read_text())"
    },
    {
      "chunk_id": 3203,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "def generate_lang_path(*, lang: str, path: Path) -> Path:\n    en_docs_path = Path(\"docs/en/docs\")\n    assert str(path).startswith(\n        str(en_docs_path)\n    ), f\"Path must be inside {en_docs_path}\"\n    lang_docs_path = Path(f\"docs/{lang}/docs\")\n    out_path = Path(str(path).replace(str(en_docs_path), str(lang_docs_path)))\n    return out_path"
    },
    {
      "chunk_id": 3204,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "def translate_page(*, lang: str, path: Path) -> None:\n    langs = get_langs()\n    language = langs[lang]\n    lang_path = Path(f\"docs/{lang}\")\n    lang_path.mkdir(exist_ok=True)\n    lang_prompt_path = lang_path / \"llm-prompt.md\"\n    assert lang_prompt_path.exists(), f\"Prompt file not found: {lang_prompt_path}\"\n    lang_prompt_content = lang_prompt_path.read_text()\n\n    en_docs_path = Path(\"docs/en/docs\")\n    assert str(path).startswith(\n        str(en_docs_path)\n    ), f\"Path must be inside {en_docs_path}\"\n    out_path = generate_lang_path(lang=lang, path=path)\n    out_path.parent.mkdir(parents=True, exist_ok=True)\n    original_content = path.read_text()\n    old_translation: str | None = None\n    if out_path.exists():\n        old_translation = out_path.read_text()\n    agent = Agent(\"openai:gpt-4o\")\n\n    prompt_segments = [\n        lang_prompt_content,\n        general_prompt,\n    ]\n    if old_translation:\n        prompt_segments.extend(\n            [\n                \"There's an existing previous translation for this content that is probably outdated with old content or old instructions.\",\n                \"Update the translation given your current instructions and the original content.\",\n                \"If you have instructions to translate specific terms or phrases in a specific way, please follow those instructions instead of keeping the old and outdated content.\",\n                \"Previous translation:\",\n                f\"%%%\\n{old_translation}%%%\",\n            ]\n        )\n    prompt_segments.extend(\n        [\n            f\"Translate to {language} ({lang}).\",\n            \"Original content:\",\n            f\"%%%\\n{original_content}%%%\",\n        ]\n    )\n    prompt = \"\\n\\n\".join(prompt_segments)\n\n    result = agent.run_sync(prompt)\n    out_content = f\"{result.data.strip()}\\n\"\n    out_path.write_text(out_content)"
    },
    {
      "chunk_id": 3205,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "def iter_paths_to_translate() -> Iterable[Path]:\n    \"\"\"\n    Iterate on the markdown files to translate in order of priority.\n    \"\"\"\n    first_dirs = [\n        Path(\"docs/en/docs/learn\"),\n        Path(\"docs/en/docs/tutorial\"),\n        Path(\"docs/en/docs/advanced\"),\n        Path(\"docs/en/docs/about\"),\n        Path(\"docs/en/docs/how-to\"),\n    ]\n    first_parent = Path(\"docs/en/docs\")\n    yield from first_parent.glob(\"*.md\")\n    for dir_path in first_dirs:\n        yield from dir_path.rglob(\"*.md\")\n    first_dirs_str = tuple(str(d) for d in first_dirs)\n    for path in Path(\"docs/en/docs\").rglob(\"*.md\"):\n        if str(path).startswith(first_dirs_str):\n            continue\n        if path.parent == first_parent:\n            continue\n        yield path"
    },
    {
      "chunk_id": 3206,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "def translate_all(lang: str) -> None:\n    paths_to_process: list[Path] = []\n    for path in iter_paths_to_translate():\n        if str(path).replace(\"docs/en/docs/\", \"\").startswith(non_translated_sections):\n            continue\n        paths_to_process.append(path)\n    print(\"Original paths:\")\n    for p in paths_to_process:\n        print(f\"  - {p}\")\n    print(f\"Total original paths: {len(paths_to_process)}\")\n    missing_paths: list[Path] = []\n    skipped_paths: list[Path] = []\n    for p in paths_to_process:\n        lang_path = generate_lang_path(lang=lang, path=p)\n        if lang_path.exists():\n            skipped_paths.append(p)\n            continue\n        missing_paths.append(p)\n    print(\"Paths to skip:\")\n    for p in skipped_paths:\n        print(f\"  - {p}\")\n    print(f\"Total paths to skip: {len(skipped_paths)}\")\n    print(\"Paths to process:\")\n    for p in missing_paths:\n        print(f\"  - {p}\")\n    print(f\"Total paths to process: {len(missing_paths)}\")\n    for p in missing_paths:\n        print(f\"Translating: {p}\")\n        translate_page(lang=\"es\", path=p)\n        print(f\"Done translating: {p}\")"
    },
    {
      "chunk_id": 3207,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "def main(*, lang: str, path: Path = None) -> None:\n    if path:\n        translate_page(lang=lang, path=path)\n    else:\n        translate_all(lang=lang)"
    },
    {
      "chunk_id": 3208,
      "source": "__internal__/data_repo/fastapi/scripts/translate.py",
      "content": "if __name__ == \"__main__\":\n    typer.run(main)"
    },
    {
      "chunk_id": 3209,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "import json\nimport logging\nimport os\nimport re\nimport shutil\nimport subprocess\nfrom functools import lru_cache\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler\nfrom importlib import metadata\nfrom multiprocessing import Pool\nfrom pathlib import Path\nfrom typing import Any, Dict, List, Optional, Union\n\nimport mkdocs.utils\nimport typer\nimport yaml\nfrom jinja2 import Template\nfrom ruff.__main__ import find_ruff_bin\n\nlogging.basicConfig(level=logging.INFO)\n\napp = typer.Typer()\n\nmkdocs_name = \"mkdocs.yml\"\n\nmissing_translation_snippet = \"\"\"\n{!../../docs/missing-translation.md!}\n\"\"\"\n\nnon_translated_sections = [\n    \"reference/\",\n    \"release-notes.md\",\n    \"fastapi-people.md\",\n    \"external-links.md\",\n    \"newsletter.md\",\n    \"management-tasks.md\",\n    \"management.md\",\n    \"contributing.md\",\n]\n\ndocs_path = Path(\"docs\")\nen_docs_path = Path(\"docs/en\")\nen_config_path: Path = en_docs_path / mkdocs_name\nsite_path = Path(\"site\").absolute()\nbuild_site_path = Path(\"site_build\").absolute()"
    },
    {
      "chunk_id": 3210,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@lru_cache\ndef is_mkdocs_insiders() -> bool:\n    version = metadata.version(\"mkdocs-material\")\n    return \"insiders\" in version"
    },
    {
      "chunk_id": 3211,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def get_en_config() -> Dict[str, Any]:\n    return mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))"
    },
    {
      "chunk_id": 3212,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def get_lang_paths() -> List[Path]:\n    return sorted(docs_path.iterdir())"
    },
    {
      "chunk_id": 3213,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def lang_callback(lang: Optional[str]) -> Union[str, None]:\n    if lang is None:\n        return None\n    lang = lang.lower()\n    return lang"
    },
    {
      "chunk_id": 3214,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def complete_existing_lang(incomplete: str):\n    lang_path: Path\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir() and lang_path.name.startswith(incomplete):\n            yield lang_path.name"
    },
    {
      "chunk_id": 3215,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.callback()\ndef callback() -> None:\n    if is_mkdocs_insiders():\n        os.environ[\"INSIDERS_FILE\"] = \"../en/mkdocs.insiders.yml\"\n    os.environ[\"DYLD_FALLBACK_LIBRARY_PATH\"] = \"/opt/homebrew/lib\""
    },
    {
      "chunk_id": 3216,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n    \"\"\"\n    Generate a new docs translation directory for the language LANG.\n    \"\"\"\n    new_path: Path = Path(\"docs\") / lang\n    if new_path.exists():\n        typer.echo(f\"The language was already created: {lang}\")\n        raise typer.Abort()\n    new_path.mkdir()\n    new_config_path: Path = Path(new_path) / mkdocs_name\n    new_config_path.write_text(\"INHERIT: ../en/mkdocs.yml\\n\", encoding=\"utf-8\")\n    new_config_docs_path: Path = new_path / \"docs\"\n    new_config_docs_path.mkdir()\n    en_index_path: Path = en_docs_path / \"docs\" / \"index.md\"\n    new_index_path: Path = new_config_docs_path / \"index.md\"\n    en_index_content = en_index_path.read_text(encoding=\"utf-8\")\n    new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n    new_index_path.write_text(new_index_content, encoding=\"utf-8\")\n    typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n    update_languages()"
    },
    {
      "chunk_id": 3217,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef build_lang(\n    lang: str = typer.Argument(\n        ..., callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n) -> None:\n    \"\"\"\n    Build the docs for a language.\n    \"\"\"\n    insiders_env_file = os.environ.get(\"INSIDERS_FILE\")\n    print(f\"Insiders file {insiders_env_file}\")\n    if is_mkdocs_insiders():\n        print(\"Using insiders\")\n    lang_path: Path = Path(\"docs\") / lang\n    if not lang_path.is_dir():\n        typer.echo(f\"The language translation doesn't seem to exist yet: {lang}\")\n        raise typer.Abort()\n    typer.echo(f\"Building docs for: {lang}\")\n    build_site_dist_path = build_site_path / lang\n    if lang == \"en\":\n        dist_path = site_path\n    else:\n        dist_path = site_path / lang\n        shutil.rmtree(dist_path, ignore_errors=True)\n    current_dir = os.getcwd()\n    os.chdir(lang_path)\n    shutil.rmtree(build_site_dist_path, ignore_errors=True)\n    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", build_site_dist_path], check=True)\n    shutil.copytree(build_site_dist_path, dist_path, dirs_exist_ok=True)\n    os.chdir(current_dir)\n    typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)"
    },
    {
      "chunk_id": 3218,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "index_sponsors_template = \"\"\"\n{% if sponsors %}\n{% for sponsor in sponsors.gold -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n{% endfor -%}\n{%- for sponsor in sponsors.silver -%}\n<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n{% endfor %}\n{% endif %}\n\"\"\""
    },
    {
      "chunk_id": 3219,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def generate_readme_content() -> str:\n    en_index = en_docs_path / \"docs\" / \"index.md\"\n    content = en_index.read_text(\"utf-8\")\n    match_pre = re.search(r\"</style>\\n\\n\", content)\n    match_start = re.search(r\"<!-- sponsors -->\", content)\n    match_end = re.search(r\"<!-- /sponsors -->\", content)\n    sponsors_data_path = en_docs_path / \"data\" / \"sponsors.yml\"\n    sponsors = mkdocs.utils.yaml_load(sponsors_data_path.read_text(encoding=\"utf-8\"))\n    if not (match_start and match_end):\n        raise RuntimeError(\"Couldn't auto-generate sponsors section\")\n    if not match_pre:\n        raise RuntimeError(\"Couldn't find pre section (<style>) in index.md\")\n    frontmatter_end = match_pre.end()\n    pre_end = match_start.end()\n    post_start = match_end.start()\n    template = Template(index_sponsors_template)\n    message = template.render(sponsors=sponsors)\n    pre_content = content[frontmatter_end:pre_end]\n    post_content = content[post_start:]\n    new_content = pre_content + message + post_content\n    new_content = re.sub(\n        r\"<!-- only-mkdocs -->.*?<!-- /only-mkdocs -->\",\n        \"\",\n        new_content,\n        flags=re.DOTALL,\n    )\n    return new_content"
    },
    {
      "chunk_id": 3220,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef generate_readme() -> None:\n    \"\"\"\n    Generate README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Generating README\")\n    readme_path = Path(\"README.md\")\n    new_content = generate_readme_content()\n    readme_path.write_text(new_content, encoding=\"utf-8\")"
    },
    {
      "chunk_id": 3221,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef verify_readme() -> None:\n    \"\"\"\n    Verify README.md content from main index.md\n    \"\"\"\n    typer.echo(\"Verifying README\")\n    readme_path = Path(\"README.md\")\n    generated_content = generate_readme_content()\n    readme_content = readme_path.read_text(\"utf-8\")\n    if generated_content != readme_content:\n        typer.secho(\n            \"README.md outdated from the latest index.md\", color=typer.colors.RED\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid README \u2705\")"
    },
    {
      "chunk_id": 3222,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef build_all() -> None:\n    \"\"\"\n    Build mkdocs site for en, and then build each language inside, end result is located\n    at directory ./site/ with each language inside.\n    \"\"\"\n    update_languages()\n    shutil.rmtree(site_path, ignore_errors=True)\n    langs = [lang.name for lang in get_lang_paths() if lang.is_dir()]\n    cpu_count = os.cpu_count() or 1\n    process_pool_size = cpu_count * 4\n    typer.echo(f\"Using process pool size: {process_pool_size}\")\n    with Pool(process_pool_size) as p:\n        p.map(build_lang, langs)"
    },
    {
      "chunk_id": 3223,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef update_languages() -> None:\n    \"\"\"\n    Update the mkdocs.yml file Languages section including all the available languages.\n    \"\"\"\n    update_config()"
    },
    {
      "chunk_id": 3224,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef serve() -> None:\n    \"\"\"\n    A quick server to preview a built site with translations.\n\n    For development, prefer the command live (or just mkdocs serve).\n\n    This is here only to preview a site with translations already built.\n\n    Make sure you run the build-all command first.\n    \"\"\"\n    typer.echo(\"Warning: this is a very simple server.\")\n    typer.echo(\"For development, use the command live instead.\")\n    typer.echo(\"This is here only to preview a site with translations already built.\")\n    typer.echo(\"Make sure you run the build-all command first.\")\n    os.chdir(\"site\")\n    server_address = (\"\", 8008)\n    server = HTTPServer(server_address, SimpleHTTPRequestHandler)\n    typer.echo(\"Serving at: http://127.0.0.1:8008\")\n    server.serve_forever()"
    },
    {
      "chunk_id": 3225,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef live(\n    lang: str = typer.Argument(\n        None, callback=lang_callback, autocompletion=complete_existing_lang\n    ),\n    dirty: bool = False,\n) -> None:\n    \"\"\"\n    Serve with livereload a docs site for a specific language.\n\n    This only shows the actual translated files, not the placeholders created with\n    build-all.\n\n    Takes an optional LANG argument with the name of the language to serve, by default\n    en.\n    \"\"\"\n    if lang is None:\n        lang = \"en\"\n    lang_path: Path = docs_path / lang\n    args = [\"mkdocs\", \"serve\", \"--dev-addr\", \"127.0.0.1:8008\"]\n    if dirty:\n        args.append(\"--dirty\")\n    subprocess.run(\n        args, env={**os.environ, \"LINENUMS\": \"true\"}, cwd=lang_path, check=True\n    )"
    },
    {
      "chunk_id": 3226,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def get_updated_config_content() -> Dict[str, Any]:\n    config = get_en_config()\n    languages = [{\"en\": \"/\"}]\n    new_alternate: List[Dict[str, str]] = []\n    language_names_path = Path(__file__).parent / \"../docs/language_names.yml\"\n    local_language_names: Dict[str, str] = mkdocs.utils.yaml_load(\n        language_names_path.read_text(encoding=\"utf-8\")\n    )\n    for lang_path in get_lang_paths():\n        if lang_path.name in {\"en\", \"em\"} or not lang_path.is_dir():\n            continue\n        code = lang_path.name\n        languages.append({code: f\"/{code}/\"})\n    for lang_dict in languages:\n        code = list(lang_dict.keys())[0]\n        url = lang_dict[code]\n        if code not in local_language_names:\n            print(\n                f\"Missing language name for: {code}, \"\n                \"update it in docs/language_names.yml\"\n            )\n            raise typer.Abort()\n        use_name = f\"{code} - {local_language_names[code]}\"\n        new_alternate.append({\"link\": url, \"name\": use_name})\n    new_alternate.append({\"link\": \"/em/\", \"name\": \"\ud83d\ude09\"})\n    config[\"extra\"][\"alternate\"] = new_alternate\n    return config"
    },
    {
      "chunk_id": 3227,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "def update_config() -> None:\n    config = get_updated_config_content()\n    en_config_path.write_text(\n        yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n        encoding=\"utf-8\",\n    )"
    },
    {
      "chunk_id": 3228,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef verify_config() -> None:\n    \"\"\"\n    Verify main mkdocs.yml content to make sure it uses the latest language names.\n    \"\"\"\n    typer.echo(\"Verifying mkdocs.yml\")\n    config = get_en_config()\n    updated_config = get_updated_config_content()\n    if config != updated_config:\n        typer.secho(\n            \"docs/en/mkdocs.yml outdated from docs/language_names.yml, \"\n            \"update language_names.yml and run \"\n            \"python ./scripts/docs.py update-languages\",\n            color=typer.colors.RED,\n        )\n        raise typer.Abort()\n    typer.echo(\"Valid mkdocs.yml \u2705\")"
    },
    {
      "chunk_id": 3229,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef verify_non_translated() -> None:\n    \"\"\"\n    Verify there are no files in the non translatable pages.\n    \"\"\"\n    print(\"Verifying non translated pages\")\n    lang_paths = get_lang_paths()\n    error_paths = []\n    for lang in lang_paths:\n        if lang.name == \"en\":\n            continue\n        for non_translatable in non_translated_sections:\n            non_translatable_path = lang / \"docs\" / non_translatable\n            if non_translatable_path.exists():\n                error_paths.append(non_translatable_path)\n    if error_paths:\n        print(\"Non-translated pages found, remove them:\")\n        for error_path in error_paths:\n            print(error_path)\n        raise typer.Abort()\n    print(\"No non-translated pages found \u2705\")"
    },
    {
      "chunk_id": 3230,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef verify_docs():\n    verify_readme()\n    verify_config()\n    verify_non_translated()"
    },
    {
      "chunk_id": 3231,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef langs_json():\n    langs = []\n    for lang_path in get_lang_paths():\n        if lang_path.is_dir():\n            langs.append(lang_path.name)\n    print(json.dumps(langs))"
    },
    {
      "chunk_id": 3232,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "@app.command()\ndef generate_docs_src_versions_for_file(file_path: Path) -> None:\n    target_versions = [\"py39\", \"py310\"]\n    base_content = file_path.read_text(encoding=\"utf-8\")\n    previous_content = {base_content}\n    for target_version in target_versions:\n        version_result = subprocess.run(\n            [\n                find_ruff_bin(),\n                \"check\",\n                \"--target-version\",\n                target_version,\n                \"--fix\",\n                \"--unsafe-fixes\",\n                \"-\",\n            ],\n            input=base_content.encode(\"utf-8\"),\n            capture_output=True,\n        )\n        content_target = version_result.stdout.decode(\"utf-8\")\n        format_result = subprocess.run(\n            [find_ruff_bin(), \"format\", \"-\"],\n            input=content_target.encode(\"utf-8\"),\n            capture_output=True,\n        )\n        content_format = format_result.stdout.decode(\"utf-8\")\n        if content_format in previous_content:\n            continue\n        previous_content.add(content_format)\n        version_file = file_path.with_name(\n            file_path.name.replace(\".py\", f\"_{target_version}.py\")\n        )\n        logging.info(f\"Writing to {version_file}\")\n        version_file.write_text(content_format, encoding=\"utf-8\")"
    },
    {
      "chunk_id": 3233,
      "source": "__internal__/data_repo/fastapi/scripts/docs.py",
      "content": "if __name__ == \"__main__\":\n    app()"
    },
    {
      "chunk_id": 3234,
      "source": "__internal__/data_repo/fastapi/scripts/deploy_docs_status.py",
      "content": "import logging\nimport re\n\nfrom github import Github\nfrom pydantic import BaseModel, SecretStr\nfrom pydantic_settings import BaseSettings"
    },
    {
      "chunk_id": 3235,
      "source": "__internal__/data_repo/fastapi/scripts/deploy_docs_status.py",
      "content": "class Settings(BaseSettings):\n    \"\"\"Settings for the application.\"\"\"\n    github_repository: str\n    github_token: SecretStr\n    deploy_url: str | None = None\n    commit_sha: str\n    run_id: int\n    is_done: bool = False"
    },
    {
      "chunk_id": 3236,
      "source": "__internal__/data_repo/fastapi/scripts/deploy_docs_status.py",
      "content": "class LinkData(BaseModel):\n    \"\"\"Data structure for links.\"\"\"\n    previous_link: str\n    preview_link: str\n    en_link: str | None = None"
    },
    {
      "chunk_id": 3237,
      "source": "__internal__/data_repo/fastapi/scripts/deploy_docs_status.py",
      "content": "def main() -> None:\n    logging.basicConfig(level=logging.INFO)\n    settings = Settings()\n\n    logging.info(f\"Using config: {settings.model_dump_json()}\")\n    g = Github(settings.github_token.get_secret_value())\n    repo = g.get_repo(settings.github_repository)\n    use_pr = next(\n        (pr for pr in repo.get_pulls() if pr.head.sha == settings.commit_sha), None\n    )\n    if not use_pr:\n        logging.error(f\"No PR found for hash: {settings.commit_sha}\")\n        return\n    commits = list(use_pr.get_commits())\n    current_commit = [c for c in commits if c.sha == settings.commit_sha][0]\n    run_url = f\"https://github.com/{settings.github_repository}/actions/runs/{settings.run_id}\"\n    if settings.is_done and not settings.deploy_url:\n        current_commit.create_status(\n            state=\"success\",\n            description=\"No Docs Changes\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No docs changes found\")\n        return\n    if not settings.deploy_url:\n        current_commit.create_status(\n            state=\"pending\",\n            description=\"Deploying Docs\",\n            context=\"deploy-docs\",\n            target_url=run_url,\n        )\n        logging.info(\"No deploy URL available yet\")\n        return\n    current_commit.create_status(\n        state=\"success\",\n        description=\"Docs Deployed\",\n        context=\"deploy-docs\",\n        target_url=run_url,\n    )\n\n    files = list(use_pr.get_files())\n    docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n\n    deploy_url = settings.deploy_url.rstrip(\"/\")\n    lang_links: dict[str, list[LinkData]] = {}\n    for f in docs_files:\n        match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n        if not match:\n            continue\n        lang = match.group(1)\n        path = match.group(2)\n        if path.endswith(\"index.md\"):\n            path = path.replace(\"index.md\", \"\")\n        else:\n            path = path.replace(\".md\", \"/\")\n        en_path = path\n        if lang == \"en\":\n            use_path = en_path\n        else:\n            use_path = f\"{lang}/{path}\"\n        link = LinkData(\n            previous_link=f\"https://fastapi.tiangolo.com/{use_path}\",\n            preview_link=f\"{deploy_url}/{use_path}\",\n        )\n        if lang != \"en\":\n            link.en_link = f\"https://fastapi.tiangolo.com/{en_path}\"\n        lang_links.setdefault(lang, []).append(link)\n\n    links: list[LinkData] = []\n    en_links = lang_links.get(\"en\", [])\n    en_links.sort(key=lambda x: x.preview_link)\n    links.extend(en_links)\n\n    langs = list(lang_links.keys())\n    langs.sort()\n    for lang in langs:\n        if lang == \"en\":\n            continue\n        current_lang_links = lang_links[lang]\n        current_lang_links.sort(key=lambda x: x.preview_link)\n        links.extend(current_lang_links)\n\n    message = f\"\ud83d\udcdd Docs preview for commit {settings.commit_sha} at: {deploy_url}\"\n\n    if links:\n        message += \"\\n\\n### Modified Pages\\n\\n\"\n        for link in links:\n            message += f\"* {link.preview_link}\"\n            message += f\" - ([before]({link.previous_link}))\"\n            if link.en_link:\n                message += f\" - ([English]({link.en_link}))\"\n            message += \"\\n\"\n\n    print(message)\n    use_pr.as_issue().create_comment(message)\n\n    logging.info(\"Finished\")"
    },
    {
      "chunk_id": 3238,
      "source": "__internal__/data_repo/fastapi/scripts/deploy_docs_status.py",
      "content": "if __name__ == \"__main__\":\n    main()"
    },
    {
      "chunk_id": 3239,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "from functools import lru_cache\nfrom pathlib import Path\nfrom typing import Any, List, Union\n\nimport material\nfrom mkdocs.config.defaults import MkDocsConfig\nfrom mkdocs.structure.files import File, Files\nfrom mkdocs.structure.nav import Link, Navigation, Section\nfrom mkdocs.structure.pages import Page\n\nnon_translated_sections = [\n    \"reference/\",\n    \"release-notes.md\",\n    \"fastapi-people.md\",\n    \"external-links.md\",\n    \"newsletter.md\",\n    \"management-tasks.md\",\n    \"management.md\",\n]"
    },
    {
      "chunk_id": 3240,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "@lru_cache\ndef get_missing_translation_content(docs_dir: str) -> str:\n    docs_dir_path = Path(docs_dir)\n    missing_translation_path = docs_dir_path.parent.parent / \"missing-translation.md\"\n    return missing_translation_path.read_text(encoding=\"utf-8\")"
    },
    {
      "chunk_id": 3241,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "@lru_cache\ndef get_mkdocs_material_langs() -> List[str]:\n    material_path = Path(material.__file__).parent\n    material_langs_path = material_path / \"templates\" / \"partials\" / \"languages\"\n    langs = [file.stem for file in material_langs_path.glob(\"*.html\")]\n    return langs"
    },
    {
      "chunk_id": 3242,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "class EnFile(File):\n    \"\"\"Custom File class for handling English files.\"\"\"\n    pass"
    },
    {
      "chunk_id": 3243,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def on_config(config: MkDocsConfig, **kwargs: Any) -> MkDocsConfig:\n    available_langs = get_mkdocs_material_langs()\n    dir_path = Path(config.docs_dir)\n    lang = dir_path.parent.name\n    if lang in available_langs:\n        config.theme[\"language\"] = lang\n    if not (config.site_url or \"\").endswith(f\"{lang}/\") and lang != \"en\":\n        config.site_url = f\"{config.site_url}{lang}/\"\n    return config"
    },
    {
      "chunk_id": 3244,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def resolve_file(*, item: str, files: Files, config: MkDocsConfig) -> None:\n    item_path = Path(config.docs_dir) / item\n    if not item_path.is_file():\n        en_src_dir = (Path(config.docs_dir) / \"../../en/docs\").resolve()\n        potential_path = en_src_dir / item\n        if potential_path.is_file():\n            files.append(\n                EnFile(\n                    path=item,\n                    src_dir=str(en_src_dir),\n                    dest_dir=config.site_dir,\n                    use_directory_urls=config.use_directory_urls,\n                )\n            )"
    },
    {
      "chunk_id": 3245,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def resolve_files(*, items: List[Any], files: Files, config: MkDocsConfig) -> None:\n    for item in items:\n        if isinstance(item, str):\n            resolve_file(item=item, files=files, config=config)\n        elif isinstance(item, dict):\n            assert len(item) == 1\n            values = list(item.values())\n            if not values:\n                continue\n            if isinstance(values[0], str):\n                resolve_file(item=values[0], files=files, config=config)\n            elif isinstance(values[0], list):\n                resolve_files(items=values[0], files=files, config=config)\n            else:\n                raise ValueError(f\"Unexpected value: {values}\")"
    },
    {
      "chunk_id": 3246,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def on_files(files: Files, *, config: MkDocsConfig) -> Files:\n    resolve_files(items=config.nav or [], files=files, config=config)\n    if \"logo\" in config.theme:\n        resolve_file(item=config.theme[\"logo\"], files=files, config=config)\n    if \"favicon\" in config.theme:\n        resolve_file(item=config.theme[\"favicon\"], files=files, config=config)\n    resolve_files(items=config.extra_css, files=files, config=config)\n    resolve_files(items=config.extra_javascript, files=files, config=config)\n    return files"
    },
    {
      "chunk_id": 3247,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def generate_renamed_section_items(\n    items: List[Union[Page, Section, Link]], *, config: MkDocsConfig\n) -> List[Union[Page, Section, Link]]:\n    new_items: List[Union[Page, Section, Link]] = []\n    for item in items:\n        if isinstance(item, Section):\n            new_title = item.title\n            new_children = generate_renamed_section_items(item.children, config=config)\n            first_child = new_children[0]\n            if isinstance(first_child, Page):\n                if first_child.file.src_path.endswith(\"index.md\"):\n                    # Read the source so that the title is parsed and available\n                    first_child.read_source(config=config)\n                    new_title = first_child.title or new_title\n            item.title = new_title\n            item.children = new_children\n            new_items.append(item)\n        else:\n            new_items.append(item)\n    return new_items"
    },
    {
      "chunk_id": 3248,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def on_nav(\n    nav: Navigation, *, config: MkDocsConfig, files: Files, **kwargs: Any\n) -> Navigation:\n    new_items = generate_renamed_section_items(nav.items, config=config)\n    return Navigation(items=new_items, pages=nav.pages)"
    },
    {
      "chunk_id": 3249,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def on_pre_page(page: Page, *, config: MkDocsConfig, files: Files) -> Page:\n    return page"
    },
    {
      "chunk_id": 3250,
      "source": "__internal__/data_repo/fastapi/scripts/mkdocs_hooks.py",
      "content": "def on_page_markdown(\n    markdown: str, *, page: Page, config: MkDocsConfig, files: Files\n) -> str:\n    if isinstance(page.file, EnFile):\n        for excluded_section in non_translated_sections:\n            if page.file.src_path.startswith(excluded_section):\n                return markdown\n        missing_translation_content = get_missing_translation_content(config.docs_dir)\n        header = \"\"\n        body = markdown\n        if markdown.startswith(\"#\"):\n            header, _, body = markdown.partition(\"\\n\\n\")\n        return f\"{header}\\n\\n{missing_translation_content}\\n\\n{body}\"\n    return markdown"
    },
    {
      "chunk_id": 3251,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/cookie_param_models/image01.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3252,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/cookie_param_models/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"link\", name=\"/items/\").click()\n    page.screenshot(path=\"docs/en/docs/img/tutorial/cookie-param-models/image01.png\")\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3253,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/cookie_param_models/image01.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/cookie_param_models/tutorial001.py\"]\n)"
    },
    {
      "chunk_id": 3254,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/cookie_param_models/image01.py",
      "content": "try:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3255,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image01.py",
      "content": "import subprocess\n\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3256,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"POST/items/Create Item\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").first.click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image01.png\"\n    )\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3257,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image01.py",
      "content": "process = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)\ntry:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3258,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image04.py",
      "content": "import subprocess"
    },
    {
      "chunk_id": 3259,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image04.py",
      "content": "from playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3260,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image04.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item-Input\").click()\n    page.get_by_role(\"button\", name=\"Item-Output\").click()\n    page.set_viewport_size({\"width\": 960, \"height\": 820})\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image04.png\"\n    )\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3261,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image04.py",
      "content": "process = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)"
    },
    {
      "chunk_id": 3262,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image04.py",
      "content": "try:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3263,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image03.py",
      "content": "import subprocess"
    },
    {
      "chunk_id": 3264,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image03.py",
      "content": "from playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3265,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image03.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"tab\", name=\"Schema\").click()\n    page.get_by_label(\"Schema\").get_by_role(\"button\", name=\"Expand all\").click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image03.png\"\n    )\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3266,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image03.py",
      "content": "process = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)"
    },
    {
      "chunk_id": 3267,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image03.py",
      "content": "try:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3268,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image02.py",
      "content": "import subprocess"
    },
    {
      "chunk_id": 3269,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image02.py",
      "content": "from playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3270,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image02.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_text(\"GET/items/Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.get_by_role(\"button\", name=\"Execute\").click()\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image02.png\"\n    )\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3271,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image02.py",
      "content": "process = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial001:app\"]\n)"
    },
    {
      "chunk_id": 3272,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image02.py",
      "content": "try:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3273,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image05.py",
      "content": "import subprocess"
    },
    {
      "chunk_id": 3274,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image05.py",
      "content": "from playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3275,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image05.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"Item\", exact=True).click()\n    page.set_viewport_size({\"width\": 960, \"height\": 700})\n    page.screenshot(\n        path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image05.png\"\n    )\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3276,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image05.py",
      "content": "process = subprocess.Popen(\n    [\"uvicorn\", \"docs_src.separate_openapi_schemas.tutorial002:app\"]\n)"
    },
    {
      "chunk_id": 3277,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/separate_openapi_schemas/image05.py",
      "content": "try:\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3278,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image01.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3279,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    # Update the viewport manually\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_label(\"post /heroes/\").click()\n    # Manually add the screenshot\n    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image01.png\")\n\n    # ---------------------\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3280,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image01.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/sql_databases/tutorial001.py\"],\n)\ntry:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3281,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image02.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3282,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image02.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_label(\"post /heroes/\").click()\n    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image02.png\")\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3283,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image02.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/sql_databases/tutorial002.py\"],\n)"
    },
    {
      "chunk_id": 3284,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/sql_databases/image02.py",
      "content": "try:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3285,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/request_form_models/image01.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3286,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/request_form_models/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"POST /login/ Login\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.screenshot(path=\"docs/en/docs/img/tutorial/request-form-models/image01.png\")\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3287,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/request_form_models/image01.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/request_form_models/tutorial001.py\"]\n)"
    },
    {
      "chunk_id": 3288,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/request_form_models/image01.py",
      "content": "try:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3289,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/query_param_models/image01.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3290,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/query_param_models/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context()\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"GET /items/ Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.get_by_role(\"heading\", name=\"Servers\").click()\n    page.screenshot(path=\"docs/en/docs/img/tutorial/query-param-models/image01.png\")\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3291,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/query_param_models/image01.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/query_param_models/tutorial001.py\"]\n)"
    },
    {
      "chunk_id": 3292,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/query_param_models/image01.py",
      "content": "try:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    },
    {
      "chunk_id": 3293,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/header_param_models/image01.py",
      "content": "import subprocess\nimport time\n\nimport httpx\nfrom playwright.sync_api import Playwright, sync_playwright"
    },
    {
      "chunk_id": 3294,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/header_param_models/image01.py",
      "content": "def run(playwright: Playwright) -> None:\n    browser = playwright.chromium.launch(headless=False)\n    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n    page = context.new_page()\n    page.goto(\"http://localhost:8000/docs\")\n    page.get_by_role(\"button\", name=\"GET /items/ Read Items\").click()\n    page.get_by_role(\"button\", name=\"Try it out\").click()\n    page.screenshot(path=\"docs/en/docs/img/tutorial/header-param-models/image01.png\")\n    context.close()\n    browser.close()"
    },
    {
      "chunk_id": 3295,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/header_param_models/image01.py",
      "content": "process = subprocess.Popen(\n    [\"fastapi\", \"run\", \"docs_src/header_param_models/tutorial001.py\"]\n)"
    },
    {
      "chunk_id": 3296,
      "source": "__internal__/data_repo/fastapi/scripts/playwright/header_param_models/image01.py",
      "content": "try:\n    for _ in range(3):\n        try:\n            response = httpx.get(\"http://localhost:8000/docs\")\n        except httpx.ConnectError:\n            time.sleep(1)\n            break\n    with sync_playwright() as playwright:\n        run(playwright)\nfinally:\n    process.terminate()"
    }
  ]
}