{
  "tests": [
    {
      "name": "_make_timedelta",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 74,
      "end_line_number": 78,
      "source_code": "def _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "test_client",
      "module": "app",
      "class_name": "Flask",
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 669,
      "end_line_number": 725,
      "source_code": "def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> FlaskClient:\n        \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :doc:`/testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\n        cls = self.test_client_class\n        if cls is None:\n            from .testing import FlaskClient as cls\n        return cls(  # type: ignore\n            self, self.response_class, use_cookies=use_cookies, **kwargs\n        )",
      "docstring": "Creates a test client for this application.  For information\nabout unit testing head over to :doc:`/testing`.\n\nNote that if you are testing for assertions or exceptions in your\napplication code, you must set ``app.testing = True`` in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the :attr:`testing`\nattribute.  For example::\n\n    app.testing = True\n    client = app.test_client()\n\nThe test client can be used in a ``with`` block to defer the closing down\nof the context until the end of the ``with`` block.  This is useful if\nyou want to access the context locals for testing::\n\n    with app.test_client() as c:\n        rv = c.get('/?vodka=42')\n        assert request.args['vodka'] == '42'\n\nAdditionally, you may pass optional keyword arguments that will then\nbe passed to the application's :attr:`test_client_class` constructor.\nFor example::\n\n    from flask.testing import FlaskClient\n\n    class CustomClient(FlaskClient):\n        def __init__(self, *args, **kwargs):\n            self._authentication = kwargs.pop(\"authentication\")\n            super(CustomClient,self).__init__( *args, **kwargs)\n\n    app.test_client_class = CustomClient\n    client = app.test_client(authentication='Basic ....')\n\nSee :class:`~flask.testing.FlaskClient` for more information.\n\n.. versionchanged:: 0.4\n   added support for ``with`` block usage for the client.\n\n.. versionadded:: 0.7\n   The `use_cookies` parameter was added as well as the ability\n   to override the client to be used by setting the\n   :attr:`test_client_class` attribute.\n\n.. versionchanged:: 0.11\n   Added `**kwargs` to support passing additional keyword arguments to\n   the constructor of :attr:`test_client_class`.",
      "decorators": [],
      "arguments": [
        "self",
        "use_cookies"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "test_cli_runner",
      "module": "app",
      "class_name": "Flask",
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 727,
      "end_line_number": 742,
      "source_code": "def test_cli_runner(self, **kwargs: t.Any) -> FlaskCliRunner:\n        \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        cls = self.test_cli_runner_class\n\n        if cls is None:\n            from .testing import FlaskCliRunner as cls\n\n        return cls(self, **kwargs)",
      "docstring": "Create a CLI runner for testing CLI commands.\nSee :ref:`testing-cli`.\n\nReturns an instance of :attr:`test_cli_runner_class`, by default\n:class:`~flask.testing.FlaskCliRunner`. The Flask app object is\npassed as the first argument.\n\n.. versionadded:: 1.0",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "test_request_context",
      "module": "app",
      "class_name": "Flask",
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1423,
      "end_line_number": 1477,
      "source_code": "def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with app.test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\n        from .testing import EnvironBuilder\n\n        builder = EnvironBuilder(self, *args, **kwargs)\n\n        try:\n            return self.request_context(builder.get_environ())\n        finally:\n            builder.close()",
      "docstring": "Create a :class:`~flask.ctx.RequestContext` for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.\n\nSee :doc:`/reqcontext`.\n\nUse a ``with`` block to push the context, which will make\n:data:`request` point at the request for the created\nenvironment. ::\n\n    with app.test_request_context(...):\n        generate_report()\n\nWhen using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation. ::\n\n    ctx = app.test_request_context(...)\n    ctx.push()\n    ...\n    ctx.pop()\n\nTakes the same arguments as Werkzeug's\n:class:`~werkzeug.test.EnvironBuilder`, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.\n\n:param path: URL path being requested.\n:param base_url: Base URL where the app is being served, which\n    ``path`` is relative to. If not given, built from\n    :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n    :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n:param subdomain: Subdomain name to append to\n    :data:`SERVER_NAME`.\n:param url_scheme: Scheme to use instead of\n    :data:`PREFERRED_URL_SCHEME`.\n:param data: The request body, either as a string or a dict of\n    form keys and values.\n:param json: If given, this is serialized as JSON and passed as\n    ``data``. Also defaults ``content_type`` to\n    ``application/json``.\n:param args: other positional arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.\n:param kwargs: other keyword arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.request_context",
          "body": "def request_context(self, environ: WSGIEnvironment) -> RequestContext:\n    \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\n    return RequestContext(self, environ)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 226,
      "end_line_number": 279,
      "source_code": "def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ):\n        super().__init__(\n            import_name=import_name,\n            static_url_path=static_url_path,\n            static_folder=static_folder,\n            static_host=static_host,\n            host_matching=host_matching,\n            subdomain_matching=subdomain_matching,\n            template_folder=template_folder,\n            instance_path=instance_path,\n            instance_relative_config=instance_relative_config,\n            root_path=root_path,\n        )\n\n        #: The Click command group for registering CLI commands for this\n        #: object. The commands are available from the ``flask`` command\n        #: once the application has been discovered and blueprints have\n        #: been registered.\n        self.cli = cli.AppGroup()\n\n        # Set the name of the Click group in case someone wants to add\n        # the app's commands to another CLI tool.\n        self.cli.name = self.name\n\n        # Add a static route using the provided static_url_path, static_host,\n        # and static_folder if there is a configured static_folder.\n        # Note we do this without checking if static_folder exists.\n        # For one, it might be created while the server is running (e.g. during\n        # development). Also, Google App Engine stores static files somewhere\n        if self.has_static_folder:\n            assert (\n                bool(static_host) == host_matching\n            ), \"Invalid static_host/host_matching combination\"\n            # Use a weakref to avoid creating a reference cycle between the app\n            # and the view function (see #3761).\n            self_ref = weakref.ref(self)\n            self.add_url_rule(\n                f\"{self.static_url_path}/<path:filename>\",\n                endpoint=\"static\",\n                host=static_host,\n                view_func=lambda **kw: self_ref().send_static_file(**kw),  # type: ignore # noqa: B950\n            )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "import_name",
        "static_url_path",
        "static_folder",
        "static_host",
        "host_matching",
        "subdomain_matching",
        "template_folder",
        "instance_path",
        "instance_relative_config",
        "root_path"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [
        "assert bool(static_host) == host_matching, 'Invalid static_host/host_matching combination'"
      ],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        }
      ]
    },
    {
      "name": "get_send_file_max_age",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 281,
      "end_line_number": 306,
      "source_code": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n\n        if value is None:\n            return None\n\n        if isinstance(value, timedelta):\n            return int(value.total_seconds())\n\n        return value",
      "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "self",
        "filename"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "send_static_file",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 308,
      "end_line_number": 328,
      "source_code": "def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve static_files.\")\n\n        # send_file only knows to call get_send_file_max_age on the app,\n        # call it here so it works for blueprints too.\n        max_age = self.get_send_file_max_age(filename)\n        return send_from_directory(\n            t.cast(str, self.static_folder), filename, max_age=max_age\n        )",
      "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
      "decorators": [],
      "arguments": [
        "self",
        "filename"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.get_send_file_max_age",
          "body": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n    \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    value = current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    if value is None:\n        return None\n    if isinstance(value, timedelta):\n        return int(value.total_seconds())\n    return value"
        },
        {
          "name": "send_from_directory",
          "body": "def send_from_directory(directory: os.PathLike[str] | str, path: os.PathLike[str] | str, **kwargs: t.Any) -> Response:\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under,\n        relative to the current application's root path. This *must not*\n        be a value provided by the client, otherwise it becomes insecure.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionchanged:: 2.0\n        ``path`` replaces the ``filename`` parameter.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionadded:: 0.5\n    \"\"\"\n    return werkzeug.utils.send_from_directory(directory, path, **_prepare_send_file_kwargs(**kwargs))"
        }
      ]
    },
    {
      "name": "open_resource",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 330,
      "end_line_number": 361,
      "source_code": "def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading.\n\n        For example, if the file ``schema.sql`` is next to the file\n        ``app.py`` where the ``Flask`` app is defined, it can be opened\n        with:\n\n        .. code-block:: python\n\n            with app.open_resource(\"schema.sql\") as f:\n                conn.executescript(f.read())\n\n        :param resource: Path to the resource relative to :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is supported,\n            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        if mode not in {\"r\", \"rt\", \"rb\"}:\n            raise ValueError(\"Resources can only be opened for reading.\")\n\n        path = os.path.join(self.root_path, resource)\n\n        if mode == \"rb\":\n            return open(path, mode)  # pyright: ignore\n\n        return open(path, mode, encoding=encoding)",
      "docstring": "Open a resource file relative to :attr:`root_path` for reading.\n\nFor example, if the file ``schema.sql`` is next to the file\n``app.py`` where the ``Flask`` app is defined, it can be opened\nwith:\n\n.. code-block:: python\n\n    with app.open_resource(\"schema.sql\") as f:\n        conn.executescript(f.read())\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
      "decorators": [],
      "arguments": [
        "self",
        "resource",
        "mode",
        "encoding"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        }
      ]
    },
    {
      "name": "open_instance_resource",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 363,
      "end_line_number": 383,
      "source_code": "def open_instance_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to the application's instance folder\n        :attr:`instance_path`. Unlike :meth:`open_resource`, files in the\n        instance folder can be opened for writing.\n\n        :param resource: Path to the resource relative to :attr:`instance_path`.\n        :param mode: Open the file in this mode.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        path = os.path.join(self.instance_path, resource)\n\n        if \"b\" in mode:\n            return open(path, mode)\n\n        return open(path, mode, encoding=encoding)",
      "docstring": "Open a resource file relative to the application's instance folder\n:attr:`instance_path`. Unlike :meth:`open_resource`, files in the\ninstance folder can be opened for writing.\n\n:param resource: Path to the resource relative to :attr:`instance_path`.\n:param mode: Open the file in this mode.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
      "decorators": [],
      "arguments": [
        "self",
        "resource",
        "mode",
        "encoding"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        }
      ]
    },
    {
      "name": "create_jinja_environment",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 385,
      "end_line_number": 423,
      "source_code": "def create_jinja_environment(self) -> Environment:\n        \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        options = dict(self.jinja_options)\n\n        if \"autoescape\" not in options:\n            options[\"autoescape\"] = self.select_jinja_autoescape\n\n        if \"auto_reload\" not in options:\n            auto_reload = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n\n            if auto_reload is None:\n                auto_reload = self.debug\n\n            options[\"auto_reload\"] = auto_reload\n\n        rv = self.jinja_environment(self, **options)\n        rv.globals.update(\n            url_for=self.url_for,\n            get_flashed_messages=get_flashed_messages,\n            config=self.config,\n            # request, session and g are normally added with the\n            # context processor for efficiency reasons but for imported\n            # templates we also want the proxies in there.\n            request=request,\n            session=session,\n            g=g,\n        )\n        rv.policies[\"json.dumps_function\"] = self.json.dumps\n        return rv",
      "docstring": "Create the Jinja environment based on :attr:`jinja_options`\nand the various Jinja-related methods of the app. Changing\n:attr:`jinja_options` after this will have no effect. Also adds\nFlask-related globals and filters to the environment.\n\n.. versionchanged:: 0.11\n   ``Environment.auto_reload`` set in accordance with\n   ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n.. versionadded:: 0.5",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "create_url_adapter",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 425,
      "end_line_number": 476,
      "source_code": "def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n        \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n\n        .. versionchanged:: 0.9\n           This can be called outside a request when the URL adapter is created\n           for an application context.\n\n        .. versionadded:: 0.6\n        \"\"\"\n        if request is not None:\n            if (trusted_hosts := self.config[\"TRUSTED_HOSTS\"]) is not None:\n                request.trusted_hosts = trusted_hosts\n\n            # Check trusted_hosts here until bind_to_environ does.\n            request.host = get_host(request.environ, request.trusted_hosts)  # pyright: ignore\n            subdomain = None\n            server_name = self.config[\"SERVER_NAME\"]\n\n            if self.url_map.host_matching:\n                # Don't pass SERVER_NAME, otherwise it's used and the actual\n                # host is ignored, which breaks host matching.\n                server_name = None\n            elif not self.subdomain_matching:\n                # Werkzeug doesn't implement subdomain matching yet. Until then,\n                # disable it by forcing the current subdomain to the default, or\n                # the empty string.\n                subdomain = self.url_map.default_subdomain or \"\"\n\n            return self.url_map.bind_to_environ(\n                request.environ, server_name=server_name, subdomain=subdomain\n            )\n\n        # Need at least SERVER_NAME to match/build outside a request.\n        if self.config[\"SERVER_NAME\"] is not None:\n            return self.url_map.bind(\n                self.config[\"SERVER_NAME\"],\n                script_name=self.config[\"APPLICATION_ROOT\"],\n                url_scheme=self.config[\"PREFERRED_URL_SCHEME\"],\n            )\n\n        return None",
      "docstring": "Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly.\n\n.. versionchanged:: 3.1\n    If :data:`SERVER_NAME` is set, it does not restrict requests to\n    only that domain, for both ``subdomain_matching`` and\n    ``host_matching``.\n\n.. versionchanged:: 1.0\n    :data:`SERVER_NAME` no longer implicitly enables subdomain\n    matching. Use :attr:`subdomain_matching` instead.\n\n.. versionchanged:: 0.9\n   This can be called outside a request when the URL adapter is created\n   for an application context.\n\n.. versionadded:: 0.6",
      "decorators": [],
      "arguments": [
        "self",
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "raise_routing_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 478,
      "end_line_number": 504,
      "source_code": "def raise_routing_exception(self, request: Request) -> t.NoReturn:\n        \"\"\"Intercept routing exceptions and possibly do something else.\n\n        In debug mode, intercept a routing redirect and replace it with\n        an error if the body will be discarded.\n\n        With modern Werkzeug this shouldn't occur, since it now uses a\n        308 status which tells the browser to resend the method and\n        body.\n\n        .. versionchanged:: 2.1\n            Don't intercept 307 and 308 redirects.\n\n        :meta private:\n        :internal:\n        \"\"\"\n        if (\n            not self.debug\n            or not isinstance(request.routing_exception, RequestRedirect)\n            or request.routing_exception.code in {307, 308}\n            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}\n        ):\n            raise request.routing_exception  # type: ignore[misc]\n\n        from .debughelpers import FormDataRoutingRedirect\n\n        raise FormDataRoutingRedirect(request)",
      "docstring": "Intercept routing exceptions and possibly do something else.\n\nIn debug mode, intercept a routing redirect and replace it with\nan error if the body will be discarded.\n\nWith modern Werkzeug this shouldn't occur, since it now uses a\n308 status which tells the browser to resend the method and\nbody.\n\n.. versionchanged:: 2.1\n    Don't intercept 307 and 308 redirects.\n\n:meta private:\n:internal:",
      "decorators": [],
      "arguments": [
        "self",
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "update_template_context",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 506,
      "end_line_number": 532,
      "source_code": "def update_template_context(self, context: dict[str, t.Any]) -> None:\n        \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\n        names: t.Iterable[str | None] = (None,)\n\n        # A template may be rendered outside a request context.\n        if request:\n            names = chain(names, reversed(request.blueprints))\n\n        # The values passed to render_template take precedence. Keep a\n        # copy to re-apply after all context functions.\n        orig_ctx = context.copy()\n\n        for name in names:\n            if name in self.template_context_processors:\n                for func in self.template_context_processors[name]:\n                    context.update(self.ensure_sync(func)())\n\n        context.update(orig_ctx)",
      "docstring": "Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key.\n\n:param context: the context as a dictionary that is updated in place\n                to add extra variables.",
      "decorators": [],
      "arguments": [
        "self",
        "context"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "context.copy",
          "body": "def copy(self) -> RequestContext:\n    \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        \"\"\"\n    return self.__class__(self.app, environ=self.request.environ, request=self.request, session=self.session)"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "make_shell_context",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 534,
      "end_line_number": 544,
      "source_code": "def make_shell_context(self) -> dict[str, t.Any]:\n        \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {\"app\": self, \"g\": g}\n        for processor in self.shell_context_processors:\n            rv.update(processor())\n        return rv",
      "docstring": "Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "run",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 546,
      "end_line_number": 667,
      "source_code": "def run(\n        self,\n        host: str | None = None,\n        port: int | None = None,\n        debug: bool | None = None,\n        load_dotenv: bool = True,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Runs the application on a local development server.\n\n        Do not use ``run()`` in a production setting. It is not intended to\n        meet security and performance requirements for a production server.\n        Instead, see :doc:`/deploying/index` for WSGI server recommendations.\n\n        If the :attr:`debug` flag is set the server will automatically reload\n        for code changes and show a debugger in case an exception happened.\n\n        If you want to run the application in debug mode, but disable the\n        code execution on the interactive debugger, you can pass\n        ``use_evalex=False`` as parameter.  This will keep the debugger's\n        traceback screen active, but disable code execution.\n\n        It is not recommended to use this function for development with\n        automatic reloading as this is badly supported.  Instead you should\n        be using the :command:`flask` command line script's ``run`` support.\n\n        .. admonition:: Keep in Mind\n\n           Flask will suppress any server error with a generic error page\n           unless it is in debug mode.  As such to enable just the\n           interactive debugger without the code reloading, you have to\n           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n           Setting ``use_debugger`` to ``True`` without being in debug mode\n           won't catch any exceptions because there won't be any to\n           catch.\n\n        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n            have the server available externally as well. Defaults to\n            ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n            if present.\n        :param port: the port of the webserver. Defaults to ``5000`` or the\n            port defined in the ``SERVER_NAME`` config variable if present.\n        :param debug: if given, enable or disable debug mode. See\n            :attr:`debug`.\n        :param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n            files to set environment variables. Will also change the working\n            directory to the directory containing the first file found.\n        :param options: the options to be forwarded to the underlying Werkzeug\n            server. See :func:`werkzeug.serving.run_simple` for more\n            information.\n\n        .. versionchanged:: 1.0\n            If installed, python-dotenv will be used to load environment\n            variables from :file:`.env` and :file:`.flaskenv` files.\n\n            The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n\n            Threaded mode is enabled by default.\n\n        .. versionchanged:: 0.10\n            The default port is now picked from the ``SERVER_NAME``\n            variable.\n        \"\"\"\n        # Ignore this call so that it doesn't start another server if\n        # the 'flask run' command is used.\n        if os.environ.get(\"FLASK_RUN_FROM_CLI\") == \"true\":\n            if not is_running_from_reloader():\n                click.secho(\n                    \" * Ignoring a call to 'app.run()' that would block\"\n                    \" the current 'flask' CLI command.\\n\"\n                    \"   Only call 'app.run()' in an 'if __name__ ==\"\n                    ' \"__main__\"\\' guard.',\n                    fg=\"red\",\n                )\n\n            return\n\n        if get_load_dotenv(load_dotenv):\n            cli.load_dotenv()\n\n            # if set, env var overrides existing value\n            if \"FLASK_DEBUG\" in os.environ:\n                self.debug = get_debug_flag()\n\n        # debug passed to method overrides all other sources\n        if debug is not None:\n            self.debug = bool(debug)\n\n        server_name = self.config.get(\"SERVER_NAME\")\n        sn_host = sn_port = None\n\n        if server_name:\n            sn_host, _, sn_port = server_name.partition(\":\")\n\n        if not host:\n            if sn_host:\n                host = sn_host\n            else:\n                host = \"127.0.0.1\"\n\n        if port or port == 0:\n            port = int(port)\n        elif sn_port:\n            port = int(sn_port)\n        else:\n            port = 5000\n\n        options.setdefault(\"use_reloader\", self.debug)\n        options.setdefault(\"use_debugger\", self.debug)\n        options.setdefault(\"threaded\", True)\n\n        cli.show_server_banner(self.debug, self.name)\n\n        from werkzeug.serving import run_simple\n\n        try:\n            run_simple(t.cast(str, host), port, self, **options)\n        finally:\n            # reset the first request information if the development server\n            # reset normally.  This makes it possible to restart the server\n            # without reloader and that stuff from an interactive shell.\n            self._got_first_request = False",
      "docstring": "Runs the application on a local development server.\n\nDo not use ``run()`` in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see :doc:`/deploying/index` for WSGI server recommendations.\n\nIf the :attr:`debug` flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened.\n\nIf you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n``use_evalex=False`` as parameter.  This will keep the debugger's\ntraceback screen active, but disable code execution.\n\nIt is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the :command:`flask` command line script's ``run`` support.\n\n.. admonition:: Keep in Mind\n\n   Flask will suppress any server error with a generic error page\n   unless it is in debug mode.  As such to enable just the\n   interactive debugger without the code reloading, you have to\n   invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n   Setting ``use_debugger`` to ``True`` without being in debug mode\n   won't catch any exceptions because there won't be any to\n   catch.\n\n:param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n    have the server available externally as well. Defaults to\n    ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config variable\n    if present.\n:param port: the port of the webserver. Defaults to ``5000`` or the\n    port defined in the ``SERVER_NAME`` config variable if present.\n:param debug: if given, enable or disable debug mode. See\n    :attr:`debug`.\n:param load_dotenv: Load the nearest :file:`.env` and :file:`.flaskenv`\n    files to set environment variables. Will also change the working\n    directory to the directory containing the first file found.\n:param options: the options to be forwarded to the underlying Werkzeug\n    server. See :func:`werkzeug.serving.run_simple` for more\n    information.\n\n.. versionchanged:: 1.0\n    If installed, python-dotenv will be used to load environment\n    variables from :file:`.env` and :file:`.flaskenv` files.\n\n    The :envvar:`FLASK_DEBUG` environment variable will override :attr:`debug`.\n\n    Threaded mode is enabled by default.\n\n.. versionchanged:: 0.10\n    The default port is now picked from the ``SERVER_NAME``\n    variable.",
      "decorators": [],
      "arguments": [
        "self",
        "host",
        "port",
        "debug",
        "load_dotenv"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_load_dotenv",
          "body": "def get_load_dotenv(default: bool=True) -> bool:\n    \"\"\"Get whether the user has disabled loading default dotenv files by\n    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\n    the files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get('FLASK_SKIP_DOTENV')\n    if not val:\n        return default\n    return val.lower() in ('0', 'false', 'no')"
        },
        {
          "name": "self.config.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "options.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "options.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "options.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "cli.show_server_banner",
          "body": "def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if is_running_from_reloader():\n        return\n    if app_import_path is not None:\n        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n    if debug is not None:\n        click.echo(f' * Debug mode: {('on' if debug else 'off')}')"
        },
        {
          "name": "cli.load_dotenv",
          "body": "def load_dotenv(path: str | os.PathLike[str] | None=None, load_defaults: bool=True) -> bool:\n    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n    loading and combining these files, values are only set if the key is not\n    already set in ``os.environ``.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location.\n    :param load_defaults: Search for and load the default ``.flaskenv`` and\n        ``.env`` files.\n    :return: ``True`` if at least one env var was loaded.\n\n    .. versionchanged:: 3.1\n        Added the ``load_defaults`` parameter. A given path takes precedence\n        over default files.\n\n    .. versionchanged:: 2.0\n        The current directory is not changed to the location of the\n        loaded file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn't a file.\n\n    .. versionadded:: 1.0\n    \"\"\"\n    try:\n        import dotenv\n    except ImportError:\n        if path or os.path.isfile('.env') or os.path.isfile('.flaskenv'):\n            click.secho(' * Tip: There are .env files present. Install python-dotenv to use them.', fg='yellow', err=True)\n        return False\n    data: dict[str, str | None] = {}\n    if load_defaults:\n        for default_name in ('.flaskenv', '.env'):\n            if not (default_path := dotenv.find_dotenv(default_name, usecwd=True)):\n                continue\n            data |= dotenv.dotenv_values(default_path, encoding='utf-8')\n    if path is not None and os.path.isfile(path):\n        data |= dotenv.dotenv_values(path, encoding='utf-8')\n    for key, value in data.items():\n        if key in os.environ or value is None:\n            continue\n        os.environ[key] = value\n    return bool(data)"
        },
        {
          "name": "get_debug_flag",
          "body": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get('FLASK_DEBUG')\n    return bool(val and val.lower() not in {'0', 'false', 'no'})"
        }
      ]
    },
    {
      "name": "test_client",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 669,
      "end_line_number": 725,
      "source_code": "def test_client(self, use_cookies: bool = True, **kwargs: t.Any) -> FlaskClient:\n        \"\"\"Creates a test client for this application.  For information\n        about unit testing head over to :doc:`/testing`.\n\n        Note that if you are testing for assertions or exceptions in your\n        application code, you must set ``app.testing = True`` in order for the\n        exceptions to propagate to the test client.  Otherwise, the exception\n        will be handled by the application (not visible to the test client) and\n        the only indication of an AssertionError or other exception will be a\n        500 status code response to the test client.  See the :attr:`testing`\n        attribute.  For example::\n\n            app.testing = True\n            client = app.test_client()\n\n        The test client can be used in a ``with`` block to defer the closing down\n        of the context until the end of the ``with`` block.  This is useful if\n        you want to access the context locals for testing::\n\n            with app.test_client() as c:\n                rv = c.get('/?vodka=42')\n                assert request.args['vodka'] == '42'\n\n        Additionally, you may pass optional keyword arguments that will then\n        be passed to the application's :attr:`test_client_class` constructor.\n        For example::\n\n            from flask.testing import FlaskClient\n\n            class CustomClient(FlaskClient):\n                def __init__(self, *args, **kwargs):\n                    self._authentication = kwargs.pop(\"authentication\")\n                    super(CustomClient,self).__init__( *args, **kwargs)\n\n            app.test_client_class = CustomClient\n            client = app.test_client(authentication='Basic ....')\n\n        See :class:`~flask.testing.FlaskClient` for more information.\n\n        .. versionchanged:: 0.4\n           added support for ``with`` block usage for the client.\n\n        .. versionadded:: 0.7\n           The `use_cookies` parameter was added as well as the ability\n           to override the client to be used by setting the\n           :attr:`test_client_class` attribute.\n\n        .. versionchanged:: 0.11\n           Added `**kwargs` to support passing additional keyword arguments to\n           the constructor of :attr:`test_client_class`.\n        \"\"\"\n        cls = self.test_client_class\n        if cls is None:\n            from .testing import FlaskClient as cls\n        return cls(  # type: ignore\n            self, self.response_class, use_cookies=use_cookies, **kwargs\n        )",
      "docstring": "Creates a test client for this application.  For information\nabout unit testing head over to :doc:`/testing`.\n\nNote that if you are testing for assertions or exceptions in your\napplication code, you must set ``app.testing = True`` in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the :attr:`testing`\nattribute.  For example::\n\n    app.testing = True\n    client = app.test_client()\n\nThe test client can be used in a ``with`` block to defer the closing down\nof the context until the end of the ``with`` block.  This is useful if\nyou want to access the context locals for testing::\n\n    with app.test_client() as c:\n        rv = c.get('/?vodka=42')\n        assert request.args['vodka'] == '42'\n\nAdditionally, you may pass optional keyword arguments that will then\nbe passed to the application's :attr:`test_client_class` constructor.\nFor example::\n\n    from flask.testing import FlaskClient\n\n    class CustomClient(FlaskClient):\n        def __init__(self, *args, **kwargs):\n            self._authentication = kwargs.pop(\"authentication\")\n            super(CustomClient,self).__init__( *args, **kwargs)\n\n    app.test_client_class = CustomClient\n    client = app.test_client(authentication='Basic ....')\n\nSee :class:`~flask.testing.FlaskClient` for more information.\n\n.. versionchanged:: 0.4\n   added support for ``with`` block usage for the client.\n\n.. versionadded:: 0.7\n   The `use_cookies` parameter was added as well as the ability\n   to override the client to be used by setting the\n   :attr:`test_client_class` attribute.\n\n.. versionchanged:: 0.11\n   Added `**kwargs` to support passing additional keyword arguments to\n   the constructor of :attr:`test_client_class`.",
      "decorators": [],
      "arguments": [
        "self",
        "use_cookies"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "test_cli_runner",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 727,
      "end_line_number": 742,
      "source_code": "def test_cli_runner(self, **kwargs: t.Any) -> FlaskCliRunner:\n        \"\"\"Create a CLI runner for testing CLI commands.\n        See :ref:`testing-cli`.\n\n        Returns an instance of :attr:`test_cli_runner_class`, by default\n        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n        passed as the first argument.\n\n        .. versionadded:: 1.0\n        \"\"\"\n        cls = self.test_cli_runner_class\n\n        if cls is None:\n            from .testing import FlaskCliRunner as cls\n\n        return cls(self, **kwargs)",
      "docstring": "Create a CLI runner for testing CLI commands.\nSee :ref:`testing-cli`.\n\nReturns an instance of :attr:`test_cli_runner_class`, by default\n:class:`~flask.testing.FlaskCliRunner`. The Flask app object is\npassed as the first argument.\n\n.. versionadded:: 1.0",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "handle_http_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 744,
      "end_line_number": 777,
      "source_code": "def handle_http_exception(\n        self, e: HTTPException\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPException`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        # Proxy exceptions don't have error codes.  We want to always return\n        # those unchanged as errors\n        if e.code is None:\n            return e\n\n        # RoutingExceptions are used internally to trigger routing\n        # actions, such as slash redirects raising RequestRedirect. They\n        # are not raised or handled in user code.\n        if isinstance(e, RoutingException):\n            return e\n\n        handler = self._find_error_handler(e, request.blueprints)\n        if handler is None:\n            return e\n        return self.ensure_sync(handler)(e)",
      "docstring": "Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response.\n\n.. versionchanged:: 1.0.3\n    ``RoutingException``, used internally for actions such as\n     slash redirects during routing, is not passed to error\n     handlers.\n\n.. versionchanged:: 1.0\n    Exceptions are looked up by code *and* by MRO, so\n    ``HTTPException`` subclasses can be handled with a catch-all\n    handler for the base ``HTTPException``.\n\n.. versionadded:: 0.3",
      "decorators": [],
      "arguments": [
        "self",
        "e"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._find_error_handler",
          "body": "def _find_error_handler(self, e: Exception, blueprints: list[str]) -> ft.ErrorHandlerCallable | None:\n    \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n    exc_class, code = self._get_exc_class_and_code(type(e))\n    names = (*blueprints, None)\n    for c in (code, None) if code is not None else (None,):\n        for name in names:\n            handler_map = self.error_handler_spec[name][c]\n            if not handler_map:\n                continue\n            for cls in exc_class.__mro__:\n                handler = handler_map.get(cls)\n                if handler is not None:\n                    return handler\n    return None"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "handle_user_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 779,
      "end_line_number": 809,
      "source_code": "def handle_user_exception(\n        self, e: Exception\n    ) -> HTTPException | ft.ResponseReturnValue:\n        \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        if isinstance(e, BadRequestKeyError) and (\n            self.debug or self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n        ):\n            e.show_exception = True\n\n        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n            return self.handle_http_exception(e)\n\n        handler = self._find_error_handler(e, request.blueprints)\n\n        if handler is None:\n            raise\n\n        return self.ensure_sync(handler)(e)",
      "docstring": "This method is called whenever an exception occurs that\nshould be handled. A special case is :class:`~werkzeug\n.exceptions.HTTPException` which is forwarded to the\n:meth:`handle_http_exception` method. This function will either\nreturn a response value or reraise the exception with the same\ntraceback.\n\n.. versionchanged:: 1.0\n    Key errors raised from request data like ``form`` show the\n    bad key in debug mode rather than a generic bad request\n    message.\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [
        "self",
        "e"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._find_error_handler",
          "body": "def _find_error_handler(self, e: Exception, blueprints: list[str]) -> ft.ErrorHandlerCallable | None:\n    \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n    exc_class, code = self._get_exc_class_and_code(type(e))\n    names = (*blueprints, None)\n    for c in (code, None) if code is not None else (None,):\n        for name in names:\n            handler_map = self.error_handler_spec[name][c]\n            if not handler_map:\n                continue\n            for cls in exc_class.__mro__:\n                handler = handler_map.get(cls)\n                if handler is not None:\n                    return handler\n    return None"
        },
        {
          "name": "self.handle_http_exception",
          "body": "def handle_http_exception(self, e: HTTPException) -> HTTPException | ft.ResponseReturnValue:\n    \"\"\"Handles an HTTP exception.  By default this will invoke the\n        registered error handlers and fall back to returning the\n        exception as response.\n\n        .. versionchanged:: 1.0.3\n            ``RoutingException``, used internally for actions such as\n             slash redirects during routing, is not passed to error\n             handlers.\n\n        .. versionchanged:: 1.0\n            Exceptions are looked up by code *and* by MRO, so\n            ``HTTPException`` subclasses can be handled with a catch-all\n            handler for the base ``HTTPException``.\n\n        .. versionadded:: 0.3\n        \"\"\"\n    if e.code is None:\n        return e\n    if isinstance(e, RoutingException):\n        return e\n    handler = self._find_error_handler(e, request.blueprints)\n    if handler is None:\n        return e\n    return self.ensure_sync(handler)(e)"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        },
        {
          "name": "self.trap_http_exception",
          "body": "def trap_http_exception(self, e: Exception) -> bool:\n    \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\n    if self.config['TRAP_HTTP_EXCEPTIONS']:\n        return True\n    trap_bad_request = self.config['TRAP_BAD_REQUEST_ERRORS']\n    if trap_bad_request is None and self.debug and isinstance(e, BadRequestKeyError):\n        return True\n    if trap_bad_request:\n        return isinstance(e, BadRequest)\n    return False"
        }
      ]
    },
    {
      "name": "handle_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 811,
      "end_line_number": 862,
      "source_code": "def handle_exception(self, e: Exception) -> Response:\n        \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        exc_info = sys.exc_info()\n        got_request_exception.send(self, _async_wrapper=self.ensure_sync, exception=e)\n        propagate = self.config[\"PROPAGATE_EXCEPTIONS\"]\n\n        if propagate is None:\n            propagate = self.testing or self.debug\n\n        if propagate:\n            # Re-raise if called with an active exception, otherwise\n            # raise the passed in exception.\n            if exc_info[1] is e:\n                raise\n\n            raise e\n\n        self.log_exception(exc_info)\n        server_error: InternalServerError | ft.ResponseReturnValue\n        server_error = InternalServerError(original_exception=e)\n        handler = self._find_error_handler(server_error, request.blueprints)\n\n        if handler is not None:\n            server_error = self.ensure_sync(handler)(server_error)\n\n        return self.finalize_request(server_error, from_error_handler=True)",
      "docstring": "Handle an exception that did not have an error handler\nassociated with it, or that was raised from an error handler.\nThis always causes a 500 ``InternalServerError``.\n\nAlways sends the :data:`got_request_exception` signal.\n\nIf :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\nmode, the error will be re-raised so that the debugger can\ndisplay it. Otherwise, the original exception is logged, and\nan :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\nIf an error handler is registered for ``InternalServerError`` or\n``500``, it will be used. For consistency, the handler will\nalways receive the ``InternalServerError``. The original\nunhandled exception is available as ``e.original_exception``.\n\n.. versionchanged:: 1.1.0\n    Always passes the ``InternalServerError`` instance to the\n    handler, setting ``original_exception`` to the unhandled\n    error.\n\n.. versionchanged:: 1.1.0\n    ``after_request`` functions and other finalization is done\n    even for the default 500 response when there is no handler.\n\n.. versionadded:: 0.3",
      "decorators": [],
      "arguments": [
        "self",
        "e"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.log_exception",
          "body": "def log_exception(self, exc_info: tuple[type, BaseException, TracebackType] | tuple[None, None, None]) -> None:\n    \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\n    self.logger.error(f'Exception on {request.path} [{request.method}]', exc_info=exc_info)"
        },
        {
          "name": "self._find_error_handler",
          "body": "def _find_error_handler(self, e: Exception, blueprints: list[str]) -> ft.ErrorHandlerCallable | None:\n    \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n    exc_class, code = self._get_exc_class_and_code(type(e))\n    names = (*blueprints, None)\n    for c in (code, None) if code is not None else (None,):\n        for name in names:\n            handler_map = self.error_handler_spec[name][c]\n            if not handler_map:\n                continue\n            for cls in exc_class.__mro__:\n                handler = handler_map.get(cls)\n                if handler is not None:\n                    return handler\n    return None"
        },
        {
          "name": "self.finalize_request",
          "body": "def finalize_request(self, rv: ft.ResponseReturnValue | HTTPException, from_error_handler: bool=False) -> Response:\n    \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\n    response = self.make_response(rv)\n    try:\n        response = self.process_response(response)\n        request_finished.send(self, _async_wrapper=self.ensure_sync, response=response)\n    except Exception:\n        if not from_error_handler:\n            raise\n        self.logger.exception('Request finalizing failed with an error while handling an error')\n    return response"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "log_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 864,
      "end_line_number": 877,
      "source_code": "def log_exception(\n        self,\n        exc_info: (tuple[type, BaseException, TracebackType] | tuple[None, None, None]),\n    ) -> None:\n        \"\"\"Logs an exception.  This is called by :meth:`handle_exception`\n        if debugging is disabled and right before the handler is called.\n        The default implementation logs the exception as error on the\n        :attr:`logger`.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        self.logger.error(\n            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n        )",
      "docstring": "Logs an exception.  This is called by :meth:`handle_exception`\nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n:attr:`logger`.\n\n.. versionadded:: 0.8",
      "decorators": [],
      "arguments": [
        "self",
        "exc_info"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "dispatch_request",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 879,
      "end_line_number": 902,
      "source_code": "def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\n        req = request_ctx.request\n        if req.routing_exception is not None:\n            self.raise_routing_exception(req)\n        rule: Rule = req.url_rule  # type: ignore[assignment]\n        # if we provide automatic options for this URL and the\n        # request came with the OPTIONS method, reply automatically\n        if (\n            getattr(rule, \"provide_automatic_options\", False)\n            and req.method == \"OPTIONS\"\n        ):\n            return self.make_default_options_response()\n        # otherwise dispatch to the handler for that endpoint\n        view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]\n        return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)",
      "docstring": "Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call :func:`make_response`.\n\n.. versionchanged:: 0.7\n   This no longer does the exception handling, this code was\n   moved to the new :meth:`full_dispatch_request`.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.raise_routing_exception",
          "body": "def raise_routing_exception(self, request: Request) -> t.NoReturn:\n    \"\"\"Intercept routing exceptions and possibly do something else.\n\n        In debug mode, intercept a routing redirect and replace it with\n        an error if the body will be discarded.\n\n        With modern Werkzeug this shouldn't occur, since it now uses a\n        308 status which tells the browser to resend the method and\n        body.\n\n        .. versionchanged:: 2.1\n            Don't intercept 307 and 308 redirects.\n\n        :meta private:\n        :internal:\n        \"\"\"\n    if not self.debug or not isinstance(request.routing_exception, RequestRedirect) or request.routing_exception.code in {307, 308} or (request.method in {'GET', 'HEAD', 'OPTIONS'}):\n        raise request.routing_exception\n    from .debughelpers import FormDataRoutingRedirect\n    raise FormDataRoutingRedirect(request)"
        },
        {
          "name": "self.make_default_options_response",
          "body": "def make_default_options_response(self) -> Response:\n    \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    adapter = request_ctx.url_adapter\n    methods = adapter.allowed_methods()\n    rv = self.response_class()\n    rv.allow.update(methods)\n    return rv"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "full_dispatch_request",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 904,
      "end_line_number": 920,
      "source_code": "def full_dispatch_request(self) -> Response:\n        \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        self._got_first_request = True\n\n        try:\n            request_started.send(self, _async_wrapper=self.ensure_sync)\n            rv = self.preprocess_request()\n            if rv is None:\n                rv = self.dispatch_request()\n        except Exception as e:\n            rv = self.handle_user_exception(e)\n        return self.finalize_request(rv)",
      "docstring": "Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling.\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.finalize_request",
          "body": "def finalize_request(self, rv: ft.ResponseReturnValue | HTTPException, from_error_handler: bool=False) -> Response:\n    \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\n    response = self.make_response(rv)\n    try:\n        response = self.process_response(response)\n        request_finished.send(self, _async_wrapper=self.ensure_sync, response=response)\n    except Exception:\n        if not from_error_handler:\n            raise\n        self.logger.exception('Request finalizing failed with an error while handling an error')\n    return response"
        },
        {
          "name": "self.preprocess_request",
          "body": "def preprocess_request(self) -> ft.ResponseReturnValue | None:\n    \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\n    names = (None, *reversed(request.blueprints))\n    for name in names:\n        if name in self.url_value_preprocessors:\n            for url_func in self.url_value_preprocessors[name]:\n                url_func(request.endpoint, request.view_args)\n    for name in names:\n        if name in self.before_request_funcs:\n            for before_func in self.before_request_funcs[name]:\n                rv = self.ensure_sync(before_func)()\n                if rv is not None:\n                    return rv\n    return None"
        },
        {
          "name": "self.dispatch_request",
          "body": "def dispatch_request(self) -> ft.ResponseReturnValue:\n    \"\"\"Does the request dispatching.  Matches the URL and returns the\n        return value of the view or error handler.  This does not have to\n        be a response object.  In order to convert the return value to a\n        proper response object, call :func:`make_response`.\n\n        .. versionchanged:: 0.7\n           This no longer does the exception handling, this code was\n           moved to the new :meth:`full_dispatch_request`.\n        \"\"\"\n    req = request_ctx.request\n    if req.routing_exception is not None:\n        self.raise_routing_exception(req)\n    rule: Rule = req.url_rule\n    if getattr(rule, 'provide_automatic_options', False) and req.method == 'OPTIONS':\n        return self.make_default_options_response()\n    view_args: dict[str, t.Any] = req.view_args\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)"
        },
        {
          "name": "self.handle_user_exception",
          "body": "def handle_user_exception(self, e: Exception) -> HTTPException | ft.ResponseReturnValue:\n    \"\"\"This method is called whenever an exception occurs that\n        should be handled. A special case is :class:`~werkzeug\n        .exceptions.HTTPException` which is forwarded to the\n        :meth:`handle_http_exception` method. This function will either\n        return a response value or reraise the exception with the same\n        traceback.\n\n        .. versionchanged:: 1.0\n            Key errors raised from request data like ``form`` show the\n            bad key in debug mode rather than a generic bad request\n            message.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    if isinstance(e, BadRequestKeyError) and (self.debug or self.config['TRAP_BAD_REQUEST_ERRORS']):\n        e.show_exception = True\n    if isinstance(e, HTTPException) and (not self.trap_http_exception(e)):\n        return self.handle_http_exception(e)\n    handler = self._find_error_handler(e, request.blueprints)\n    if handler is None:\n        raise\n    return self.ensure_sync(handler)(e)"
        }
      ]
    },
    {
      "name": "finalize_request",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 922,
      "end_line_number": 951,
      "source_code": "def finalize_request(\n        self,\n        rv: ft.ResponseReturnValue | HTTPException,\n        from_error_handler: bool = False,\n    ) -> Response:\n        \"\"\"Given the return value from a view function this finalizes\n        the request by converting it into a response and invoking the\n        postprocessing functions.  This is invoked for both normal\n        request dispatching as well as error handlers.\n\n        Because this means that it might be called as a result of a\n        failure a special safe mode is available which can be enabled\n        with the `from_error_handler` flag.  If enabled, failures in\n        response processing will be logged and otherwise ignored.\n\n        :internal:\n        \"\"\"\n        response = self.make_response(rv)\n        try:\n            response = self.process_response(response)\n            request_finished.send(\n                self, _async_wrapper=self.ensure_sync, response=response\n            )\n        except Exception:\n            if not from_error_handler:\n                raise\n            self.logger.exception(\n                \"Request finalizing failed with an error while handling an error\"\n            )\n        return response",
      "docstring": "Given the return value from a view function this finalizes\nthe request by converting it into a response and invoking the\npostprocessing functions.  This is invoked for both normal\nrequest dispatching as well as error handlers.\n\nBecause this means that it might be called as a result of a\nfailure a special safe mode is available which can be enabled\nwith the `from_error_handler` flag.  If enabled, failures in\nresponse processing will be logged and otherwise ignored.\n\n:internal:",
      "decorators": [],
      "arguments": [
        "self",
        "rv",
        "from_error_handler"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.make_response",
          "body": "def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n    \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes``\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``list``\n                A list that will be jsonify'd before being returned.\n\n            ``generator`` or ``iterator``\n                A generator that returns ``str`` or ``bytes`` to be\n                streamed as the response.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 2.2\n            A generator will be converted to a streaming response.\n            A list will be converted to a JSON response.\n\n        .. versionchanged:: 1.1\n            A dict will be converted to a JSON response.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\n    status: int | None = None\n    headers: HeadersValue | None = None\n    if isinstance(rv, tuple):\n        len_rv = len(rv)\n        if len_rv == 3:\n            rv, status, headers = rv\n        elif len_rv == 2:\n            if isinstance(rv[1], (Headers, dict, tuple, list)):\n                rv, headers = rv\n            else:\n                rv, status = rv\n        else:\n            raise TypeError('The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers).')\n    if rv is None:\n        raise TypeError(f'The view function for {request.endpoint!r} did not return a valid response. The function either returned None or ended without a return statement.')\n    if not isinstance(rv, self.response_class):\n        if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, cabc.Iterator):\n            rv = self.response_class(rv, status=status, headers=headers)\n            status = headers = None\n        elif isinstance(rv, (dict, list)):\n            rv = self.json.response(rv)\n        elif isinstance(rv, BaseResponse) or callable(rv):\n            try:\n                rv = self.response_class.force_type(rv, request.environ)\n            except TypeError as e:\n                raise TypeError(f'{e}\\nThe view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a {type(rv).__name__}.').with_traceback(sys.exc_info()[2]) from None\n        else:\n            raise TypeError(f'The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a {type(rv).__name__}.')\n    rv = t.cast(Response, rv)\n    if status is not None:\n        if isinstance(status, (str, bytes, bytearray)):\n            rv.status = status\n        else:\n            rv.status_code = status\n    if headers:\n        rv.headers.update(headers)\n    return rv"
        },
        {
          "name": "self.process_response",
          "body": "def process_response(self, response: Response) -> Response:\n    \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\n    ctx = request_ctx._get_current_object()\n    for func in ctx._after_request_functions:\n        response = self.ensure_sync(func)(response)\n    for name in chain(request.blueprints, (None,)):\n        if name in self.after_request_funcs:\n            for func in reversed(self.after_request_funcs[name]):\n                response = self.ensure_sync(func)(response)\n    if not self.session_interface.is_null_session(ctx.session):\n        self.session_interface.save_session(self, ctx.session, response)\n    return response"
        }
      ]
    },
    {
      "name": "make_default_options_response",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 953,
      "end_line_number": 964,
      "source_code": "def make_default_options_response(self) -> Response:\n        \"\"\"This method is called to create the default ``OPTIONS`` response.\n        This can be changed through subclassing to change the default\n        behavior of ``OPTIONS`` responses.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        adapter = request_ctx.url_adapter\n        methods = adapter.allowed_methods()  # type: ignore[union-attr]\n        rv = self.response_class()\n        rv.allow.update(methods)\n        return rv",
      "docstring": "This method is called to create the default ``OPTIONS`` response.\nThis can be changed through subclassing to change the default\nbehavior of ``OPTIONS`` responses.\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "ensure_sync",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 966,
      "end_line_number": 978,
      "source_code": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n        \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if iscoroutinefunction(func):\n            return self.async_to_sync(func)\n\n        return func",
      "docstring": "Ensure that the function is synchronous for WSGI workers.\nPlain ``def`` functions are returned as-is. ``async def``\nfunctions are wrapped to run and wait for the response.\n\nOverride this method to change how the app runs async views.\n\n.. versionadded:: 2.0",
      "decorators": [],
      "arguments": [
        "self",
        "func"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.async_to_sync",
          "body": "def async_to_sync(self, func: t.Callable[..., t.Coroutine[t.Any, t.Any, t.Any]]) -> t.Callable[..., t.Any]:\n    \"\"\"Return a sync function that will run the coroutine function.\n\n        .. code-block:: python\n\n            result = app.async_to_sync(func)(*args, **kwargs)\n\n        Override this method to change how the app converts async code\n        to be synchronously callable.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    try:\n        from asgiref.sync import async_to_sync as asgiref_async_to_sync\n    except ImportError:\n        raise RuntimeError(\"Install Flask with the 'async' extra in order to use async views.\") from None\n    return asgiref_async_to_sync(func)"
        }
      ]
    },
    {
      "name": "async_to_sync",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 980,
      "end_line_number": 1001,
      "source_code": "def async_to_sync(\n        self, func: t.Callable[..., t.Coroutine[t.Any, t.Any, t.Any]]\n    ) -> t.Callable[..., t.Any]:\n        \"\"\"Return a sync function that will run the coroutine function.\n\n        .. code-block:: python\n\n            result = app.async_to_sync(func)(*args, **kwargs)\n\n        Override this method to change how the app converts async code\n        to be synchronously callable.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        try:\n            from asgiref.sync import async_to_sync as asgiref_async_to_sync\n        except ImportError:\n            raise RuntimeError(\n                \"Install Flask with the 'async' extra in order to use async views.\"\n            ) from None\n\n        return asgiref_async_to_sync(func)",
      "docstring": "Return a sync function that will run the coroutine function.\n\n.. code-block:: python\n\n    result = app.async_to_sync(func)(*args, **kwargs)\n\nOverride this method to change how the app converts async code\nto be synchronously callable.\n\n.. versionadded:: 2.0",
      "decorators": [],
      "arguments": [
        "self",
        "func"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "url_for",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1003,
      "end_line_number": 1127,
      "source_code": "def url_for(\n        self,\n        /,\n        endpoint: str,\n        *,\n        _anchor: str | None = None,\n        _method: str | None = None,\n        _scheme: str | None = None,\n        _external: bool | None = None,\n        **values: t.Any,\n    ) -> str:\n        \"\"\"Generate a URL to the given endpoint with the given values.\n\n        This is called by :func:`flask.url_for`, and can be called\n        directly as well.\n\n        An *endpoint* is the name of a URL rule, usually added with\n        :meth:`@app.route() <route>`, and usually the same name as the\n        view function. A route defined in a :class:`~flask.Blueprint`\n        will prepend the blueprint's name separated by a ``.`` to the\n        endpoint.\n\n        In some cases, such as email messages, you want URLs to include\n        the scheme and domain, like ``https://example.com/hello``. When\n        not in an active request, URLs will be external by default, but\n        this requires setting :data:`SERVER_NAME` so Flask knows what\n        domain to use. :data:`APPLICATION_ROOT` and\n        :data:`PREFERRED_URL_SCHEME` should also be configured as\n        needed. This config is only used when not in an active request.\n\n        Functions can be decorated with :meth:`url_defaults` to modify\n        keyword arguments before the URL is built.\n\n        If building fails for some reason, such as an unknown endpoint\n        or incorrect values, the app's :meth:`handle_url_build_error`\n        method is called. If that returns a string, that is returned,\n        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n        :param endpoint: The endpoint name associated with the URL to\n            generate. If this starts with a ``.``, the current blueprint\n            name (if any) will be used.\n        :param _anchor: If given, append this as ``#anchor`` to the URL.\n        :param _method: If given, generate the URL associated with this\n            method for the endpoint.\n        :param _scheme: If given, the URL will have this scheme if it\n            is external.\n        :param _external: If given, prefer the URL to be internal\n            (False) or require it to be external (True). External URLs\n            include the scheme and domain. When not in an active\n            request, URLs are external by default.\n        :param values: Values to use for the variable parts of the URL\n            rule. Unknown keys are appended as query string arguments,\n            like ``?a=b&c=d``.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.url_for``, which calls this method.\n        \"\"\"\n        req_ctx = _cv_request.get(None)\n\n        if req_ctx is not None:\n            url_adapter = req_ctx.url_adapter\n            blueprint_name = req_ctx.request.blueprint\n\n            # If the endpoint starts with \".\" and the request matches a\n            # blueprint, the endpoint is relative to the blueprint.\n            if endpoint[:1] == \".\":\n                if blueprint_name is not None:\n                    endpoint = f\"{blueprint_name}{endpoint}\"\n                else:\n                    endpoint = endpoint[1:]\n\n            # When in a request, generate a URL without scheme and\n            # domain by default, unless a scheme is given.\n            if _external is None:\n                _external = _scheme is not None\n        else:\n            app_ctx = _cv_app.get(None)\n\n            # If called by helpers.url_for, an app context is active,\n            # use its url_adapter. Otherwise, app.url_for was called\n            # directly, build an adapter.\n            if app_ctx is not None:\n                url_adapter = app_ctx.url_adapter\n            else:\n                url_adapter = self.create_url_adapter(None)\n\n            if url_adapter is None:\n                raise RuntimeError(\n                    \"Unable to build URLs outside an active request\"\n                    \" without 'SERVER_NAME' configured. Also configure\"\n                    \" 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as\"\n                    \" needed.\"\n                )\n\n            # When outside a request, generate a URL with scheme and\n            # domain by default.\n            if _external is None:\n                _external = True\n\n        # It is an error to set _scheme when _external=False, in order\n        # to avoid accidental insecure URLs.\n        if _scheme is not None and not _external:\n            raise ValueError(\"When specifying '_scheme', '_external' must be True.\")\n\n        self.inject_url_defaults(endpoint, values)\n\n        try:\n            rv = url_adapter.build(  # type: ignore[union-attr]\n                endpoint,\n                values,\n                method=_method,\n                url_scheme=_scheme,\n                force_external=_external,\n            )\n        except BuildError as error:\n            values.update(\n                _anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external\n            )\n            return self.handle_url_build_error(error, endpoint, values)\n\n        if _anchor is not None:\n            _anchor = _url_quote(_anchor, safe=\"%!#$&'()*+,/:;=?@\")\n            rv = f\"{rv}#{_anchor}\"\n\n        return rv",
      "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis is called by :func:`flask.url_for`, and can be called\ndirectly as well.\n\nAn *endpoint* is the name of a URL rule, usually added with\n:meth:`@app.route() <route>`, and usually the same name as the\nview function. A route defined in a :class:`~flask.Blueprint`\nwill prepend the blueprint's name separated by a ``.`` to the\nendpoint.\n\nIn some cases, such as email messages, you want URLs to include\nthe scheme and domain, like ``https://example.com/hello``. When\nnot in an active request, URLs will be external by default, but\nthis requires setting :data:`SERVER_NAME` so Flask knows what\ndomain to use. :data:`APPLICATION_ROOT` and\n:data:`PREFERRED_URL_SCHEME` should also be configured as\nneeded. This config is only used when not in an active request.\n\nFunctions can be decorated with :meth:`url_defaults` to modify\nkeyword arguments before the URL is built.\n\nIf building fails for some reason, such as an unknown endpoint\nor incorrect values, the app's :meth:`handle_url_build_error`\nmethod is called. If that returns a string, that is returned,\notherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it\n    is external.\n:param _external: If given, prefer the URL to be internal\n    (False) or require it to be external (True). External URLs\n    include the scheme and domain. When not in an active\n    request, URLs are external by default.\n:param values: Values to use for the variable parts of the URL\n    rule. Unknown keys are appended as query string arguments,\n    like ``?a=b&c=d``.\n\n.. versionadded:: 2.2\n    Moved from ``flask.url_for``, which calls this method.",
      "decorators": [],
      "arguments": [
        "endpoint"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.inject_url_defaults",
          "body": "def inject_url_defaults(self, endpoint: str, values: dict[str, t.Any]) -> None:\n    \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    names: t.Iterable[str | None] = (None,)\n    if '.' in endpoint:\n        names = chain(names, reversed(_split_blueprint_path(endpoint.rpartition('.')[0])))\n    for name in names:\n        if name in self.url_default_functions:\n            for func in self.url_default_functions[name]:\n                func(endpoint, values)"
        },
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.create_url_adapter",
          "body": "def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n    \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n\n        .. versionchanged:: 0.9\n           This can be called outside a request when the URL adapter is created\n           for an application context.\n\n        .. versionadded:: 0.6\n        \"\"\"\n    if request is not None:\n        if (trusted_hosts := self.config['TRUSTED_HOSTS']) is not None:\n            request.trusted_hosts = trusted_hosts\n        request.host = get_host(request.environ, request.trusted_hosts)\n        subdomain = None\n        server_name = self.config['SERVER_NAME']\n        if self.url_map.host_matching:\n            server_name = None\n        elif not self.subdomain_matching:\n            subdomain = self.url_map.default_subdomain or ''\n        return self.url_map.bind_to_environ(request.environ, server_name=server_name, subdomain=subdomain)\n    if self.config['SERVER_NAME'] is not None:\n        return self.url_map.bind(self.config['SERVER_NAME'], script_name=self.config['APPLICATION_ROOT'], url_scheme=self.config['PREFERRED_URL_SCHEME'])\n    return None"
        },
        {
          "name": "self.handle_url_build_error",
          "body": "def handle_url_build_error(self, error: BuildError, endpoint: str, values: dict[str, t.Any]) -> str:\n    \"\"\"Called by :meth:`.url_for` if a\n        :exc:`~werkzeug.routing.BuildError` was raised. If this returns\n        a value, it will be returned by ``url_for``, otherwise the error\n        will be re-raised.\n\n        Each function in :attr:`url_build_error_handlers` is called with\n        ``error``, ``endpoint`` and ``values``. If a function returns\n        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,\n        its return value is returned by ``url_for``.\n\n        :param error: The active ``BuildError`` being handled.\n        :param endpoint: The endpoint being built.\n        :param values: The keyword arguments passed to ``url_for``.\n        \"\"\"\n    for handler in self.url_build_error_handlers:\n        try:\n            rv = handler(error, endpoint, values)\n        except BuildError as e:\n            error = e\n        else:\n            if rv is not None:\n                return rv\n    if error is sys.exc_info()[1]:\n        raise\n    raise error"
        }
      ]
    },
    {
      "name": "make_response",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1129,
      "end_line_number": 1269,
      "source_code": "def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n        \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes``\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``list``\n                A list that will be jsonify'd before being returned.\n\n            ``generator`` or ``iterator``\n                A generator that returns ``str`` or ``bytes`` to be\n                streamed as the response.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 2.2\n            A generator will be converted to a streaming response.\n            A list will be converted to a JSON response.\n\n        .. versionchanged:: 1.1\n            A dict will be converted to a JSON response.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\n\n        status: int | None = None\n        headers: HeadersValue | None = None\n\n        # unpack tuple returns\n        if isinstance(rv, tuple):\n            len_rv = len(rv)\n\n            # a 3-tuple is unpacked directly\n            if len_rv == 3:\n                rv, status, headers = rv  # type: ignore[misc]\n            # decide if a 2-tuple has status or headers\n            elif len_rv == 2:\n                if isinstance(rv[1], (Headers, dict, tuple, list)):\n                    rv, headers = rv  # pyright: ignore\n                else:\n                    rv, status = rv  # type: ignore[assignment,misc]\n            # other sized tuples are not allowed\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid response tuple.\"\n                    \" The tuple must have the form (body, status, headers),\"\n                    \" (body, status), or (body, headers).\"\n                )\n\n        # the body must not be None\n        if rv is None:\n            raise TypeError(\n                f\"The view function for {request.endpoint!r} did not\"\n                \" return a valid response. The function either returned\"\n                \" None or ended without a return statement.\"\n            )\n\n        # make sure the body is an instance of the response class\n        if not isinstance(rv, self.response_class):\n            if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, cabc.Iterator):\n                # let the response class set the status and headers instead of\n                # waiting to do it manually, so that the class can handle any\n                # special logic\n                rv = self.response_class(\n                    rv,\n                    status=status,\n                    headers=headers,  # type: ignore[arg-type]\n                )\n                status = headers = None\n            elif isinstance(rv, (dict, list)):\n                rv = self.json.response(rv)\n            elif isinstance(rv, BaseResponse) or callable(rv):\n                # evaluate a WSGI callable, or coerce a different response\n                # class to the correct type\n                try:\n                    rv = self.response_class.force_type(\n                        rv,  # type: ignore[arg-type]\n                        request.environ,\n                    )\n                except TypeError as e:\n                    raise TypeError(\n                        f\"{e}\\nThe view function did not return a valid\"\n                        \" response. The return type must be a string,\"\n                        \" dict, list, tuple with headers or status,\"\n                        \" Response instance, or WSGI callable, but it\"\n                        f\" was a {type(rv).__name__}.\"\n                    ).with_traceback(sys.exc_info()[2]) from None\n            else:\n                raise TypeError(\n                    \"The view function did not return a valid\"\n                    \" response. The return type must be a string,\"\n                    \" dict, list, tuple with headers or status,\"\n                    \" Response instance, or WSGI callable, but it was a\"\n                    f\" {type(rv).__name__}.\"\n                )\n\n        rv = t.cast(Response, rv)\n        # prefer the status if it was provided\n        if status is not None:\n            if isinstance(status, (str, bytes, bytearray)):\n                rv.status = status\n            else:\n                rv.status_code = status\n\n        # extend existing headers with provided headers\n        if headers:\n            rv.headers.update(headers)\n\n        return rv",
      "docstring": "Convert the return value from a view function to an instance of\n:attr:`response_class`.\n\n:param rv: the return value from the view function. The view function\n    must return a response. Returning ``None``, or the view ending\n    without returning, is not allowed. The following types are allowed\n    for ``view_rv``:\n\n    ``str``\n        A response object is created with the string encoded to UTF-8\n        as the body.\n\n    ``bytes``\n        A response object is created with the bytes as the body.\n\n    ``dict``\n        A dictionary that will be jsonify'd before being returned.\n\n    ``list``\n        A list that will be jsonify'd before being returned.\n\n    ``generator`` or ``iterator``\n        A generator that returns ``str`` or ``bytes`` to be\n        streamed as the response.\n\n    ``tuple``\n        Either ``(body, status, headers)``, ``(body, status)``, or\n        ``(body, headers)``, where ``body`` is any of the other types\n        allowed here, ``status`` is a string or an integer, and\n        ``headers`` is a dictionary or a list of ``(key, value)``\n        tuples. If ``body`` is a :attr:`response_class` instance,\n        ``status`` overwrites the exiting value and ``headers`` are\n        extended.\n\n    :attr:`response_class`\n        The object is returned unchanged.\n\n    other :class:`~werkzeug.wrappers.Response` class\n        The object is coerced to :attr:`response_class`.\n\n    :func:`callable`\n        The function is called as a WSGI application. The result is\n        used to create a response object.\n\n.. versionchanged:: 2.2\n    A generator will be converted to a streaming response.\n    A list will be converted to a JSON response.\n\n.. versionchanged:: 1.1\n    A dict will be converted to a JSON response.\n\n.. versionchanged:: 0.9\n   Previously a tuple was interpreted as the arguments for the\n   response object.",
      "decorators": [],
      "arguments": [
        "self",
        "rv"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.json.response",
          "body": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n    obj = self._prepare_response_obj(args, kwargs)\n    return self._app.response_class(self.dumps(obj), mimetype='application/json')"
        }
      ]
    },
    {
      "name": "preprocess_request",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1271,
      "end_line_number": 1296,
      "source_code": "def preprocess_request(self) -> ft.ResponseReturnValue | None:\n        \"\"\"Called before the request is dispatched. Calls\n        :attr:`url_value_preprocessors` registered with the app and the\n        current blueprint (if any). Then calls :attr:`before_request_funcs`\n        registered with the app and the blueprint.\n\n        If any :meth:`before_request` handler returns a non-None value, the\n        value is handled as if it was the return value from the view, and\n        further request handling is stopped.\n        \"\"\"\n        names = (None, *reversed(request.blueprints))\n\n        for name in names:\n            if name in self.url_value_preprocessors:\n                for url_func in self.url_value_preprocessors[name]:\n                    url_func(request.endpoint, request.view_args)\n\n        for name in names:\n            if name in self.before_request_funcs:\n                for before_func in self.before_request_funcs[name]:\n                    rv = self.ensure_sync(before_func)()\n\n                    if rv is not None:\n                        return rv  # type: ignore[no-any-return]\n\n        return None",
      "docstring": "Called before the request is dispatched. Calls\n:attr:`url_value_preprocessors` registered with the app and the\ncurrent blueprint (if any). Then calls :attr:`before_request_funcs`\nregistered with the app and the blueprint.\n\nIf any :meth:`before_request` handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "process_response",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1298,
      "end_line_number": 1324,
      "source_code": "def process_response(self, response: Response) -> Response:\n        \"\"\"Can be overridden in order to modify the response object\n        before it's sent to the WSGI server.  By default this will\n        call all the :meth:`after_request` decorated functions.\n\n        .. versionchanged:: 0.5\n           As of Flask 0.5 the functions registered for after request\n           execution are called in reverse order of registration.\n\n        :param response: a :attr:`response_class` object.\n        :return: a new response object or the same, has to be an\n                 instance of :attr:`response_class`.\n        \"\"\"\n        ctx = request_ctx._get_current_object()  # type: ignore[attr-defined]\n\n        for func in ctx._after_request_functions:\n            response = self.ensure_sync(func)(response)\n\n        for name in chain(request.blueprints, (None,)):\n            if name in self.after_request_funcs:\n                for func in reversed(self.after_request_funcs[name]):\n                    response = self.ensure_sync(func)(response)\n\n        if not self.session_interface.is_null_session(ctx.session):\n            self.session_interface.save_session(self, ctx.session, response)\n\n        return response",
      "docstring": "Can be overridden in order to modify the response object\nbefore it's sent to the WSGI server.  By default this will\ncall all the :meth:`after_request` decorated functions.\n\n.. versionchanged:: 0.5\n   As of Flask 0.5 the functions registered for after request\n   execution are called in reverse order of registration.\n\n:param response: a :attr:`response_class` object.\n:return: a new response object or the same, has to be an\n         instance of :attr:`response_class`.",
      "decorators": [],
      "arguments": [
        "self",
        "response"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.session_interface.is_null_session",
          "body": "def is_null_session(self, obj: object) -> bool:\n    \"\"\"Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        \"\"\"\n    return isinstance(obj, self.null_session_class)"
        },
        {
          "name": "self.session_interface.save_session",
          "body": "def save_session(self, app: Flask, session: SessionMixin, response: Response) -> None:\n    \"\"\"This is called at the end of each request, after generating\n        a response, before removing the request context. It is skipped\n        if :meth:`is_null_session` returns ``True``.\n        \"\"\"\n    raise NotImplementedError()"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        },
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "do_teardown_request",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1326,
      "end_line_number": 1358,
      "source_code": "def do_teardown_request(\n        self,\n        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n    ) -> None:\n        \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n\n        for name in chain(request.blueprints, (None,)):\n            if name in self.teardown_request_funcs:\n                for func in reversed(self.teardown_request_funcs[name]):\n                    self.ensure_sync(func)(exc)\n\n        request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)",
      "docstring": "Called after the request is dispatched and the response is\nreturned, right before the request context is popped.\n\nThis calls all functions decorated with\n:meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\nif a blueprint handled the request. Finally, the\n:data:`request_tearing_down` signal is sent.\n\nThis is called by\n:meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\nwhich may be delayed during testing to maintain access to\nresources.\n\n:param exc: An unhandled exception raised while dispatching the\n    request. Detected from the current exception information if\n    not passed. Passed to each teardown function.\n\n.. versionchanged:: 0.9\n    Added the ``exc`` argument.",
      "decorators": [],
      "arguments": [
        "self",
        "exc"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "do_teardown_appcontext",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1360,
      "end_line_number": 1384,
      "source_code": "def do_teardown_appcontext(\n        self,\n        exc: BaseException | None = _sentinel,  # type: ignore[assignment]\n    ) -> None:\n        \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        if exc is _sentinel:\n            exc = sys.exc_info()[1]\n\n        for func in reversed(self.teardown_appcontext_funcs):\n            self.ensure_sync(func)(exc)\n\n        appcontext_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)",
      "docstring": "Called right before the application context is popped.\n\nWhen handling a request, the application context is popped\nafter the request context. See :meth:`do_teardown_request`.\n\nThis calls all functions decorated with\n:meth:`teardown_appcontext`. Then the\n:data:`appcontext_tearing_down` signal is sent.\n\nThis is called by\n:meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "self",
        "exc"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "app_context",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1386,
      "end_line_number": 1405,
      "source_code": "def app_context(self) -> AppContext:\n        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        return AppContext(self)",
      "docstring": "Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\nblock to push the context, which will make :data:`current_app`\npoint at this application.\n\nAn application context is automatically pushed by\n:meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\nwhen handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations.\n\n::\n\n    with app.app_context():\n        init_db()\n\nSee :doc:`/appcontext`.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "request_context",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1407,
      "end_line_number": 1421,
      "source_code": "def request_context(self, environ: WSGIEnvironment) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\n        return RequestContext(self, environ)",
      "docstring": "Create a :class:`~flask.ctx.RequestContext` representing a\nWSGI environment. Use a ``with`` block to push the context,\nwhich will make :data:`request` point at this request.\n\nSee :doc:`/reqcontext`.\n\nTypically you should not call this from your own code. A request\ncontext is automatically pushed by the :meth:`wsgi_app` when\nhandling a request. Use :meth:`test_request_context` to create\nan environment and context instead of this method.\n\n:param environ: a WSGI environment",
      "decorators": [],
      "arguments": [
        "self",
        "environ"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "test_request_context",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1423,
      "end_line_number": 1477,
      "source_code": "def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:\n        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with app.test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\n        from .testing import EnvironBuilder\n\n        builder = EnvironBuilder(self, *args, **kwargs)\n\n        try:\n            return self.request_context(builder.get_environ())\n        finally:\n            builder.close()",
      "docstring": "Create a :class:`~flask.ctx.RequestContext` for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request.\n\nSee :doc:`/reqcontext`.\n\nUse a ``with`` block to push the context, which will make\n:data:`request` point at the request for the created\nenvironment. ::\n\n    with app.test_request_context(...):\n        generate_report()\n\nWhen using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation. ::\n\n    ctx = app.test_request_context(...)\n    ctx.push()\n    ...\n    ctx.pop()\n\nTakes the same arguments as Werkzeug's\n:class:`~werkzeug.test.EnvironBuilder`, with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here.\n\n:param path: URL path being requested.\n:param base_url: Base URL where the app is being served, which\n    ``path`` is relative to. If not given, built from\n    :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n    :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n:param subdomain: Subdomain name to append to\n    :data:`SERVER_NAME`.\n:param url_scheme: Scheme to use instead of\n    :data:`PREFERRED_URL_SCHEME`.\n:param data: The request body, either as a string or a dict of\n    form keys and values.\n:param json: If given, this is serialized as JSON and passed as\n    ``data``. Also defaults ``content_type`` to\n    ``application/json``.\n:param args: other positional arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.\n:param kwargs: other keyword arguments passed to\n    :class:`~werkzeug.test.EnvironBuilder`.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.request_context",
          "body": "def request_context(self, environ: WSGIEnvironment) -> RequestContext:\n    \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\n    return RequestContext(self, environ)"
        }
      ]
    },
    {
      "name": "wsgi_app",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1479,
      "end_line_number": 1527,
      "source_code": "def wsgi_app(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\n        ctx = self.request_context(environ)\n        error: BaseException | None = None\n        try:\n            try:\n                ctx.push()\n                response = self.full_dispatch_request()\n            except Exception as e:\n                error = e\n                response = self.handle_exception(e)\n            except:  # noqa: B001\n                error = sys.exc_info()[1]\n                raise\n            return response(environ, start_response)\n        finally:\n            if \"werkzeug.debug.preserve_context\" in environ:\n                environ[\"werkzeug.debug.preserve_context\"](_cv_app.get())\n                environ[\"werkzeug.debug.preserve_context\"](_cv_request.get())\n\n            if error is not None and self.should_ignore_error(error):\n                error = None\n\n            ctx.pop(error)",
      "docstring": "The actual WSGI application. This is not implemented in\n:meth:`__call__` so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this::\n\n    app = MyMiddleware(app)\n\nIt's a better idea to do this instead::\n\n    app.wsgi_app = MyMiddleware(app.wsgi_app)\n\nThen you still have the original application object around and\ncan continue to call methods on it.\n\n.. versionchanged:: 0.7\n    Teardown events for the request and app contexts are called\n    even if an unhandled error occurs. Other events may not be\n    called depending on when an error occurs during dispatch.\n    See :ref:`callbacks-and-errors`.\n\n:param environ: A WSGI environment.\n:param start_response: A callable accepting a status code,\n    a list of headers, and an optional exception context to\n    start the response.",
      "decorators": [],
      "arguments": [
        "self",
        "environ",
        "start_response"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.request_context",
          "body": "def request_context(self, environ: WSGIEnvironment) -> RequestContext:\n    \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n        WSGI environment. Use a ``with`` block to push the context,\n        which will make :data:`request` point at this request.\n\n        See :doc:`/reqcontext`.\n\n        Typically you should not call this from your own code. A request\n        context is automatically pushed by the :meth:`wsgi_app` when\n        handling a request. Use :meth:`test_request_context` to create\n        an environment and context instead of this method.\n\n        :param environ: a WSGI environment\n        \"\"\"\n    return RequestContext(self, environ)"
        },
        {
          "name": "response",
          "body": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n    obj = self._prepare_response_obj(args, kwargs)\n    return self._app.response_class(self.dumps(obj), mimetype='application/json')"
        },
        {
          "name": "ctx.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "ctx.push",
          "body": "def push(self) -> None:\n    \"\"\"Binds the app context to the current context.\"\"\"\n    self._cv_tokens.append(_cv_app.set(self))\n    appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)"
        },
        {
          "name": "self.full_dispatch_request",
          "body": "def full_dispatch_request(self) -> Response:\n    \"\"\"Dispatches the request and on top of that performs request\n        pre and postprocessing as well as HTTP exception catching and\n        error handling.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    self._got_first_request = True\n    try:\n        request_started.send(self, _async_wrapper=self.ensure_sync)\n        rv = self.preprocess_request()\n        if rv is None:\n            rv = self.dispatch_request()\n    except Exception as e:\n        rv = self.handle_user_exception(e)\n    return self.finalize_request(rv)"
        },
        {
          "name": "self.should_ignore_error",
          "body": "def should_ignore_error(self, error: BaseException | None) -> bool:\n    \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return False"
        },
        {
          "name": "self.handle_exception",
          "body": "def handle_exception(self, e: Exception) -> Response:\n    \"\"\"Handle an exception that did not have an error handler\n        associated with it, or that was raised from an error handler.\n        This always causes a 500 ``InternalServerError``.\n\n        Always sends the :data:`got_request_exception` signal.\n\n        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\n        mode, the error will be re-raised so that the debugger can\n        display it. Otherwise, the original exception is logged, and\n        an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n\n        If an error handler is registered for ``InternalServerError`` or\n        ``500``, it will be used. For consistency, the handler will\n        always receive the ``InternalServerError``. The original\n        unhandled exception is available as ``e.original_exception``.\n\n        .. versionchanged:: 1.1.0\n            Always passes the ``InternalServerError`` instance to the\n            handler, setting ``original_exception`` to the unhandled\n            error.\n\n        .. versionchanged:: 1.1.0\n            ``after_request`` functions and other finalization is done\n            even for the default 500 response when there is no handler.\n\n        .. versionadded:: 0.3\n        \"\"\"\n    exc_info = sys.exc_info()\n    got_request_exception.send(self, _async_wrapper=self.ensure_sync, exception=e)\n    propagate = self.config['PROPAGATE_EXCEPTIONS']\n    if propagate is None:\n        propagate = self.testing or self.debug\n    if propagate:\n        if exc_info[1] is e:\n            raise\n        raise e\n    self.log_exception(exc_info)\n    server_error: InternalServerError | ft.ResponseReturnValue\n    server_error = InternalServerError(original_exception=e)\n    handler = self._find_error_handler(server_error, request.blueprints)\n    if handler is not None:\n        server_error = self.ensure_sync(handler)(server_error)\n    return self.finalize_request(server_error, from_error_handler=True)"
        },
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "__call__",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\app.py",
      "line_number": 1529,
      "end_line_number": 1536,
      "source_code": "def __call__(\n        self, environ: WSGIEnvironment, start_response: StartResponse\n    ) -> cabc.Iterable[bytes]:\n        \"\"\"The WSGI server calls the Flask application object as the\n        WSGI application. This calls :meth:`wsgi_app`, which can be\n        wrapped to apply middleware.\n        \"\"\"\n        return self.wsgi_app(environ, start_response)",
      "docstring": "The WSGI server calls the Flask application object as the\nWSGI application. This calls :meth:`wsgi_app`, which can be\nwrapped to apply middleware.",
      "decorators": [],
      "arguments": [
        "self",
        "environ",
        "start_response"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "os",
        "sys",
        "typing",
        "weakref",
        "datetime.timedelta",
        "inspect.iscoroutinefunction",
        "itertools.chain",
        "types.TracebackType",
        "urllib.parse.quote",
        "click",
        "werkzeug.datastructures.Headers",
        "werkzeug.datastructures.ImmutableDict",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.exceptions.InternalServerError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.MapAdapter",
        "werkzeug.routing.RequestRedirect",
        "werkzeug.routing.RoutingException",
        "werkzeug.routing.Rule",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.wrappers.Response",
        "werkzeug.wsgi.get_host",
        ".cli",
        ".typing",
        "ctx.AppContext",
        "ctx.RequestContext",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.g",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "helpers.get_debug_flag",
        "helpers.get_flashed_messages",
        "helpers.get_load_dotenv",
        "helpers.send_from_directory",
        "sansio.app.App",
        "sansio.scaffold._sentinel",
        "sessions.SecureCookieSessionInterface",
        "sessions.SessionInterface",
        "signals.appcontext_tearing_down",
        "signals.got_request_exception",
        "signals.request_finished",
        "signals.request_started",
        "signals.request_tearing_down",
        "templating.Environment",
        "wrappers.Request",
        "wrappers.Response",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIEnvironment",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "typing.HeadersValue",
        "debughelpers.FormDataRoutingRedirect",
        "werkzeug.serving.run_simple",
        "testing.EnvironBuilder",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "asgiref.sync.async_to_sync"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.wsgi_app",
          "body": "def wsgi_app(self, environ: WSGIEnvironment, start_response: StartResponse) -> cabc.Iterable[bytes]:\n    \"\"\"The actual WSGI application. This is not implemented in\n        :meth:`__call__` so that middlewares can be applied without\n        losing a reference to the app object. Instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n            Teardown events for the request and app contexts are called\n            even if an unhandled error occurs. Other events may not be\n            called depending on when an error occurs during dispatch.\n            See :ref:`callbacks-and-errors`.\n\n        :param environ: A WSGI environment.\n        :param start_response: A callable accepting a status code,\n            a list of headers, and an optional exception context to\n            start the response.\n        \"\"\"\n    ctx = self.request_context(environ)\n    error: BaseException | None = None\n    try:\n        try:\n            ctx.push()\n            response = self.full_dispatch_request()\n        except Exception as e:\n            error = e\n            response = self.handle_exception(e)\n        except:\n            error = sys.exc_info()[1]\n            raise\n        return response(environ, start_response)\n    finally:\n        if 'werkzeug.debug.preserve_context' in environ:\n            environ['werkzeug.debug.preserve_context'](_cv_app.get())\n            environ['werkzeug.debug.preserve_context'](_cv_request.get())\n        if error is not None and self.should_ignore_error(error):\n            error = None\n        ctx.pop(error)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\blueprints.py",
      "line_number": 19,
      "end_line_number": 53,
      "source_code": "def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore\n    ) -> None:\n        super().__init__(\n            name,\n            import_name,\n            static_folder,\n            static_url_path,\n            template_folder,\n            url_prefix,\n            subdomain,\n            url_defaults,\n            root_path,\n            cli_group,\n        )\n\n        #: The Click command group for registering CLI commands for this\n        #: object. The commands are available from the ``flask`` command\n        #: once the application has been discovered and blueprints have\n        #: been registered.\n        self.cli = AppGroup()\n\n        # Set the name of the Click group in case someone wants to add\n        # the app's commands to another CLI tool.\n        self.cli.name = self.name",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "import_name",
        "static_folder",
        "static_url_path",
        "template_folder",
        "url_prefix",
        "subdomain",
        "url_defaults",
        "root_path",
        "cli_group"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "datetime.timedelta",
        "cli.AppGroup",
        "globals.current_app",
        "helpers.send_from_directory",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.scaffold._sentinel",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_send_file_max_age",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\blueprints.py",
      "line_number": 55,
      "end_line_number": 80,
      "source_code": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n        \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        value = current_app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]\n\n        if value is None:\n            return None\n\n        if isinstance(value, timedelta):\n            return int(value.total_seconds())\n\n        return value",
      "docstring": "Used by :func:`send_file` to determine the ``max_age`` cache\nvalue for a given file path if it wasn't passed.\n\nBy default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\nthe configuration of :data:`~flask.current_app`. This defaults\nto ``None``, which tells the browser to use conditional requests\ninstead of a timed cache, which is usually preferable.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionchanged:: 2.0\n    The default configuration is ``None`` instead of 12 hours.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "self",
        "filename"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "datetime.timedelta",
        "cli.AppGroup",
        "globals.current_app",
        "helpers.send_from_directory",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.scaffold._sentinel",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "send_static_file",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\blueprints.py",
      "line_number": 82,
      "end_line_number": 102,
      "source_code": "def send_static_file(self, filename: str) -> Response:\n        \"\"\"The view function used to serve files from\n        :attr:`static_folder`. A route is automatically registered for\n        this view at :attr:`static_url_path` if :attr:`static_folder` is\n        set.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionadded:: 0.5\n\n        \"\"\"\n        if not self.has_static_folder:\n            raise RuntimeError(\"'static_folder' must be set to serve static_files.\")\n\n        # send_file only knows to call get_send_file_max_age on the app,\n        # call it here so it works for blueprints too.\n        max_age = self.get_send_file_max_age(filename)\n        return send_from_directory(\n            t.cast(str, self.static_folder), filename, max_age=max_age\n        )",
      "docstring": "The view function used to serve files from\n:attr:`static_folder`. A route is automatically registered for\nthis view at :attr:`static_url_path` if :attr:`static_folder` is\nset.\n\nNote this is a duplicate of the same method in the Flask\nclass.\n\n.. versionadded:: 0.5",
      "decorators": [],
      "arguments": [
        "self",
        "filename"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "datetime.timedelta",
        "cli.AppGroup",
        "globals.current_app",
        "helpers.send_from_directory",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.scaffold._sentinel",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.get_send_file_max_age",
          "body": "def get_send_file_max_age(self, filename: str | None) -> int | None:\n    \"\"\"Used by :func:`send_file` to determine the ``max_age`` cache\n        value for a given file path if it wasn't passed.\n\n        By default, this returns :data:`SEND_FILE_MAX_AGE_DEFAULT` from\n        the configuration of :data:`~flask.current_app`. This defaults\n        to ``None``, which tells the browser to use conditional requests\n        instead of a timed cache, which is usually preferable.\n\n        Note this is a duplicate of the same method in the Flask\n        class.\n\n        .. versionchanged:: 2.0\n            The default configuration is ``None`` instead of 12 hours.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    value = current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n    if value is None:\n        return None\n    if isinstance(value, timedelta):\n        return int(value.total_seconds())\n    return value"
        },
        {
          "name": "send_from_directory",
          "body": "def send_from_directory(directory: os.PathLike[str] | str, path: os.PathLike[str] | str, **kwargs: t.Any) -> Response:\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under,\n        relative to the current application's root path. This *must not*\n        be a value provided by the client, otherwise it becomes insecure.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionchanged:: 2.0\n        ``path`` replaces the ``filename`` parameter.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionadded:: 0.5\n    \"\"\"\n    return werkzeug.utils.send_from_directory(directory, path, **_prepare_send_file_kwargs(**kwargs))"
        }
      ]
    },
    {
      "name": "open_resource",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\blueprints.py",
      "line_number": 104,
      "end_line_number": 128,
      "source_code": "def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = \"utf-8\"\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading. The\n        blueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\n        method.\n\n        :param resource: Path to the resource relative to :attr:`root_path`.\n        :param mode: Open the file in this mode. Only reading is supported,\n            valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n        :param encoding: Open the file with this encoding when opening in text\n            mode. This is ignored when opening in binary mode.\n\n        .. versionchanged:: 3.1\n            Added the ``encoding`` parameter.\n        \"\"\"\n        if mode not in {\"r\", \"rt\", \"rb\"}:\n            raise ValueError(\"Resources can only be opened for reading.\")\n\n        path = os.path.join(self.root_path, resource)\n\n        if mode == \"rb\":\n            return open(path, mode)  # pyright: ignore\n\n        return open(path, mode, encoding=encoding)",
      "docstring": "Open a resource file relative to :attr:`root_path` for reading. The\nblueprint-relative equivalent of the app's :meth:`~.Flask.open_resource`\nmethod.\n\n:param resource: Path to the resource relative to :attr:`root_path`.\n:param mode: Open the file in this mode. Only reading is supported,\n    valid values are ``\"r\"`` (or ``\"rt\"``) and ``\"rb\"``.\n:param encoding: Open the file with this encoding when opening in text\n    mode. This is ignored when opening in binary mode.\n\n.. versionchanged:: 3.1\n    Added the ``encoding`` parameter.",
      "decorators": [],
      "arguments": [
        "self",
        "resource",
        "mode",
        "encoding"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "datetime.timedelta",
        "cli.AppGroup",
        "globals.current_app",
        "helpers.send_from_directory",
        "sansio.blueprints.Blueprint",
        "sansio.blueprints.BlueprintSetupState",
        "sansio.scaffold._sentinel",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        }
      ]
    },
    {
      "name": "find_best_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 41,
      "end_line_number": 91,
      "source_code": "def find_best_app(module: ModuleType) -> Flask:\n    \"\"\"Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    \"\"\"\n    from . import Flask\n\n    # Search for the most common names first.\n    for attr_name in (\"app\", \"application\"):\n        app = getattr(module, attr_name, None)\n\n        if isinstance(app, Flask):\n            return app\n\n    # Otherwise find the only object that is a Flask instance.\n    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]\n\n    if len(matches) == 1:\n        return matches[0]\n    elif len(matches) > 1:\n        raise NoAppException(\n            \"Detected multiple Flask applications in module\"\n            f\" '{module.__name__}'. Use '{module.__name__}:name'\"\n            \" to specify the correct one.\"\n        )\n\n    # Search for app factory functions.\n    for attr_name in (\"create_app\", \"make_app\"):\n        app_factory = getattr(module, attr_name, None)\n\n        if inspect.isfunction(app_factory):\n            try:\n                app = app_factory()\n\n                if isinstance(app, Flask):\n                    return app\n            except TypeError as e:\n                if not _called_with_wrong_args(app_factory):\n                    raise\n\n                raise NoAppException(\n                    f\"Detected factory '{attr_name}' in module '{module.__name__}',\"\n                    \" but could not call it without arguments. Use\"\n                    f\" '{module.__name__}:{attr_name}(args)'\"\n                    \" to specify arguments.\"\n                ) from e\n\n    raise NoAppException(\n        \"Failed to find Flask application or factory in module\"\n        f\" '{module.__name__}'. Use '{module.__name__}:name'\"\n        \" to specify one.\"\n    )",
      "docstring": "Given a module instance this tries to find the best possible\napplication in the module or raises an exception.",
      "decorators": [],
      "arguments": [
        "module"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_called_with_wrong_args",
          "body": "def _called_with_wrong_args(f: t.Callable[..., Flask]) -> bool:\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                return False\n            tb = tb.tb_next\n        return True\n    finally:\n        del tb"
        }
      ]
    },
    {
      "name": "_called_with_wrong_args",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 94,
      "end_line_number": 117,
      "source_code": "def _called_with_wrong_args(f: t.Callable[..., Flask]) -> bool:\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                # In the function, it was called successfully.\n                return False\n\n            tb = tb.tb_next\n\n        # Didn't reach the function.\n        return True\n    finally:\n        # Delete tb to break a circular reference.\n        # https://docs.python.org/2/library/sys.html#sys.exc_info\n        del tb",
      "docstring": "Check whether calling a function raised a ``TypeError`` because\nthe call failed or because something in the factory raised the\nerror.\n\n:param f: The function that was called.\n:return: ``True`` if the call failed.",
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "find_app_by_string",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 120,
      "end_line_number": 197,
      "source_code": "def find_app_by_string(module: ModuleType, app_name: str) -> Flask:\n    \"\"\"Check if the given string is a variable name or a function. Call\n    a function to get the app instance, or return the variable directly.\n    \"\"\"\n    from . import Flask\n\n    # Parse app_name as a single expression to determine if it's a valid\n    # attribute name or function call.\n    try:\n        expr = ast.parse(app_name.strip(), mode=\"eval\").body\n    except SyntaxError:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        ) from None\n\n    if isinstance(expr, ast.Name):\n        name = expr.id\n        args = []\n        kwargs = {}\n    elif isinstance(expr, ast.Call):\n        # Ensure the function name is an attribute name only.\n        if not isinstance(expr.func, ast.Name):\n            raise NoAppException(\n                f\"Function reference must be a simple name: {app_name!r}.\"\n            )\n\n        name = expr.func.id\n\n        # Parse the positional and keyword arguments as literals.\n        try:\n            args = [ast.literal_eval(arg) for arg in expr.args]\n            kwargs = {\n                kw.arg: ast.literal_eval(kw.value)\n                for kw in expr.keywords\n                if kw.arg is not None\n            }\n        except ValueError:\n            # literal_eval gives cryptic error messages, show a generic\n            # message with the full expression instead.\n            raise NoAppException(\n                f\"Failed to parse arguments as literal values: {app_name!r}.\"\n            ) from None\n    else:\n        raise NoAppException(\n            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n        )\n\n    try:\n        attr = getattr(module, name)\n    except AttributeError as e:\n        raise NoAppException(\n            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"\n        ) from e\n\n    # If the attribute is a function, call it with any args and kwargs\n    # to get the real application.\n    if inspect.isfunction(attr):\n        try:\n            app = attr(*args, **kwargs)\n        except TypeError as e:\n            if not _called_with_wrong_args(attr):\n                raise\n\n            raise NoAppException(\n                f\"The factory {app_name!r} in module\"\n                f\" {module.__name__!r} could not be called with the\"\n                \" specified arguments.\"\n            ) from e\n    else:\n        app = attr\n\n    if isinstance(app, Flask):\n        return app\n\n    raise NoAppException(\n        \"A valid Flask application was not obtained from\"\n        f\" '{module.__name__}:{app_name}'.\"\n    )",
      "docstring": "Check if the given string is a variable name or a function. Call\na function to get the app instance, or return the variable directly.",
      "decorators": [],
      "arguments": [
        "module",
        "app_name"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_called_with_wrong_args",
          "body": "def _called_with_wrong_args(f: t.Callable[..., Flask]) -> bool:\n    \"\"\"Check whether calling a function raised a ``TypeError`` because\n    the call failed or because something in the factory raised the\n    error.\n\n    :param f: The function that was called.\n    :return: ``True`` if the call failed.\n    \"\"\"\n    tb = sys.exc_info()[2]\n    try:\n        while tb is not None:\n            if tb.tb_frame.f_code is f.__code__:\n                return False\n            tb = tb.tb_next\n        return True\n    finally:\n        del tb"
        }
      ]
    },
    {
      "name": "prepare_import",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 200,
      "end_line_number": 226,
      "source_code": "def prepare_import(path: str) -> str:\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n\n    fname, ext = os.path.splitext(path)\n    if ext == \".py\":\n        path = fname\n\n    if os.path.basename(path) == \"__init__\":\n        path = os.path.dirname(path)\n\n    module_name = []\n\n    # move up until outside package structure (no __init__.py)\n    while True:\n        path, name = os.path.split(path)\n        module_name.append(name)\n\n        if not os.path.exists(os.path.join(path, \"__init__.py\")):\n            break\n\n    if sys.path[0] != path:\n        sys.path.insert(0, path)\n\n    return \".\".join(module_name[::-1])",
      "docstring": "Given a filename this will try to calculate the python path, add it\nto the search path and return the actual module name that is expected.",
      "decorators": [],
      "arguments": [
        "path"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "locate_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 230,
      "end_line_number": 232,
      "source_code": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True] = True\n) -> Flask: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "module_name",
        "app_name",
        "raise_if_not_found"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "locate_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 236,
      "end_line_number": 238,
      "source_code": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: t.Literal[False] = ...\n) -> Flask | None: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "module_name",
        "app_name",
        "raise_if_not_found"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "locate_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 241,
      "end_line_number": 264,
      "source_code": "def locate_app(\n    module_name: str, app_name: str | None, raise_if_not_found: bool = True\n) -> Flask | None:\n    try:\n        __import__(module_name)\n    except ImportError:\n        # Reraise the ImportError if it occurred within the imported module.\n        # Determine this by checking whether the trace has a depth > 1.\n        if sys.exc_info()[2].tb_next:  # type: ignore[union-attr]\n            raise NoAppException(\n                f\"While importing {module_name!r}, an ImportError was\"\n                f\" raised:\\n\\n{traceback.format_exc()}\"\n            ) from None\n        elif raise_if_not_found:\n            raise NoAppException(f\"Could not import {module_name!r}.\") from None\n        else:\n            return None\n\n    module = sys.modules[module_name]\n\n    if app_name is None:\n        return find_best_app(module)\n    else:\n        return find_app_by_string(module, app_name)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "module_name",
        "app_name",
        "raise_if_not_found"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "find_best_app",
          "body": "def find_best_app(module: ModuleType) -> Flask:\n    \"\"\"Given a module instance this tries to find the best possible\n    application in the module or raises an exception.\n    \"\"\"\n    from . import Flask\n    for attr_name in ('app', 'application'):\n        app = getattr(module, attr_name, None)\n        if isinstance(app, Flask):\n            return app\n    matches = [v for v in module.__dict__.values() if isinstance(v, Flask)]\n    if len(matches) == 1:\n        return matches[0]\n    elif len(matches) > 1:\n        raise NoAppException(f\"Detected multiple Flask applications in module '{module.__name__}'. Use '{module.__name__}:name' to specify the correct one.\")\n    for attr_name in ('create_app', 'make_app'):\n        app_factory = getattr(module, attr_name, None)\n        if inspect.isfunction(app_factory):\n            try:\n                app = app_factory()\n                if isinstance(app, Flask):\n                    return app\n            except TypeError as e:\n                if not _called_with_wrong_args(app_factory):\n                    raise\n                raise NoAppException(f\"Detected factory '{attr_name}' in module '{module.__name__}', but could not call it without arguments. Use '{module.__name__}:{attr_name}(args)' to specify arguments.\") from e\n    raise NoAppException(f\"Failed to find Flask application or factory in module '{module.__name__}'. Use '{module.__name__}:name' to specify one.\")"
        },
        {
          "name": "find_app_by_string",
          "body": "def find_app_by_string(module: ModuleType, app_name: str) -> Flask:\n    \"\"\"Check if the given string is a variable name or a function. Call\n    a function to get the app instance, or return the variable directly.\n    \"\"\"\n    from . import Flask\n    try:\n        expr = ast.parse(app_name.strip(), mode='eval').body\n    except SyntaxError:\n        raise NoAppException(f'Failed to parse {app_name!r} as an attribute name or function call.') from None\n    if isinstance(expr, ast.Name):\n        name = expr.id\n        args = []\n        kwargs = {}\n    elif isinstance(expr, ast.Call):\n        if not isinstance(expr.func, ast.Name):\n            raise NoAppException(f'Function reference must be a simple name: {app_name!r}.')\n        name = expr.func.id\n        try:\n            args = [ast.literal_eval(arg) for arg in expr.args]\n            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expr.keywords if kw.arg is not None}\n        except ValueError:\n            raise NoAppException(f'Failed to parse arguments as literal values: {app_name!r}.') from None\n    else:\n        raise NoAppException(f'Failed to parse {app_name!r} as an attribute name or function call.')\n    try:\n        attr = getattr(module, name)\n    except AttributeError as e:\n        raise NoAppException(f'Failed to find attribute {name!r} in {module.__name__!r}.') from e\n    if inspect.isfunction(attr):\n        try:\n            app = attr(*args, **kwargs)\n        except TypeError as e:\n            if not _called_with_wrong_args(attr):\n                raise\n            raise NoAppException(f'The factory {app_name!r} in module {module.__name__!r} could not be called with the specified arguments.') from e\n    else:\n        app = attr\n    if isinstance(app, Flask):\n        return app\n    raise NoAppException(f\"A valid Flask application was not obtained from '{module.__name__}:{app_name}'.\")"
        }
      ]
    },
    {
      "name": "get_version",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 267,
      "end_line_number": 280,
      "source_code": "def get_version(ctx: click.Context, param: click.Parameter, value: t.Any) -> None:\n    if not value or ctx.resilient_parsing:\n        return\n\n    flask_version = importlib.metadata.version(\"flask\")\n    werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    click.echo(\n        f\"Python {platform.python_version()}\\n\"\n        f\"Flask {flask_version}\\n\"\n        f\"Werkzeug {werkzeug_version}\",\n        color=ctx.color,\n    )\n    ctx.exit()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "ctx",
        "param",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "with_appcontext",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 380,
      "end_line_number": 402,
      "source_code": "def with_appcontext(f: F) -> F:\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.\n\n    Custom commands (and their options) registered under ``app.cli`` or\n    ``blueprint.cli`` will always have an app context available, this\n    decorator is not required in that case.\n\n    .. versionchanged:: 2.2\n        The app context is active for subcommands as well as the\n        decorated callback. The app context is always available to\n        ``app.cli`` command and parameter callbacks.\n    \"\"\"\n\n    @click.pass_context\n    def decorator(ctx: click.Context, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if not current_app:\n            app = ctx.ensure_object(ScriptInfo).load_app()\n            ctx.with_resource(app.app_context())\n\n        return ctx.invoke(f, *args, **kwargs)\n\n    return update_wrapper(decorator, f)",
      "docstring": "Wraps a callback so that it's guaranteed to be executed with the\nscript's application context.\n\nCustom commands (and their options) registered under ``app.cli`` or\n``blueprint.cli`` will always have an app context available, this\ndecorator is not required in that case.\n\n.. versionchanged:: 2.2\n    The app context is active for subcommands as well as the\n    decorated callback. The app context is always available to\n    ``app.cli`` command and parameter callbacks.",
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "ctx.invoke",
          "body": "def invoke(self, cli: t.Any=None, args: t.Any=None, **kwargs: t.Any) -> Result:\n    \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :param cli: Command object to invoke. Default is the app's\n            :attr:`~flask.app.Flask.cli` group.\n        :param args: List of strings to invoke the command with.\n\n        :return: a :class:`~click.testing.Result` object.\n        \"\"\"\n    if cli is None:\n        cli = self.app.cli\n    if 'obj' not in kwargs:\n        kwargs['obj'] = ScriptInfo(create_app=lambda: self.app)\n    return super().invoke(cli, args, **kwargs)"
        },
        {
          "name": "app.app_context",
          "body": "def app_context(self) -> AppContext:\n    \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    return AppContext(self)"
        }
      ]
    },
    {
      "name": "_set_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 440,
      "end_line_number": 446,
      "source_code": "def _set_app(ctx: click.Context, param: click.Option, value: str | None) -> str | None:\n    if value is None:\n        return None\n\n    info = ctx.ensure_object(ScriptInfo)\n    info.app_import_path = value\n    return value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "ctx",
        "param",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_set_debug",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 468,
      "end_line_number": 482,
      "source_code": "def _set_debug(ctx: click.Context, param: click.Option, value: bool) -> bool | None:\n    # If the flag isn't provided, it will default to False. Don't use\n    # that, let debug be set by env in that case.\n    source = ctx.get_parameter_source(param.name)  # type: ignore[arg-type]\n\n    if source is not None and source in (\n        ParameterSource.DEFAULT,\n        ParameterSource.DEFAULT_MAP,\n    ):\n        return None\n\n    # Set with env var instead of ScriptInfo.load so that it can be\n    # accessed early during a factory function.\n    os.environ[\"FLASK_DEBUG\"] = \"1\" if value else \"0\"\n    return value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "ctx",
        "param",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_env_file_callback",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 493,
      "end_line_number": 512,
      "source_code": "def _env_file_callback(\n    ctx: click.Context, param: click.Option, value: str | None\n) -> str | None:\n    try:\n        import dotenv  # noqa: F401\n    except ImportError:\n        # Only show an error if a value was passed, otherwise we still want to\n        # call load_dotenv and show a message without exiting.\n        if value is not None:\n            raise click.BadParameter(\n                \"python-dotenv must be installed to load an env file.\",\n                ctx=ctx,\n                param=param,\n            ) from None\n\n    # Load if a value was passed, or we want to load default files, or both.\n    if value is not None or ctx.obj.load_dotenv_defaults:\n        load_dotenv(value, load_defaults=ctx.obj.load_dotenv_defaults)\n\n    return value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "ctx",
        "param",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "load_dotenv",
          "body": "def load_dotenv(path: str | os.PathLike[str] | None=None, load_defaults: bool=True) -> bool:\n    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n    loading and combining these files, values are only set if the key is not\n    already set in ``os.environ``.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location.\n    :param load_defaults: Search for and load the default ``.flaskenv`` and\n        ``.env`` files.\n    :return: ``True`` if at least one env var was loaded.\n\n    .. versionchanged:: 3.1\n        Added the ``load_defaults`` parameter. A given path takes precedence\n        over default files.\n\n    .. versionchanged:: 2.0\n        The current directory is not changed to the location of the\n        loaded file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn't a file.\n\n    .. versionadded:: 1.0\n    \"\"\"\n    try:\n        import dotenv\n    except ImportError:\n        if path or os.path.isfile('.env') or os.path.isfile('.flaskenv'):\n            click.secho(' * Tip: There are .env files present. Install python-dotenv to use them.', fg='yellow', err=True)\n        return False\n    data: dict[str, str | None] = {}\n    if load_defaults:\n        for default_name in ('.flaskenv', '.env'):\n            if not (default_path := dotenv.find_dotenv(default_name, usecwd=True)):\n                continue\n            data |= dotenv.dotenv_values(default_path, encoding='utf-8')\n    if path is not None and os.path.isfile(path):\n        data |= dotenv.dotenv_values(path, encoding='utf-8')\n    for key, value in data.items():\n        if key in os.environ or value is None:\n            continue\n        os.environ[key] = value\n    return bool(data)"
        }
      ]
    },
    {
      "name": "_path_is_ancestor",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 697,
      "end_line_number": 701,
      "source_code": "def _path_is_ancestor(path: str, other: str) -> bool:\n    \"\"\"Take ``other`` and remove the length of ``path`` from it. Then join it\n    to ``path``. If it is the original value, ``path`` is an ancestor of\n    ``other``.\"\"\"\n    return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other",
      "docstring": "Take ``other`` and remove the length of ``path`` from it. Then join it\nto ``path``. If it is the original value, ``path`` is an ancestor of\n``other``.",
      "decorators": [],
      "arguments": [
        "path",
        "other"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "load_dotenv",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 704,
      "end_line_number": 769,
      "source_code": "def load_dotenv(\n    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n) -> bool:\n    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n    loading and combining these files, values are only set if the key is not\n    already set in ``os.environ``.\n\n    This is a no-op if `python-dotenv`_ is not installed.\n\n    .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n    :param path: Load the file at this location.\n    :param load_defaults: Search for and load the default ``.flaskenv`` and\n        ``.env`` files.\n    :return: ``True`` if at least one env var was loaded.\n\n    .. versionchanged:: 3.1\n        Added the ``load_defaults`` parameter. A given path takes precedence\n        over default files.\n\n    .. versionchanged:: 2.0\n        The current directory is not changed to the location of the\n        loaded file.\n\n    .. versionchanged:: 2.0\n        When loading the env files, set the default encoding to UTF-8.\n\n    .. versionchanged:: 1.1.0\n        Returns ``False`` when python-dotenv is not installed, or when\n        the given path isn't a file.\n\n    .. versionadded:: 1.0\n    \"\"\"\n    try:\n        import dotenv\n    except ImportError:\n        if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n            click.secho(\n                \" * Tip: There are .env files present. Install python-dotenv\"\n                \" to use them.\",\n                fg=\"yellow\",\n                err=True,\n            )\n\n        return False\n\n    data: dict[str, str | None] = {}\n\n    if load_defaults:\n        for default_name in (\".flaskenv\", \".env\"):\n            if not (default_path := dotenv.find_dotenv(default_name, usecwd=True)):\n                continue\n\n            data |= dotenv.dotenv_values(default_path, encoding=\"utf-8\")\n\n    if path is not None and os.path.isfile(path):\n        data |= dotenv.dotenv_values(path, encoding=\"utf-8\")\n\n    for key, value in data.items():\n        if key in os.environ or value is None:\n            continue\n\n        os.environ[key] = value\n\n    return bool(data)",
      "docstring": "Load \"dotenv\" files to set environment variables. A given path takes\nprecedence over ``.env``, which takes precedence over ``.flaskenv``. After\nloading and combining these files, values are only set if the key is not\nalready set in ``os.environ``.\n\nThis is a no-op if `python-dotenv`_ is not installed.\n\n.. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n\n:param path: Load the file at this location.\n:param load_defaults: Search for and load the default ``.flaskenv`` and\n    ``.env`` files.\n:return: ``True`` if at least one env var was loaded.\n\n.. versionchanged:: 3.1\n    Added the ``load_defaults`` parameter. A given path takes precedence\n    over default files.\n\n.. versionchanged:: 2.0\n    The current directory is not changed to the location of the\n    loaded file.\n\n.. versionchanged:: 2.0\n    When loading the env files, set the default encoding to UTF-8.\n\n.. versionchanged:: 1.1.0\n    Returns ``False`` when python-dotenv is not installed, or when\n    the given path isn't a file.\n\n.. versionadded:: 1.0",
      "decorators": [],
      "arguments": [
        "path",
        "load_defaults"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "show_server_banner",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 772,
      "end_line_number": 783,
      "source_code": "def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if is_running_from_reloader():\n        return\n\n    if app_import_path is not None:\n        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n\n    if debug is not None:\n        click.echo(f\" * Debug mode: {'on' if debug else 'off'}\")",
      "docstring": "Show extra startup messages the first time the server is run,\nignoring the reloader.",
      "decorators": [],
      "arguments": [
        "debug",
        "app_import_path"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_validate_key",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 834,
      "end_line_number": 870,
      "source_code": "def _validate_key(ctx: click.Context, param: click.Parameter, value: t.Any) -> t.Any:\n    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n    \"\"\"\n    cert = ctx.params.get(\"cert\")\n    is_adhoc = cert == \"adhoc\"\n\n    try:\n        import ssl\n    except ImportError:\n        is_context = False\n    else:\n        is_context = isinstance(cert, ssl.SSLContext)\n\n    if value is not None:\n        if is_adhoc:\n            raise click.BadParameter(\n                'When \"--cert\" is \"adhoc\", \"--key\" is not used.', ctx, param\n            )\n\n        if is_context:\n            raise click.BadParameter(\n                'When \"--cert\" is an SSLContext object, \"--key\" is not used.',\n                ctx,\n                param,\n            )\n\n        if not cert:\n            raise click.BadParameter('\"--cert\" must also be specified.', ctx, param)\n\n        ctx.params[\"cert\"] = cert, value\n\n    else:\n        if cert and not (is_adhoc or is_context):\n            raise click.BadParameter('Required when using \"--cert\".', ctx, param)\n\n    return value",
      "docstring": "The ``--key`` option must be specified when ``--cert`` is a file.\nModifies the ``cert`` param to be a ``(cert, key)`` pair if needed.",
      "decorators": [],
      "arguments": [
        "ctx",
        "param",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "ctx.params.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "run_command",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 941,
      "end_line_number": 999,
      "source_code": "def run_command(\n    info: ScriptInfo,\n    host: str,\n    port: int,\n    reload: bool,\n    debugger: bool,\n    with_threads: bool,\n    cert: ssl.SSLContext | tuple[str, str | None] | t.Literal[\"adhoc\"] | None,\n    extra_files: list[str] | None,\n    exclude_patterns: list[str] | None,\n) -> None:\n    \"\"\"Run a local development server.\n\n    This server is for development purposes only. It does not provide\n    the stability, security, or performance of production WSGI servers.\n\n    The reloader and debugger are enabled by default with the '--debug'\n    option.\n    \"\"\"\n    try:\n        app: WSGIApplication = info.load_app()  # pyright: ignore\n    except Exception as e:\n        if is_running_from_reloader():\n            # When reloading, print out the error immediately, but raise\n            # it later so the debugger or server can handle it.\n            traceback.print_exc()\n            err = e\n\n            def app(\n                environ: WSGIEnvironment, start_response: StartResponse\n            ) -> cabc.Iterable[bytes]:\n                raise err from None\n\n        else:\n            # When not reloading, raise the error immediately so the\n            # command fails.\n            raise e from None\n\n    debug = get_debug_flag()\n\n    if reload is None:\n        reload = debug\n\n    if debugger is None:\n        debugger = debug\n\n    show_server_banner(debug, info.app_import_path)\n\n    run_simple(\n        host,\n        port,\n        app,\n        use_reloader=reload,\n        use_debugger=debugger,\n        threaded=with_threads,\n        ssl_context=cert,\n        extra_files=extra_files,\n        exclude_patterns=exclude_patterns,\n    )",
      "docstring": "Run a local development server.\n\nThis server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers.\n\nThe reloader and debugger are enabled by default with the '--debug'\noption.",
      "decorators": [
        "click.command('run', short_help='Run a development server.')",
        "click.option('--host', '-h', default='127.0.0.1', help='The interface to bind to.')",
        "click.option('--port', '-p', default=5000, help='The port to bind to.')",
        "click.option('--cert', type=CertParamType(), help='Specify a certificate file to use HTTPS.', is_eager=True)",
        "click.option('--key', type=click.Path(exists=True, dir_okay=False, resolve_path=True), callback=_validate_key, expose_value=False, help='The key file to use when specifying a certificate.')",
        "click.option('--reload/--no-reload', default=None, help='Enable or disable the reloader. By default the reloader is active if debug is enabled.')",
        "click.option('--debugger/--no-debugger', default=None, help='Enable or disable the debugger. By default the debugger is active if debug is enabled.')",
        "click.option('--with-threads/--without-threads', default=True, help='Enable or disable multithreading.')",
        "click.option('--extra-files', default=None, type=SeparatedPathType(), help=f'Extra files that trigger a reload on change. Multiple paths are separated by {os.path.pathsep!r}.')",
        "click.option('--exclude-patterns', default=None, type=SeparatedPathType(), help=f'Files matching these fnmatch patterns will not trigger a reload on change. Multiple patterns are separated by {os.path.pathsep!r}.')",
        "pass_script_info"
      ],
      "arguments": [
        "info",
        "host",
        "port",
        "reload",
        "debugger",
        "with_threads",
        "cert",
        "extra_files",
        "exclude_patterns"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_debug_flag",
          "body": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get('FLASK_DEBUG')\n    return bool(val and val.lower() not in {'0', 'false', 'no'})"
        },
        {
          "name": "show_server_banner",
          "body": "def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n    \"\"\"Show extra startup messages the first time the server is run,\n    ignoring the reloader.\n    \"\"\"\n    if is_running_from_reloader():\n        return\n    if app_import_path is not None:\n        click.echo(f\" * Serving Flask app '{app_import_path}'\")\n    if debug is not None:\n        click.echo(f' * Debug mode: {('on' if debug else 'off')}')"
        },
        {
          "name": "info.load_app",
          "body": "def load_app(self) -> Flask:\n    \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n    if self._loaded_app is not None:\n        return self._loaded_app\n    app: Flask | None = None\n    if self.create_app is not None:\n        app = self.create_app()\n    elif self.app_import_path:\n        path, name = (re.split(':(?![\\\\\\\\/])', self.app_import_path, maxsplit=1) + [None])[:2]\n        import_name = prepare_import(path)\n        app = locate_app(import_name, name)\n    else:\n        for path in ('wsgi.py', 'app.py'):\n            import_name = prepare_import(path)\n            app = locate_app(import_name, None, raise_if_not_found=False)\n            if app is not None:\n                break\n    if app is None:\n        raise NoAppException(\"Could not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory.\")\n    if self.set_debug_flag:\n        app.debug = get_debug_flag()\n    self._loaded_app = app\n    return app"
        }
      ]
    },
    {
      "name": "shell_command",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 1007,
      "end_line_number": 1051,
      "source_code": "def shell_command() -> None:\n    \"\"\"Run an interactive Python shell in the context of a given\n    Flask application.  The application will populate the default\n    namespace of this shell according to its configuration.\n\n    This is useful for executing small snippets of management code\n    without having to manually configure the application.\n    \"\"\"\n    import code\n\n    banner = (\n        f\"Python {sys.version} on {sys.platform}\\n\"\n        f\"App: {current_app.import_name}\\n\"\n        f\"Instance: {current_app.instance_path}\"\n    )\n    ctx: dict[str, t.Any] = {}\n\n    # Support the regular Python interpreter startup script if someone\n    # is using it.\n    startup = os.environ.get(\"PYTHONSTARTUP\")\n    if startup and os.path.isfile(startup):\n        with open(startup) as f:\n            eval(compile(f.read(), startup, \"exec\"), ctx)\n\n    ctx.update(current_app.make_shell_context())\n\n    # Site, customize, or startup script can set a hook to call when\n    # entering interactive mode. The default one sets up readline with\n    # tab and history completion.\n    interactive_hook = getattr(sys, \"__interactivehook__\", None)\n\n    if interactive_hook is not None:\n        try:\n            import readline\n            from rlcompleter import Completer\n        except ImportError:\n            pass\n        else:\n            # rlcompleter uses __main__.__dict__ by default, which is\n            # flask.__main__. Use the shell context instead.\n            readline.set_completer(Completer(ctx).complete)\n\n        interactive_hook()\n\n    code.interact(banner=banner, local=ctx)",
      "docstring": "Run an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to its configuration.\n\nThis is useful for executing small snippets of management code\nwithout having to manually configure the application.",
      "decorators": [
        "click.command('shell', short_help='Run a shell in the app context.')",
        "with_appcontext"
      ],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.make_shell_context",
          "body": "def make_shell_context(self) -> dict[str, t.Any]:\n    \"\"\"Returns the shell context for an interactive shell for this\n        application.  This runs all the registered shell context\n        processors.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    rv = {'app': self, 'g': g}\n    for processor in self.shell_context_processors:\n        rv.update(processor())\n    return rv"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        }
      ]
    },
    {
      "name": "routes_command",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 1067,
      "end_line_number": 1113,
      "source_code": "def routes_command(sort: str, all_methods: bool) -> None:\n    \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n    rules = list(current_app.url_map.iter_rules())\n\n    if not rules:\n        click.echo(\"No routes were registered.\")\n        return\n\n    ignored_methods = set() if all_methods else {\"HEAD\", \"OPTIONS\"}\n    host_matching = current_app.url_map.host_matching\n    has_domain = any(rule.host if host_matching else rule.subdomain for rule in rules)\n    rows = []\n\n    for rule in rules:\n        row = [\n            rule.endpoint,\n            \", \".join(sorted((rule.methods or set()) - ignored_methods)),\n        ]\n\n        if has_domain:\n            row.append((rule.host if host_matching else rule.subdomain) or \"\")\n\n        row.append(rule.rule)\n        rows.append(row)\n\n    headers = [\"Endpoint\", \"Methods\"]\n    sorts = [\"endpoint\", \"methods\"]\n\n    if has_domain:\n        headers.append(\"Host\" if host_matching else \"Subdomain\")\n        sorts.append(\"domain\")\n\n    headers.append(\"Rule\")\n    sorts.append(\"rule\")\n\n    try:\n        rows.sort(key=itemgetter(sorts.index(sort)))\n    except ValueError:\n        pass\n\n    rows.insert(0, headers)\n    widths = [max(len(row[i]) for row in rows) for i in range(len(headers))]\n    rows.insert(1, [\"-\" * w for w in widths])\n    template = \"  \".join(f\"{{{i}:<{w}}}\" for i, w in enumerate(widths))\n\n    for row in rows:\n        click.echo(template.format(*row))",
      "docstring": "Show all registered routes with endpoints and methods.",
      "decorators": [
        "click.command('routes', short_help='Show the routes for the app.')",
        "click.option('--sort', '-s', type=click.Choice(('endpoint', 'methods', 'domain', 'rule', 'match')), default='endpoint', help=\"Method to sort routes by. 'match' is the order that Flask will match routes when dispatching a request.\")",
        "click.option('--all-methods', is_flag=True, help='Show HEAD and OPTIONS methods.')",
        "with_appcontext"
      ],
      "arguments": [
        "sort",
        "all_methods"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "main",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 1128,
      "end_line_number": 1129,
      "source_code": "def main() -> None:\n    cli.main()",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "cli.main",
          "body": "def main() -> None:\n    cli.main()"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 305,
      "end_line_number": 331,
      "source_code": "def __init__(\n        self,\n        app_import_path: str | None = None,\n        create_app: t.Callable[..., Flask] | None = None,\n        set_debug_flag: bool = True,\n        load_dotenv_defaults: bool = True,\n    ) -> None:\n        #: Optionally the import path for the Flask application.\n        self.app_import_path = app_import_path\n        #: Optionally a function that is passed the script info to create\n        #: the instance of the application.\n        self.create_app = create_app\n        #: A dictionary with arbitrary data that can be associated with\n        #: this script info.\n        self.data: dict[t.Any, t.Any] = {}\n        self.set_debug_flag = set_debug_flag\n\n        self.load_dotenv_defaults = get_load_dotenv(load_dotenv_defaults)\n        \"\"\"Whether default ``.flaskenv`` and ``.env`` files should be loaded.\n\n        ``ScriptInfo`` doesn't load anything, this is for reference when doing\n        the load elsewhere during processing.\n\n        .. versionadded:: 3.1\n        \"\"\"\n\n        self._loaded_app: Flask | None = None",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app_import_path",
        "create_app",
        "set_debug_flag",
        "load_dotenv_defaults"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_load_dotenv",
          "body": "def get_load_dotenv(default: bool=True) -> bool:\n    \"\"\"Get whether the user has disabled loading default dotenv files by\n    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\n    the files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get('FLASK_SKIP_DOTENV')\n    if not val:\n        return default\n    return val.lower() in ('0', 'false', 'no')"
        }
      ]
    },
    {
      "name": "load_app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 333,
      "end_line_number": 372,
      "source_code": "def load_app(self) -> Flask:\n        \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n        if self._loaded_app is not None:\n            return self._loaded_app\n        app: Flask | None = None\n        if self.create_app is not None:\n            app = self.create_app()\n        else:\n            if self.app_import_path:\n                path, name = (\n                    re.split(r\":(?![\\\\/])\", self.app_import_path, maxsplit=1) + [None]\n                )[:2]\n                import_name = prepare_import(path)\n                app = locate_app(import_name, name)\n            else:\n                for path in (\"wsgi.py\", \"app.py\"):\n                    import_name = prepare_import(path)\n                    app = locate_app(import_name, None, raise_if_not_found=False)\n\n                    if app is not None:\n                        break\n\n        if app is None:\n            raise NoAppException(\n                \"Could not locate a Flask application. Use the\"\n                \" 'flask --app' option, 'FLASK_APP' environment\"\n                \" variable, or a 'wsgi.py' or 'app.py' file in the\"\n                \" current directory.\"\n            )\n\n        if self.set_debug_flag:\n            # Update the app's debug flag through the descriptor so that\n            # other values repopulate as well.\n            app.debug = get_debug_flag()\n\n        self._loaded_app = app\n        return app",
      "docstring": "Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_debug_flag",
          "body": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get('FLASK_DEBUG')\n    return bool(val and val.lower() not in {'0', 'false', 'no'})"
        },
        {
          "name": "prepare_import",
          "body": "def prepare_import(path: str) -> str:\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n    fname, ext = os.path.splitext(path)\n    if ext == '.py':\n        path = fname\n    if os.path.basename(path) == '__init__':\n        path = os.path.dirname(path)\n    module_name = []\n    while True:\n        path, name = os.path.split(path)\n        module_name.append(name)\n        if not os.path.exists(os.path.join(path, '__init__.py')):\n            break\n    if sys.path[0] != path:\n        sys.path.insert(0, path)\n    return '.'.join(module_name[::-1])"
        },
        {
          "name": "locate_app",
          "body": "@t.overload\ndef locate_app(module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True]=True) -> Flask:\n    ..."
        },
        {
          "name": "prepare_import",
          "body": "def prepare_import(path: str) -> str:\n    \"\"\"Given a filename this will try to calculate the python path, add it\n    to the search path and return the actual module name that is expected.\n    \"\"\"\n    path = os.path.realpath(path)\n    fname, ext = os.path.splitext(path)\n    if ext == '.py':\n        path = fname\n    if os.path.basename(path) == '__init__':\n        path = os.path.dirname(path)\n    module_name = []\n    while True:\n        path, name = os.path.split(path)\n        module_name.append(name)\n        if not os.path.exists(os.path.join(path, '__init__.py')):\n            break\n    if sys.path[0] != path:\n        sys.path.insert(0, path)\n    return '.'.join(module_name[::-1])"
        },
        {
          "name": "locate_app",
          "body": "@t.overload\ndef locate_app(module_name: str, app_name: str | None, raise_if_not_found: t.Literal[True]=True) -> Flask:\n    ..."
        }
      ]
    },
    {
      "name": "decorator",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 395,
      "end_line_number": 400,
      "source_code": "def decorator(ctx: click.Context, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if not current_app:\n            app = ctx.ensure_object(ScriptInfo).load_app()\n            ctx.with_resource(app.app_context())\n\n        return ctx.invoke(f, *args, **kwargs)",
      "docstring": null,
      "decorators": [
        "click.pass_context"
      ],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "ctx.invoke",
          "body": "def invoke(self, cli: t.Any=None, args: t.Any=None, **kwargs: t.Any) -> Result:\n    \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :param cli: Command object to invoke. Default is the app's\n            :attr:`~flask.app.Flask.cli` group.\n        :param args: List of strings to invoke the command with.\n\n        :return: a :class:`~click.testing.Result` object.\n        \"\"\"\n    if cli is None:\n        cli = self.app.cli\n    if 'obj' not in kwargs:\n        kwargs['obj'] = ScriptInfo(create_app=lambda: self.app)\n    return super().invoke(cli, args, **kwargs)"
        },
        {
          "name": "app.app_context",
          "body": "def app_context(self) -> AppContext:\n    \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    return AppContext(self)"
        }
      ]
    },
    {
      "name": "command",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 413,
      "end_line_number": 427,
      "source_code": "def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Command]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)\n\n        def decorator(f: t.Callable[..., t.Any]) -> click.Command:\n            if wrap_for_ctx:\n                f = with_appcontext(f)\n            return super(AppGroup, self).command(*args, **kwargs)(f)  # type: ignore[no-any-return]\n\n        return decorator",
      "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\nunless it's disabled by passing ``with_appcontext=False``.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "kwargs.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "with_appcontext",
          "body": "def with_appcontext(f: F) -> F:\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.\n\n    Custom commands (and their options) registered under ``app.cli`` or\n    ``blueprint.cli`` will always have an app context available, this\n    decorator is not required in that case.\n\n    .. versionchanged:: 2.2\n        The app context is active for subcommands as well as the\n        decorated callback. The app context is always available to\n        ``app.cli`` command and parameter callbacks.\n    \"\"\"\n\n    @click.pass_context\n    def decorator(ctx: click.Context, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if not current_app:\n            app = ctx.ensure_object(ScriptInfo).load_app()\n            ctx.with_resource(app.app_context())\n        return ctx.invoke(f, *args, **kwargs)\n    return update_wrapper(decorator, f)"
        }
      ]
    },
    {
      "name": "group",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 429,
      "end_line_number": 437,
      "source_code": "def group(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Group]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        \"\"\"\n        kwargs.setdefault(\"cls\", AppGroup)\n        return super().group(*args, **kwargs)",
      "docstring": "This works exactly like the method of the same name on a regular\n:class:`click.Group` but it defaults the group class to\n:class:`AppGroup`.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 563,
      "end_line_number": 598,
      "source_code": "def __init__(\n        self,\n        add_default_commands: bool = True,\n        create_app: t.Callable[..., Flask] | None = None,\n        add_version_option: bool = True,\n        load_dotenv: bool = True,\n        set_debug_flag: bool = True,\n        **extra: t.Any,\n    ) -> None:\n        params: list[click.Parameter] = list(extra.pop(\"params\", None) or ())\n        # Processing is done with option callbacks instead of a group\n        # callback. This allows users to make a custom group callback\n        # without losing the behavior. --env-file must come first so\n        # that it is eagerly evaluated before --app.\n        params.extend((_env_file_option, _app_option, _debug_option))\n\n        if add_version_option:\n            params.append(version_option)\n\n        if \"context_settings\" not in extra:\n            extra[\"context_settings\"] = {}\n\n        extra[\"context_settings\"].setdefault(\"auto_envvar_prefix\", \"FLASK\")\n\n        super().__init__(params=params, **extra)\n\n        self.create_app = create_app\n        self.load_dotenv = load_dotenv\n        self.set_debug_flag = set_debug_flag\n\n        if add_default_commands:\n            self.add_command(run_command)\n            self.add_command(shell_command)\n            self.add_command(routes_command)\n\n        self._loaded_plugin_commands = False",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "add_default_commands",
        "create_app",
        "add_version_option",
        "load_dotenv",
        "set_debug_flag"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "params.extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extra.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "_load_plugin_commands",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 600,
      "end_line_number": 615,
      "source_code": "def _load_plugin_commands(self) -> None:\n        if self._loaded_plugin_commands:\n            return\n\n        if sys.version_info >= (3, 10):\n            from importlib import metadata\n        else:\n            # Use a backport on Python < 3.10. We technically have\n            # importlib.metadata on 3.8+, but the API changed in 3.10,\n            # so use the backport for consistency.\n            import importlib_metadata as metadata  # pyright: ignore\n\n        for ep in metadata.entry_points(group=\"flask.commands\"):\n            self.add_command(ep.load(), ep.name)\n\n        self._loaded_plugin_commands = True",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "ep.load",
          "body": "def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    return self.loads(fp.read(), **kwargs)"
        }
      ]
    },
    {
      "name": "get_command",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 617,
      "end_line_number": 642,
      "source_code": "def get_command(self, ctx: click.Context, name: str) -> click.Command | None:\n        self._load_plugin_commands()\n        # Look up built-in and plugin commands, which should be\n        # available even if the app fails to load.\n        rv = super().get_command(ctx, name)\n\n        if rv is not None:\n            return rv\n\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Look up commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            app = info.load_app()\n        except NoAppException as e:\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n            return None\n\n        # Push an app context for the loaded app unless it is already\n        # active somehow. This makes the context available to parameter\n        # and command callbacks without needing @with_appcontext.\n        if not current_app or current_app._get_current_object() is not app:  # type: ignore[attr-defined]\n            ctx.with_resource(app.app_context())\n\n        return app.cli.get_command(ctx, name)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "ctx",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._load_plugin_commands",
          "body": "def _load_plugin_commands(self) -> None:\n    if self._loaded_plugin_commands:\n        return\n    if sys.version_info >= (3, 10):\n        from importlib import metadata\n    else:\n        import importlib_metadata as metadata\n    for ep in metadata.entry_points(group='flask.commands'):\n        self.add_command(ep.load(), ep.name)\n    self._loaded_plugin_commands = True"
        },
        {
          "name": "app.cli.get_command",
          "body": "def get_command(self, ctx: click.Context, name: str) -> click.Command | None:\n    self._load_plugin_commands()\n    rv = super().get_command(ctx, name)\n    if rv is not None:\n        return rv\n    info = ctx.ensure_object(ScriptInfo)\n    try:\n        app = info.load_app()\n    except NoAppException as e:\n        click.secho(f'Error: {e.format_message()}\\n', err=True, fg='red')\n        return None\n    if not current_app or current_app._get_current_object() is not app:\n        ctx.with_resource(app.app_context())\n    return app.cli.get_command(ctx, name)"
        },
        {
          "name": "info.load_app",
          "body": "def load_app(self) -> Flask:\n    \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n    if self._loaded_app is not None:\n        return self._loaded_app\n    app: Flask | None = None\n    if self.create_app is not None:\n        app = self.create_app()\n    elif self.app_import_path:\n        path, name = (re.split(':(?![\\\\\\\\/])', self.app_import_path, maxsplit=1) + [None])[:2]\n        import_name = prepare_import(path)\n        app = locate_app(import_name, name)\n    else:\n        for path in ('wsgi.py', 'app.py'):\n            import_name = prepare_import(path)\n            app = locate_app(import_name, None, raise_if_not_found=False)\n            if app is not None:\n                break\n    if app is None:\n        raise NoAppException(\"Could not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory.\")\n    if self.set_debug_flag:\n        app.debug = get_debug_flag()\n    self._loaded_app = app\n    return app"
        },
        {
          "name": "app.app_context",
          "body": "def app_context(self) -> AppContext:\n    \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    return AppContext(self)"
        }
      ]
    },
    {
      "name": "list_commands",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 644,
      "end_line_number": 663,
      "source_code": "def list_commands(self, ctx: click.Context) -> list[str]:\n        self._load_plugin_commands()\n        # Start with the built-in and plugin commands.\n        rv = set(super().list_commands(ctx))\n        info = ctx.ensure_object(ScriptInfo)\n\n        # Add commands provided by the app, showing an error and\n        # continuing if the app couldn't be loaded.\n        try:\n            rv.update(info.load_app().cli.list_commands(ctx))\n        except NoAppException as e:\n            # When an app couldn't be loaded, show the error message\n            # without the traceback.\n            click.secho(f\"Error: {e.format_message()}\\n\", err=True, fg=\"red\")\n        except Exception:\n            # When any other errors occurred during loading, show the\n            # full traceback.\n            click.secho(f\"{traceback.format_exc()}\\n\", err=True, fg=\"red\")\n\n        return sorted(rv)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "ctx"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._load_plugin_commands",
          "body": "def _load_plugin_commands(self) -> None:\n    if self._loaded_plugin_commands:\n        return\n    if sys.version_info >= (3, 10):\n        from importlib import metadata\n    else:\n        import importlib_metadata as metadata\n    for ep in metadata.entry_points(group='flask.commands'):\n        self.add_command(ep.load(), ep.name)\n    self._loaded_plugin_commands = True"
        },
        {
          "name": "info.load_app",
          "body": "def load_app(self) -> Flask:\n    \"\"\"Loads the Flask app (if not yet loaded) and returns it.  Calling\n        this multiple times will just result in the already loaded app to\n        be returned.\n        \"\"\"\n    if self._loaded_app is not None:\n        return self._loaded_app\n    app: Flask | None = None\n    if self.create_app is not None:\n        app = self.create_app()\n    elif self.app_import_path:\n        path, name = (re.split(':(?![\\\\\\\\/])', self.app_import_path, maxsplit=1) + [None])[:2]\n        import_name = prepare_import(path)\n        app = locate_app(import_name, name)\n    else:\n        for path in ('wsgi.py', 'app.py'):\n            import_name = prepare_import(path)\n            app = locate_app(import_name, None, raise_if_not_found=False)\n            if app is not None:\n                break\n    if app is None:\n        raise NoAppException(\"Could not locate a Flask application. Use the 'flask --app' option, 'FLASK_APP' environment variable, or a 'wsgi.py' or 'app.py' file in the current directory.\")\n    if self.set_debug_flag:\n        app.debug = get_debug_flag()\n    self._loaded_app = app\n    return app"
        }
      ]
    },
    {
      "name": "make_context",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 665,
      "end_line_number": 684,
      "source_code": "def make_context(\n        self,\n        info_name: str | None,\n        args: list[str],\n        parent: click.Context | None = None,\n        **extra: t.Any,\n    ) -> click.Context:\n        # Set a flag to tell app.run to become a no-op. If app.run was\n        # not in a __name__ == __main__ guard, it would start the server\n        # when importing, blocking whatever command is being called.\n        os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n\n        if \"obj\" not in extra and \"obj\" not in self.context_settings:\n            extra[\"obj\"] = ScriptInfo(\n                create_app=self.create_app,\n                set_debug_flag=self.set_debug_flag,\n                load_dotenv_defaults=self.load_dotenv,\n            )\n\n        return super().make_context(info_name, args, parent=parent, **extra)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "info_name",
        "args",
        "parent"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "parse_args",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 686,
      "end_line_number": 694,
      "source_code": "def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:\n        if not args and self.no_args_is_help:\n            # Attempt to load --env-file and --app early in case they\n            # were given as env vars. Otherwise no_args_is_help will not\n            # see commands from app.cli.\n            _env_file_option.handle_parse_result(ctx, {}, [])\n            _app_option.handle_parse_result(ctx, {}, [])\n\n        return super().parse_args(ctx, args)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "ctx",
        "args"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 794,
      "end_line_number": 795,
      "source_code": "def __init__(self) -> None:\n        self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "convert",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 797,
      "end_line_number": 831,
      "source_code": "def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        try:\n            import ssl\n        except ImportError:\n            raise click.BadParameter(\n                'Using \"--cert\" requires Python to be compiled with SSL support.',\n                ctx,\n                param,\n            ) from None\n\n        try:\n            return self.path_type(value, param, ctx)\n        except click.BadParameter:\n            value = click.STRING(value, param, ctx).lower()\n\n            if value == \"adhoc\":\n                try:\n                    import cryptography  # noqa: F401\n                except ImportError:\n                    raise click.BadParameter(\n                        \"Using ad-hoc certificates requires the cryptography library.\",\n                        ctx,\n                        param,\n                    ) from None\n\n                return value\n\n            obj = import_string(value, silent=True)\n\n            if isinstance(obj, ssl.SSLContext):\n                return obj\n\n            raise",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value",
        "param",
        "ctx"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "convert",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 879,
      "end_line_number": 885,
      "source_code": "def convert(\n        self, value: t.Any, param: click.Parameter | None, ctx: click.Context | None\n    ) -> t.Any:\n        items = self.split_envvar_value(value)\n        # can't call no-arg super() inside list comprehension until Python 3.12\n        super_convert = super().convert\n        return [super_convert(item, param, ctx) for item in items]",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value",
        "param",
        "ctx"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 422,
      "end_line_number": 425,
      "source_code": "def decorator(f: t.Callable[..., t.Any]) -> click.Command:\n            if wrap_for_ctx:\n                f = with_appcontext(f)\n            return super(AppGroup, self).command(*args, **kwargs)(f)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "with_appcontext",
          "body": "def with_appcontext(f: F) -> F:\n    \"\"\"Wraps a callback so that it's guaranteed to be executed with the\n    script's application context.\n\n    Custom commands (and their options) registered under ``app.cli`` or\n    ``blueprint.cli`` will always have an app context available, this\n    decorator is not required in that case.\n\n    .. versionchanged:: 2.2\n        The app context is active for subcommands as well as the\n        decorated callback. The app context is always available to\n        ``app.cli`` command and parameter callbacks.\n    \"\"\"\n\n    @click.pass_context\n    def decorator(ctx: click.Context, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        if not current_app:\n            app = ctx.ensure_object(ScriptInfo).load_app()\n            ctx.with_resource(app.app_context())\n        return ctx.invoke(f, *args, **kwargs)\n    return update_wrapper(decorator, f)"
        }
      ]
    },
    {
      "name": "app",
      "module": "cli",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\cli.py",
      "line_number": 969,
      "end_line_number": 972,
      "source_code": "def app(\n                environ: WSGIEnvironment, start_response: StartResponse\n            ) -> cabc.Iterable[bytes]:\n                raise err from None",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "environ",
        "start_response"
      ],
      "imports": [
        "__future__.annotations",
        "ast",
        "collections.abc",
        "importlib.metadata",
        "inspect",
        "os",
        "platform",
        "re",
        "sys",
        "traceback",
        "typing",
        "functools.update_wrapper",
        "operator.itemgetter",
        "types.ModuleType",
        "click",
        "click.core.ParameterSource",
        "werkzeug.run_simple",
        "werkzeug.serving.is_running_from_reloader",
        "werkzeug.utils.import_string",
        "globals.current_app",
        "helpers.get_debug_flag",
        "helpers.get_load_dotenv",
        "ssl",
        "_typeshed.wsgi.StartResponse",
        "_typeshed.wsgi.WSGIApplication",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        ".Flask",
        ".Flask",
        "code",
        "dotenv",
        "dotenv",
        "ssl",
        "importlib.metadata",
        "importlib_metadata",
        "ssl",
        "readline",
        "rlcompleter.Completer",
        "cryptography"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 23,
      "end_line_number": 27,
      "source_code": "def __init__(\n        self, name: str, get_converter: t.Callable[[t.Any], T] | None = None\n    ) -> None:\n        self.__name__ = name\n        self.get_converter = get_converter",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "get_converter"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__get__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 30,
      "end_line_number": 30,
      "source_code": "def __get__(self, obj: None, owner: None) -> te.Self: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "self",
        "obj",
        "owner"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__get__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 33,
      "end_line_number": 33,
      "source_code": "def __get__(self, obj: App, owner: type[App]) -> T: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "self",
        "obj",
        "owner"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__get__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 35,
      "end_line_number": 44,
      "source_code": "def __get__(self, obj: App | None, owner: type[App] | None = None) -> T | te.Self:\n        if obj is None:\n            return self\n\n        rv = obj.config[self.__name__]\n\n        if self.get_converter is not None:\n            rv = self.get_converter(rv)\n\n        return rv",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "obj",
        "owner"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__set__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 46,
      "end_line_number": 47,
      "source_code": "def __set__(self, obj: App, value: t.Any) -> None:\n        obj.config[self.__name__] = value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "obj",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 94,
      "end_line_number": 100,
      "source_code": "def __init__(\n        self,\n        root_path: str | os.PathLike[str],\n        defaults: dict[str, t.Any] | None = None,\n    ) -> None:\n        super().__init__(defaults or {})\n        self.root_path = root_path",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "root_path",
        "defaults"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "from_envvar",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 102,
      "end_line_number": 124,
      "source_code": "def from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n        \"\"\"Loads a configuration from an environment variable pointing to\n        a configuration file.  This is basically just a shortcut with nicer\n        error messages for this line of code::\n\n            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n        :param variable_name: name of the environment variable\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n        \"\"\"\n        rv = os.environ.get(variable_name)\n        if not rv:\n            if silent:\n                return False\n            raise RuntimeError(\n                f\"The environment variable {variable_name!r} is not set\"\n                \" and as such configuration could not be loaded. Set\"\n                \" this variable and make it point to a configuration\"\n                \" file\"\n            )\n        return self.from_pyfile(rv, silent=silent)",
      "docstring": "Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code::\n\n    app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n\n:param variable_name: name of the environment variable\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.",
      "decorators": [],
      "arguments": [
        "self",
        "variable_name",
        "silent"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.from_pyfile",
          "body": "def from_pyfile(self, filename: str | os.PathLike[str], silent: bool=False) -> bool:\n    \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        \"\"\"\n    filename = os.path.join(self.root_path, filename)\n    d = types.ModuleType('config')\n    d.__file__ = filename\n    try:\n        with open(filename, mode='rb') as config_file:\n            exec(compile(config_file.read(), filename, 'exec'), d.__dict__)\n    except OSError as e:\n        if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n            return False\n        e.strerror = f'Unable to load configuration file ({e.strerror})'\n        raise\n    self.from_object(d)\n    return True"
        }
      ]
    },
    {
      "name": "from_prefixed_env",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 126,
      "end_line_number": 185,
      "source_code": "def from_prefixed_env(\n        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads\n    ) -> bool:\n        \"\"\"Load any environment variables that start with ``FLASK_``,\n        dropping the prefix from the env key for the config key. Values\n        are passed through a loading function to attempt to convert them\n        to more specific types than strings.\n\n        Keys are loaded in :func:`sorted` order.\n\n        The default loading function attempts to parse values as any\n        valid JSON type, including dicts and lists.\n\n        Specific items in nested dicts can be set by separating the\n        keys with double underscores (``__``). If an intermediate key\n        doesn't exist, it will be initialized to an empty dict.\n\n        :param prefix: Load env vars that start with this prefix,\n            separated with an underscore (``_``).\n        :param loads: Pass each string value to this function and use\n            the returned value as the config value. If any error is\n            raised it is ignored and the value remains a string. The\n            default is :func:`json.loads`.\n\n        .. versionadded:: 2.1\n        \"\"\"\n        prefix = f\"{prefix}_\"\n\n        for key in sorted(os.environ):\n            if not key.startswith(prefix):\n                continue\n\n            value = os.environ[key]\n            key = key.removeprefix(prefix)\n\n            try:\n                value = loads(value)\n            except Exception:\n                # Keep the value as a string if loading failed.\n                pass\n\n            if \"__\" not in key:\n                # A non-nested key, set directly.\n                self[key] = value\n                continue\n\n            # Traverse nested dictionaries with keys separated by \"__\".\n            current = self\n            *parts, tail = key.split(\"__\")\n\n            for part in parts:\n                # If an intermediate dict does not exist, create it.\n                if part not in current:\n                    current[part] = {}\n\n                current = current[part]\n\n            current[tail] = value\n\n        return True",
      "docstring": "Load any environment variables that start with ``FLASK_``,\ndropping the prefix from the env key for the config key. Values\nare passed through a loading function to attempt to convert them\nto more specific types than strings.\n\nKeys are loaded in :func:`sorted` order.\n\nThe default loading function attempts to parse values as any\nvalid JSON type, including dicts and lists.\n\nSpecific items in nested dicts can be set by separating the\nkeys with double underscores (``__``). If an intermediate key\ndoesn't exist, it will be initialized to an empty dict.\n\n:param prefix: Load env vars that start with this prefix,\n    separated with an underscore (``_``).\n:param loads: Pass each string value to this function and use\n    the returned value as the config value. If any error is\n    raised it is ignored and the value remains a string. The\n    default is :func:`json.loads`.\n\n.. versionadded:: 2.1",
      "decorators": [],
      "arguments": [
        "self",
        "prefix"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "loads",
          "body": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "from_pyfile",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 187,
      "end_line_number": 216,
      "source_code": "def from_pyfile(\n        self, filename: str | os.PathLike[str], silent: bool = False\n    ) -> bool:\n        \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.\n\n        :param filename: the filename of the config.  This can either be an\n                         absolute filename or a filename relative to the\n                         root path.\n        :param silent: set to ``True`` if you want silent failure for missing\n                       files.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 0.7\n           `silent` parameter.\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n        d = types.ModuleType(\"config\")\n        d.__file__ = filename\n        try:\n            with open(filename, mode=\"rb\") as config_file:\n                exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                return False\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n        self.from_object(d)\n        return True",
      "docstring": "Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n:meth:`from_object` function.\n\n:param filename: the filename of the config.  This can either be an\n                 absolute filename or a filename relative to the\n                 root path.\n:param silent: set to ``True`` if you want silent failure for missing\n               files.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionadded:: 0.7\n   `silent` parameter.",
      "decorators": [],
      "arguments": [
        "self",
        "filename",
        "silent"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.from_object",
          "body": "def from_object(self, obj: object | str) -> None:\n    \"\"\"Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        Nothing is done to the object before loading. If the object is a\n        class and has ``@property`` attributes, it needs to be\n        instantiated before being passed to this method.\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        \"\"\"\n    if isinstance(obj, str):\n        obj = import_string(obj)\n    for key in dir(obj):\n        if key.isupper():\n            self[key] = getattr(obj, key)"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        }
      ]
    },
    {
      "name": "from_object",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 218,
      "end_line_number": 254,
      "source_code": "def from_object(self, obj: object | str) -> None:\n        \"\"\"Updates the values from the given object.  An object can be of one\n        of the following two types:\n\n        -   a string: in this case the object with that name will be imported\n        -   an actual object reference: that object is used directly\n\n        Objects are usually either modules or classes. :meth:`from_object`\n        loads only the uppercase attributes of the module/class. A ``dict``\n        object will not work with :meth:`from_object` because the keys of a\n        ``dict`` are not attributes of the ``dict`` class.\n\n        Example of module-based configuration::\n\n            app.config.from_object('yourapplication.default_config')\n            from yourapplication import default_config\n            app.config.from_object(default_config)\n\n        Nothing is done to the object before loading. If the object is a\n        class and has ``@property`` attributes, it needs to be\n        instantiated before being passed to this method.\n\n        You should not use this function to load the actual configuration but\n        rather configuration defaults.  The actual config should be loaded\n        with :meth:`from_pyfile` and ideally from a location not within the\n        package because the package might be installed system wide.\n\n        See :ref:`config-dev-prod` for an example of class-based configuration\n        using :meth:`from_object`.\n\n        :param obj: an import name or object\n        \"\"\"\n        if isinstance(obj, str):\n            obj = import_string(obj)\n        for key in dir(obj):\n            if key.isupper():\n                self[key] = getattr(obj, key)",
      "docstring": "Updates the values from the given object.  An object can be of one\nof the following two types:\n\n-   a string: in this case the object with that name will be imported\n-   an actual object reference: that object is used directly\n\nObjects are usually either modules or classes. :meth:`from_object`\nloads only the uppercase attributes of the module/class. A ``dict``\nobject will not work with :meth:`from_object` because the keys of a\n``dict`` are not attributes of the ``dict`` class.\n\nExample of module-based configuration::\n\n    app.config.from_object('yourapplication.default_config')\n    from yourapplication import default_config\n    app.config.from_object(default_config)\n\nNothing is done to the object before loading. If the object is a\nclass and has ``@property`` attributes, it needs to be\ninstantiated before being passed to this method.\n\nYou should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith :meth:`from_pyfile` and ideally from a location not within the\npackage because the package might be installed system wide.\n\nSee :ref:`config-dev-prod` for an example of class-based configuration\nusing :meth:`from_object`.\n\n:param obj: an import name or object",
      "decorators": [],
      "arguments": [
        "self",
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "from_file",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 256,
      "end_line_number": 302,
      "source_code": "def from_file(\n        self,\n        filename: str | os.PathLike[str],\n        load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]],\n        silent: bool = False,\n        text: bool = True,\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import tomllib\n            app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param text: Open the file in text or binary mode.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionchanged:: 2.3\n            The ``text`` parameter was added.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, \"r\" if text else \"rb\") as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)",
      "docstring": "Update the values in the config from a file that is loaded\nusing the ``load`` parameter. The loaded data is passed to the\n:meth:`from_mapping` method.\n\n.. code-block:: python\n\n    import json\n    app.config.from_file(\"config.json\", load=json.load)\n\n    import tomllib\n    app.config.from_file(\"config.toml\", load=tomllib.load, text=False)\n\n:param filename: The path to the data file. This can be an\n    absolute path or relative to the config root path.\n:param load: A callable that takes a file handle and returns a\n    mapping of loaded data from the file.\n:type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n    implements a ``read`` method.\n:param silent: Ignore the file if it doesn't exist.\n:param text: Open the file in text or binary mode.\n:return: ``True`` if the file was loaded successfully.\n\n.. versionchanged:: 2.3\n    The ``text`` parameter was added.\n\n.. versionadded:: 2.0",
      "decorators": [],
      "arguments": [
        "self",
        "filename",
        "load",
        "silent",
        "text"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.from_mapping",
          "body": "def from_mapping(self, mapping: t.Mapping[str, t.Any] | None=None, **kwargs: t.Any) -> bool:\n    \"\"\"Updates the config like :meth:`update` ignoring items with\n        non-upper keys.\n\n        :return: Always returns ``True``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    mappings: dict[str, t.Any] = {}\n    if mapping is not None:\n        mappings.update(mapping)\n    mappings.update(kwargs)\n    for key, value in mappings.items():\n        if key.isupper():\n            self[key] = value\n    return True"
        },
        {
          "name": "open",
          "body": "def open(self, *args: t.Any, buffered: bool=False, follow_redirects: bool=False, **kwargs: t.Any) -> TestResponse:\n    if args and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)):\n        if isinstance(args[0], werkzeug.test.EnvironBuilder):\n            builder = copy(args[0])\n            builder.environ_base = self._copy_environ(builder.environ_base or {})\n            request = builder.get_request()\n        elif isinstance(args[0], dict):\n            request = EnvironBuilder.from_environ(args[0], app=self.application, environ_base=self._copy_environ({})).get_request()\n        else:\n            request = copy(args[0])\n            request.environ = self._copy_environ(request.environ)\n    else:\n        request = self._request_from_builder_args(args, kwargs)\n    self._context_stack.close()\n    response = super().open(request, buffered=buffered, follow_redirects=follow_redirects)\n    response.json_module = self.application.json\n    while self._new_contexts:\n        cm = self._new_contexts.pop()\n        self._context_stack.enter_context(cm)\n    return response"
        },
        {
          "name": "load",
          "body": "def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    return self.loads(fp.read(), **kwargs)"
        }
      ]
    },
    {
      "name": "from_mapping",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 304,
      "end_line_number": 321,
      "source_code": "def from_mapping(\n        self, mapping: t.Mapping[str, t.Any] | None = None, **kwargs: t.Any\n    ) -> bool:\n        \"\"\"Updates the config like :meth:`update` ignoring items with\n        non-upper keys.\n\n        :return: Always returns ``True``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        mappings: dict[str, t.Any] = {}\n        if mapping is not None:\n            mappings.update(mapping)\n        mappings.update(kwargs)\n        for key, value in mappings.items():\n            if key.isupper():\n                self[key] = value\n        return True",
      "docstring": "Updates the config like :meth:`update` ignoring items with\nnon-upper keys.\n\n:return: Always returns ``True``.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self",
        "mapping"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_namespace",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 323,
      "end_line_number": 364,
      "source_code": "def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::\n\n            app.config['IMAGE_STORE_TYPE'] = 'fs'\n            app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n            image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\n        The resulting dictionary `image_store_config` would look like::\n\n            {\n                'type': 'fs',\n                'path': '/var/app/images',\n                'base_url': 'http://img.website.com'\n            }\n\n        This is often useful when configuration options map directly to\n        keyword arguments in functions or class constructors.\n\n        :param namespace: a configuration namespace\n        :param lowercase: a flag indicating if the keys of the resulting\n                          dictionary should be lowercase\n        :param trim_namespace: a flag indicating if the keys of the resulting\n                          dictionary should not include the namespace\n\n        .. versionadded:: 0.11\n        \"\"\"\n        rv = {}\n        for k, v in self.items():\n            if not k.startswith(namespace):\n                continue\n            if trim_namespace:\n                key = k[len(namespace) :]\n            else:\n                key = k\n            if lowercase:\n                key = key.lower()\n            rv[key] = v\n        return rv",
      "docstring": "Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage::\n\n    app.config['IMAGE_STORE_TYPE'] = 'fs'\n    app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n    app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n    image_store_config = app.config.get_namespace('IMAGE_STORE_')\n\nThe resulting dictionary `image_store_config` would look like::\n\n    {\n        'type': 'fs',\n        'path': '/var/app/images',\n        'base_url': 'http://img.website.com'\n    }\n\nThis is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors.\n\n:param namespace: a configuration namespace\n:param lowercase: a flag indicating if the keys of the resulting\n                  dictionary should be lowercase\n:param trim_namespace: a flag indicating if the keys of the resulting\n                  dictionary should not include the namespace\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self",
        "namespace",
        "lowercase",
        "trim_namespace"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__repr__",
      "module": "config",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\config.py",
      "line_number": 366,
      "end_line_number": 367,
      "source_code": "def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {dict.__repr__(self)}>\"",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "errno",
        "json",
        "os",
        "types",
        "typing",
        "werkzeug.utils.import_string",
        "typing_extensions",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "dict.__repr__",
          "body": "def __repr__(self) -> str:\n    return f'<{type(self).__name__} {dict.__repr__(self)}>'"
        }
      ]
    },
    {
      "name": "after_this_request",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 117,
      "end_line_number": 149,
      "source_code": "def after_this_request(\n    f: ft.AfterRequestCallable[t.Any],\n) -> ft.AfterRequestCallable[t.Any]:\n    \"\"\"Executes a function after this request.  This is useful to modify\n    response objects.  The function is passed the response object and has\n    to return the same or a new one.\n\n    Example::\n\n        @app.route('/')\n        def index():\n            @after_this_request\n            def add_header(response):\n                response.headers['X-Foo'] = 'Parachute'\n                return response\n            return 'Hello World!'\n\n    This is more useful if a function other than the view function wants to\n    modify a response.  For instance think of a decorator that wants to add\n    some headers without converting the return value into a response object.\n\n    .. versionadded:: 0.9\n    \"\"\"\n    ctx = _cv_request.get(None)\n\n    if ctx is None:\n        raise RuntimeError(\n            \"'after_this_request' can only be used when a request\"\n            \" context is active, such as in a view function.\"\n        )\n\n    ctx._after_request_functions.append(f)\n    return f",
      "docstring": "Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one.\n\nExample::\n\n    @app.route('/')\n    def index():\n        @after_this_request\n        def add_header(response):\n            response.headers['X-Foo'] = 'Parachute'\n            return response\n        return 'Hello World!'\n\nThis is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "copy_current_request_context",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 155,
      "end_line_number": 193,
      "source_code": "def copy_current_request_context(f: F) -> F:\n    \"\"\"A helper function that decorates a function to retain the current\n    request context.  This is useful when working with greenlets.  The moment\n    the function is decorated a copy of the request context is created and\n    then pushed when the function is called.  The current session is also\n    included in the copied request context.\n\n    Example::\n\n        import gevent\n        from flask import copy_current_request_context\n\n        @app.route('/')\n        def index():\n            @copy_current_request_context\n            def do_some_work():\n                # do some work here, it can access flask.request or\n                # flask.session like you would otherwise in the view function.\n                ...\n            gevent.spawn(do_some_work)\n            return 'Regular response'\n\n    .. versionadded:: 0.10\n    \"\"\"\n    ctx = _cv_request.get(None)\n\n    if ctx is None:\n        raise RuntimeError(\n            \"'copy_current_request_context' can only be used when a\"\n            \" request context is active, such as in a view function.\"\n        )\n\n    ctx = ctx.copy()\n\n    def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n        with ctx:  # type: ignore[union-attr]\n            return ctx.app.ensure_sync(f)(*args, **kwargs)  # type: ignore[union-attr]\n\n    return update_wrapper(wrapper, f)",
      "docstring": "A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called.  The current session is also\nincluded in the copied request context.\n\nExample::\n\n    import gevent\n    from flask import copy_current_request_context\n\n    @app.route('/')\n    def index():\n        @copy_current_request_context\n        def do_some_work():\n            # do some work here, it can access flask.request or\n            # flask.session like you would otherwise in the view function.\n            ...\n        gevent.spawn(do_some_work)\n        return 'Regular response'\n\n.. versionadded:: 0.10",
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "ctx.copy",
          "body": "def copy(self) -> RequestContext:\n    \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        \"\"\"\n    return self.__class__(self.app, environ=self.request.environ, request=self.request, session=self.session)"
        },
        {
          "name": "ctx.app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "has_request_context",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 196,
      "end_line_number": 225,
      "source_code": "def has_request_context() -> bool:\n    \"\"\"If you have code that wants to test if a request context is there or\n    not this function can be used.  For instance, you may want to take advantage\n    of request information if the request object is available, but fail\n    silently if it is unavailable.\n\n    ::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and has_request_context():\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    Alternatively you can also just test any of the context bound objects\n    (such as :class:`request` or :class:`g`) for truthness::\n\n        class User(db.Model):\n\n            def __init__(self, username, remote_addr=None):\n                self.username = username\n                if remote_addr is None and request:\n                    remote_addr = request.remote_addr\n                self.remote_addr = remote_addr\n\n    .. versionadded:: 0.7\n    \"\"\"\n    return _cv_request.get(None) is not None",
      "docstring": "If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable.\n\n::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and has_request_context():\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\nAlternatively you can also just test any of the context bound objects\n(such as :class:`request` or :class:`g`) for truthness::\n\n    class User(db.Model):\n\n        def __init__(self, username, remote_addr=None):\n            self.username = username\n            if remote_addr is None and request:\n                remote_addr = request.remote_addr\n            self.remote_addr = remote_addr\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "has_app_context",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 228,
      "end_line_number": 235,
      "source_code": "def has_app_context() -> bool:\n    \"\"\"Works like :func:`has_request_context` but for the application\n    context.  You can also just do a boolean check on the\n    :data:`current_app` object instead.\n\n    .. versionadded:: 0.9\n    \"\"\"\n    return _cv_app.get(None) is not None",
      "docstring": "Works like :func:`has_request_context` but for the application\ncontext.  You can also just do a boolean check on the\n:data:`current_app` object instead.\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "__getattr__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 52,
      "end_line_number": 56,
      "source_code": "def __getattr__(self, name: str) -> t.Any:\n        try:\n            return self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__setattr__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 58,
      "end_line_number": 59,
      "source_code": "def __setattr__(self, name: str, value: t.Any) -> None:\n        self.__dict__[name] = value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__delattr__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 61,
      "end_line_number": 65,
      "source_code": "def __delattr__(self, name: str) -> None:\n        try:\n            del self.__dict__[name]\n        except KeyError:\n            raise AttributeError(name) from None",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 67,
      "end_line_number": 76,
      "source_code": "def get(self, name: str, default: t.Any | None = None) -> t.Any:\n        \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return self.__dict__.get(name, default)",
      "docstring": "Get an attribute by name, or a default value. Like\n:meth:`dict.get`.\n\n:param name: Name of attribute to get.\n:param default: Value to return if the attribute is not present.\n\n.. versionadded:: 0.10",
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.__dict__.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "pop",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 78,
      "end_line_number": 90,
      "source_code": "def pop(self, name: str, default: t.Any = _sentinel) -> t.Any:\n        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        if default is _sentinel:\n            return self.__dict__.pop(name)\n        else:\n            return self.__dict__.pop(name, default)",
      "docstring": "Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n:param name: Name of attribute to pop.\n:param default: Value to return if the attribute is not present,\n    instead of raising a ``KeyError``.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.__dict__.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "self.__dict__.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "setdefault",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 92,
      "end_line_number": 102,
      "source_code": "def setdefault(self, name: str, default: t.Any = None) -> t.Any:\n        \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.__dict__.setdefault(name, default)",
      "docstring": "Get the value of an attribute if it is present, otherwise\nset and return a default value. Like :meth:`dict.setdefault`.\n\n:param name: Name of attribute to get.\n:param default: Value to set and return if the attribute is not\n    present.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.__dict__.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "__contains__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 104,
      "end_line_number": 105,
      "source_code": "def __contains__(self, item: str) -> bool:\n        return item in self.__dict__",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "item"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__iter__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 107,
      "end_line_number": 108,
      "source_code": "def __iter__(self) -> t.Iterator[str]:\n        return iter(self.__dict__)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__repr__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 110,
      "end_line_number": 114,
      "source_code": "def __repr__(self) -> str:\n        ctx = _cv_app.get(None)\n        if ctx is not None:\n            return f\"<flask.g of '{ctx.app.name}'>\"\n        return object.__repr__(self)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "object.__repr__",
          "body": "def __repr__(self) -> str:\n    return f'<{type(self).__name__} {dict.__repr__(self)}>'"
        }
      ]
    },
    {
      "name": "wrapper",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 189,
      "end_line_number": 191,
      "source_code": "def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n        with ctx:  # type: ignore[union-attr]\n            return ctx.app.ensure_sync(f)(*args, **kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "ctx.app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 245,
      "end_line_number": 249,
      "source_code": "def __init__(self, app: Flask) -> None:\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g: _AppCtxGlobals = app.app_ctx_globals_class()\n        self._cv_tokens: list[contextvars.Token[AppContext]] = []",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.create_url_adapter",
          "body": "def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n    \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n\n        .. versionchanged:: 0.9\n           This can be called outside a request when the URL adapter is created\n           for an application context.\n\n        .. versionadded:: 0.6\n        \"\"\"\n    if request is not None:\n        if (trusted_hosts := self.config['TRUSTED_HOSTS']) is not None:\n            request.trusted_hosts = trusted_hosts\n        request.host = get_host(request.environ, request.trusted_hosts)\n        subdomain = None\n        server_name = self.config['SERVER_NAME']\n        if self.url_map.host_matching:\n            server_name = None\n        elif not self.subdomain_matching:\n            subdomain = self.url_map.default_subdomain or ''\n        return self.url_map.bind_to_environ(request.environ, server_name=server_name, subdomain=subdomain)\n    if self.config['SERVER_NAME'] is not None:\n        return self.url_map.bind(self.config['SERVER_NAME'], script_name=self.config['APPLICATION_ROOT'], url_scheme=self.config['PREFERRED_URL_SCHEME'])\n    return None"
        }
      ]
    },
    {
      "name": "push",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 251,
      "end_line_number": 254,
      "source_code": "def push(self) -> None:\n        \"\"\"Binds the app context to the current context.\"\"\"\n        self._cv_tokens.append(_cv_app.set(self))\n        appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)",
      "docstring": "Binds the app context to the current context.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "pop",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 256,
      "end_line_number": 272,
      "source_code": "def pop(self, exc: BaseException | None = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the app context.\"\"\"\n        try:\n            if len(self._cv_tokens) == 1:\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_appcontext(exc)\n        finally:\n            ctx = _cv_app.get()\n            _cv_app.reset(self._cv_tokens.pop())\n\n        if ctx is not self:\n            raise AssertionError(\n                f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"\n            )\n\n        appcontext_popped.send(self.app, _async_wrapper=self.app.ensure_sync)",
      "docstring": "Pops the app context.",
      "decorators": [],
      "arguments": [
        "self",
        "exc"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.app.do_teardown_appcontext",
          "body": "def do_teardown_appcontext(self, exc: BaseException | None=_sentinel) -> None:\n    \"\"\"Called right before the application context is popped.\n\n        When handling a request, the application context is popped\n        after the request context. See :meth:`do_teardown_request`.\n\n        This calls all functions decorated with\n        :meth:`teardown_appcontext`. Then the\n        :data:`appcontext_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    if exc is _sentinel:\n        exc = sys.exc_info()[1]\n    for func in reversed(self.teardown_appcontext_funcs):\n        self.ensure_sync(func)(exc)\n    appcontext_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)"
        },
        {
          "name": "self._cv_tokens.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "__enter__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 274,
      "end_line_number": 276,
      "source_code": "def __enter__(self) -> AppContext:\n        self.push()\n        return self",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.push",
          "body": "def push(self) -> None:\n    \"\"\"Binds the app context to the current context.\"\"\"\n    self._cv_tokens.append(_cv_app.set(self))\n    appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)"
        }
      ]
    },
    {
      "name": "__exit__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 278,
      "end_line_number": 284,
      "source_code": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.pop(exc_value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "exc_type",
        "exc_value",
        "tb"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 309,
      "end_line_number": 335,
      "source_code": "def __init__(\n        self,\n        app: Flask,\n        environ: WSGIEnvironment,\n        request: Request | None = None,\n        session: SessionMixin | None = None,\n    ) -> None:\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n            request.json_module = app.json\n        self.request: Request = request\n        self.url_adapter = None\n        try:\n            self.url_adapter = app.create_url_adapter(self.request)\n        except HTTPException as e:\n            self.request.routing_exception = e\n        self.flashes: list[tuple[str, str]] | None = None\n        self.session: SessionMixin | None = session\n        # Functions that should be executed after the request on the response\n        # object.  These will be called before the regular \"after_request\"\n        # functions.\n        self._after_request_functions: list[ft.AfterRequestCallable[t.Any]] = []\n\n        self._cv_tokens: list[\n            tuple[contextvars.Token[RequestContext], AppContext | None]\n        ] = []",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "environ",
        "request",
        "session"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.create_url_adapter",
          "body": "def create_url_adapter(self, request: Request | None) -> MapAdapter | None:\n    \"\"\"Creates a URL adapter for the given request. The URL adapter\n        is created at a point where the request context is not yet set\n        up so the request is passed explicitly.\n\n        .. versionchanged:: 3.1\n            If :data:`SERVER_NAME` is set, it does not restrict requests to\n            only that domain, for both ``subdomain_matching`` and\n            ``host_matching``.\n\n        .. versionchanged:: 1.0\n            :data:`SERVER_NAME` no longer implicitly enables subdomain\n            matching. Use :attr:`subdomain_matching` instead.\n\n        .. versionchanged:: 0.9\n           This can be called outside a request when the URL adapter is created\n           for an application context.\n\n        .. versionadded:: 0.6\n        \"\"\"\n    if request is not None:\n        if (trusted_hosts := self.config['TRUSTED_HOSTS']) is not None:\n            request.trusted_hosts = trusted_hosts\n        request.host = get_host(request.environ, request.trusted_hosts)\n        subdomain = None\n        server_name = self.config['SERVER_NAME']\n        if self.url_map.host_matching:\n            server_name = None\n        elif not self.subdomain_matching:\n            subdomain = self.url_map.default_subdomain or ''\n        return self.url_map.bind_to_environ(request.environ, server_name=server_name, subdomain=subdomain)\n    if self.config['SERVER_NAME'] is not None:\n        return self.url_map.bind(self.config['SERVER_NAME'], script_name=self.config['APPLICATION_ROOT'], url_scheme=self.config['PREFERRED_URL_SCHEME'])\n    return None"
        }
      ]
    },
    {
      "name": "copy",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 337,
      "end_line_number": 355,
      "source_code": "def copy(self) -> RequestContext:\n        \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        \"\"\"\n        return self.__class__(\n            self.app,\n            environ=self.request.environ,\n            request=self.request,\n            session=self.session,\n        )",
      "docstring": "Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked.\n\n.. versionadded:: 0.10\n\n.. versionchanged:: 1.1\n   The current session object is used instead of reloading the original\n   data. This prevents `flask.session` pointing to an out-of-date object.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "match_request",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 357,
      "end_line_number": 365,
      "source_code": "def match_request(self) -> None:\n        \"\"\"Can be overridden by a subclass to hook into the matching\n        of the request.\n        \"\"\"\n        try:\n            result = self.url_adapter.match(return_rule=True)  # type: ignore\n            self.request.url_rule, self.request.view_args = result  # type: ignore\n        except HTTPException as e:\n            self.request.routing_exception = e",
      "docstring": "Can be overridden by a subclass to hook into the matching\nof the request.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "push",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 367,
      "end_line_number": 394,
      "source_code": "def push(self) -> None:\n        # Before we push the request context we have to ensure that there\n        # is an application context.\n        app_ctx = _cv_app.get(None)\n\n        if app_ctx is None or app_ctx.app is not self.app:\n            app_ctx = self.app.app_context()\n            app_ctx.push()\n        else:\n            app_ctx = None\n\n        self._cv_tokens.append((_cv_request.set(self), app_ctx))\n\n        # Open the session at the moment that the request context is available.\n        # This allows a custom open_session method to use the request context.\n        # Only open a new session if this is the first time the request was\n        # pushed, otherwise stream_with_context loses the session.\n        if self.session is None:\n            session_interface = self.app.session_interface\n            self.session = session_interface.open_session(self.app, self.request)\n\n            if self.session is None:\n                self.session = session_interface.make_null_session(self.app)\n\n        # Match the request URL after loading the session, so that the\n        # session is available in custom URL converters.\n        if self.url_adapter is not None:\n            self.match_request()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.app.app_context",
          "body": "def app_context(self) -> AppContext:\n    \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n        block to push the context, which will make :data:`current_app`\n        point at this application.\n\n        An application context is automatically pushed by\n        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n        when handling a request, and when running a CLI command. Use\n        this to manually create a context outside of these situations.\n\n        ::\n\n            with app.app_context():\n                init_db()\n\n        See :doc:`/appcontext`.\n\n        .. versionadded:: 0.9\n        \"\"\"\n    return AppContext(self)"
        },
        {
          "name": "app_ctx.push",
          "body": "def push(self) -> None:\n    \"\"\"Binds the app context to the current context.\"\"\"\n    self._cv_tokens.append(_cv_app.set(self))\n    appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)"
        },
        {
          "name": "session_interface.open_session",
          "body": "def open_session(self, app: Flask, request: Request) -> SessionMixin | None:\n    \"\"\"This is called at the beginning of each request, after\n        pushing the request context, before matching the URL.\n\n        This must return an object which implements a dictionary-like\n        interface as well as the :class:`SessionMixin` interface.\n\n        This will return ``None`` to indicate that loading failed in\n        some way that is not immediately an error. The request\n        context will fall back to using :meth:`make_null_session`\n        in this case.\n        \"\"\"\n    raise NotImplementedError()"
        },
        {
          "name": "self.match_request",
          "body": "def match_request(self) -> None:\n    \"\"\"Can be overridden by a subclass to hook into the matching\n        of the request.\n        \"\"\"\n    try:\n        result = self.url_adapter.match(return_rule=True)\n        self.request.url_rule, self.request.view_args = result\n    except HTTPException as e:\n        self.request.routing_exception = e"
        },
        {
          "name": "session_interface.make_null_session",
          "body": "def make_null_session(self, app: Flask) -> NullSession:\n    \"\"\"Creates a null session which acts as a replacement object if the\n        real session support could not be loaded due to a configuration\n        error.  This mainly aids the user experience because the job of the\n        null session is to still support lookup without complaining but\n        modifications are answered with a helpful error message of what\n        failed.\n\n        This creates an instance of :attr:`null_session_class` by default.\n        \"\"\"\n    return self.null_session_class()"
        }
      ]
    },
    {
      "name": "pop",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 396,
      "end_line_number": 431,
      "source_code": "def pop(self, exc: BaseException | None = _sentinel) -> None:  # type: ignore\n        \"\"\"Pops the request context and unbinds it by doing that.  This will\n        also trigger the execution of functions registered by the\n        :meth:`~flask.Flask.teardown_request` decorator.\n\n        .. versionchanged:: 0.9\n           Added the `exc` argument.\n        \"\"\"\n        clear_request = len(self._cv_tokens) == 1\n\n        try:\n            if clear_request:\n                if exc is _sentinel:\n                    exc = sys.exc_info()[1]\n                self.app.do_teardown_request(exc)\n\n                request_close = getattr(self.request, \"close\", None)\n                if request_close is not None:\n                    request_close()\n        finally:\n            ctx = _cv_request.get()\n            token, app_ctx = self._cv_tokens.pop()\n            _cv_request.reset(token)\n\n            # get rid of circular dependencies at the end of the request\n            # so that we don't require the GC to be active.\n            if clear_request:\n                ctx.request.environ[\"werkzeug.request\"] = None\n\n            if app_ctx is not None:\n                app_ctx.pop(exc)\n\n            if ctx is not self:\n                raise AssertionError(\n                    f\"Popped wrong request context. ({ctx!r} instead of {self!r})\"\n                )",
      "docstring": "Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n:meth:`~flask.Flask.teardown_request` decorator.\n\n.. versionchanged:: 0.9\n   Added the `exc` argument.",
      "decorators": [],
      "arguments": [
        "self",
        "exc"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self._cv_tokens.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "self.app.do_teardown_request",
          "body": "def do_teardown_request(self, exc: BaseException | None=_sentinel) -> None:\n    \"\"\"Called after the request is dispatched and the response is\n        returned, right before the request context is popped.\n\n        This calls all functions decorated with\n        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n        if a blueprint handled the request. Finally, the\n        :data:`request_tearing_down` signal is sent.\n\n        This is called by\n        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n        which may be delayed during testing to maintain access to\n        resources.\n\n        :param exc: An unhandled exception raised while dispatching the\n            request. Detected from the current exception information if\n            not passed. Passed to each teardown function.\n\n        .. versionchanged:: 0.9\n            Added the ``exc`` argument.\n        \"\"\"\n    if exc is _sentinel:\n        exc = sys.exc_info()[1]\n    for name in chain(request.blueprints, (None,)):\n        if name in self.teardown_request_funcs:\n            for func in reversed(self.teardown_request_funcs[name]):\n                self.ensure_sync(func)(exc)\n    request_tearing_down.send(self, _async_wrapper=self.ensure_sync, exc=exc)"
        },
        {
          "name": "app_ctx.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "__enter__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 433,
      "end_line_number": 435,
      "source_code": "def __enter__(self) -> RequestContext:\n        self.push()\n        return self",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.push",
          "body": "def push(self) -> None:\n    \"\"\"Binds the app context to the current context.\"\"\"\n    self._cv_tokens.append(_cv_app.set(self))\n    appcontext_pushed.send(self.app, _async_wrapper=self.app.ensure_sync)"
        }
      ]
    },
    {
      "name": "__exit__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 437,
      "end_line_number": 443,
      "source_code": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.pop(exc_value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "exc_type",
        "exc_value",
        "tb"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "__repr__",
      "module": "ctx",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\ctx.py",
      "line_number": 445,
      "end_line_number": 449,
      "source_code": "def __repr__(self) -> str:\n        return (\n            f\"<{type(self).__name__} {self.request.url!r}\"\n            f\" [{self.request.method}] of {self.app.name}>\"\n        )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "contextvars",
        "sys",
        "typing",
        "functools.update_wrapper",
        "types.TracebackType",
        "werkzeug.exceptions.HTTPException",
        ".typing",
        "globals._cv_app",
        "globals._cv_request",
        "signals.appcontext_popped",
        "signals.appcontext_pushed",
        "_typeshed.wsgi.WSGIEnvironment",
        "app.Flask",
        "sessions.SessionMixin",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "attach_enctype_error_multidict",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 81,
      "end_line_number": 104,
      "source_code": "def attach_enctype_error_multidict(request: Request) -> None:\n    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error\n    about ``enctype=multipart/form-data``.\n\n    :param request: The request to patch.\n    :meta private:\n    \"\"\"\n    oldcls = request.files.__class__\n\n    class newcls(oldcls):  # type: ignore[valid-type, misc]\n        def __getitem__(self, key: str) -> t.Any:\n            try:\n                return super().__getitem__(key)\n            except KeyError as e:\n                if key not in request.form:\n                    raise\n\n                raise DebugFilesKeyError(request, key).with_traceback(\n                    e.__traceback__\n                ) from None\n\n    newcls.__name__ = oldcls.__name__\n    newcls.__module__ = oldcls.__module__\n    request.files.__class__ = newcls",
      "docstring": "Patch ``request.files.__getitem__`` to raise a descriptive error\nabout ``enctype=multipart/form-data``.\n\n:param request: The request to patch.\n:meta private:",
      "decorators": [],
      "arguments": [
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_dump_loader_info",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 107,
      "end_line_number": 121,
      "source_code": "def _dump_loader_info(loader: BaseLoader) -> t.Iterator[str]:\n    yield f\"class: {type(loader).__module__}.{type(loader).__name__}\"\n    for key, value in sorted(loader.__dict__.items()):\n        if key.startswith(\"_\"):\n            continue\n        if isinstance(value, (tuple, list)):\n            if not all(isinstance(x, str) for x in value):\n                continue\n            yield f\"{key}:\"\n            for item in value:\n                yield f\"  - {item}\"\n            continue\n        elif not isinstance(value, (str, int, float, bool)):\n            continue\n        yield f\"{key}: {value!r}\"",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "loader"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "explain_template_loading_attempts",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 124,
      "end_line_number": 178,
      "source_code": "def explain_template_loading_attempts(\n    app: App,\n    template: str,\n    attempts: list[\n        tuple[\n            BaseLoader,\n            Scaffold,\n            tuple[str, str | None, t.Callable[[], bool] | None] | None,\n        ]\n    ],\n) -> None:\n    \"\"\"This should help developers understand what failed\"\"\"\n    info = [f\"Locating template {template!r}:\"]\n    total_found = 0\n    blueprint = None\n    if request_ctx and request_ctx.request.blueprint is not None:\n        blueprint = request_ctx.request.blueprint\n\n    for idx, (loader, srcobj, triple) in enumerate(attempts):\n        if isinstance(srcobj, App):\n            src_info = f\"application {srcobj.import_name!r}\"\n        elif isinstance(srcobj, Blueprint):\n            src_info = f\"blueprint {srcobj.name!r} ({srcobj.import_name})\"\n        else:\n            src_info = repr(srcobj)\n\n        info.append(f\"{idx + 1:5}: trying loader of {src_info}\")\n\n        for line in _dump_loader_info(loader):\n            info.append(f\"       {line}\")\n\n        if triple is None:\n            detail = \"no match\"\n        else:\n            detail = f\"found ({triple[1] or '<string>'!r})\"\n            total_found += 1\n        info.append(f\"       -> {detail}\")\n\n    seems_fishy = False\n    if total_found == 0:\n        info.append(\"Error: the template could not be found.\")\n        seems_fishy = True\n    elif total_found > 1:\n        info.append(\"Warning: multiple loaders returned a match for the template.\")\n        seems_fishy = True\n\n    if blueprint is not None and seems_fishy:\n        info.append(\n            \"  The template was looked up from an endpoint that belongs\"\n            f\" to the blueprint {blueprint!r}.\"\n        )\n        info.append(\"  Maybe you did not place a template in the right folder?\")\n        info.append(\"  See https://flask.palletsprojects.com/blueprints/#templates\")\n\n    app.logger.info(\"\\n\".join(info))",
      "docstring": "This should help developers understand what failed",
      "decorators": [],
      "arguments": [
        "app",
        "template",
        "attempts"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_dump_loader_info",
          "body": "def _dump_loader_info(loader: BaseLoader) -> t.Iterator[str]:\n    yield f'class: {type(loader).__module__}.{type(loader).__name__}'\n    for key, value in sorted(loader.__dict__.items()):\n        if key.startswith('_'):\n            continue\n        if isinstance(value, (tuple, list)):\n            if not all((isinstance(x, str) for x in value)):\n                continue\n            yield f'{key}:'\n            for item in value:\n                yield f'  - {item}'\n            continue\n        elif not isinstance(value, (str, int, float, bool)):\n            continue\n        yield f'{key}: {value!r}'"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 28,
      "end_line_number": 44,
      "source_code": "def __init__(self, request: Request, key: str) -> None:\n        form_matches = request.form.getlist(key)\n        buf = [\n            f\"You tried to access the file {key!r} in the request.files\"\n            \" dictionary but it does not exist. The mimetype for the\"\n            f\" request is {request.mimetype!r} instead of\"\n            \" 'multipart/form-data' which means that no file contents\"\n            \" were transmitted. To fix this error you should provide\"\n            ' enctype=\"multipart/form-data\" in your form.'\n        ]\n        if form_matches:\n            names = \", \".join(repr(x) for x in form_matches)\n            buf.append(\n                \"\\n\\nThe browser instead transmitted some file names. \"\n                f\"This was submitted: {names}\"\n            )\n        self.msg = \"\".join(buf)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "request",
        "key"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__str__",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 46,
      "end_line_number": 47,
      "source_code": "def __str__(self) -> str:\n        return self.msg",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 57,
      "end_line_number": 78,
      "source_code": "def __init__(self, request: Request) -> None:\n        exc = request.routing_exception\n        assert isinstance(exc, RequestRedirect)\n        buf = [\n            f\"A request was sent to '{request.url}', but routing issued\"\n            f\" a redirect to the canonical URL '{exc.new_url}'.\"\n        ]\n\n        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:\n            buf.append(\n                \" The URL was defined with a trailing slash. Flask\"\n                \" will redirect to the URL with a trailing slash if it\"\n                \" was accessed without one.\"\n            )\n\n        buf.append(\n            \" Send requests to the canonical URL, or use 307 or 308 for\"\n            \" routing redirects. Otherwise, browsers will drop form\"\n            \" data.\\n\\n\"\n            \"This exception is only raised in debug mode.\"\n        )\n        super().__init__(\"\".join(buf))",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [
        "assert isinstance(exc, RequestRedirect)"
      ],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__getitem__",
      "module": "debughelpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\debughelpers.py",
      "line_number": 91,
      "end_line_number": 100,
      "source_code": "def __getitem__(self, key: str) -> t.Any:\n            try:\n                return super().__getitem__(key)\n            except KeyError as e:\n                if key not in request.form:\n                    raise\n\n                raise DebugFilesKeyError(request, key).with_traceback(\n                    e.__traceback__\n                ) from None",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "key"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.loaders.BaseLoader",
        "werkzeug.routing.RequestRedirect",
        "blueprints.Blueprint",
        "globals.request_ctx",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "wrappers.Request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_debug_flag",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 27,
      "end_line_number": 32,
      "source_code": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get(\"FLASK_DEBUG\")\n    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})",
      "docstring": "Get whether debug mode should be enabled for the app, indicated by the\n:envvar:`FLASK_DEBUG` environment variable. The default is ``False``.",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_load_dotenv",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 35,
      "end_line_number": 47,
      "source_code": "def get_load_dotenv(default: bool = True) -> bool:\n    \"\"\"Get whether the user has disabled loading default dotenv files by\n    setting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\n    the files.\n\n    :param default: What to return if the env var isn't set.\n    \"\"\"\n    val = os.environ.get(\"FLASK_SKIP_DOTENV\")\n\n    if not val:\n        return default\n\n    return val.lower() in (\"0\", \"false\", \"no\")",
      "docstring": "Get whether the user has disabled loading default dotenv files by\nsetting :envvar:`FLASK_SKIP_DOTENV`. The default is ``True``, load\nthe files.\n\n:param default: What to return if the env var isn't set.",
      "decorators": [],
      "arguments": [
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "stream_with_context",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 51,
      "end_line_number": 53,
      "source_code": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr],\n) -> t.Iterator[t.AnyStr]: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "generator_or_function"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "stream_with_context",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 57,
      "end_line_number": 59,
      "source_code": "def stream_with_context(\n    generator_or_function: t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]: ...",
      "docstring": null,
      "decorators": [
        "t.overload"
      ],
      "arguments": [
        "generator_or_function"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "stream_with_context",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 62,
      "end_line_number": 136,
      "source_code": "def stream_with_context(\n    generator_or_function: t.Iterator[t.AnyStr] | t.Callable[..., t.Iterator[t.AnyStr]],\n) -> t.Iterator[t.AnyStr] | t.Callable[[t.Iterator[t.AnyStr]], t.Iterator[t.AnyStr]]:\n    \"\"\"Request contexts disappear when the response is started on the server.\n    This is done for efficiency reasons and to make it less likely to encounter\n    memory leaks with badly written WSGI middlewares.  The downside is that if\n    you are using streamed responses, the generator cannot access request bound\n    information any more.\n\n    This function however can help you keep the context around for longer::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            @stream_with_context\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(generate())\n\n    Alternatively it can also be used around a specific generator::\n\n        from flask import stream_with_context, request, Response\n\n        @app.route('/stream')\n        def streamed_response():\n            def generate():\n                yield 'Hello '\n                yield request.args['name']\n                yield '!'\n            return Response(stream_with_context(generate()))\n\n    .. versionadded:: 0.9\n    \"\"\"\n    try:\n        gen = iter(generator_or_function)  # type: ignore[arg-type]\n    except TypeError:\n\n        def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:\n            gen = generator_or_function(*args, **kwargs)  # type: ignore[operator]\n            return stream_with_context(gen)\n\n        return update_wrapper(decorator, generator_or_function)  # type: ignore[arg-type]\n\n    def generator() -> t.Iterator[t.AnyStr | None]:\n        ctx = _cv_request.get(None)\n        if ctx is None:\n            raise RuntimeError(\n                \"'stream_with_context' can only be used when a request\"\n                \" context is active, such as in a view function.\"\n            )\n        with ctx:\n            # Dummy sentinel.  Has to be inside the context block or we're\n            # not actually keeping the context around.\n            yield None\n\n            # The try/finally is here so that if someone passes a WSGI level\n            # iterator in we're still running the cleanup logic.  Generators\n            # don't need that because they are closed on their destruction\n            # automatically.\n            try:\n                yield from gen\n            finally:\n                if hasattr(gen, \"close\"):\n                    gen.close()\n\n    # The trick is to start the generator.  Then the code execution runs until\n    # the first dummy None is yielded at which point the context was already\n    # pushed.  This item is discarded.  Then when the iteration continues the\n    # real generator is executed.\n    wrapped_g = generator()\n    next(wrapped_g)\n    return wrapped_g",
      "docstring": "Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more.\n\nThis function however can help you keep the context around for longer::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        @stream_with_context\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(generate())\n\nAlternatively it can also be used around a specific generator::\n\n    from flask import stream_with_context, request, Response\n\n    @app.route('/stream')\n    def streamed_response():\n        def generate():\n            yield 'Hello '\n            yield request.args['name']\n            yield '!'\n        return Response(stream_with_context(generate()))\n\n.. versionadded:: 0.9",
      "decorators": [],
      "arguments": [
        "generator_or_function"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "generator",
          "body": "def generator() -> t.Iterator[t.AnyStr | None]:\n    ctx = _cv_request.get(None)\n    if ctx is None:\n        raise RuntimeError(\"'stream_with_context' can only be used when a request context is active, such as in a view function.\")\n    with ctx:\n        yield None\n        try:\n            yield from gen\n        finally:\n            if hasattr(gen, 'close'):\n                gen.close()"
        },
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "stream_with_context",
          "body": "@t.overload\ndef stream_with_context(generator_or_function: t.Iterator[t.AnyStr]) -> t.Iterator[t.AnyStr]:\n    ..."
        }
      ]
    },
    {
      "name": "make_response",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 139,
      "end_line_number": 185,
      "source_code": "def make_response(*args: t.Any) -> Response:\n    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n    views do not have to return response objects but can return a value that\n    is converted into a response object by Flask itself, it becomes tricky to\n    add headers to it.  This function can be called instead of using a return\n    and you will get a response object which you can use to attach headers.\n\n    If view looked like this and you want to add a new header::\n\n        def index():\n            return render_template('index.html', foo=42)\n\n    You can now do something like this::\n\n        def index():\n            response = make_response(render_template('index.html', foo=42))\n            response.headers['X-Parachutes'] = 'parachutes are cool'\n            return response\n\n    This function accepts the very same arguments you can return from a\n    view function.  This for example creates a response with a 404 error\n    code::\n\n        response = make_response(render_template('not_found.html'), 404)\n\n    The other use case of this function is to force the return value of a\n    view function into a response which is helpful with view\n    decorators::\n\n        response = make_response(view_function())\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n\n    Internally this function does the following things:\n\n    -   if no arguments are passed, it creates a new response argument\n    -   if one argument is passed, :meth:`flask.Flask.make_response`\n        is invoked with it.\n    -   if more than one argument is passed, the arguments are passed\n        to the :meth:`flask.Flask.make_response` function as tuple.\n\n    .. versionadded:: 0.6\n    \"\"\"\n    if not args:\n        return current_app.response_class()\n    if len(args) == 1:\n        args = args[0]\n    return current_app.make_response(args)",
      "docstring": "Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers.\n\nIf view looked like this and you want to add a new header::\n\n    def index():\n        return render_template('index.html', foo=42)\n\nYou can now do something like this::\n\n    def index():\n        response = make_response(render_template('index.html', foo=42))\n        response.headers['X-Parachutes'] = 'parachutes are cool'\n        return response\n\nThis function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode::\n\n    response = make_response(render_template('not_found.html'), 404)\n\nThe other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators::\n\n    response = make_response(view_function())\n    response.headers['X-Parachutes'] = 'parachutes are cool'\n\nInternally this function does the following things:\n\n-   if no arguments are passed, it creates a new response argument\n-   if one argument is passed, :meth:`flask.Flask.make_response`\n    is invoked with it.\n-   if more than one argument is passed, the arguments are passed\n    to the :meth:`flask.Flask.make_response` function as tuple.\n\n.. versionadded:: 0.6",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.make_response",
          "body": "def make_response(self, rv: ft.ResponseReturnValue) -> Response:\n    \"\"\"Convert the return value from a view function to an instance of\n        :attr:`response_class`.\n\n        :param rv: the return value from the view function. The view function\n            must return a response. Returning ``None``, or the view ending\n            without returning, is not allowed. The following types are allowed\n            for ``view_rv``:\n\n            ``str``\n                A response object is created with the string encoded to UTF-8\n                as the body.\n\n            ``bytes``\n                A response object is created with the bytes as the body.\n\n            ``dict``\n                A dictionary that will be jsonify'd before being returned.\n\n            ``list``\n                A list that will be jsonify'd before being returned.\n\n            ``generator`` or ``iterator``\n                A generator that returns ``str`` or ``bytes`` to be\n                streamed as the response.\n\n            ``tuple``\n                Either ``(body, status, headers)``, ``(body, status)``, or\n                ``(body, headers)``, where ``body`` is any of the other types\n                allowed here, ``status`` is a string or an integer, and\n                ``headers`` is a dictionary or a list of ``(key, value)``\n                tuples. If ``body`` is a :attr:`response_class` instance,\n                ``status`` overwrites the exiting value and ``headers`` are\n                extended.\n\n            :attr:`response_class`\n                The object is returned unchanged.\n\n            other :class:`~werkzeug.wrappers.Response` class\n                The object is coerced to :attr:`response_class`.\n\n            :func:`callable`\n                The function is called as a WSGI application. The result is\n                used to create a response object.\n\n        .. versionchanged:: 2.2\n            A generator will be converted to a streaming response.\n            A list will be converted to a JSON response.\n\n        .. versionchanged:: 1.1\n            A dict will be converted to a JSON response.\n\n        .. versionchanged:: 0.9\n           Previously a tuple was interpreted as the arguments for the\n           response object.\n        \"\"\"\n    status: int | None = None\n    headers: HeadersValue | None = None\n    if isinstance(rv, tuple):\n        len_rv = len(rv)\n        if len_rv == 3:\n            rv, status, headers = rv\n        elif len_rv == 2:\n            if isinstance(rv[1], (Headers, dict, tuple, list)):\n                rv, headers = rv\n            else:\n                rv, status = rv\n        else:\n            raise TypeError('The view function did not return a valid response tuple. The tuple must have the form (body, status, headers), (body, status), or (body, headers).')\n    if rv is None:\n        raise TypeError(f'The view function for {request.endpoint!r} did not return a valid response. The function either returned None or ended without a return statement.')\n    if not isinstance(rv, self.response_class):\n        if isinstance(rv, (str, bytes, bytearray)) or isinstance(rv, cabc.Iterator):\n            rv = self.response_class(rv, status=status, headers=headers)\n            status = headers = None\n        elif isinstance(rv, (dict, list)):\n            rv = self.json.response(rv)\n        elif isinstance(rv, BaseResponse) or callable(rv):\n            try:\n                rv = self.response_class.force_type(rv, request.environ)\n            except TypeError as e:\n                raise TypeError(f'{e}\\nThe view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a {type(rv).__name__}.').with_traceback(sys.exc_info()[2]) from None\n        else:\n            raise TypeError(f'The view function did not return a valid response. The return type must be a string, dict, list, tuple with headers or status, Response instance, or WSGI callable, but it was a {type(rv).__name__}.')\n    rv = t.cast(Response, rv)\n    if status is not None:\n        if isinstance(status, (str, bytes, bytearray)):\n            rv.status = status\n        else:\n            rv.status_code = status\n    if headers:\n        rv.headers.update(headers)\n    return rv"
        }
      ]
    },
    {
      "name": "url_for",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 188,
      "end_line_number": 239,
      "source_code": "def url_for(\n    endpoint: str,\n    *,\n    _anchor: str | None = None,\n    _method: str | None = None,\n    _scheme: str | None = None,\n    _external: bool | None = None,\n    **values: t.Any,\n) -> str:\n    \"\"\"Generate a URL to the given endpoint with the given values.\n\n    This requires an active request or application context, and calls\n    :meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\n    for full documentation.\n\n    :param endpoint: The endpoint name associated with the URL to\n        generate. If this starts with a ``.``, the current blueprint\n        name (if any) will be used.\n    :param _anchor: If given, append this as ``#anchor`` to the URL.\n    :param _method: If given, generate the URL associated with this\n        method for the endpoint.\n    :param _scheme: If given, the URL will have this scheme if it is\n        external.\n    :param _external: If given, prefer the URL to be internal (False) or\n        require it to be external (True). External URLs include the\n        scheme and domain. When not in an active request, URLs are\n        external by default.\n    :param values: Values to use for the variable parts of the URL rule.\n        Unknown keys are appended as query string arguments, like\n        ``?a=b&c=d``.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.url_for``, allowing an app to override the\n        behavior.\n\n    .. versionchanged:: 0.10\n       The ``_scheme`` parameter was added.\n\n    .. versionchanged:: 0.9\n       The ``_anchor`` and ``_method`` parameters were added.\n\n    .. versionchanged:: 0.9\n       Calls ``app.handle_url_build_error`` on build errors.\n    \"\"\"\n    return current_app.url_for(\n        endpoint,\n        _anchor=_anchor,\n        _method=_method,\n        _scheme=_scheme,\n        _external=_external,\n        **values,\n    )",
      "docstring": "Generate a URL to the given endpoint with the given values.\n\nThis requires an active request or application context, and calls\n:meth:`current_app.url_for() <flask.Flask.url_for>`. See that method\nfor full documentation.\n\n:param endpoint: The endpoint name associated with the URL to\n    generate. If this starts with a ``.``, the current blueprint\n    name (if any) will be used.\n:param _anchor: If given, append this as ``#anchor`` to the URL.\n:param _method: If given, generate the URL associated with this\n    method for the endpoint.\n:param _scheme: If given, the URL will have this scheme if it is\n    external.\n:param _external: If given, prefer the URL to be internal (False) or\n    require it to be external (True). External URLs include the\n    scheme and domain. When not in an active request, URLs are\n    external by default.\n:param values: Values to use for the variable parts of the URL rule.\n    Unknown keys are appended as query string arguments, like\n    ``?a=b&c=d``.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.url_for``, allowing an app to override the\n    behavior.\n\n.. versionchanged:: 0.10\n   The ``_scheme`` parameter was added.\n\n.. versionchanged:: 0.9\n   The ``_anchor`` and ``_method`` parameters were added.\n\n.. versionchanged:: 0.9\n   Calls ``app.handle_url_build_error`` on build errors.",
      "decorators": [],
      "arguments": [
        "endpoint"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.url_for",
          "body": "def url_for(self, /, endpoint: str, *, _anchor: str | None=None, _method: str | None=None, _scheme: str | None=None, _external: bool | None=None, **values: t.Any) -> str:\n    \"\"\"Generate a URL to the given endpoint with the given values.\n\n        This is called by :func:`flask.url_for`, and can be called\n        directly as well.\n\n        An *endpoint* is the name of a URL rule, usually added with\n        :meth:`@app.route() <route>`, and usually the same name as the\n        view function. A route defined in a :class:`~flask.Blueprint`\n        will prepend the blueprint's name separated by a ``.`` to the\n        endpoint.\n\n        In some cases, such as email messages, you want URLs to include\n        the scheme and domain, like ``https://example.com/hello``. When\n        not in an active request, URLs will be external by default, but\n        this requires setting :data:`SERVER_NAME` so Flask knows what\n        domain to use. :data:`APPLICATION_ROOT` and\n        :data:`PREFERRED_URL_SCHEME` should also be configured as\n        needed. This config is only used when not in an active request.\n\n        Functions can be decorated with :meth:`url_defaults` to modify\n        keyword arguments before the URL is built.\n\n        If building fails for some reason, such as an unknown endpoint\n        or incorrect values, the app's :meth:`handle_url_build_error`\n        method is called. If that returns a string, that is returned,\n        otherwise a :exc:`~werkzeug.routing.BuildError` is raised.\n\n        :param endpoint: The endpoint name associated with the URL to\n            generate. If this starts with a ``.``, the current blueprint\n            name (if any) will be used.\n        :param _anchor: If given, append this as ``#anchor`` to the URL.\n        :param _method: If given, generate the URL associated with this\n            method for the endpoint.\n        :param _scheme: If given, the URL will have this scheme if it\n            is external.\n        :param _external: If given, prefer the URL to be internal\n            (False) or require it to be external (True). External URLs\n            include the scheme and domain. When not in an active\n            request, URLs are external by default.\n        :param values: Values to use for the variable parts of the URL\n            rule. Unknown keys are appended as query string arguments,\n            like ``?a=b&c=d``.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.url_for``, which calls this method.\n        \"\"\"\n    req_ctx = _cv_request.get(None)\n    if req_ctx is not None:\n        url_adapter = req_ctx.url_adapter\n        blueprint_name = req_ctx.request.blueprint\n        if endpoint[:1] == '.':\n            if blueprint_name is not None:\n                endpoint = f'{blueprint_name}{endpoint}'\n            else:\n                endpoint = endpoint[1:]\n        if _external is None:\n            _external = _scheme is not None\n    else:\n        app_ctx = _cv_app.get(None)\n        if app_ctx is not None:\n            url_adapter = app_ctx.url_adapter\n        else:\n            url_adapter = self.create_url_adapter(None)\n        if url_adapter is None:\n            raise RuntimeError(\"Unable to build URLs outside an active request without 'SERVER_NAME' configured. Also configure 'APPLICATION_ROOT' and 'PREFERRED_URL_SCHEME' as needed.\")\n        if _external is None:\n            _external = True\n    if _scheme is not None and (not _external):\n        raise ValueError(\"When specifying '_scheme', '_external' must be True.\")\n    self.inject_url_defaults(endpoint, values)\n    try:\n        rv = url_adapter.build(endpoint, values, method=_method, url_scheme=_scheme, force_external=_external)\n    except BuildError as error:\n        values.update(_anchor=_anchor, _method=_method, _scheme=_scheme, _external=_external)\n        return self.handle_url_build_error(error, endpoint, values)\n    if _anchor is not None:\n        _anchor = _url_quote(_anchor, safe=\"%!#$&'()*+,/:;=?@\")\n        rv = f'{rv}#{_anchor}'\n    return rv"
        }
      ]
    },
    {
      "name": "redirect",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 242,
      "end_line_number": 263,
      "source_code": "def redirect(\n    location: str, code: int = 302, Response: type[BaseResponse] | None = None\n) -> BaseResponse:\n    \"\"\"Create a redirect response object.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`~flask.Flask.redirect` method, otherwise it will use\n    :func:`werkzeug.utils.redirect`.\n\n    :param location: The URL to redirect to.\n    :param code: The status code for the redirect.\n    :param Response: The response class to use. Not used when\n        ``current_app`` is active, which uses ``app.response_class``.\n\n    .. versionadded:: 2.2\n        Calls ``current_app.redirect`` if available instead of always\n        using Werkzeug's default ``redirect``.\n    \"\"\"\n    if current_app:\n        return current_app.redirect(location, code=code)\n\n    return _wz_redirect(location, code=code, Response=Response)",
      "docstring": "Create a redirect response object.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`~flask.Flask.redirect` method, otherwise it will use\n:func:`werkzeug.utils.redirect`.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n:param Response: The response class to use. Not used when\n    ``current_app`` is active, which uses ``app.response_class``.\n\n.. versionadded:: 2.2\n    Calls ``current_app.redirect`` if available instead of always\n    using Werkzeug's default ``redirect``.",
      "decorators": [],
      "arguments": [
        "location",
        "code",
        "Response"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.redirect",
          "body": "def redirect(location: str, code: int=302, Response: type[BaseResponse] | None=None) -> BaseResponse:\n    \"\"\"Create a redirect response object.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`~flask.Flask.redirect` method, otherwise it will use\n    :func:`werkzeug.utils.redirect`.\n\n    :param location: The URL to redirect to.\n    :param code: The status code for the redirect.\n    :param Response: The response class to use. Not used when\n        ``current_app`` is active, which uses ``app.response_class``.\n\n    .. versionadded:: 2.2\n        Calls ``current_app.redirect`` if available instead of always\n        using Werkzeug's default ``redirect``.\n    \"\"\"\n    if current_app:\n        return current_app.redirect(location, code=code)\n    return _wz_redirect(location, code=code, Response=Response)"
        }
      ]
    },
    {
      "name": "abort",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 266,
      "end_line_number": 286,
      "source_code": "def abort(code: int | BaseResponse, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n    \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\n    status code.\n\n    If :data:`~flask.current_app` is available, it will call its\n    :attr:`~flask.Flask.aborter` object, otherwise it will use\n    :func:`werkzeug.exceptions.abort`.\n\n    :param code: The status code for the exception, which must be\n        registered in ``app.aborter``.\n    :param args: Passed to the exception.\n    :param kwargs: Passed to the exception.\n\n    .. versionadded:: 2.2\n        Calls ``current_app.aborter`` if available instead of always\n        using Werkzeug's default ``abort``.\n    \"\"\"\n    if current_app:\n        current_app.aborter(code, *args, **kwargs)\n\n    _wz_abort(code, *args, **kwargs)",
      "docstring": "Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\nstatus code.\n\nIf :data:`~flask.current_app` is available, it will call its\n:attr:`~flask.Flask.aborter` object, otherwise it will use\n:func:`werkzeug.exceptions.abort`.\n\n:param code: The status code for the exception, which must be\n    registered in ``app.aborter``.\n:param args: Passed to the exception.\n:param kwargs: Passed to the exception.\n\n.. versionadded:: 2.2\n    Calls ``current_app.aborter`` if available instead of always\n    using Werkzeug's default ``abort``.",
      "decorators": [],
      "arguments": [
        "code"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_template_attribute",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 289,
      "end_line_number": 308,
      "source_code": "def get_template_attribute(template_name: str, attribute: str) -> t.Any:\n    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n    invoke a macro from within Python code.  If you for example have a\n    template named :file:`_cider.html` with the following contents:\n\n    .. sourcecode:: html+jinja\n\n       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\n    You can access this from Python code like this::\n\n        hello = get_template_attribute('_cider.html', 'hello')\n        return hello('World')\n\n    .. versionadded:: 0.2\n\n    :param template_name: the name of the template\n    :param attribute: the name of the variable of macro to access\n    \"\"\"\n    return getattr(current_app.jinja_env.get_template(template_name).module, attribute)",
      "docstring": "Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named :file:`_cider.html` with the following contents:\n\n.. sourcecode:: html+jinja\n\n   {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n\nYou can access this from Python code like this::\n\n    hello = get_template_attribute('_cider.html', 'hello')\n    return hello('World')\n\n.. versionadded:: 0.2\n\n:param template_name: the name of the template\n:param attribute: the name of the variable of macro to access",
      "decorators": [],
      "arguments": [
        "template_name",
        "attribute"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "flash",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 311,
      "end_line_number": 342,
      "source_code": "def flash(message: str, category: str = \"message\") -> None:\n    \"\"\"Flashes a message to the next request.  In order to remove the\n    flashed message from the session and to display it to the user,\n    the template has to call :func:`get_flashed_messages`.\n\n    .. versionchanged:: 0.3\n       `category` parameter added.\n\n    :param message: the message to be flashed.\n    :param category: the category for the message.  The following values\n                     are recommended: ``'message'`` for any kind of message,\n                     ``'error'`` for errors, ``'info'`` for information\n                     messages and ``'warning'`` for warnings.  However any\n                     kind of string can be used as category.\n    \"\"\"\n    # Original implementation:\n    #\n    #     session.setdefault('_flashes', []).append((category, message))\n    #\n    # This assumed that changes made to mutable structures in the session are\n    # always in sync with the session object, which is not true for session\n    # implementations that use external storage for keeping their keys/values.\n    flashes = session.get(\"_flashes\", [])\n    flashes.append((category, message))\n    session[\"_flashes\"] = flashes\n    app = current_app._get_current_object()  # type: ignore\n    message_flashed.send(\n        app,\n        _async_wrapper=app.ensure_sync,\n        message=message,\n        category=category,\n    )",
      "docstring": "Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call :func:`get_flashed_messages`.\n\n.. versionchanged:: 0.3\n   `category` parameter added.\n\n:param message: the message to be flashed.\n:param category: the category for the message.  The following values\n                 are recommended: ``'message'`` for any kind of message,\n                 ``'error'`` for errors, ``'info'`` for information\n                 messages and ``'warning'`` for warnings.  However any\n                 kind of string can be used as category.",
      "decorators": [],
      "arguments": [
        "message",
        "category"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "session.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "get_flashed_messages",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 345,
      "end_line_number": 384,
      "source_code": "def get_flashed_messages(\n    with_categories: bool = False, category_filter: t.Iterable[str] = ()\n) -> list[str] | list[tuple[str, str]]:\n    \"\"\"Pulls all flashed messages from the session and returns them.\n    Further calls in the same request to the function will return\n    the same messages.  By default just the messages are returned,\n    but when `with_categories` is set to ``True``, the return value will\n    be a list of tuples in the form ``(category, message)`` instead.\n\n    Filter the flashed messages to one or more categories by providing those\n    categories in `category_filter`.  This allows rendering categories in\n    separate html blocks.  The `with_categories` and `category_filter`\n    arguments are distinct:\n\n    * `with_categories` controls whether categories are returned with message\n      text (``True`` gives a tuple, where ``False`` gives just the message text).\n    * `category_filter` filters the messages down to only those matching the\n      provided categories.\n\n    See :doc:`/patterns/flashing` for examples.\n\n    .. versionchanged:: 0.3\n       `with_categories` parameter added.\n\n    .. versionchanged:: 0.9\n        `category_filter` parameter added.\n\n    :param with_categories: set to ``True`` to also receive categories.\n    :param category_filter: filter of categories to limit return values.  Only\n                            categories in the list will be returned.\n    \"\"\"\n    flashes = request_ctx.flashes\n    if flashes is None:\n        flashes = session.pop(\"_flashes\") if \"_flashes\" in session else []\n        request_ctx.flashes = flashes\n    if category_filter:\n        flashes = list(filter(lambda f: f[0] in category_filter, flashes))\n    if not with_categories:\n        return [x[1] for x in flashes]\n    return flashes",
      "docstring": "Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when `with_categories` is set to ``True``, the return value will\nbe a list of tuples in the form ``(category, message)`` instead.\n\nFilter the flashed messages to one or more categories by providing those\ncategories in `category_filter`.  This allows rendering categories in\nseparate html blocks.  The `with_categories` and `category_filter`\narguments are distinct:\n\n* `with_categories` controls whether categories are returned with message\n  text (``True`` gives a tuple, where ``False`` gives just the message text).\n* `category_filter` filters the messages down to only those matching the\n  provided categories.\n\nSee :doc:`/patterns/flashing` for examples.\n\n.. versionchanged:: 0.3\n   `with_categories` parameter added.\n\n.. versionchanged:: 0.9\n    `category_filter` parameter added.\n\n:param with_categories: set to ``True`` to also receive categories.\n:param category_filter: filter of categories to limit return values.  Only\n                        categories in the list will be returned.",
      "decorators": [],
      "arguments": [
        "with_categories",
        "category_filter"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "session.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "_prepare_send_file_kwargs",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 387,
      "end_line_number": 397,
      "source_code": "def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n    if kwargs.get(\"max_age\") is None:\n        kwargs[\"max_age\"] = current_app.get_send_file_max_age\n\n    kwargs.update(\n        environ=request.environ,\n        use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],\n        response_class=current_app.response_class,\n        _root_path=current_app.root_path,  # type: ignore\n    )\n    return kwargs",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "kwargs.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "send_file",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 400,
      "end_line_number": 523,
      "source_code": "def send_file(\n    path_or_file: os.PathLike[t.AnyStr] | str | t.BinaryIO,\n    mimetype: str | None = None,\n    as_attachment: bool = False,\n    download_name: str | None = None,\n    conditional: bool = True,\n    etag: bool | str = True,\n    last_modified: datetime | int | float | None = None,\n    max_age: None | (int | t.Callable[[str | None], int | None]) = None,\n) -> Response:\n    \"\"\"Send the contents of a file to the client.\n\n    The first argument can be a file path or a file-like object. Paths\n    are preferred in most cases because Werkzeug can manage the file and\n    get extra information from the path. Passing a file-like object\n    requires that the file is opened in binary mode, and is mostly\n    useful when building a file in memory with :class:`io.BytesIO`.\n\n    Never pass file paths provided by a user. The path is assumed to be\n    trusted, so a user could craft a path to access a file you didn't\n    intend. Use :func:`send_from_directory` to safely serve\n    user-requested paths from within a directory.\n\n    If the WSGI server sets a ``file_wrapper`` in ``environ``, it is\n    used, otherwise Werkzeug's built-in wrapper is used. Alternatively,\n    if the HTTP server supports ``X-Sendfile``, configuring Flask with\n    ``USE_X_SENDFILE = True`` will tell the server to send the given\n    path, which is much more efficient than reading it in Python.\n\n    :param path_or_file: The path to the file to send, relative to the\n        current working directory if a relative path is given.\n        Alternatively, a file-like object opened in binary mode. Make\n        sure the file pointer is seeked to the start of the data.\n    :param mimetype: The MIME type to send for the file. If not\n        provided, it will try to detect it from the file name.\n    :param as_attachment: Indicate to a browser that it should offer to\n        save the file instead of displaying it.\n    :param download_name: The default name browsers will use when saving\n        the file. Defaults to the passed file name.\n    :param conditional: Enable conditional and range responses based on\n        request headers. Requires passing a file path and ``environ``.\n    :param etag: Calculate an ETag for the file, which requires passing\n        a file path. Can also be a string to use instead.\n    :param last_modified: The last modified time to send for the file,\n        in seconds. If not provided, it will try to detect it from the\n        file path.\n    :param max_age: How long the client should cache the file, in\n        seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n        it will be ``no-cache`` to prefer conditional caching.\n\n    .. versionchanged:: 2.0\n        ``download_name`` replaces the ``attachment_filename``\n        parameter. If ``as_attachment=False``, it is passed with\n        ``Content-Disposition: inline`` instead.\n\n    .. versionchanged:: 2.0\n        ``max_age`` replaces the ``cache_timeout`` parameter.\n        ``conditional`` is enabled and ``max_age`` is not set by\n        default.\n\n    .. versionchanged:: 2.0\n        ``etag`` replaces the ``add_etags`` parameter. It can be a\n        string to use instead of generating one.\n\n    .. versionchanged:: 2.0\n        Passing a file-like object that inherits from\n        :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n        than sending an empty file.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionchanged:: 1.1\n        ``filename`` may be a :class:`~os.PathLike` object.\n\n    .. versionchanged:: 1.1\n        Passing a :class:`~io.BytesIO` object supports range requests.\n\n    .. versionchanged:: 1.0.3\n        Filenames are encoded with ASCII instead of Latin-1 for broader\n        compatibility with WSGI servers.\n\n    .. versionchanged:: 1.0\n        UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n    .. versionchanged:: 0.12\n        The filename is no longer automatically inferred from file\n        objects. If you want to use automatic MIME and etag support,\n        pass a filename via ``filename_or_fp`` or\n        ``attachment_filename``.\n\n    .. versionchanged:: 0.12\n        ``attachment_filename`` is preferred over ``filename`` for MIME\n        detection.\n\n    .. versionchanged:: 0.9\n        ``cache_timeout`` defaults to\n        :meth:`Flask.get_send_file_max_age`.\n\n    .. versionchanged:: 0.7\n        MIME guessing and etag support for file-like objects was\n        removed because it was unreliable. Pass a filename if you are\n        able to, otherwise attach an etag yourself.\n\n    .. versionchanged:: 0.5\n        The ``add_etags``, ``cache_timeout`` and ``conditional``\n        parameters were added. The default behavior is to add etags.\n\n    .. versionadded:: 0.2\n    \"\"\"\n    return werkzeug.utils.send_file(  # type: ignore[return-value]\n        **_prepare_send_file_kwargs(\n            path_or_file=path_or_file,\n            environ=request.environ,\n            mimetype=mimetype,\n            as_attachment=as_attachment,\n            download_name=download_name,\n            conditional=conditional,\n            etag=etag,\n            last_modified=last_modified,\n            max_age=max_age,\n        )\n    )",
      "docstring": "Send the contents of a file to the client.\n\nThe first argument can be a file path or a file-like object. Paths\nare preferred in most cases because Werkzeug can manage the file and\nget extra information from the path. Passing a file-like object\nrequires that the file is opened in binary mode, and is mostly\nuseful when building a file in memory with :class:`io.BytesIO`.\n\nNever pass file paths provided by a user. The path is assumed to be\ntrusted, so a user could craft a path to access a file you didn't\nintend. Use :func:`send_from_directory` to safely serve\nuser-requested paths from within a directory.\n\nIf the WSGI server sets a ``file_wrapper`` in ``environ``, it is\nused, otherwise Werkzeug's built-in wrapper is used. Alternatively,\nif the HTTP server supports ``X-Sendfile``, configuring Flask with\n``USE_X_SENDFILE = True`` will tell the server to send the given\npath, which is much more efficient than reading it in Python.\n\n:param path_or_file: The path to the file to send, relative to the\n    current working directory if a relative path is given.\n    Alternatively, a file-like object opened in binary mode. Make\n    sure the file pointer is seeked to the start of the data.\n:param mimetype: The MIME type to send for the file. If not\n    provided, it will try to detect it from the file name.\n:param as_attachment: Indicate to a browser that it should offer to\n    save the file instead of displaying it.\n:param download_name: The default name browsers will use when saving\n    the file. Defaults to the passed file name.\n:param conditional: Enable conditional and range responses based on\n    request headers. Requires passing a file path and ``environ``.\n:param etag: Calculate an ETag for the file, which requires passing\n    a file path. Can also be a string to use instead.\n:param last_modified: The last modified time to send for the file,\n    in seconds. If not provided, it will try to detect it from the\n    file path.\n:param max_age: How long the client should cache the file, in\n    seconds. If set, ``Cache-Control`` will be ``public``, otherwise\n    it will be ``no-cache`` to prefer conditional caching.\n\n.. versionchanged:: 2.0\n    ``download_name`` replaces the ``attachment_filename``\n    parameter. If ``as_attachment=False``, it is passed with\n    ``Content-Disposition: inline`` instead.\n\n.. versionchanged:: 2.0\n    ``max_age`` replaces the ``cache_timeout`` parameter.\n    ``conditional`` is enabled and ``max_age`` is not set by\n    default.\n\n.. versionchanged:: 2.0\n    ``etag`` replaces the ``add_etags`` parameter. It can be a\n    string to use instead of generating one.\n\n.. versionchanged:: 2.0\n    Passing a file-like object that inherits from\n    :class:`~io.TextIOBase` will raise a :exc:`ValueError` rather\n    than sending an empty file.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionchanged:: 1.1\n    ``filename`` may be a :class:`~os.PathLike` object.\n\n.. versionchanged:: 1.1\n    Passing a :class:`~io.BytesIO` object supports range requests.\n\n.. versionchanged:: 1.0.3\n    Filenames are encoded with ASCII instead of Latin-1 for broader\n    compatibility with WSGI servers.\n\n.. versionchanged:: 1.0\n    UTF-8 filenames as specified in :rfc:`2231` are supported.\n\n.. versionchanged:: 0.12\n    The filename is no longer automatically inferred from file\n    objects. If you want to use automatic MIME and etag support,\n    pass a filename via ``filename_or_fp`` or\n    ``attachment_filename``.\n\n.. versionchanged:: 0.12\n    ``attachment_filename`` is preferred over ``filename`` for MIME\n    detection.\n\n.. versionchanged:: 0.9\n    ``cache_timeout`` defaults to\n    :meth:`Flask.get_send_file_max_age`.\n\n.. versionchanged:: 0.7\n    MIME guessing and etag support for file-like objects was\n    removed because it was unreliable. Pass a filename if you are\n    able to, otherwise attach an etag yourself.\n\n.. versionchanged:: 0.5\n    The ``add_etags``, ``cache_timeout`` and ``conditional``\n    parameters were added. The default behavior is to add etags.\n\n.. versionadded:: 0.2",
      "decorators": [],
      "arguments": [
        "path_or_file",
        "mimetype",
        "as_attachment",
        "download_name",
        "conditional",
        "etag",
        "last_modified",
        "max_age"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_prepare_send_file_kwargs",
          "body": "def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n    if kwargs.get('max_age') is None:\n        kwargs['max_age'] = current_app.get_send_file_max_age\n    kwargs.update(environ=request.environ, use_x_sendfile=current_app.config['USE_X_SENDFILE'], response_class=current_app.response_class, _root_path=current_app.root_path)\n    return kwargs"
        }
      ]
    },
    {
      "name": "send_from_directory",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 526,
      "end_line_number": 567,
      "source_code": "def send_from_directory(\n    directory: os.PathLike[str] | str,\n    path: os.PathLike[str] | str,\n    **kwargs: t.Any,\n) -> Response:\n    \"\"\"Send a file from within a directory using :func:`send_file`.\n\n    .. code-block:: python\n\n        @app.route(\"/uploads/<path:name>\")\n        def download_file(name):\n            return send_from_directory(\n                app.config['UPLOAD_FOLDER'], name, as_attachment=True\n            )\n\n    This is a secure way to serve files from a folder, such as static\n    files or uploads. Uses :func:`~werkzeug.security.safe_join` to\n    ensure the path coming from the client is not maliciously crafted to\n    point outside the specified directory.\n\n    If the final path does not point to an existing regular file,\n    raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n    :param directory: The directory that ``path`` must be located under,\n        relative to the current application's root path. This *must not*\n        be a value provided by the client, otherwise it becomes insecure.\n    :param path: The path to the file to send, relative to\n        ``directory``.\n    :param kwargs: Arguments to pass to :func:`send_file`.\n\n    .. versionchanged:: 2.0\n        ``path`` replaces the ``filename`` parameter.\n\n    .. versionadded:: 2.0\n        Moved the implementation to Werkzeug. This is now a wrapper to\n        pass some Flask-specific arguments.\n\n    .. versionadded:: 0.5\n    \"\"\"\n    return werkzeug.utils.send_from_directory(  # type: ignore[return-value]\n        directory, path, **_prepare_send_file_kwargs(**kwargs)\n    )",
      "docstring": "Send a file from within a directory using :func:`send_file`.\n\n.. code-block:: python\n\n    @app.route(\"/uploads/<path:name>\")\n    def download_file(name):\n        return send_from_directory(\n            app.config['UPLOAD_FOLDER'], name, as_attachment=True\n        )\n\nThis is a secure way to serve files from a folder, such as static\nfiles or uploads. Uses :func:`~werkzeug.security.safe_join` to\nensure the path coming from the client is not maliciously crafted to\npoint outside the specified directory.\n\nIf the final path does not point to an existing regular file,\nraises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n\n:param directory: The directory that ``path`` must be located under,\n    relative to the current application's root path. This *must not*\n    be a value provided by the client, otherwise it becomes insecure.\n:param path: The path to the file to send, relative to\n    ``directory``.\n:param kwargs: Arguments to pass to :func:`send_file`.\n\n.. versionchanged:: 2.0\n    ``path`` replaces the ``filename`` parameter.\n\n.. versionadded:: 2.0\n    Moved the implementation to Werkzeug. This is now a wrapper to\n    pass some Flask-specific arguments.\n\n.. versionadded:: 0.5",
      "decorators": [],
      "arguments": [
        "directory",
        "path"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_prepare_send_file_kwargs",
          "body": "def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n    if kwargs.get('max_age') is None:\n        kwargs['max_age'] = current_app.get_send_file_max_age\n    kwargs.update(environ=request.environ, use_x_sendfile=current_app.config['USE_X_SENDFILE'], response_class=current_app.response_class, _root_path=current_app.root_path)\n    return kwargs"
        }
      ]
    },
    {
      "name": "get_root_path",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 570,
      "end_line_number": 624,
      "source_code": "def get_root_path(import_name: str) -> str:\n    \"\"\"Find the root path of a package, or the path that contains a\n    module. If it cannot be found, returns the current working\n    directory.\n\n    Not to be confused with the value returned by :func:`find_package`.\n\n    :meta private:\n    \"\"\"\n    # Module already imported and has a file attribute. Use that first.\n    mod = sys.modules.get(import_name)\n\n    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:\n        return os.path.dirname(os.path.abspath(mod.__file__))\n\n    # Next attempt: check the loader.\n    try:\n        spec = importlib.util.find_spec(import_name)\n\n        if spec is None:\n            raise ValueError\n    except (ImportError, ValueError):\n        loader = None\n    else:\n        loader = spec.loader\n\n    # Loader does not exist or we're referring to an unloaded main\n    # module or a main module without path (interactive sessions), go\n    # with the current working directory.\n    if loader is None:\n        return os.getcwd()\n\n    if hasattr(loader, \"get_filename\"):\n        filepath = loader.get_filename(import_name)  # pyright: ignore\n    else:\n        # Fall back to imports.\n        __import__(import_name)\n        mod = sys.modules[import_name]\n        filepath = getattr(mod, \"__file__\", None)\n\n        # If we don't have a file path it might be because it is a\n        # namespace package. In this case pick the root path from the\n        # first module that is contained in the package.\n        if filepath is None:\n            raise RuntimeError(\n                \"No root path can be found for the provided module\"\n                f\" {import_name!r}. This can happen because the module\"\n                \" came from an import hook that does not provide file\"\n                \" name information or because it's a namespace package.\"\n                \" In this case the root path needs to be explicitly\"\n                \" provided.\"\n            )\n\n    # filepath is import_name.py for a module, or __init__.py for a package.\n    return os.path.dirname(os.path.abspath(filepath))",
      "docstring": "Find the root path of a package, or the path that contains a\nmodule. If it cannot be found, returns the current working\ndirectory.\n\nNot to be confused with the value returned by :func:`find_package`.\n\n:meta private:",
      "decorators": [],
      "arguments": [
        "import_name"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_split_blueprint_path",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 628,
      "end_line_number": 634,
      "source_code": "def _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n\n    if \".\" in name:\n        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n\n    return out",
      "docstring": null,
      "decorators": [
        "cache"
      ],
      "arguments": [
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "out.extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "_split_blueprint_path",
          "body": "@cache\ndef _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n    if '.' in name:\n        out.extend(_split_blueprint_path(name.rpartition('.')[0]))\n    return out"
        }
      ]
    },
    {
      "name": "generator",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 108,
      "end_line_number": 128,
      "source_code": "def generator() -> t.Iterator[t.AnyStr | None]:\n        ctx = _cv_request.get(None)\n        if ctx is None:\n            raise RuntimeError(\n                \"'stream_with_context' can only be used when a request\"\n                \" context is active, such as in a view function.\"\n            )\n        with ctx:\n            # Dummy sentinel.  Has to be inside the context block or we're\n            # not actually keeping the context around.\n            yield None\n\n            # The try/finally is here so that if someone passes a WSGI level\n            # iterator in we're still running the cleanup logic.  Generators\n            # don't need that because they are closed on their destruction\n            # automatically.\n            try:\n                yield from gen\n            finally:\n                if hasattr(gen, \"close\"):\n                    gen.close()",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "decorator",
      "module": "helpers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\helpers.py",
      "line_number": 102,
      "end_line_number": 104,
      "source_code": "def decorator(*args: t.Any, **kwargs: t.Any) -> t.Any:\n            gen = generator_or_function(*args, **kwargs)  # type: ignore[operator]\n            return stream_with_context(gen)",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "sys",
        "typing",
        "datetime.datetime",
        "functools.cache",
        "functools.update_wrapper",
        "werkzeug.utils",
        "werkzeug.exceptions.abort",
        "werkzeug.utils.redirect",
        "werkzeug.wrappers.Response",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "globals.request_ctx",
        "globals.session",
        "signals.message_flashed",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "stream_with_context",
          "body": "@t.overload\ndef stream_with_context(generator_or_function: t.Iterator[t.AnyStr]) -> t.Iterator[t.AnyStr]:\n    ..."
        }
      ]
    },
    {
      "name": "wsgi_errors_stream",
      "module": "logging",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\logging.py",
      "line_number": 16,
      "end_line_number": 28,
      "source_code": "def wsgi_errors_stream() -> t.TextIO:\n    \"\"\"Find the most appropriate error stream for the application. If a request\n    is active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\n    If you configure your own :class:`logging.StreamHandler`, you may want to\n    use this for the stream. If you are using file or dict configuration and\n    can't import this directly, you can refer to it as\n    ``ext://flask.logging.wsgi_errors_stream``.\n    \"\"\"\n    if request:\n        return request.environ[\"wsgi.errors\"]  # type: ignore[no-any-return]\n\n    return sys.stderr",
      "docstring": "Find the most appropriate error stream for the application. If a request\nis active, log to ``wsgi.errors``, otherwise use ``sys.stderr``.\n\nIf you configure your own :class:`logging.StreamHandler`, you may want to\nuse this for the stream. If you are using file or dict configuration and\ncan't import this directly, you can refer to it as\n``ext://flask.logging.wsgi_errors_stream``.",
      "decorators": [
        "LocalProxy"
      ],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "logging",
        "sys",
        "typing",
        "werkzeug.local.LocalProxy",
        "globals.request",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "has_level_handler",
      "module": "logging",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\logging.py",
      "line_number": 31,
      "end_line_number": 47,
      "source_code": "def has_level_handler(logger: logging.Logger) -> bool:\n    \"\"\"Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    \"\"\"\n    level = logger.getEffectiveLevel()\n    current = logger\n\n    while current:\n        if any(handler.level <= level for handler in current.handlers):\n            return True\n\n        if not current.propagate:\n            break\n\n        current = current.parent  # type: ignore\n\n    return False",
      "docstring": "Check if there is a handler in the logging chain that will handle the\ngiven logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.",
      "decorators": [],
      "arguments": [
        "logger"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "sys",
        "typing",
        "werkzeug.local.LocalProxy",
        "globals.request",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "create_logger",
      "module": "logging",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\logging.py",
      "line_number": 58,
      "end_line_number": 79,
      "source_code": "def create_logger(app: App) -> logging.Logger:\n    \"\"\"Get the Flask app's logger and configure it if needed.\n\n    The logger name will be the same as\n    :attr:`app.import_name <flask.Flask.name>`.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    \"\"\"\n    logger = logging.getLogger(app.name)\n\n    if app.debug and not logger.level:\n        logger.setLevel(logging.DEBUG)\n\n    if not has_level_handler(logger):\n        logger.addHandler(default_handler)\n\n    return logger",
      "docstring": "Get the Flask app's logger and configure it if needed.\n\nThe logger name will be the same as\n:attr:`app.import_name <flask.Flask.name>`.\n\nWhen :attr:`~flask.Flask.debug` is enabled, set the logger level to\n:data:`logging.DEBUG` if it is not set.\n\nIf there is no handler for the logger's effective level, add a\n:class:`~logging.StreamHandler` for\n:func:`~flask.logging.wsgi_errors_stream` with a basic format.",
      "decorators": [],
      "arguments": [
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "sys",
        "typing",
        "werkzeug.local.LocalProxy",
        "globals.request",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "has_level_handler",
          "body": "def has_level_handler(logger: logging.Logger) -> bool:\n    \"\"\"Check if there is a handler in the logging chain that will handle the\n    given logger's :meth:`effective level <~logging.Logger.getEffectiveLevel>`.\n    \"\"\"\n    level = logger.getEffectiveLevel()\n    current = logger\n    while current:\n        if any((handler.level <= level for handler in current.handlers)):\n            return True\n        if not current.propagate:\n            break\n        current = current.parent\n    return False"
        }
      ]
    },
    {
      "name": "_lazy_sha1",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 290,
      "end_line_number": 295,
      "source_code": "def _lazy_sha1(string: bytes = b\"\") -> t.Any:\n    \"\"\"Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\n    SHA-1, in which case the import and use as a default would fail before the\n    developer can configure something else.\n    \"\"\"\n    return hashlib.sha1(string)",
      "docstring": "Don't access ``hashlib.sha1`` until runtime. FIPS builds may not include\nSHA-1, in which case the import and use as a default would fail before the\ndeveloper can configure something else.",
      "decorators": [],
      "arguments": [
        "string"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "permanent",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 28,
      "end_line_number": 30,
      "source_code": "def permanent(self) -> bool:\n        \"\"\"This reflects the ``'_permanent'`` key in the dict.\"\"\"\n        return self.get(\"_permanent\", False)",
      "docstring": "This reflects the ``'_permanent'`` key in the dict.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "permanent",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 33,
      "end_line_number": 34,
      "source_code": "def permanent(self, value: bool) -> None:\n        self[\"_permanent\"] = bool(value)",
      "docstring": null,
      "decorators": [
        "permanent.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 74,
      "end_line_number": 82,
      "source_code": "def __init__(\n        self,\n        initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None,\n    ) -> None:\n        def on_update(self: te.Self) -> None:\n            self.modified = True\n            self.accessed = True\n\n        super().__init__(initial, on_update)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "initial"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__getitem__",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 84,
      "end_line_number": 86,
      "source_code": "def __getitem__(self, key: str) -> t.Any:\n        self.accessed = True\n        return super().__getitem__(key)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "key"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 88,
      "end_line_number": 90,
      "source_code": "def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "key",
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "setdefault",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 92,
      "end_line_number": 94,
      "source_code": "def setdefault(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().setdefault(key, default)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "key",
        "default"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_fail",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 103,
      "end_line_number": 108,
      "source_code": "def _fail(self, *args: t.Any, **kwargs: t.Any) -> t.NoReturn:\n        raise RuntimeError(\n            \"The session is unavailable because no secret \"\n            \"key was set.  Set the secret_key on the \"\n            \"application to something unique and secret.\"\n        )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "make_null_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 164,
      "end_line_number": 174,
      "source_code": "def make_null_session(self, app: Flask) -> NullSession:\n        \"\"\"Creates a null session which acts as a replacement object if the\n        real session support could not be loaded due to a configuration\n        error.  This mainly aids the user experience because the job of the\n        null session is to still support lookup without complaining but\n        modifications are answered with a helpful error message of what\n        failed.\n\n        This creates an instance of :attr:`null_session_class` by default.\n        \"\"\"\n        return self.null_session_class()",
      "docstring": "Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed.\n\nThis creates an instance of :attr:`null_session_class` by default.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "is_null_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 176,
      "end_line_number": 183,
      "source_code": "def is_null_session(self, obj: object) -> bool:\n        \"\"\"Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        \"\"\"\n        return isinstance(obj, self.null_session_class)",
      "docstring": "Checks if a given object is a null session.  Null sessions are\nnot asked to be saved.\n\nThis checks if the object is an instance of :attr:`null_session_class`\nby default.",
      "decorators": [],
      "arguments": [
        "self",
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_name",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 185,
      "end_line_number": 187,
      "source_code": "def get_cookie_name(self, app: Flask) -> str:\n        \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n        return app.config[\"SESSION_COOKIE_NAME\"]",
      "docstring": "The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_domain",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 189,
      "end_line_number": 199,
      "source_code": "def get_cookie_domain(self, app: Flask) -> str | None:\n        \"\"\"The value of the ``Domain`` parameter on the session cookie. If not set,\n        browsers will only send the cookie to the exact domain it was set from.\n        Otherwise, they will send it to any subdomain of the given value as well.\n\n        Uses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n        .. versionchanged:: 2.3\n            Not set by default, does not fall back to ``SERVER_NAME``.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_DOMAIN\"]",
      "docstring": "The value of the ``Domain`` parameter on the session cookie. If not set,\nbrowsers will only send the cookie to the exact domain it was set from.\nOtherwise, they will send it to any subdomain of the given value as well.\n\nUses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n.. versionchanged:: 2.3\n    Not set by default, does not fall back to ``SERVER_NAME``.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_path",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 201,
      "end_line_number": 207,
      "source_code": "def get_cookie_path(self, app: Flask) -> str:\n        \"\"\"Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PATH\"] or app.config[\"APPLICATION_ROOT\"]",
      "docstring": "Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the ``SESSION_COOKIE_PATH``\nconfig var if it's set, and falls back to ``APPLICATION_ROOT`` or\nuses ``/`` if it's ``None``.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_httponly",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 209,
      "end_line_number": 214,
      "source_code": "def get_cookie_httponly(self, app: Flask) -> bool:\n        \"\"\"Returns True if the session cookie should be httponly.  This\n        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n        config var.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_HTTPONLY\"]",
      "docstring": "Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\nconfig var.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_secure",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 216,
      "end_line_number": 220,
      "source_code": "def get_cookie_secure(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be secure.  This currently\n        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SECURE\"]",
      "docstring": "Returns True if the cookie should be secure.  This currently\njust returns the value of the ``SESSION_COOKIE_SECURE`` setting.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_samesite",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 222,
      "end_line_number": 227,
      "source_code": "def get_cookie_samesite(self, app: Flask) -> str | None:\n        \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n        ``SameSite`` attribute. This currently just returns the value of\n        the :data:`SESSION_COOKIE_SAMESITE` setting.\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_SAMESITE\"]",
      "docstring": "Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n``SameSite`` attribute. This currently just returns the value of\nthe :data:`SESSION_COOKIE_SAMESITE` setting.",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_cookie_partitioned",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 229,
      "end_line_number": 235,
      "source_code": "def get_cookie_partitioned(self, app: Flask) -> bool:\n        \"\"\"Returns True if the cookie should be partitioned. By default, uses\n        the value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n        .. versionadded:: 3.1\n        \"\"\"\n        return app.config[\"SESSION_COOKIE_PARTITIONED\"]",
      "docstring": "Returns True if the cookie should be partitioned. By default, uses\nthe value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n.. versionadded:: 3.1",
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_expiration_time",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 237,
      "end_line_number": 245,
      "source_code": "def get_expiration_time(self, app: Flask, session: SessionMixin) -> datetime | None:\n        \"\"\"A helper method that returns an expiration date for the session\n        or ``None`` if the session is linked to the browser session.  The\n        default implementation returns now + the permanent session\n        lifetime configured on the application.\n        \"\"\"\n        if session.permanent:\n            return datetime.now(timezone.utc) + app.permanent_session_lifetime\n        return None",
      "docstring": "A helper method that returns an expiration date for the session\nor ``None`` if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application.",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "session"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "should_set_cookie",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 247,
      "end_line_number": 261,
      "source_code": "def should_set_cookie(self, app: Flask, session: SessionMixin) -> bool:\n        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header\n        should be set for this session cookie for this response. If the session\n        has been modified, the cookie is set. If the session is permanent and\n        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n        always set.\n\n        This check is usually skipped if the session was deleted.\n\n        .. versionadded:: 0.11\n        \"\"\"\n\n        return session.modified or (\n            session.permanent and app.config[\"SESSION_REFRESH_EACH_REQUEST\"]\n        )",
      "docstring": "Used by session backends to determine if a ``Set-Cookie`` header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\nalways set.\n\nThis check is usually skipped if the session was deleted.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "session"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "open_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 263,
      "end_line_number": 275,
      "source_code": "def open_session(self, app: Flask, request: Request) -> SessionMixin | None:\n        \"\"\"This is called at the beginning of each request, after\n        pushing the request context, before matching the URL.\n\n        This must return an object which implements a dictionary-like\n        interface as well as the :class:`SessionMixin` interface.\n\n        This will return ``None`` to indicate that loading failed in\n        some way that is not immediately an error. The request\n        context will fall back to using :meth:`make_null_session`\n        in this case.\n        \"\"\"\n        raise NotImplementedError()",
      "docstring": "This is called at the beginning of each request, after\npushing the request context, before matching the URL.\n\nThis must return an object which implements a dictionary-like\ninterface as well as the :class:`SessionMixin` interface.\n\nThis will return ``None`` to indicate that loading failed in\nsome way that is not immediately an error. The request\ncontext will fall back to using :meth:`make_null_session`\nin this case.",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "save_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 277,
      "end_line_number": 284,
      "source_code": "def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        \"\"\"This is called at the end of each request, after generating\n        a response, before removing the request context. It is skipped\n        if :meth:`is_null_session` returns ``True``.\n        \"\"\"\n        raise NotImplementedError()",
      "docstring": "This is called at the end of each request, after generating\na response, before removing the request context. It is skipped\nif :meth:`is_null_session` returns ``True``.",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "session",
        "response"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_signing_serializer",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 317,
      "end_line_number": 334,
      "source_code": "def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n        if not app.secret_key:\n            return None\n\n        keys: list[str | bytes] = [app.secret_key]\n\n        if fallbacks := app.config[\"SECRET_KEY_FALLBACKS\"]:\n            keys.extend(fallbacks)\n\n        return URLSafeTimedSerializer(\n            keys,  # type: ignore[arg-type]\n            salt=self.salt,\n            serializer=self.serializer,\n            signer_kwargs={\n                \"key_derivation\": self.key_derivation,\n                \"digest_method\": self.digest_method,\n            },\n        )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "keys.extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        }
      ]
    },
    {
      "name": "open_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 336,
      "end_line_number": 348,
      "source_code": "def open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n        s = self.get_signing_serializer(app)\n        if s is None:\n            return None\n        val = request.cookies.get(self.get_cookie_name(app))\n        if not val:\n            return self.session_class()\n        max_age = int(app.permanent_session_lifetime.total_seconds())\n        try:\n            data = s.loads(val, max_age=max_age)\n            return self.session_class(data)\n        except BadSignature:\n            return self.session_class()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "request"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.get_signing_serializer",
          "body": "def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n    if not app.secret_key:\n        return None\n    keys: list[str | bytes] = [app.secret_key]\n    if (fallbacks := app.config['SECRET_KEY_FALLBACKS']):\n        keys.extend(fallbacks)\n    return URLSafeTimedSerializer(keys, salt=self.salt, serializer=self.serializer, signer_kwargs={'key_derivation': self.key_derivation, 'digest_method': self.digest_method})"
        },
        {
          "name": "request.cookies.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.get_cookie_name",
          "body": "def get_cookie_name(self, app: Flask) -> str:\n    \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n    return app.config['SESSION_COOKIE_NAME']"
        },
        {
          "name": "s.loads",
          "body": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "save_session",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 350,
      "end_line_number": 398,
      "source_code": "def save_session(\n        self, app: Flask, session: SessionMixin, response: Response\n    ) -> None:\n        name = self.get_cookie_name(app)\n        domain = self.get_cookie_domain(app)\n        path = self.get_cookie_path(app)\n        secure = self.get_cookie_secure(app)\n        partitioned = self.get_cookie_partitioned(app)\n        samesite = self.get_cookie_samesite(app)\n        httponly = self.get_cookie_httponly(app)\n\n        # Add a \"Vary: Cookie\" header if the session was accessed at all.\n        if session.accessed:\n            response.vary.add(\"Cookie\")\n\n        # If the session is modified to be empty, remove the cookie.\n        # If the session is empty, return without setting the cookie.\n        if not session:\n            if session.modified:\n                response.delete_cookie(\n                    name,\n                    domain=domain,\n                    path=path,\n                    secure=secure,\n                    partitioned=partitioned,\n                    samesite=samesite,\n                    httponly=httponly,\n                )\n                response.vary.add(\"Cookie\")\n\n            return\n\n        if not self.should_set_cookie(app, session):\n            return\n\n        expires = self.get_expiration_time(app, session)\n        val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore[union-attr]\n        response.set_cookie(\n            name,\n            val,\n            expires=expires,\n            httponly=httponly,\n            domain=domain,\n            path=path,\n            secure=secure,\n            partitioned=partitioned,\n            samesite=samesite,\n        )\n        response.vary.add(\"Cookie\")",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "session",
        "response"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.get_cookie_name",
          "body": "def get_cookie_name(self, app: Flask) -> str:\n    \"\"\"The name of the session cookie. Uses``app.config[\"SESSION_COOKIE_NAME\"]``.\"\"\"\n    return app.config['SESSION_COOKIE_NAME']"
        },
        {
          "name": "self.get_cookie_domain",
          "body": "def get_cookie_domain(self, app: Flask) -> str | None:\n    \"\"\"The value of the ``Domain`` parameter on the session cookie. If not set,\n        browsers will only send the cookie to the exact domain it was set from.\n        Otherwise, they will send it to any subdomain of the given value as well.\n\n        Uses the :data:`SESSION_COOKIE_DOMAIN` config.\n\n        .. versionchanged:: 2.3\n            Not set by default, does not fall back to ``SERVER_NAME``.\n        \"\"\"\n    return app.config['SESSION_COOKIE_DOMAIN']"
        },
        {
          "name": "self.get_cookie_path",
          "body": "def get_cookie_path(self, app: Flask) -> str:\n    \"\"\"Returns the path for which the cookie should be valid.  The\n        default implementation uses the value from the ``SESSION_COOKIE_PATH``\n        config var if it's set, and falls back to ``APPLICATION_ROOT`` or\n        uses ``/`` if it's ``None``.\n        \"\"\"\n    return app.config['SESSION_COOKIE_PATH'] or app.config['APPLICATION_ROOT']"
        },
        {
          "name": "self.get_cookie_secure",
          "body": "def get_cookie_secure(self, app: Flask) -> bool:\n    \"\"\"Returns True if the cookie should be secure.  This currently\n        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.\n        \"\"\"\n    return app.config['SESSION_COOKIE_SECURE']"
        },
        {
          "name": "self.get_cookie_partitioned",
          "body": "def get_cookie_partitioned(self, app: Flask) -> bool:\n    \"\"\"Returns True if the cookie should be partitioned. By default, uses\n        the value of :data:`SESSION_COOKIE_PARTITIONED`.\n\n        .. versionadded:: 3.1\n        \"\"\"\n    return app.config['SESSION_COOKIE_PARTITIONED']"
        },
        {
          "name": "self.get_cookie_samesite",
          "body": "def get_cookie_samesite(self, app: Flask) -> str | None:\n    \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n        ``SameSite`` attribute. This currently just returns the value of\n        the :data:`SESSION_COOKIE_SAMESITE` setting.\n        \"\"\"\n    return app.config['SESSION_COOKIE_SAMESITE']"
        },
        {
          "name": "self.get_cookie_httponly",
          "body": "def get_cookie_httponly(self, app: Flask) -> bool:\n    \"\"\"Returns True if the session cookie should be httponly.  This\n        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``\n        config var.\n        \"\"\"\n    return app.config['SESSION_COOKIE_HTTPONLY']"
        },
        {
          "name": "self.get_expiration_time",
          "body": "def get_expiration_time(self, app: Flask, session: SessionMixin) -> datetime | None:\n    \"\"\"A helper method that returns an expiration date for the session\n        or ``None`` if the session is linked to the browser session.  The\n        default implementation returns now + the permanent session\n        lifetime configured on the application.\n        \"\"\"\n    if session.permanent:\n        return datetime.now(timezone.utc) + app.permanent_session_lifetime\n    return None"
        },
        {
          "name": "self.should_set_cookie",
          "body": "def should_set_cookie(self, app: Flask, session: SessionMixin) -> bool:\n    \"\"\"Used by session backends to determine if a ``Set-Cookie`` header\n        should be set for this session cookie for this response. If the session\n        has been modified, the cookie is set. If the session is permanent and\n        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n        always set.\n\n        This check is usually skipped if the session was deleted.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return session.modified or (session.permanent and app.config['SESSION_REFRESH_EACH_REQUEST'])"
        },
        {
          "name": "self.get_signing_serializer",
          "body": "def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n    if not app.secret_key:\n        return None\n    keys: list[str | bytes] = [app.secret_key]\n    if (fallbacks := app.config['SECRET_KEY_FALLBACKS']):\n        keys.extend(fallbacks)\n    return URLSafeTimedSerializer(keys, salt=self.salt, serializer=self.serializer, signer_kwargs={'key_derivation': self.key_derivation, 'digest_method': self.digest_method})"
        }
      ]
    },
    {
      "name": "on_update",
      "module": "sessions",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sessions.py",
      "line_number": 78,
      "end_line_number": 80,
      "source_code": "def on_update(self: te.Self) -> None:\n            self.modified = True\n            self.accessed = True",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "collections.abc",
        "hashlib",
        "typing",
        "collections.abc.MutableMapping",
        "datetime.datetime",
        "datetime.timezone",
        "itsdangerous.BadSignature",
        "itsdangerous.URLSafeTimedSerializer",
        "werkzeug.datastructures.CallbackDict",
        "json.tag.TaggedJSONSerializer",
        "typing_extensions",
        "app.Flask",
        "wrappers.Request",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_default_template_ctx_processor",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 24,
      "end_line_number": 36,
      "source_code": "def _default_template_ctx_processor() -> dict[str, t.Any]:\n    \"\"\"Default template context processor.  Injects `request`,\n    `session` and `g`.\n    \"\"\"\n    appctx = _cv_app.get(None)\n    reqctx = _cv_request.get(None)\n    rv: dict[str, t.Any] = {}\n    if appctx is not None:\n        rv[\"g\"] = appctx.g\n    if reqctx is not None:\n        rv[\"request\"] = reqctx.request\n        rv[\"session\"] = reqctx.session\n    return rv",
      "docstring": "Default template context processor.  Injects `request`,\n`session` and `g`.",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_cv_app.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "_cv_request.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "_render",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 126,
      "end_line_number": 135,
      "source_code": "def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    rv = template.render(context)\n    template_rendered.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n    return rv",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "app",
        "template",
        "context"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.update_template_context",
          "body": "def update_template_context(self, context: dict[str, t.Any]) -> None:\n    \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\n    names: t.Iterable[str | None] = (None,)\n    if request:\n        names = chain(names, reversed(request.blueprints))\n    orig_ctx = context.copy()\n    for name in names:\n        if name in self.template_context_processors:\n            for func in self.template_context_processors[name]:\n                context.update(self.ensure_sync(func)())\n    context.update(orig_ctx)"
        }
      ]
    },
    {
      "name": "render_template",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 138,
      "end_line_number": 150,
      "source_code": "def render_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> str:\n    \"\"\"Render a template by name with the given context.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.get_or_select_template(template_name_or_list)\n    return _render(app, template, context)",
      "docstring": "Render a template by name with the given context.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.",
      "decorators": [],
      "arguments": [
        "template_name_or_list"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_render",
          "body": "def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:\n    app.update_template_context(context)\n    before_render_template.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    rv = template.render(context)\n    template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    return rv"
        }
      ]
    },
    {
      "name": "render_template_string",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 153,
      "end_line_number": 162,
      "source_code": "def render_template_string(source: str, **context: t.Any) -> str:\n    \"\"\"Render a template from the given source string with the given\n    context.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.from_string(source)\n    return _render(app, template, context)",
      "docstring": "Render a template from the given source string with the given\ncontext.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.",
      "decorators": [],
      "arguments": [
        "source"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_render",
          "body": "def _render(app: Flask, template: Template, context: dict[str, t.Any]) -> str:\n    app.update_template_context(context)\n    before_render_template.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    rv = template.render(context)\n    template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    return rv"
        }
      ]
    },
    {
      "name": "_stream",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 165,
      "end_line_number": 185,
      "source_code": "def _stream(\n    app: Flask, template: Template, context: dict[str, t.Any]\n) -> t.Iterator[str]:\n    app.update_template_context(context)\n    before_render_template.send(\n        app, _async_wrapper=app.ensure_sync, template=template, context=context\n    )\n\n    def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(\n            app, _async_wrapper=app.ensure_sync, template=template, context=context\n        )\n\n    rv = generate()\n\n    # If a request context is active, keep it while generating.\n    if request:\n        rv = stream_with_context(rv)\n\n    return rv",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "app",
        "template",
        "context"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.update_template_context",
          "body": "def update_template_context(self, context: dict[str, t.Any]) -> None:\n    \"\"\"Update the template context with some commonly used variables.\n        This injects request, session, config and g into the template\n        context as well as everything template context processors want\n        to inject.  Note that the as of Flask 0.6, the original values\n        in the context will not be overridden if a context processor\n        decides to return a value with the same key.\n\n        :param context: the context as a dictionary that is updated in place\n                        to add extra variables.\n        \"\"\"\n    names: t.Iterable[str | None] = (None,)\n    if request:\n        names = chain(names, reversed(request.blueprints))\n    orig_ctx = context.copy()\n    for name in names:\n        if name in self.template_context_processors:\n            for func in self.template_context_processors[name]:\n                context.update(self.ensure_sync(func)())\n    context.update(orig_ctx)"
        },
        {
          "name": "generate",
          "body": "def generate() -> t.Iterator[str]:\n    yield from template.generate(context)\n    template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)"
        },
        {
          "name": "stream_with_context",
          "body": "@t.overload\ndef stream_with_context(generator_or_function: t.Iterator[t.AnyStr]) -> t.Iterator[t.AnyStr]:\n    ..."
        },
        {
          "name": "template.generate",
          "body": "def generate() -> t.Iterator[str]:\n    yield from template.generate(context)\n    template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)"
        }
      ]
    },
    {
      "name": "stream_template",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 188,
      "end_line_number": 204,
      "source_code": "def stream_template(\n    template_name_or_list: str | Template | list[str | Template],\n    **context: t.Any,\n) -> t.Iterator[str]:\n    \"\"\"Render a template by name with the given context as a stream.\n    This returns an iterator of strings, which can be used as a\n    streaming response from a view.\n\n    :param template_name_or_list: The name of the template to render. If\n        a list is given, the first name to exist will be rendered.\n    :param context: The variables to make available in the template.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.get_or_select_template(template_name_or_list)\n    return _stream(app, template, context)",
      "docstring": "Render a template by name with the given context as a stream.\nThis returns an iterator of strings, which can be used as a\nstreaming response from a view.\n\n:param template_name_or_list: The name of the template to render. If\n    a list is given, the first name to exist will be rendered.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
      "decorators": [],
      "arguments": [
        "template_name_or_list"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_stream",
          "body": "def _stream(app: Flask, template: Template, context: dict[str, t.Any]) -> t.Iterator[str]:\n    app.update_template_context(context)\n    before_render_template.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n\n    def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    rv = generate()\n    if request:\n        rv = stream_with_context(rv)\n    return rv"
        }
      ]
    },
    {
      "name": "stream_template_string",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 207,
      "end_line_number": 219,
      "source_code": "def stream_template_string(source: str, **context: t.Any) -> t.Iterator[str]:\n    \"\"\"Render a template from the given source string with the given\n    context as a stream. This returns an iterator of strings, which can\n    be used as a streaming response from a view.\n\n    :param source: The source code of the template to render.\n    :param context: The variables to make available in the template.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    app = current_app._get_current_object()  # type: ignore[attr-defined]\n    template = app.jinja_env.from_string(source)\n    return _stream(app, template, context)",
      "docstring": "Render a template from the given source string with the given\ncontext as a stream. This returns an iterator of strings, which can\nbe used as a streaming response from a view.\n\n:param source: The source code of the template to render.\n:param context: The variables to make available in the template.\n\n.. versionadded:: 2.2",
      "decorators": [],
      "arguments": [
        "source"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_stream",
          "body": "def _stream(app: Flask, template: Template, context: dict[str, t.Any]) -> t.Iterator[str]:\n    app.update_template_context(context)\n    before_render_template.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n\n    def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)\n    rv = generate()\n    if request:\n        rv = stream_with_context(rv)\n    return rv"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 45,
      "end_line_number": 49,
      "source_code": "def __init__(self, app: App, **options: t.Any) -> None:\n        if \"loader\" not in options:\n            options[\"loader\"] = app.create_global_jinja_loader()\n        BaseEnvironment.__init__(self, **options)\n        self.app = app",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "BaseEnvironment.__init__",
          "body": "def __init__(self, import_name: str, static_url_path: str | None=None, static_folder: str | os.PathLike[str] | None='static', static_host: str | None=None, host_matching: bool=False, subdomain_matching: bool=False, template_folder: str | os.PathLike[str] | None='templates', instance_path: str | None=None, instance_relative_config: bool=False, root_path: str | None=None):\n    super().__init__(import_name=import_name, static_url_path=static_url_path, static_folder=static_folder, static_host=static_host, host_matching=host_matching, subdomain_matching=subdomain_matching, template_folder=template_folder, instance_path=instance_path, instance_relative_config=instance_relative_config, root_path=root_path)\n    self.cli = cli.AppGroup()\n    self.cli.name = self.name\n    if self.has_static_folder:\n        assert bool(static_host) == host_matching, 'Invalid static_host/host_matching combination'\n        self_ref = weakref.ref(self)\n        self.add_url_rule(f'{self.static_url_path}/<path:filename>', endpoint='static', host=static_host, view_func=lambda **kw: self_ref().send_static_file(**kw))"
        },
        {
          "name": "app.create_global_jinja_loader",
          "body": "def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n    \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    return DispatchingJinjaLoader(self)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 57,
      "end_line_number": 58,
      "source_code": "def __init__(self, app: App) -> None:\n        self.app = app",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "get_source",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 60,
      "end_line_number": 65,
      "source_code": "def get_source(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        if self.app.config[\"EXPLAIN_TEMPLATE_LOADING\"]:\n            return self._get_source_explained(environment, template)\n        return self._get_source_fast(environment, template)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "environment",
        "template"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._get_source_fast",
          "body": "def _get_source_fast(self, environment: BaseEnvironment, template: str) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n    for _srcobj, loader in self._iter_loaders(template):\n        try:\n            return loader.get_source(environment, template)\n        except TemplateNotFound:\n            continue\n    raise TemplateNotFound(template)"
        },
        {
          "name": "self._get_source_explained",
          "body": "def _get_source_explained(self, environment: BaseEnvironment, template: str) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n    attempts = []\n    rv: tuple[str, str | None, t.Callable[[], bool] | None] | None\n    trv: None | tuple[str, str | None, t.Callable[[], bool] | None] = None\n    for srcobj, loader in self._iter_loaders(template):\n        try:\n            rv = loader.get_source(environment, template)\n            if trv is None:\n                trv = rv\n        except TemplateNotFound:\n            rv = None\n        attempts.append((loader, srcobj, rv))\n    from .debughelpers import explain_template_loading_attempts\n    explain_template_loading_attempts(self.app, template, attempts)\n    if trv is not None:\n        return trv\n    raise TemplateNotFound(template)"
        }
      ]
    },
    {
      "name": "_get_source_explained",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 67,
      "end_line_number": 89,
      "source_code": "def _get_source_explained(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        attempts = []\n        rv: tuple[str, str | None, t.Callable[[], bool] | None] | None\n        trv: None | (tuple[str, str | None, t.Callable[[], bool] | None]) = None\n\n        for srcobj, loader in self._iter_loaders(template):\n            try:\n                rv = loader.get_source(environment, template)\n                if trv is None:\n                    trv = rv\n            except TemplateNotFound:\n                rv = None\n            attempts.append((loader, srcobj, rv))\n\n        from .debughelpers import explain_template_loading_attempts\n\n        explain_template_loading_attempts(self.app, template, attempts)\n\n        if trv is not None:\n            return trv\n        raise TemplateNotFound(template)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "environment",
        "template"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._iter_loaders",
          "body": "def _iter_loaders(self, template: str) -> t.Iterator[tuple[Scaffold, BaseLoader]]:\n    loader = self.app.jinja_loader\n    if loader is not None:\n        yield (self.app, loader)\n    for blueprint in self.app.iter_blueprints():\n        loader = blueprint.jinja_loader\n        if loader is not None:\n            yield (blueprint, loader)"
        },
        {
          "name": "explain_template_loading_attempts",
          "body": "def explain_template_loading_attempts(app: App, template: str, attempts: list[tuple[BaseLoader, Scaffold, tuple[str, str | None, t.Callable[[], bool] | None] | None]]) -> None:\n    \"\"\"This should help developers understand what failed\"\"\"\n    info = [f'Locating template {template!r}:']\n    total_found = 0\n    blueprint = None\n    if request_ctx and request_ctx.request.blueprint is not None:\n        blueprint = request_ctx.request.blueprint\n    for idx, (loader, srcobj, triple) in enumerate(attempts):\n        if isinstance(srcobj, App):\n            src_info = f'application {srcobj.import_name!r}'\n        elif isinstance(srcobj, Blueprint):\n            src_info = f'blueprint {srcobj.name!r} ({srcobj.import_name})'\n        else:\n            src_info = repr(srcobj)\n        info.append(f'{idx + 1:5}: trying loader of {src_info}')\n        for line in _dump_loader_info(loader):\n            info.append(f'       {line}')\n        if triple is None:\n            detail = 'no match'\n        else:\n            detail = f'found ({triple[1] or '<string>'!r})'\n            total_found += 1\n        info.append(f'       -> {detail}')\n    seems_fishy = False\n    if total_found == 0:\n        info.append('Error: the template could not be found.')\n        seems_fishy = True\n    elif total_found > 1:\n        info.append('Warning: multiple loaders returned a match for the template.')\n        seems_fishy = True\n    if blueprint is not None and seems_fishy:\n        info.append(f'  The template was looked up from an endpoint that belongs to the blueprint {blueprint!r}.')\n        info.append('  Maybe you did not place a template in the right folder?')\n        info.append('  See https://flask.palletsprojects.com/blueprints/#templates')\n    app.logger.info('\\n'.join(info))"
        },
        {
          "name": "loader.get_source",
          "body": "def get_source(self, environment: BaseEnvironment, template: str) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n    if self.app.config['EXPLAIN_TEMPLATE_LOADING']:\n        return self._get_source_explained(environment, template)\n    return self._get_source_fast(environment, template)"
        }
      ]
    },
    {
      "name": "_get_source_fast",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 91,
      "end_line_number": 99,
      "source_code": "def _get_source_fast(\n        self, environment: BaseEnvironment, template: str\n    ) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n        for _srcobj, loader in self._iter_loaders(template):\n            try:\n                return loader.get_source(environment, template)\n            except TemplateNotFound:\n                continue\n        raise TemplateNotFound(template)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "environment",
        "template"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._iter_loaders",
          "body": "def _iter_loaders(self, template: str) -> t.Iterator[tuple[Scaffold, BaseLoader]]:\n    loader = self.app.jinja_loader\n    if loader is not None:\n        yield (self.app, loader)\n    for blueprint in self.app.iter_blueprints():\n        loader = blueprint.jinja_loader\n        if loader is not None:\n            yield (blueprint, loader)"
        },
        {
          "name": "loader.get_source",
          "body": "def get_source(self, environment: BaseEnvironment, template: str) -> tuple[str, str | None, t.Callable[[], bool] | None]:\n    if self.app.config['EXPLAIN_TEMPLATE_LOADING']:\n        return self._get_source_explained(environment, template)\n    return self._get_source_fast(environment, template)"
        }
      ]
    },
    {
      "name": "_iter_loaders",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 101,
      "end_line_number": 109,
      "source_code": "def _iter_loaders(self, template: str) -> t.Iterator[tuple[Scaffold, BaseLoader]]:\n        loader = self.app.jinja_loader\n        if loader is not None:\n            yield self.app, loader\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                yield blueprint, loader",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "template"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.app.iter_blueprints",
          "body": "def iter_blueprints(self) -> t.ValuesView[Blueprint]:\n    \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.blueprints.values()"
        }
      ]
    },
    {
      "name": "list_templates",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 111,
      "end_line_number": 123,
      "source_code": "def list_templates(self) -> list[str]:\n        result = set()\n        loader = self.app.jinja_loader\n        if loader is not None:\n            result.update(loader.list_templates())\n\n        for blueprint in self.app.iter_blueprints():\n            loader = blueprint.jinja_loader\n            if loader is not None:\n                for template in loader.list_templates():\n                    result.add(template)\n\n        return list(result)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.app.iter_blueprints",
          "body": "def iter_blueprints(self) -> t.ValuesView[Blueprint]:\n    \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.blueprints.values()"
        },
        {
          "name": "loader.list_templates",
          "body": "def list_templates(self) -> list[str]:\n    result = set()\n    loader = self.app.jinja_loader\n    if loader is not None:\n        result.update(loader.list_templates())\n    for blueprint in self.app.iter_blueprints():\n        loader = blueprint.jinja_loader\n        if loader is not None:\n            for template in loader.list_templates():\n                result.add(template)\n    return list(result)"
        },
        {
          "name": "loader.list_templates",
          "body": "def list_templates(self) -> list[str]:\n    result = set()\n    loader = self.app.jinja_loader\n    if loader is not None:\n        result.update(loader.list_templates())\n    for blueprint in self.app.iter_blueprints():\n        loader = blueprint.jinja_loader\n        if loader is not None:\n            for template in loader.list_templates():\n                result.add(template)\n    return list(result)"
        }
      ]
    },
    {
      "name": "generate",
      "module": "templating",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\templating.py",
      "line_number": 173,
      "end_line_number": 177,
      "source_code": "def generate() -> t.Iterator[str]:\n        yield from template.generate(context)\n        template_rendered.send(\n            app, _async_wrapper=app.ensure_sync, template=template, context=context\n        )",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "typing",
        "jinja2.BaseLoader",
        "jinja2.Environment",
        "jinja2.Template",
        "jinja2.TemplateNotFound",
        "globals._cv_app",
        "globals._cv_request",
        "globals.current_app",
        "globals.request",
        "helpers.stream_with_context",
        "signals.before_render_template",
        "signals.template_rendered",
        "app.Flask",
        "sansio.app.App",
        "sansio.scaffold.Scaffold",
        "debughelpers.explain_template_loading_attempts"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "template.generate",
          "body": "def generate() -> t.Iterator[str]:\n    yield from template.generate(context)\n    template_rendered.send(app, _async_wrapper=app.ensure_sync, template=template, context=context)"
        }
      ]
    },
    {
      "name": "_get_werkzeug_version",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 100,
      "end_line_number": 106,
      "source_code": "def _get_werkzeug_version() -> str:\n    global _werkzeug_version\n\n    if not _werkzeug_version:\n        _werkzeug_version = importlib.metadata.version(\"werkzeug\")\n\n    return _werkzeug_version",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 49,
      "end_line_number": 86,
      "source_code": "def __init__(\n        self,\n        app: Flask,\n        path: str = \"/\",\n        base_url: str | None = None,\n        subdomain: str | None = None,\n        url_scheme: str | None = None,\n        *args: t.Any,\n        **kwargs: t.Any,\n    ) -> None:\n        assert not (base_url or subdomain or url_scheme) or (\n            base_url is not None\n        ) != bool(\n            subdomain or url_scheme\n        ), 'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n\n        if base_url is None:\n            http_host = app.config.get(\"SERVER_NAME\") or \"localhost\"\n            app_root = app.config[\"APPLICATION_ROOT\"]\n\n            if subdomain:\n                http_host = f\"{subdomain}.{http_host}\"\n\n            if url_scheme is None:\n                url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n\n            url = urlsplit(path)\n            base_url = (\n                f\"{url.scheme or url_scheme}://{url.netloc or http_host}\"\n                f\"/{app_root.lstrip('/')}\"\n            )\n            path = url.path\n\n            if url.query:\n                path = f\"{path}?{url.query}\"\n\n        self.app = app\n        super().__init__(path, base_url, *args, **kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "path",
        "base_url",
        "subdomain",
        "url_scheme"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [
        "assert not (base_url or subdomain or url_scheme) or (base_url is not None) != bool(subdomain or url_scheme), 'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'"
      ],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.config.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "json_dumps",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 88,
      "end_line_number": 94,
      "source_code": "def json_dumps(self, obj: t.Any, **kwargs: t.Any) -> str:  # type: ignore\n        \"\"\"Serialize ``obj`` to a JSON-formatted string.\n\n        The serialization will be configured according to the config associated\n        with this EnvironBuilder's ``app``.\n        \"\"\"\n        return self.app.json.dumps(obj, **kwargs)",
      "docstring": "Serialize ``obj`` to a JSON-formatted string.\n\nThe serialization will be configured according to the config associated\nwith this EnvironBuilder's ``app``.",
      "decorators": [],
      "arguments": [
        "self",
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.app.json.dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 125,
      "end_line_number": 133,
      "source_code": "def __init__(self, *args: t.Any, **kwargs: t.Any) -> None:\n        super().__init__(*args, **kwargs)\n        self.preserve_context = False\n        self._new_contexts: list[t.ContextManager[t.Any]] = []\n        self._context_stack = ExitStack()\n        self.environ_base = {\n            \"REMOTE_ADDR\": \"127.0.0.1\",\n            \"HTTP_USER_AGENT\": f\"Werkzeug/{_get_werkzeug_version()}\",\n        }",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_get_werkzeug_version",
          "body": "def _get_werkzeug_version() -> str:\n    global _werkzeug_version\n    if not _werkzeug_version:\n        _werkzeug_version = importlib.metadata.version('werkzeug')\n    return _werkzeug_version"
        }
      ]
    },
    {
      "name": "session_transaction",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 136,
      "end_line_number": 183,
      "source_code": "def session_transaction(\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Iterator[SessionMixin]:\n        \"\"\"When used in combination with a ``with`` statement this opens a\n        session transaction.  This can be used to modify the session that\n        the test client uses.  Once the ``with`` block is left the session is\n        stored back.\n\n        ::\n\n            with client.session_transaction() as session:\n                session['value'] = 42\n\n        Internally this is implemented by going through a temporary test\n        request context and since session handling could depend on\n        request variables this function accepts the same arguments as\n        :meth:`~flask.Flask.test_request_context` which are directly\n        passed through.\n        \"\"\"\n        if self._cookies is None:\n            raise TypeError(\n                \"Cookies are disabled. Create a client with 'use_cookies=True'.\"\n            )\n\n        app = self.application\n        ctx = app.test_request_context(*args, **kwargs)\n        self._add_cookies_to_wsgi(ctx.request.environ)\n\n        with ctx:\n            sess = app.session_interface.open_session(app, ctx.request)\n\n        if sess is None:\n            raise RuntimeError(\"Session backend did not open a session.\")\n\n        yield sess\n        resp = app.response_class()\n\n        if app.session_interface.is_null_session(sess):\n            return\n\n        with ctx:\n            app.session_interface.save_session(app, sess, resp)\n\n        self._update_cookies_from_response(\n            ctx.request.host.partition(\":\")[0],\n            ctx.request.path,\n            resp.headers.getlist(\"Set-Cookie\"),\n        )",
      "docstring": "When used in combination with a ``with`` statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the ``with`` block is left the session is\nstored back.\n\n::\n\n    with client.session_transaction() as session:\n        session['value'] = 42\n\nInternally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n:meth:`~flask.Flask.test_request_context` which are directly\npassed through.",
      "decorators": [
        "contextmanager"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "app.test_request_context",
          "body": "def test_request_context(self, *args: t.Any, **kwargs: t.Any) -> RequestContext:\n    \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n        environment created from the given values. This is mostly useful\n        during testing, where you may want to run a function that uses\n        request data without dispatching a full request.\n\n        See :doc:`/reqcontext`.\n\n        Use a ``with`` block to push the context, which will make\n        :data:`request` point at the request for the created\n        environment. ::\n\n            with app.test_request_context(...):\n                generate_report()\n\n        When using the shell, it may be easier to push and pop the\n        context manually to avoid indentation. ::\n\n            ctx = app.test_request_context(...)\n            ctx.push()\n            ...\n            ctx.pop()\n\n        Takes the same arguments as Werkzeug's\n        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n        the application. See the linked Werkzeug docs for most of the\n        available arguments. Flask-specific behavior is listed here.\n\n        :param path: URL path being requested.\n        :param base_url: Base URL where the app is being served, which\n            ``path`` is relative to. If not given, built from\n            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n        :param subdomain: Subdomain name to append to\n            :data:`SERVER_NAME`.\n        :param url_scheme: Scheme to use instead of\n            :data:`PREFERRED_URL_SCHEME`.\n        :param data: The request body, either as a string or a dict of\n            form keys and values.\n        :param json: If given, this is serialized as JSON and passed as\n            ``data``. Also defaults ``content_type`` to\n            ``application/json``.\n        :param args: other positional arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        :param kwargs: other keyword arguments passed to\n            :class:`~werkzeug.test.EnvironBuilder`.\n        \"\"\"\n    from .testing import EnvironBuilder\n    builder = EnvironBuilder(self, *args, **kwargs)\n    try:\n        return self.request_context(builder.get_environ())\n    finally:\n        builder.close()"
        },
        {
          "name": "app.session_interface.is_null_session",
          "body": "def is_null_session(self, obj: object) -> bool:\n    \"\"\"Checks if a given object is a null session.  Null sessions are\n        not asked to be saved.\n\n        This checks if the object is an instance of :attr:`null_session_class`\n        by default.\n        \"\"\"\n    return isinstance(obj, self.null_session_class)"
        },
        {
          "name": "app.session_interface.open_session",
          "body": "def open_session(self, app: Flask, request: Request) -> SessionMixin | None:\n    \"\"\"This is called at the beginning of each request, after\n        pushing the request context, before matching the URL.\n\n        This must return an object which implements a dictionary-like\n        interface as well as the :class:`SessionMixin` interface.\n\n        This will return ``None`` to indicate that loading failed in\n        some way that is not immediately an error. The request\n        context will fall back to using :meth:`make_null_session`\n        in this case.\n        \"\"\"\n    raise NotImplementedError()"
        },
        {
          "name": "app.session_interface.save_session",
          "body": "def save_session(self, app: Flask, session: SessionMixin, response: Response) -> None:\n    \"\"\"This is called at the end of each request, after generating\n        a response, before removing the request context. It is skipped\n        if :meth:`is_null_session` returns ``True``.\n        \"\"\"\n    raise NotImplementedError()"
        }
      ]
    },
    {
      "name": "_copy_environ",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 185,
      "end_line_number": 191,
      "source_code": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n        out = {**self.environ_base, **other}\n\n        if self.preserve_context:\n            out[\"werkzeug.debug.preserve_context\"] = self._new_contexts.append\n\n        return out",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "other"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_request_from_builder_args",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 193,
      "end_line_number": 202,
      "source_code": "def _request_from_builder_args(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> BaseRequest:\n        kwargs[\"environ_base\"] = self._copy_environ(kwargs.get(\"environ_base\", {}))\n        builder = EnvironBuilder(self.application, *args, **kwargs)\n\n        try:\n            return builder.get_request()\n        finally:\n            builder.close()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "args",
        "kwargs"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._copy_environ",
          "body": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n    out = {**self.environ_base, **other}\n    if self.preserve_context:\n        out['werkzeug.debug.preserve_context'] = self._new_contexts.append\n    return out"
        },
        {
          "name": "kwargs.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "open",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 204,
      "end_line_number": 247,
      "source_code": "def open(\n        self,\n        *args: t.Any,\n        buffered: bool = False,\n        follow_redirects: bool = False,\n        **kwargs: t.Any,\n    ) -> TestResponse:\n        if args and isinstance(\n            args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)\n        ):\n            if isinstance(args[0], werkzeug.test.EnvironBuilder):\n                builder = copy(args[0])\n                builder.environ_base = self._copy_environ(builder.environ_base or {})  # type: ignore[arg-type]\n                request = builder.get_request()\n            elif isinstance(args[0], dict):\n                request = EnvironBuilder.from_environ(\n                    args[0], app=self.application, environ_base=self._copy_environ({})\n                ).get_request()\n            else:\n                # isinstance(args[0], BaseRequest)\n                request = copy(args[0])\n                request.environ = self._copy_environ(request.environ)\n        else:\n            # request is None\n            request = self._request_from_builder_args(args, kwargs)\n\n        # Pop any previously preserved contexts. This prevents contexts\n        # from being preserved across redirects or multiple requests\n        # within a single block.\n        self._context_stack.close()\n\n        response = super().open(\n            request,\n            buffered=buffered,\n            follow_redirects=follow_redirects,\n        )\n        response.json_module = self.application.json  # type: ignore[assignment]\n\n        # Re-push contexts that were preserved during the request.\n        while self._new_contexts:\n            cm = self._new_contexts.pop()\n            self._context_stack.enter_context(cm)\n\n        return response",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._request_from_builder_args",
          "body": "def _request_from_builder_args(self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]) -> BaseRequest:\n    kwargs['environ_base'] = self._copy_environ(kwargs.get('environ_base', {}))\n    builder = EnvironBuilder(self.application, *args, **kwargs)\n    try:\n        return builder.get_request()\n    finally:\n        builder.close()"
        },
        {
          "name": "self._new_contexts.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "self._copy_environ",
          "body": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n    out = {**self.environ_base, **other}\n    if self.preserve_context:\n        out['werkzeug.debug.preserve_context'] = self._new_contexts.append\n    return out"
        },
        {
          "name": "self._copy_environ",
          "body": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n    out = {**self.environ_base, **other}\n    if self.preserve_context:\n        out['werkzeug.debug.preserve_context'] = self._new_contexts.append\n    return out"
        },
        {
          "name": "self._copy_environ",
          "body": "def _copy_environ(self, other: WSGIEnvironment) -> WSGIEnvironment:\n    out = {**self.environ_base, **other}\n    if self.preserve_context:\n        out['werkzeug.debug.preserve_context'] = self._new_contexts.append\n    return out"
        }
      ]
    },
    {
      "name": "__enter__",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 249,
      "end_line_number": 253,
      "source_code": "def __enter__(self) -> FlaskClient:\n        if self.preserve_context:\n            raise RuntimeError(\"Cannot nest client invocations\")\n        self.preserve_context = True\n        return self",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__exit__",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 255,
      "end_line_number": 262,
      "source_code": "def __exit__(\n        self,\n        exc_type: type | None,\n        exc_value: BaseException | None,\n        tb: TracebackType | None,\n    ) -> None:\n        self.preserve_context = False\n        self._context_stack.close()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "exc_type",
        "exc_value",
        "tb"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 271,
      "end_line_number": 273,
      "source_code": "def __init__(self, app: Flask, **kwargs: t.Any) -> None:\n        self.app = app\n        super().__init__(**kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "invoke",
      "module": "testing",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\testing.py",
      "line_number": 275,
      "end_line_number": 298,
      "source_code": "def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.\n\n        If the ``obj`` argument is not given, passes an instance of\n        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n        app being tested.\n\n        :param cli: Command object to invoke. Default is the app's\n            :attr:`~flask.app.Flask.cli` group.\n        :param args: List of strings to invoke the command with.\n\n        :return: a :class:`~click.testing.Result` object.\n        \"\"\"\n        if cli is None:\n            cli = self.app.cli\n\n        if \"obj\" not in kwargs:\n            kwargs[\"obj\"] = ScriptInfo(create_app=lambda: self.app)\n\n        return super().invoke(cli, args, **kwargs)",
      "docstring": "Invokes a CLI command in an isolated environment. See\n:meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\nfull method documentation. See :ref:`testing-cli` for examples.\n\nIf the ``obj`` argument is not given, passes an instance of\n:class:`~flask.cli.ScriptInfo` that knows how to load the Flask\napp being tested.\n\n:param cli: Command object to invoke. Default is the app's\n    :attr:`~flask.app.Flask.cli` group.\n:param args: List of strings to invoke the command with.\n\n:return: a :class:`~click.testing.Result` object.",
      "decorators": [],
      "arguments": [
        "self",
        "cli",
        "args"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.metadata",
        "typing",
        "contextlib.contextmanager",
        "contextlib.ExitStack",
        "copy.copy",
        "types.TracebackType",
        "urllib.parse.urlsplit",
        "werkzeug.test",
        "click.testing.CliRunner",
        "click.testing.Result",
        "werkzeug.test.Client",
        "werkzeug.wrappers.Request",
        "cli.ScriptInfo",
        "sessions.SessionMixin",
        "_typeshed.wsgi.WSGIEnvironment",
        "werkzeug.test.TestResponse",
        "app.Flask"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "dispatch_request",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 78,
      "end_line_number": 83,
      "source_code": "def dispatch_request(self) -> ft.ResponseReturnValue:\n        \"\"\"The actual view function behavior. Subclasses must override\n        this and return a valid response. Any variables from the URL\n        rule are passed as keyword arguments.\n        \"\"\"\n        raise NotImplementedError()",
      "docstring": "The actual view function behavior. Subclasses must override\nthis and return a valid response. Any variables from the URL\nrule are passed as keyword arguments.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "as_view",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 86,
      "end_line_number": 135,
      "source_code": "def as_view(\n        cls, name: str, *class_args: t.Any, **class_kwargs: t.Any\n    ) -> ft.RouteCallable:\n        \"\"\"Convert the class into a view function that can be registered\n        for a route.\n\n        By default, the generated view will create a new instance of the\n        view class for every request and call its\n        :meth:`dispatch_request` method. If the view class sets\n        :attr:`init_every_request` to ``False``, the same instance will\n        be used for every request.\n\n        Except for ``name``, all other arguments passed to this method\n        are forwarded to the view class ``__init__`` method.\n\n        .. versionchanged:: 2.2\n            Added the ``init_every_request`` class attribute.\n        \"\"\"\n        if cls.init_every_request:\n\n            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                self = view.view_class(  # type: ignore[attr-defined]\n                    *class_args, **class_kwargs\n                )\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n\n        else:\n            self = cls(*class_args, **class_kwargs)  # pyright: ignore\n\n            def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)  # type: ignore[no-any-return]\n\n        if cls.decorators:\n            view.__name__ = name\n            view.__module__ = cls.__module__\n            for decorator in cls.decorators:\n                view = decorator(view)\n\n        # We attach the view class to the view function for two reasons:\n        # first of all it allows us to easily figure out what class-based\n        # view this thing came from, secondly it's also used for instantiating\n        # the view class so you can actually replace it with something else\n        # for testing purposes and debugging.\n        view.view_class = cls  # type: ignore\n        view.__name__ = name\n        view.__doc__ = cls.__doc__\n        view.__module__ = cls.__module__\n        view.methods = cls.methods  # type: ignore\n        view.provide_automatic_options = cls.provide_automatic_options  # type: ignore\n        return view",
      "docstring": "Convert the class into a view function that can be registered\nfor a route.\n\nBy default, the generated view will create a new instance of the\nview class for every request and call its\n:meth:`dispatch_request` method. If the view class sets\n:attr:`init_every_request` to ``False``, the same instance will\nbe used for every request.\n\nExcept for ``name``, all other arguments passed to this method\nare forwarded to the view class ``__init__`` method.\n\n.. versionchanged:: 2.2\n    Added the ``init_every_request`` class attribute.",
      "decorators": [
        "classmethod"
      ],
      "arguments": [
        "cls",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        },
        {
          "name": "current_app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "__init_subclass__",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 165,
      "end_line_number": 180,
      "source_code": "def __init_subclass__(cls, **kwargs: t.Any) -> None:\n        super().__init_subclass__(**kwargs)\n\n        if \"methods\" not in cls.__dict__:\n            methods = set()\n\n            for base in cls.__bases__:\n                if getattr(base, \"methods\", None):\n                    methods.update(base.methods)  # type: ignore[attr-defined]\n\n            for key in http_method_funcs:\n                if hasattr(cls, key):\n                    methods.add(key.upper())\n\n            if methods:\n                cls.methods = methods",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "cls"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "dispatch_request",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 182,
      "end_line_number": 191,
      "source_code": "def dispatch_request(self, **kwargs: t.Any) -> ft.ResponseReturnValue:\n        meth = getattr(self, request.method.lower(), None)\n\n        # If the request method is HEAD and we don't have a handler for it\n        # retry with GET.\n        if meth is None and request.method == \"HEAD\":\n            meth = getattr(self, \"get\", None)\n\n        assert meth is not None, f\"Unimplemented method {request.method!r}\"\n        return current_app.ensure_sync(meth)(**kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [
        "assert meth is not None, f'Unimplemented method {request.method!r}'"
      ],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "view",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 106,
      "end_line_number": 110,
      "source_code": "def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                self = view.view_class(  # type: ignore[attr-defined]\n                    *class_args, **class_kwargs\n                )\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "view",
      "module": "views",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\views.py",
      "line_number": 115,
      "end_line_number": 116,
      "source_code": "def view(**kwargs: t.Any) -> ft.ResponseReturnValue:\n                return current_app.ensure_sync(self.dispatch_request)(**kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "typing",
        ".typing",
        "globals.current_app",
        "globals.request"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.ensure_sync",
          "body": "def ensure_sync(self, func: t.Callable[..., t.Any]) -> t.Callable[..., t.Any]:\n    \"\"\"Ensure that the function is synchronous for WSGI workers.\n        Plain ``def`` functions are returned as-is. ``async def``\n        functions are wrapped to run and wait for the response.\n\n        Override this method to change how the app runs async views.\n\n        .. versionadded:: 2.0\n        \"\"\"\n    if iscoroutinefunction(func):\n        return self.async_to_sync(func)\n    return func"
        }
      ]
    },
    {
      "name": "max_content_length",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 60,
      "end_line_number": 86,
      "source_code": "def max_content_length(self) -> int | None:\n        \"\"\"The maximum number of bytes that will be read during this request. If\n        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\n        error is raised. If it is set to ``None``, no limit is enforced at the\n        Flask application level. However, if it is ``None`` and the request has\n        no ``Content-Length`` header and the WSGI server does not indicate that\n        it terminates the stream, then no data is read to avoid an infinite\n        stream.\n\n        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\n        defaults to ``None``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This can be set per-request.\n\n        .. versionchanged:: 0.6\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_content_length is not None:\n            return self._max_content_length\n\n        if not current_app:\n            return super().max_content_length\n\n        return current_app.config[\"MAX_CONTENT_LENGTH\"]",
      "docstring": "The maximum number of bytes that will be read during this request. If\nthis limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\nerror is raised. If it is set to ``None``, no limit is enforced at the\nFlask application level. However, if it is ``None`` and the request has\nno ``Content-Length`` header and the WSGI server does not indicate that\nit terminates the stream, then no data is read to avoid an infinite\nstream.\n\nEach request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\ndefaults to ``None``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This can be set per-request.\n\n.. versionchanged:: 0.6\n    This is configurable through Flask config.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_content_length",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 89,
      "end_line_number": 90,
      "source_code": "def max_content_length(self, value: int | None) -> None:\n        self._max_content_length = value",
      "docstring": null,
      "decorators": [
        "max_content_length.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_form_memory_size",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 93,
      "end_line_number": 113,
      "source_code": "def max_form_memory_size(self) -> int | None:\n        \"\"\"The maximum size in bytes any non-file form field may be in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\n        defaults to ``500_000``. It can be set on a specific ``request`` to\n        apply the limit to that specific view. This should be set appropriately\n        based on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_form_memory_size is not None:\n            return self._max_form_memory_size\n\n        if not current_app:\n            return super().max_form_memory_size\n\n        return current_app.config[\"MAX_FORM_MEMORY_SIZE\"]",
      "docstring": "The maximum size in bytes any non-file form field may be in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\ndefaults to ``500_000``. It can be set on a specific ``request`` to\napply the limit to that specific view. This should be set appropriately\nbased on an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_form_memory_size",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 116,
      "end_line_number": 117,
      "source_code": "def max_form_memory_size(self, value: int | None) -> None:\n        self._max_form_memory_size = value",
      "docstring": null,
      "decorators": [
        "max_form_memory_size.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_form_parts",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 120,
      "end_line_number": 140,
      "source_code": "def max_form_parts(self) -> int | None:\n        \"\"\"The maximum number of fields that may be present in a\n        ``multipart/form-data`` body. If this limit is exceeded, a 413\n        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n        is set to ``None``, no limit is enforced at the Flask application level.\n\n        Each request defaults to the :data:`MAX_FORM_PARTS` config, which\n        defaults to ``1_000``. It can be set on a specific ``request`` to apply\n        the limit to that specific view. This should be set appropriately based\n        on an application's or view's specific needs.\n\n        .. versionchanged:: 3.1\n            This is configurable through Flask config.\n        \"\"\"\n        if self._max_form_parts is not None:\n            return self._max_form_parts\n\n        if not current_app:\n            return super().max_form_parts\n\n        return current_app.config[\"MAX_FORM_PARTS\"]",
      "docstring": "The maximum number of fields that may be present in a\n``multipart/form-data`` body. If this limit is exceeded, a 413\n:exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\nis set to ``None``, no limit is enforced at the Flask application level.\n\nEach request defaults to the :data:`MAX_FORM_PARTS` config, which\ndefaults to ``1_000``. It can be set on a specific ``request`` to apply\nthe limit to that specific view. This should be set appropriately based\non an application's or view's specific needs.\n\n.. versionchanged:: 3.1\n    This is configurable through Flask config.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_form_parts",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 143,
      "end_line_number": 144,
      "source_code": "def max_form_parts(self, value: int | None) -> None:\n        self._max_form_parts = value",
      "docstring": null,
      "decorators": [
        "max_form_parts.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "endpoint",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 147,
      "end_line_number": 159,
      "source_code": "def endpoint(self) -> str | None:\n        \"\"\"The endpoint that matched the request URL.\n\n        This will be ``None`` if matching failed or has not been\n        performed yet.\n\n        This in combination with :attr:`view_args` can be used to\n        reconstruct the same URL or a modified URL.\n        \"\"\"\n        if self.url_rule is not None:\n            return self.url_rule.endpoint  # type: ignore[no-any-return]\n\n        return None",
      "docstring": "The endpoint that matched the request URL.\n\nThis will be ``None`` if matching failed or has not been\nperformed yet.\n\nThis in combination with :attr:`view_args` can be used to\nreconstruct the same URL or a modified URL.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "blueprint",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 162,
      "end_line_number": 178,
      "source_code": "def blueprint(self) -> str | None:\n        \"\"\"The registered name of the current blueprint.\n\n        This will be ``None`` if the endpoint is not part of a\n        blueprint, or if URL matching failed or has not been performed\n        yet.\n\n        This does not necessarily match the name the blueprint was\n        created with. It may have been nested, or registered with a\n        different name.\n        \"\"\"\n        endpoint = self.endpoint\n\n        if endpoint is not None and \".\" in endpoint:\n            return endpoint.rpartition(\".\")[0]\n\n        return None",
      "docstring": "The registered name of the current blueprint.\n\nThis will be ``None`` if the endpoint is not part of a\nblueprint, or if URL matching failed or has not been performed\nyet.\n\nThis does not necessarily match the name the blueprint was\ncreated with. It may have been nested, or registered with a\ndifferent name.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "blueprints",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 181,
      "end_line_number": 195,
      "source_code": "def blueprints(self) -> list[str]:\n        \"\"\"The registered names of the current blueprint upwards through\n        parent blueprints.\n\n        This will be an empty list if there is no current blueprint, or\n        if URL matching failed.\n\n        .. versionadded:: 2.0.1\n        \"\"\"\n        name = self.blueprint\n\n        if name is None:\n            return []\n\n        return _split_blueprint_path(name)",
      "docstring": "The registered names of the current blueprint upwards through\nparent blueprints.\n\nThis will be an empty list if there is no current blueprint, or\nif URL matching failed.\n\n.. versionadded:: 2.0.1",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_split_blueprint_path",
          "body": "@cache\ndef _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n    if '.' in name:\n        out.extend(_split_blueprint_path(name.rpartition('.')[0]))\n    return out"
        }
      ]
    },
    {
      "name": "_load_form_data",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 197,
      "end_line_number": 210,
      "source_code": "def _load_form_data(self) -> None:\n        super()._load_form_data()\n\n        # In debug mode we're replacing the files multidict with an ad-hoc\n        # subclass that raises a different error for key errors.\n        if (\n            current_app\n            and current_app.debug\n            and self.mimetype != \"multipart/form-data\"\n            and not self.files\n        ):\n            from .debughelpers import attach_enctype_error_multidict\n\n            attach_enctype_error_multidict(self)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "attach_enctype_error_multidict",
          "body": "def attach_enctype_error_multidict(request: Request) -> None:\n    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error\n    about ``enctype=multipart/form-data``.\n\n    :param request: The request to patch.\n    :meta private:\n    \"\"\"\n    oldcls = request.files.__class__\n\n    class newcls(oldcls):\n\n        def __getitem__(self, key: str) -> t.Any:\n            try:\n                return super().__getitem__(key)\n            except KeyError as e:\n                if key not in request.form:\n                    raise\n                raise DebugFilesKeyError(request, key).with_traceback(e.__traceback__) from None\n    newcls.__name__ = oldcls.__name__\n    newcls.__module__ = oldcls.__module__\n    request.files.__class__ = newcls"
        }
      ]
    },
    {
      "name": "on_json_loading_failed",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 212,
      "end_line_number": 219,
      "source_code": "def on_json_loading_failed(self, e: ValueError | None) -> t.Any:\n        try:\n            return super().on_json_loading_failed(e)\n        except BadRequest as ebr:\n            if current_app and current_app.debug:\n                raise\n\n            raise BadRequest() from ebr",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "e"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "max_cookie_size",
      "module": "wrappers",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\wrappers.py",
      "line_number": 247,
      "end_line_number": 257,
      "source_code": "def max_cookie_size(self) -> int:  # type: ignore\n        \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\n        See :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\n        Werkzeug's docs.\n        \"\"\"\n        if current_app:\n            return current_app.config[\"MAX_COOKIE_SIZE\"]  # type: ignore[no-any-return]\n\n        # return Werkzeug's default when not in an app context\n        return super().max_cookie_size",
      "docstring": "Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\nSee :attr:`~werkzeug.wrappers.Response.max_cookie_size` in\nWerkzeug's docs.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.wrappers.Request",
        "werkzeug.wrappers.Response",
        ".json",
        "globals.current_app",
        "helpers._split_blueprint_path",
        "werkzeug.routing.Rule",
        "debughelpers.attach_enctype_error_multidict"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_default",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 108,
      "end_line_number": 121,
      "source_code": "def _default(o: t.Any) -> t.Any:\n    if isinstance(o, date):\n        return http_date(o)\n\n    if isinstance(o, (decimal.Decimal, uuid.UUID)):\n        return str(o)\n\n    if dataclasses and dataclasses.is_dataclass(o):\n        return dataclasses.asdict(o)  # type: ignore[arg-type]\n\n    if hasattr(o, \"__html__\"):\n        return str(o.__html__())\n\n    raise TypeError(f\"Object of type {type(o).__name__} is not JSON serializable\")",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "o"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 38,
      "end_line_number": 39,
      "source_code": "def __init__(self, app: App) -> None:\n        self._app: App = weakref.proxy(app)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "dumps",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 41,
      "end_line_number": 47,
      "source_code": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError",
      "docstring": "Serialize data as JSON.\n\n:param obj: The data to serialize.\n:param kwargs: May be passed to the underlying JSON library.",
      "decorators": [],
      "arguments": [
        "self",
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "dump",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 49,
      "end_line_number": 57,
      "source_code": "def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n        \"\"\"Serialize data as JSON and write to a file.\n\n        :param obj: The data to serialize.\n        :param fp: A file opened for writing text. Should use the UTF-8\n            encoding to be valid JSON.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        fp.write(self.dumps(obj, **kwargs))",
      "docstring": "Serialize data as JSON and write to a file.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: May be passed to the underlying JSON library.",
      "decorators": [],
      "arguments": [
        "self",
        "obj",
        "fp"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "loads",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 59,
      "end_line_number": 65,
      "source_code": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError",
      "docstring": "Deserialize data as JSON.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
      "decorators": [],
      "arguments": [
        "self",
        "s"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "load",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 67,
      "end_line_number": 73,
      "source_code": "def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        return self.loads(fp.read(), **kwargs)",
      "docstring": "Deserialize data as JSON read from a file.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: May be passed to the underlying JSON library.",
      "decorators": [],
      "arguments": [
        "self",
        "fp"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.loads",
          "body": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "_prepare_response_obj",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 75,
      "end_line_number": 87,
      "source_code": "def _prepare_response_obj(\n        self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]\n    ) -> t.Any:\n        if args and kwargs:\n            raise TypeError(\"app.json.response() takes either args or kwargs, not both\")\n\n        if not args and not kwargs:\n            return None\n\n        if len(args) == 1:\n            return args[0]\n\n        return args or kwargs",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "args",
        "kwargs"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "response",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 89,
      "end_line_number": 105,
      "source_code": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n        obj = self._prepare_response_obj(args, kwargs)\n        return self._app.response_class(self.dumps(obj), mimetype=\"application/json\")",
      "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype.\n\nThe :func:`~flask.json.jsonify` function calls this method for\nthe current application.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._prepare_response_obj",
          "body": "def _prepare_response_obj(self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]) -> t.Any:\n    if args and kwargs:\n        raise TypeError('app.json.response() takes either args or kwargs, not both')\n    if not args and (not kwargs):\n        return None\n    if len(args) == 1:\n        return args[0]\n    return args or kwargs"
        },
        {
          "name": "self.dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "dumps",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 166,
      "end_line_number": 179,
      "source_code": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON to a string.\n\n        Keyword arguments are passed to :func:`json.dumps`. Sets some\n        parameter defaults from the :attr:`default`,\n        :attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n        :param obj: The data to serialize.\n        :param kwargs: Passed to :func:`json.dumps`.\n        \"\"\"\n        kwargs.setdefault(\"default\", self.default)\n        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)\n        kwargs.setdefault(\"sort_keys\", self.sort_keys)\n        return json.dumps(obj, **kwargs)",
      "docstring": "Serialize data as JSON to a string.\n\nKeyword arguments are passed to :func:`json.dumps`. Sets some\nparameter defaults from the :attr:`default`,\n:attr:`ensure_ascii`, and :attr:`sort_keys` attributes.\n\n:param obj: The data to serialize.\n:param kwargs: Passed to :func:`json.dumps`.",
      "decorators": [],
      "arguments": [
        "self",
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "loads",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 181,
      "end_line_number": 187,
      "source_code": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON from a string or bytes.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: Passed to :func:`json.loads`.\n        \"\"\"\n        return json.loads(s, **kwargs)",
      "docstring": "Deserialize data as JSON from a string or bytes.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Passed to :func:`json.loads`.",
      "decorators": [],
      "arguments": [
        "self",
        "s"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "response",
      "module": "provider",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\provider.py",
      "line_number": 189,
      "end_line_number": 215,
      "source_code": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n        \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with it. The response mimetype\n        will be \"application/json\" and can be changed with\n        :attr:`mimetype`.\n\n        If :attr:`compact` is ``False`` or debug mode is enabled, the\n        output will be formatted to be easier to read.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n        obj = self._prepare_response_obj(args, kwargs)\n        dump_args: dict[str, t.Any] = {}\n\n        if (self.compact is None and self._app.debug) or self.compact is False:\n            dump_args.setdefault(\"indent\", 2)\n        else:\n            dump_args.setdefault(\"separators\", (\",\", \":\"))\n\n        return self._app.response_class(\n            f\"{self.dumps(obj, **dump_args)}\\n\", mimetype=self.mimetype\n        )",
      "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with it. The response mimetype\nwill be \"application/json\" and can be changed with\n:attr:`mimetype`.\n\nIf :attr:`compact` is ``False`` or debug mode is enabled, the\noutput will be formatted to be easier to read.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "dataclasses",
        "decimal",
        "json",
        "typing",
        "uuid",
        "weakref",
        "datetime.date",
        "werkzeug.http.http_date",
        "werkzeug.sansio.response.Response",
        "sansio.app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._prepare_response_obj",
          "body": "def _prepare_response_obj(self, args: tuple[t.Any, ...], kwargs: dict[str, t.Any]) -> t.Any:\n    if args and kwargs:\n        raise TypeError('app.json.response() takes either args or kwargs, not both')\n    if not args and (not kwargs):\n        return None\n    if len(args) == 1:\n        return args[0]\n    return args or kwargs"
        },
        {
          "name": "dump_args.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "dump_args.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "self.dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 69,
      "end_line_number": 71,
      "source_code": "def __init__(self, serializer: TaggedJSONSerializer) -> None:\n        \"\"\"Create a tagger for the given serializer.\"\"\"\n        self.serializer = serializer",
      "docstring": "Create a tagger for the given serializer.",
      "decorators": [],
      "arguments": [
        "self",
        "serializer"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 73,
      "end_line_number": 75,
      "source_code": "def check(self, value: t.Any) -> bool:\n        \"\"\"Check if the given value should be tagged by this tag.\"\"\"\n        raise NotImplementedError",
      "docstring": "Check if the given value should be tagged by this tag.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 77,
      "end_line_number": 80,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.\"\"\"\n        raise NotImplementedError",
      "docstring": "Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 82,
      "end_line_number": 85,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        \"\"\"Convert the JSON representation back to the correct type. The tag\n        will already be removed.\"\"\"\n        raise NotImplementedError",
      "docstring": "Convert the JSON representation back to the correct type. The tag\nwill already be removed.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "tag",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 87,
      "end_line_number": 90,
      "source_code": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n        \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n        return {self.key: self.to_json(value)}",
      "docstring": "Convert the value to a valid JSON type and add the tag structure\naround it.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.to_json",
          "body": "def to_json(self, value: t.Any) -> t.Any:\n    \"\"\"Convert the Python object to an object that is a valid JSON type.\n        The tag will be added later.\"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 103,
      "end_line_number": 108,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return (\n            isinstance(value, dict)\n            and len(value) == 1\n            and next(iter(value)) in self.serializer.tags\n        )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 110,
      "end_line_number": 112,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {f\"{key}__\": self.serializer.tag(value[key])}",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.serializer.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 114,
      "end_line_number": 116,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        key = next(iter(value))\n        return {key[:-2]: value[key]}",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 122,
      "end_line_number": 123,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, dict)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 125,
      "end_line_number": 128,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        # JSON objects may only have string keys, so don't bother tagging the\n        # key here.\n        return {k: self.serializer.tag(v) for k, v in value.items()}",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.serializer.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 137,
      "end_line_number": 138,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, tuple)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 140,
      "end_line_number": 141,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.serializer.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 143,
      "end_line_number": 144,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        return tuple(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 150,
      "end_line_number": 151,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, list)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 153,
      "end_line_number": 154,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return [self.serializer.tag(item) for item in value]",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.serializer.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 163,
      "end_line_number": 164,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, bytes)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 166,
      "end_line_number": 167,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return b64encode(value).decode(\"ascii\")",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 169,
      "end_line_number": 170,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        return b64decode(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 181,
      "end_line_number": 182,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return callable(getattr(value, \"__html__\", None))",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 184,
      "end_line_number": 185,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return str(value.__html__())",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 187,
      "end_line_number": 188,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        return Markup(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 195,
      "end_line_number": 196,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, UUID)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 198,
      "end_line_number": 199,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return value.hex",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 201,
      "end_line_number": 202,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        return UUID(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "check",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 209,
      "end_line_number": 210,
      "source_code": "def check(self, value: t.Any) -> bool:\n        return isinstance(value, datetime)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_json",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 212,
      "end_line_number": 213,
      "source_code": "def to_json(self, value: t.Any) -> t.Any:\n        return http_date(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "to_python",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 215,
      "end_line_number": 216,
      "source_code": "def to_python(self, value: t.Any) -> t.Any:\n        return parse_date(value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 249,
      "end_line_number": 254,
      "source_code": "def __init__(self) -> None:\n        self.tags: dict[str, JSONTag] = {}\n        self.order: list[JSONTag] = []\n\n        for cls in self.default_tags:\n            self.register(cls)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.register",
          "body": "def register(self, tag_class: type[JSONTag], force: bool=False, index: int | None=None) -> None:\n    \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        \"\"\"\n    tag = tag_class(self)\n    key = tag.key\n    if key:\n        if not force and key in self.tags:\n            raise KeyError(f\"Tag '{key}' is already registered.\")\n        self.tags[key] = tag\n    if index is None:\n        self.order.append(tag)\n    else:\n        self.order.insert(index, tag)"
        }
      ]
    },
    {
      "name": "register",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 256,
      "end_line_number": 287,
      "source_code": "def register(\n        self,\n        tag_class: type[JSONTag],\n        force: bool = False,\n        index: int | None = None,\n    ) -> None:\n        \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        \"\"\"\n        tag = tag_class(self)\n        key = tag.key\n\n        if key:\n            if not force and key in self.tags:\n                raise KeyError(f\"Tag '{key}' is already registered.\")\n\n            self.tags[key] = tag\n\n        if index is None:\n            self.order.append(tag)\n        else:\n            self.order.insert(index, tag)",
      "docstring": "Register a new tag with this serializer.\n\n:param tag_class: tag class to register. Will be instantiated with this\n    serializer instance.\n:param force: overwrite an existing tag. If false (default), a\n    :exc:`KeyError` is raised.\n:param index: index to insert the new tag in the tag order. Useful when\n    the new tag is a special case of an existing tag. If ``None``\n    (default), the tag is appended to the end of the order.\n\n:raise KeyError: if the tag key is already registered and ``force`` is\n    not true.",
      "decorators": [],
      "arguments": [
        "self",
        "tag_class",
        "force",
        "index"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "tag",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 289,
      "end_line_number": 295,
      "source_code": "def tag(self, value: t.Any) -> t.Any:\n        \"\"\"Convert a value to a tagged representation if necessary.\"\"\"\n        for tag in self.order:\n            if tag.check(value):\n                return tag.tag(value)\n\n        return value",
      "docstring": "Convert a value to a tagged representation if necessary.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "tag.check",
          "body": "def check(self, value: t.Any) -> bool:\n    \"\"\"Check if the given value should be tagged by this tag.\"\"\"\n    raise NotImplementedError"
        },
        {
          "name": "tag.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "untag",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 297,
      "end_line_number": 307,
      "source_code": "def untag(self, value: dict[str, t.Any]) -> t.Any:\n        \"\"\"Convert a tagged representation back to the original type.\"\"\"\n        if len(value) != 1:\n            return value\n\n        key = next(iter(value))\n\n        if key not in self.tags:\n            return value\n\n        return self.tags[key].to_python(value[key])",
      "docstring": "Convert a tagged representation back to the original type.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_untag_scan",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 309,
      "end_line_number": 319,
      "source_code": "def _untag_scan(self, value: t.Any) -> t.Any:\n        if isinstance(value, dict):\n            # untag each item recursively\n            value = {k: self._untag_scan(v) for k, v in value.items()}\n            # untag the dict itself\n            value = self.untag(value)\n        elif isinstance(value, list):\n            # untag each item recursively\n            value = [self._untag_scan(item) for item in value]\n\n        return value",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.untag",
          "body": "def untag(self, value: dict[str, t.Any]) -> t.Any:\n    \"\"\"Convert a tagged representation back to the original type.\"\"\"\n    if len(value) != 1:\n        return value\n    key = next(iter(value))\n    if key not in self.tags:\n        return value\n    return self.tags[key].to_python(value[key])"
        },
        {
          "name": "self._untag_scan",
          "body": "def _untag_scan(self, value: t.Any) -> t.Any:\n    if isinstance(value, dict):\n        value = {k: self._untag_scan(v) for k, v in value.items()}\n        value = self.untag(value)\n    elif isinstance(value, list):\n        value = [self._untag_scan(item) for item in value]\n    return value"
        },
        {
          "name": "self._untag_scan",
          "body": "def _untag_scan(self, value: t.Any) -> t.Any:\n    if isinstance(value, dict):\n        value = {k: self._untag_scan(v) for k, v in value.items()}\n        value = self.untag(value)\n    elif isinstance(value, list):\n        value = [self._untag_scan(item) for item in value]\n    return value"
        }
      ]
    },
    {
      "name": "dumps",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 321,
      "end_line_number": 323,
      "source_code": "def dumps(self, value: t.Any) -> str:\n        \"\"\"Tag the value and dump it to a compact JSON string.\"\"\"\n        return dumps(self.tag(value), separators=(\",\", \":\"))",
      "docstring": "Tag the value and dump it to a compact JSON string.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        },
        {
          "name": "self.tag",
          "body": "def tag(self, value: t.Any) -> dict[str, t.Any]:\n    \"\"\"Convert the value to a valid JSON type and add the tag structure\n        around it.\"\"\"\n    return {self.key: self.to_json(value)}"
        }
      ]
    },
    {
      "name": "loads",
      "module": "tag",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\tag.py",
      "line_number": 325,
      "end_line_number": 327,
      "source_code": "def loads(self, value: str) -> t.Any:\n        \"\"\"Load data from a JSON string and deserialized any tagged objects.\"\"\"\n        return self._untag_scan(loads(value))",
      "docstring": "Load data from a JSON string and deserialized any tagged objects.",
      "decorators": [],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "typing",
        "base64.b64decode",
        "base64.b64encode",
        "datetime.datetime",
        "uuid.UUID",
        "markupsafe.Markup",
        "werkzeug.http.http_date",
        "werkzeug.http.parse_date",
        "json.dumps",
        "json.loads"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._untag_scan",
          "body": "def _untag_scan(self, value: t.Any) -> t.Any:\n    if isinstance(value, dict):\n        value = {k: self._untag_scan(v) for k, v in value.items()}\n        value = self.untag(value)\n    elif isinstance(value, list):\n        value = [self._untag_scan(item) for item in value]\n    return value"
        },
        {
          "name": "loads",
          "body": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "dumps",
      "module": "__init__",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\__init__.py",
      "line_number": 13,
      "end_line_number": 44,
      "source_code": "def dumps(obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\n    method, otherwise it will use :func:`json.dumps`.\n\n    :param obj: The data to serialize.\n    :param kwargs: Arguments passed to the ``dumps`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.dumps``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0.2\n        :class:`decimal.Decimal` is supported by converting to a string.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1.\n\n    .. versionchanged:: 1.0.3\n        ``app`` can be passed directly, rather than requiring an app\n        context for configuration.\n    \"\"\"\n    if current_app:\n        return current_app.json.dumps(obj, **kwargs)\n\n    kwargs.setdefault(\"default\", _default)\n    return _json.dumps(obj, **kwargs)",
      "docstring": "Serialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dumps() <flask.json.provider.JSONProvider.dumps>`\nmethod, otherwise it will use :func:`json.dumps`.\n\n:param obj: The data to serialize.\n:param kwargs: Arguments passed to the ``dumps`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dumps``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
      "decorators": [],
      "arguments": [
        "obj"
      ],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "current_app.json.dumps",
          "body": "def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n    \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "dump",
      "module": "__init__",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\__init__.py",
      "line_number": 47,
      "end_line_number": 74,
      "source_code": "def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n    \"\"\"Serialize data as JSON and write to a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\n    method, otherwise it will use :func:`json.dump`.\n\n    :param obj: The data to serialize.\n    :param fp: A file opened for writing text. Should use the UTF-8\n        encoding to be valid JSON.\n    :param kwargs: Arguments passed to the ``dump`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.dump``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0\n        Writing to a binary file, and the ``encoding`` argument, will be\n        removed in Flask 2.1.\n    \"\"\"\n    if current_app:\n        current_app.json.dump(obj, fp, **kwargs)\n    else:\n        kwargs.setdefault(\"default\", _default)\n        _json.dump(obj, fp, **kwargs)",
      "docstring": "Serialize data as JSON and write to a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.dump() <flask.json.provider.JSONProvider.dump>`\nmethod, otherwise it will use :func:`json.dump`.\n\n:param obj: The data to serialize.\n:param fp: A file opened for writing text. Should use the UTF-8\n    encoding to be valid JSON.\n:param kwargs: Arguments passed to the ``dump`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.dump``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    Writing to a binary file, and the ``encoding`` argument, will be\n    removed in Flask 2.1.",
      "decorators": [],
      "arguments": [
        "obj",
        "fp"
      ],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.json.dump",
          "body": "def dump(self, obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n    \"\"\"Serialize data as JSON and write to a file.\n\n        :param obj: The data to serialize.\n        :param fp: A file opened for writing text. Should use the UTF-8\n            encoding to be valid JSON.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    fp.write(self.dumps(obj, **kwargs))"
        },
        {
          "name": "kwargs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "loads",
      "module": "__init__",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\__init__.py",
      "line_number": 77,
      "end_line_number": 105,
      "source_code": "def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\n    method, otherwise it will use :func:`json.loads`.\n\n    :param s: Text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``loads`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.loads``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1. The data must be a\n        string or UTF-8 bytes.\n\n    .. versionchanged:: 1.0.3\n        ``app`` can be passed directly, rather than requiring an app\n        context for configuration.\n    \"\"\"\n    if current_app:\n        return current_app.json.loads(s, **kwargs)\n\n    return _json.loads(s, **kwargs)",
      "docstring": "Deserialize data as JSON.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.loads() <flask.json.provider.JSONProvider.loads>`\nmethod, otherwise it will use :func:`json.loads`.\n\n:param s: Text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``loads`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.loads``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The data must be a\n    string or UTF-8 bytes.\n\n.. versionchanged:: 1.0.3\n    ``app`` can be passed directly, rather than requiring an app\n    context for configuration.",
      "decorators": [],
      "arguments": [
        "s"
      ],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.json.loads",
          "body": "def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    raise NotImplementedError"
        }
      ]
    },
    {
      "name": "load",
      "module": "__init__",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\__init__.py",
      "line_number": 108,
      "end_line_number": 135,
      "source_code": "def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n    If :data:`~flask.current_app` is available, it will use its\n    :meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\n    method, otherwise it will use :func:`json.load`.\n\n    :param fp: A file opened for reading text or UTF-8 bytes.\n    :param kwargs: Arguments passed to the ``load`` implementation.\n\n    .. versionchanged:: 2.3\n        The ``app`` parameter was removed.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.load``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.2\n        The ``app`` parameter will be removed in Flask 2.3.\n\n    .. versionchanged:: 2.0\n        ``encoding`` will be removed in Flask 2.1. The file must be text\n        mode, or binary mode with UTF-8 bytes.\n    \"\"\"\n    if current_app:\n        return current_app.json.load(fp, **kwargs)\n\n    return _json.load(fp, **kwargs)",
      "docstring": "Deserialize data as JSON read from a file.\n\nIf :data:`~flask.current_app` is available, it will use its\n:meth:`app.json.load() <flask.json.provider.JSONProvider.load>`\nmethod, otherwise it will use :func:`json.load`.\n\n:param fp: A file opened for reading text or UTF-8 bytes.\n:param kwargs: Arguments passed to the ``load`` implementation.\n\n.. versionchanged:: 2.3\n    The ``app`` parameter was removed.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.load``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.2\n    The ``app`` parameter will be removed in Flask 2.3.\n\n.. versionchanged:: 2.0\n    ``encoding`` will be removed in Flask 2.1. The file must be text\n    mode, or binary mode with UTF-8 bytes.",
      "decorators": [],
      "arguments": [
        "fp"
      ],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.json.load",
          "body": "def load(self, fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n    \"\"\"Deserialize data as JSON read from a file.\n\n        :param fp: A file opened for reading text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n    return self.loads(fp.read(), **kwargs)"
        }
      ]
    },
    {
      "name": "jsonify",
      "module": "__init__",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\json\\__init__.py",
      "line_number": 138,
      "end_line_number": 170,
      "source_code": "def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n    :class:`~flask.Response` object with the ``application/json``\n    mimetype. A dict or list returned from a view will be converted to a\n    JSON response automatically without needing to call this.\n\n    This requires an active request or application context, and calls\n    :meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\n    In debug mode, the output is formatted with indentation to make it\n    easier to read. This may also be controlled by the provider.\n\n    Either positional or keyword arguments can be given, not both.\n    If no arguments are given, ``None`` is serialized.\n\n    :param args: A single value to serialize, or multiple values to\n        treat as a list to serialize.\n    :param kwargs: Treat as a dict to serialize.\n\n    .. versionchanged:: 2.2\n        Calls ``current_app.json.response``, allowing an app to override\n        the behavior.\n\n    .. versionchanged:: 2.0.2\n        :class:`decimal.Decimal` is supported by converting to a string.\n\n    .. versionchanged:: 0.11\n        Added support for serializing top-level arrays. This was a\n        security risk in ancient browsers. See :ref:`security-json`.\n\n    .. versionadded:: 0.2\n    \"\"\"\n    return current_app.json.response(*args, **kwargs)",
      "docstring": "Serialize the given arguments as JSON, and return a\n:class:`~flask.Response` object with the ``application/json``\nmimetype. A dict or list returned from a view will be converted to a\nJSON response automatically without needing to call this.\n\nThis requires an active request or application context, and calls\n:meth:`app.json.response() <flask.json.provider.JSONProvider.response>`.\n\nIn debug mode, the output is formatted with indentation to make it\neasier to read. This may also be controlled by the provider.\n\nEither positional or keyword arguments can be given, not both.\nIf no arguments are given, ``None`` is serialized.\n\n:param args: A single value to serialize, or multiple values to\n    treat as a list to serialize.\n:param kwargs: Treat as a dict to serialize.\n\n.. versionchanged:: 2.2\n    Calls ``current_app.json.response``, allowing an app to override\n    the behavior.\n\n.. versionchanged:: 2.0.2\n    :class:`decimal.Decimal` is supported by converting to a string.\n\n.. versionchanged:: 0.11\n    Added support for serializing top-level arrays. This was a\n    security risk in ancient browsers. See :ref:`security-json`.\n\n.. versionadded:: 0.2",
      "decorators": [],
      "arguments": [],
      "imports": [
        "__future__.annotations",
        "json",
        "typing",
        "globals.current_app",
        "provider._default",
        "wrappers.Response"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "current_app.json.response",
          "body": "def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n    \"\"\"Serialize the given arguments as JSON, and return a\n        :class:`~flask.Response` object with the ``application/json``\n        mimetype.\n\n        The :func:`~flask.json.jsonify` function calls this method for\n        the current application.\n\n        Either positional or keyword arguments can be given, not both.\n        If no arguments are given, ``None`` is serialized.\n\n        :param args: A single value to serialize, or multiple values to\n            treat as a list to serialize.\n        :param kwargs: Treat as a dict to serialize.\n        \"\"\"\n    obj = self._prepare_response_obj(args, kwargs)\n    return self._app.response_class(self.dumps(obj), mimetype='application/json')"
        }
      ]
    },
    {
      "name": "_make_timedelta",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 52,
      "end_line_number": 56,
      "source_code": "def _make_timedelta(value: timedelta | int | None) -> timedelta | None:\n    if value is None or isinstance(value, timedelta):\n        return value\n\n    return timedelta(seconds=value)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "__init__",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 282,
      "end_line_number": 411,
      "source_code": "def __init__(\n        self,\n        import_name: str,\n        static_url_path: str | None = None,\n        static_folder: str | os.PathLike[str] | None = \"static\",\n        static_host: str | None = None,\n        host_matching: bool = False,\n        subdomain_matching: bool = False,\n        template_folder: str | os.PathLike[str] | None = \"templates\",\n        instance_path: str | None = None,\n        instance_relative_config: bool = False,\n        root_path: str | None = None,\n    ) -> None:\n        super().__init__(\n            import_name=import_name,\n            static_folder=static_folder,\n            static_url_path=static_url_path,\n            template_folder=template_folder,\n            root_path=root_path,\n        )\n\n        if instance_path is None:\n            instance_path = self.auto_find_instance_path()\n        elif not os.path.isabs(instance_path):\n            raise ValueError(\n                \"If an instance path is provided it must be absolute.\"\n                \" A relative path was given instead.\"\n            )\n\n        #: Holds the path to the instance folder.\n        #:\n        #: .. versionadded:: 0.8\n        self.instance_path = instance_path\n\n        #: The configuration dictionary as :class:`Config`.  This behaves\n        #: exactly like a regular dictionary but supports additional methods\n        #: to load a config from files.\n        self.config = self.make_config(instance_relative_config)\n\n        #: An instance of :attr:`aborter_class` created by\n        #: :meth:`make_aborter`. This is called by :func:`flask.abort`\n        #: to raise HTTP errors, and can be called directly as well.\n        #:\n        #: .. versionadded:: 2.2\n        #:     Moved from ``flask.abort``, which calls this object.\n        self.aborter = self.make_aborter()\n\n        self.json: JSONProvider = self.json_provider_class(self)\n        \"\"\"Provides access to JSON methods. Functions in ``flask.json``\n        will call methods on this provider when the application context\n        is active. Used for handling JSON requests and responses.\n\n        An instance of :attr:`json_provider_class`. Can be customized by\n        changing that attribute on a subclass, or by assigning to this\n        attribute afterwards.\n\n        The default, :class:`~flask.json.provider.DefaultJSONProvider`,\n        uses Python's built-in :mod:`json` library. A different provider\n        can use a different JSON library.\n\n        .. versionadded:: 2.2\n        \"\"\"\n\n        #: A list of functions that are called by\n        #: :meth:`handle_url_build_error` when :meth:`.url_for` raises a\n        #: :exc:`~werkzeug.routing.BuildError`. Each function is called\n        #: with ``error``, ``endpoint`` and ``values``. If a function\n        #: returns ``None`` or raises a ``BuildError``, it is skipped.\n        #: Otherwise, its return value is returned by ``url_for``.\n        #:\n        #: .. versionadded:: 0.9\n        self.url_build_error_handlers: list[\n            t.Callable[[Exception, str, dict[str, t.Any]], str]\n        ] = []\n\n        #: A list of functions that are called when the application context\n        #: is destroyed.  Since the application context is also torn down\n        #: if the request ends this is the place to store code that disconnects\n        #: from databases.\n        #:\n        #: .. versionadded:: 0.9\n        self.teardown_appcontext_funcs: list[ft.TeardownCallable] = []\n\n        #: A list of shell context processor functions that should be run\n        #: when a shell context is created.\n        #:\n        #: .. versionadded:: 0.11\n        self.shell_context_processors: list[ft.ShellContextProcessorCallable] = []\n\n        #: Maps registered blueprint names to blueprint objects. The\n        #: dict retains the order the blueprints were registered in.\n        #: Blueprints can be registered multiple times, this dict does\n        #: not track how often they were attached.\n        #:\n        #: .. versionadded:: 0.7\n        self.blueprints: dict[str, Blueprint] = {}\n\n        #: a place where extensions can store application specific state.  For\n        #: example this is where an extension could store database engines and\n        #: similar things.\n        #:\n        #: The key must match the name of the extension module. For example in\n        #: case of a \"Flask-Foo\" extension in `flask_foo`, the key would be\n        #: ``'foo'``.\n        #:\n        #: .. versionadded:: 0.7\n        self.extensions: dict[str, t.Any] = {}\n\n        #: The :class:`~werkzeug.routing.Map` for this instance.  You can use\n        #: this to change the routing converters after the class was created\n        #: but before any routes are connected.  Example::\n        #:\n        #:    from werkzeug.routing import BaseConverter\n        #:\n        #:    class ListConverter(BaseConverter):\n        #:        def to_python(self, value):\n        #:            return value.split(',')\n        #:        def to_url(self, values):\n        #:            return ','.join(super(ListConverter, self).to_url(value)\n        #:                            for value in values)\n        #:\n        #:    app = Flask(__name__)\n        #:    app.url_map.converters['list'] = ListConverter\n        self.url_map = self.url_map_class(host_matching=host_matching)\n\n        self.subdomain_matching = subdomain_matching\n\n        # tracks internally if the application already handled at least one\n        # request.\n        self._got_first_request = False",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "import_name",
        "static_url_path",
        "static_folder",
        "static_host",
        "host_matching",
        "subdomain_matching",
        "template_folder",
        "instance_path",
        "instance_relative_config",
        "root_path"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.make_config",
          "body": "def make_config(self, instance_relative: bool=False) -> Config:\n    \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\n    root_path = self.root_path\n    if instance_relative:\n        root_path = self.instance_path\n    defaults = dict(self.default_config)\n    defaults['DEBUG'] = get_debug_flag()\n    return self.config_class(root_path, defaults)"
        },
        {
          "name": "self.make_aborter",
          "body": "def make_aborter(self) -> Aborter:\n    \"\"\"Create the object to assign to :attr:`aborter`. That object\n        is called by :func:`flask.abort` to raise HTTP errors, and can\n        be called directly as well.\n\n        By default, this creates an instance of :attr:`aborter_class`,\n        which defaults to :class:`werkzeug.exceptions.Aborter`.\n\n        .. versionadded:: 2.2\n        \"\"\"\n    return self.aborter_class()"
        },
        {
          "name": "self.auto_find_instance_path",
          "body": "def auto_find_instance_path(self) -> str:\n    \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n    prefix, package_path = find_package(self.import_name)\n    if prefix is None:\n        return os.path.join(package_path, 'instance')\n    return os.path.join(prefix, 'var', f'{self.name}-instance')"
        }
      ]
    },
    {
      "name": "_check_setup_finished",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 413,
      "end_line_number": 423,
      "source_code": "def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_first_request:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called\"\n                \" on the application. It has already handled its first\"\n                \" request, any changes will not be applied\"\n                \" consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc.\"\n                \" needed to set up the application are done before\"\n                \" running it.\"\n            )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "f_name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "name",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 426,
      "end_line_number": 440,
      "source_code": "def name(self) -> str:  # type: ignore\n        \"\"\"The name of the application.  This is usually the import name\n        with the difference that it's guessed from the run file if the\n        import name is main.  This name is used as a display name when\n        Flask needs the name of the application.  It can be set and overridden\n        to change the value.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.import_name == \"__main__\":\n            fn: str | None = getattr(sys.modules[\"__main__\"], \"__file__\", None)\n            if fn is None:\n                return \"__main__\"\n            return os.path.splitext(os.path.basename(fn))[0]\n        return self.import_name",
      "docstring": "The name of the application.  This is usually the import name\nwith the difference that it's guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value.\n\n.. versionadded:: 0.8",
      "decorators": [
        "cached_property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "logger",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 443,
      "end_line_number": 467,
      "source_code": "def logger(self) -> logging.Logger:\n        \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n        the same name as :attr:`name`.\n\n        In debug mode, the logger's :attr:`~logging.Logger.level` will\n        be set to :data:`~logging.DEBUG`.\n\n        If there are no handlers configured, a default handler will be\n        added. See :doc:`/logging` for more information.\n\n        .. versionchanged:: 1.1.0\n            The logger takes the same name as :attr:`name` rather than\n            hard-coding ``\"flask.app\"``.\n\n        .. versionchanged:: 1.0.0\n            Behavior was simplified. The logger is always named\n            ``\"flask.app\"``. The level is only set during configuration,\n            it doesn't check ``app.debug`` each time. Only one format is\n            used, not different ones depending on ``app.debug``. No\n            handlers are removed, and a handler is only added if no\n            handlers are already configured.\n\n        .. versionadded:: 0.3\n        \"\"\"\n        return create_logger(self)",
      "docstring": "A standard Python :class:`~logging.Logger` for the app, with\nthe same name as :attr:`name`.\n\nIn debug mode, the logger's :attr:`~logging.Logger.level` will\nbe set to :data:`~logging.DEBUG`.\n\nIf there are no handlers configured, a default handler will be\nadded. See :doc:`/logging` for more information.\n\n.. versionchanged:: 1.1.0\n    The logger takes the same name as :attr:`name` rather than\n    hard-coding ``\"flask.app\"``.\n\n.. versionchanged:: 1.0.0\n    Behavior was simplified. The logger is always named\n    ``\"flask.app\"``. The level is only set during configuration,\n    it doesn't check ``app.debug`` each time. Only one format is\n    used, not different ones depending on ``app.debug``. No\n    handlers are removed, and a handler is only added if no\n    handlers are already configured.\n\n.. versionadded:: 0.3",
      "decorators": [
        "cached_property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "create_logger",
          "body": "def create_logger(app: App) -> logging.Logger:\n    \"\"\"Get the Flask app's logger and configure it if needed.\n\n    The logger name will be the same as\n    :attr:`app.import_name <flask.Flask.name>`.\n\n    When :attr:`~flask.Flask.debug` is enabled, set the logger level to\n    :data:`logging.DEBUG` if it is not set.\n\n    If there is no handler for the logger's effective level, add a\n    :class:`~logging.StreamHandler` for\n    :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n    \"\"\"\n    logger = logging.getLogger(app.name)\n    if app.debug and (not logger.level):\n        logger.setLevel(logging.DEBUG)\n    if not has_level_handler(logger):\n        logger.addHandler(default_handler)\n    return logger"
        }
      ]
    },
    {
      "name": "jinja_env",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 470,
      "end_line_number": 477,
      "source_code": "def jinja_env(self) -> Environment:\n        \"\"\"The Jinja environment used to load templates.\n\n        The environment is created the first time this property is\n        accessed. Changing :attr:`jinja_options` after that will have no\n        effect.\n        \"\"\"\n        return self.create_jinja_environment()",
      "docstring": "The Jinja environment used to load templates.\n\nThe environment is created the first time this property is\naccessed. Changing :attr:`jinja_options` after that will have no\neffect.",
      "decorators": [
        "cached_property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.create_jinja_environment",
          "body": "def create_jinja_environment(self) -> Environment:\n    \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n        and the various Jinja-related methods of the app. Changing\n        :attr:`jinja_options` after this will have no effect. Also adds\n        Flask-related globals and filters to the environment.\n\n        .. versionchanged:: 0.11\n           ``Environment.auto_reload`` set in accordance with\n           ``TEMPLATES_AUTO_RELOAD`` configuration option.\n\n        .. versionadded:: 0.5\n        \"\"\"\n    options = dict(self.jinja_options)\n    if 'autoescape' not in options:\n        options['autoescape'] = self.select_jinja_autoescape\n    if 'auto_reload' not in options:\n        auto_reload = self.config['TEMPLATES_AUTO_RELOAD']\n        if auto_reload is None:\n            auto_reload = self.debug\n        options['auto_reload'] = auto_reload\n    rv = self.jinja_environment(self, **options)\n    rv.globals.update(url_for=self.url_for, get_flashed_messages=get_flashed_messages, config=self.config, request=request, session=session, g=g)\n    rv.policies['json.dumps_function'] = self.json.dumps\n    return rv"
        }
      ]
    },
    {
      "name": "create_jinja_environment",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 479,
      "end_line_number": 480,
      "source_code": "def create_jinja_environment(self) -> Environment:\n        raise NotImplementedError()",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "make_config",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 482,
      "end_line_number": 496,
      "source_code": "def make_config(self, instance_relative: bool = False) -> Config:\n        \"\"\"Used to create the config attribute by the Flask constructor.\n        The `instance_relative` parameter is passed in from the constructor\n        of Flask (there named `instance_relative_config`) and indicates if\n        the config should be relative to the instance path or the root path\n        of the application.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        root_path = self.root_path\n        if instance_relative:\n            root_path = self.instance_path\n        defaults = dict(self.default_config)\n        defaults[\"DEBUG\"] = get_debug_flag()\n        return self.config_class(root_path, defaults)",
      "docstring": "Used to create the config attribute by the Flask constructor.\nThe `instance_relative` parameter is passed in from the constructor\nof Flask (there named `instance_relative_config`) and indicates if\nthe config should be relative to the instance path or the root path\nof the application.\n\n.. versionadded:: 0.8",
      "decorators": [],
      "arguments": [
        "self",
        "instance_relative"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_debug_flag",
          "body": "def get_debug_flag() -> bool:\n    \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n    :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n    \"\"\"\n    val = os.environ.get('FLASK_DEBUG')\n    return bool(val and val.lower() not in {'0', 'false', 'no'})"
        }
      ]
    },
    {
      "name": "make_aborter",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 498,
      "end_line_number": 508,
      "source_code": "def make_aborter(self) -> Aborter:\n        \"\"\"Create the object to assign to :attr:`aborter`. That object\n        is called by :func:`flask.abort` to raise HTTP errors, and can\n        be called directly as well.\n\n        By default, this creates an instance of :attr:`aborter_class`,\n        which defaults to :class:`werkzeug.exceptions.Aborter`.\n\n        .. versionadded:: 2.2\n        \"\"\"\n        return self.aborter_class()",
      "docstring": "Create the object to assign to :attr:`aborter`. That object\nis called by :func:`flask.abort` to raise HTTP errors, and can\nbe called directly as well.\n\nBy default, this creates an instance of :attr:`aborter_class`,\nwhich defaults to :class:`werkzeug.exceptions.Aborter`.\n\n.. versionadded:: 2.2",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "auto_find_instance_path",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 510,
      "end_line_number": 521,
      "source_code": "def auto_find_instance_path(self) -> str:\n        \"\"\"Tries to locate the instance path if it was not provided to the\n        constructor of the application class.  It will basically calculate\n        the path to a folder named ``instance`` next to your main file or\n        the package.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        prefix, package_path = find_package(self.import_name)\n        if prefix is None:\n            return os.path.join(package_path, \"instance\")\n        return os.path.join(prefix, \"var\", f\"{self.name}-instance\")",
      "docstring": "Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named ``instance`` next to your main file or\nthe package.\n\n.. versionadded:: 0.8",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "find_package",
          "body": "def find_package(import_name: str) -> tuple[str | None, str]:\n    \"\"\"Find the prefix that a package is installed under, and the path\n    that it would be imported from.\n\n    The prefix is the directory containing the standard directory\n    hierarchy (lib, bin, etc.). If the package is not installed to the\n    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n    ``None`` is returned.\n\n    The path is the entry in :attr:`sys.path` that contains the package\n    for import. If the package is not installed, it's assumed that the\n    package was imported from the current working directory.\n    \"\"\"\n    package_path = _find_package_path(import_name)\n    py_prefix = os.path.abspath(sys.prefix)\n    if pathlib.PurePath(package_path).is_relative_to(py_prefix):\n        return (py_prefix, package_path)\n    site_parent, site_folder = os.path.split(package_path)\n    if site_folder.lower() == 'site-packages':\n        parent, folder = os.path.split(site_parent)\n        if folder.lower() == 'lib':\n            return (parent, package_path)\n        if os.path.basename(parent).lower() == 'lib':\n            return (os.path.dirname(parent), package_path)\n        return (site_parent, package_path)\n    return (None, package_path)"
        }
      ]
    },
    {
      "name": "create_global_jinja_loader",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 523,
      "end_line_number": 534,
      "source_code": "def create_global_jinja_loader(self) -> DispatchingJinjaLoader:\n        \"\"\"Creates the loader for the Jinja2 environment.  Can be used to\n        override just the loader and keeping the rest unchanged.  It's\n        discouraged to override this function.  Instead one should override\n        the :meth:`jinja_loader` function instead.\n\n        The global loader dispatches between the loaders of the application\n        and the individual blueprints.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        return DispatchingJinjaLoader(self)",
      "docstring": "Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It's\ndiscouraged to override this function.  Instead one should override\nthe :meth:`jinja_loader` function instead.\n\nThe global loader dispatches between the loaders of the application\nand the individual blueprints.\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "select_jinja_autoescape",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 536,
      "end_line_number": 547,
      "source_code": "def select_jinja_autoescape(self, filename: str) -> bool:\n        \"\"\"Returns ``True`` if autoescaping should be active for the given\n        template name. If no template name is given, returns `True`.\n\n        .. versionchanged:: 2.2\n            Autoescaping is now enabled by default for ``.svg`` files.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if filename is None:\n            return True\n        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))",
      "docstring": "Returns ``True`` if autoescaping should be active for the given\ntemplate name. If no template name is given, returns `True`.\n\n.. versionchanged:: 2.2\n    Autoescaping is now enabled by default for ``.svg`` files.\n\n.. versionadded:: 0.5",
      "decorators": [],
      "arguments": [
        "self",
        "filename"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "debug",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 550,
      "end_line_number": 560,
      "source_code": "def debug(self) -> bool:\n        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the\n        development server, an interactive debugger will be shown for unhandled\n        exceptions, and the server will be reloaded when code changes. This maps to the\n        :data:`DEBUG` config key. It may not behave as expected if set late.\n\n        **Do not enable debug mode when deploying in production.**\n\n        Default: ``False``\n        \"\"\"\n        return self.config[\"DEBUG\"]",
      "docstring": "Whether debug mode is enabled. When using ``flask run`` to start the\ndevelopment server, an interactive debugger will be shown for unhandled\nexceptions, and the server will be reloaded when code changes. This maps to the\n:data:`DEBUG` config key. It may not behave as expected if set late.\n\n**Do not enable debug mode when deploying in production.**\n\nDefault: ``False``",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "debug",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 563,
      "end_line_number": 567,
      "source_code": "def debug(self, value: bool) -> None:\n        self.config[\"DEBUG\"] = value\n\n        if self.config[\"TEMPLATES_AUTO_RELOAD\"] is None:\n            self.jinja_env.auto_reload = value",
      "docstring": null,
      "decorators": [
        "debug.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "register_blueprint",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 570,
      "end_line_number": 595,
      "source_code": "def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on the application. Keyword\n        arguments passed to this method will override the defaults set on the\n        blueprint.\n\n        Calls the blueprint's :meth:`~flask.Blueprint.register` method after\n        recording the blueprint in the application's :attr:`blueprints`.\n\n        :param blueprint: The blueprint to register.\n        :param url_prefix: Blueprint routes will be prefixed with this.\n        :param subdomain: Blueprint routes will match on this subdomain.\n        :param url_defaults: Blueprint routes will use these default values for\n            view arguments.\n        :param options: Additional keyword arguments are passed to\n            :class:`~flask.blueprints.BlueprintSetupState`. They can be\n            accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        blueprint.register(self, options)",
      "docstring": "Register a :class:`~flask.Blueprint` on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint.\n\nCalls the blueprint's :meth:`~flask.Blueprint.register` method after\nrecording the blueprint in the application's :attr:`blueprints`.\n\n:param blueprint: The blueprint to register.\n:param url_prefix: Blueprint routes will be prefixed with this.\n:param subdomain: Blueprint routes will match on this subdomain.\n:param url_defaults: Blueprint routes will use these default values for\n    view arguments.\n:param options: Additional keyword arguments are passed to\n    :class:`~flask.blueprints.BlueprintSetupState`. They can be\n    accessed in :meth:`~flask.Blueprint.record` callbacks.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 0.7",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "blueprint"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "blueprint.register",
          "body": "def register(self, tag_class: type[JSONTag], force: bool=False, index: int | None=None) -> None:\n    \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        \"\"\"\n    tag = tag_class(self)\n    key = tag.key\n    if key:\n        if not force and key in self.tags:\n            raise KeyError(f\"Tag '{key}' is already registered.\")\n        self.tags[key] = tag\n    if index is None:\n        self.order.append(tag)\n    else:\n        self.order.insert(index, tag)"
        }
      ]
    },
    {
      "name": "iter_blueprints",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 597,
      "end_line_number": 602,
      "source_code": "def iter_blueprints(self) -> t.ValuesView[Blueprint]:\n        \"\"\"Iterates over all blueprints by the order they were registered.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        return self.blueprints.values()",
      "docstring": "Iterates over all blueprints by the order they were registered.\n\n.. versionadded:: 0.11",
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "add_url_rule",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 605,
      "end_line_number": 661,
      "source_code": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        options[\"endpoint\"] = endpoint\n        methods = options.pop(\"methods\", None)\n\n        # if the methods are not given and the view_func object knows its\n        # methods we can use that instead.  If neither exists, we go with\n        # a tuple of only ``GET`` as default.\n        if methods is None:\n            methods = getattr(view_func, \"methods\", None) or (\"GET\",)\n        if isinstance(methods, str):\n            raise TypeError(\n                \"Allowed methods must be a list of strings, for\"\n                ' example: @app.route(..., methods=[\"POST\"])'\n            )\n        methods = {item.upper() for item in methods}\n\n        # Methods that should always be added\n        required_methods: set[str] = set(getattr(view_func, \"required_methods\", ()))\n\n        # starting with Flask 0.8 the view_func object can disable and\n        # force-enable the automatic options handling.\n        if provide_automatic_options is None:\n            provide_automatic_options = getattr(\n                view_func, \"provide_automatic_options\", None\n            )\n\n        if provide_automatic_options is None:\n            if \"OPTIONS\" not in methods and self.config[\"PROVIDE_AUTOMATIC_OPTIONS\"]:\n                provide_automatic_options = True\n                required_methods.add(\"OPTIONS\")\n            else:\n                provide_automatic_options = False\n\n        # Add the required methods now.\n        methods |= required_methods\n\n        rule_obj = self.url_rule_class(rule, methods=methods, **options)\n        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]\n\n        self.url_map.add(rule_obj)\n        if view_func is not None:\n            old_func = self.view_functions.get(endpoint)\n            if old_func is not None and old_func != view_func:\n                raise AssertionError(\n                    \"View function mapping is overwriting an existing\"\n                    f\" endpoint function: {endpoint}\"\n                )\n            self.view_functions[endpoint] = view_func",
      "docstring": null,
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule",
        "endpoint",
        "view_func",
        "provide_automatic_options"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "options.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "_endpoint_from_view_func",
          "body": "def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, 'expected view func if endpoint is not provided.'\n    return view_func.__name__"
        },
        {
          "name": "self.view_functions.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "template_filter",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 664,
      "end_line_number": 683,
      "source_code": "def template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"A decorator that is used to register custom template filter.\n        You can specify a name for the filter, otherwise the function\n        name will be used. Example::\n\n          @app.template_filter()\n          def reverse(s):\n              return s[::-1]\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_template_filter(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example::\n\n  @app.template_filter()\n  def reverse(s):\n      return s[::-1]\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_filter",
          "body": "@setupmethod\ndef add_template_filter(self, f: ft.TemplateFilterCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.filters[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "add_template_filter",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 686,
      "end_line_number": 695,
      "source_code": "def add_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.filters[name or f.__name__] = f",
      "docstring": "Register a custom template filter.  Works exactly like the\n:meth:`template_filter` decorator.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "template_test",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 698,
      "end_line_number": 724,
      "source_code": "def template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]:\n        \"\"\"A decorator that is used to register custom template test.\n        You can specify a name for the test, otherwise the function\n        name will be used. Example::\n\n          @app.template_test()\n          def is_prime(n):\n              if n == 2:\n                  return True\n              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n                  if n % i == 0:\n                      return False\n              return True\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_test) -> T_template_test:\n            self.add_template_test(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example::\n\n  @app.template_test()\n  def is_prime(n):\n      if n == 2:\n          return True\n      for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n          if n % i == 0:\n              return False\n      return True\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_test",
          "body": "@setupmethod\ndef add_template_test(self, f: ft.TemplateTestCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.tests[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "add_template_test",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 727,
      "end_line_number": 738,
      "source_code": "def add_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.tests[name or f.__name__] = f",
      "docstring": "Register a custom template test.  Works exactly like the\n:meth:`template_test` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "template_global",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 741,
      "end_line_number": 762,
      "source_code": "def template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]:\n        \"\"\"A decorator that is used to register a custom template global function.\n        You can specify a name for the global function, otherwise the function\n        name will be used. Example::\n\n            @app.template_global()\n            def double(n):\n                return 2 * n\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_global) -> T_template_global:\n            self.add_template_global(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example::\n\n    @app.template_global()\n    def double(n):\n        return 2 * n\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_global",
          "body": "@setupmethod\ndef add_template_global(self, f: ft.TemplateGlobalCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.globals[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "add_template_global",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 765,
      "end_line_number": 776,
      "source_code": "def add_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n        self.jinja_env.globals[name or f.__name__] = f",
      "docstring": "Register a custom template global function. Works exactly like the\n:meth:`template_global` decorator.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global function, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "teardown_appcontext",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 779,
      "end_line_number": 810,
      "source_code": "def teardown_appcontext(self, f: T_teardown) -> T_teardown:\n        \"\"\"Registers a function to be called when the application\n        context is popped. The application context is typically popped\n        after the request context for each request, at the end of CLI\n        commands, or after a manually pushed context ends.\n\n        .. code-block:: python\n\n            with app.app_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the app context is\n        made inactive. Since a request context typically also manages an\n        application context it would also be called when you pop a\n        request context.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        .. versionadded:: 0.9\n        \"\"\"\n        self.teardown_appcontext_funcs.append(f)\n        return f",
      "docstring": "Registers a function to be called when the application\ncontext is popped. The application context is typically popped\nafter the request context for each request, at the end of CLI\ncommands, or after a manually pushed context ends.\n\n.. code-block:: python\n\n    with app.app_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the app context is\nmade inactive. Since a request context typically also manages an\napplication context it would also be called when you pop a\nrequest context.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\n.. versionadded:: 0.9",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "shell_context_processor",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 813,
      "end_line_number": 821,
      "source_code": "def shell_context_processor(\n        self, f: T_shell_context_processor\n    ) -> T_shell_context_processor:\n        \"\"\"Registers a shell context processor function.\n\n        .. versionadded:: 0.11\n        \"\"\"\n        self.shell_context_processors.append(f)\n        return f",
      "docstring": "Registers a shell context processor function.\n\n.. versionadded:: 0.11",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_find_error_handler",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 823,
      "end_line_number": 846,
      "source_code": "def _find_error_handler(\n        self, e: Exception, blueprints: list[str]\n    ) -> ft.ErrorHandlerCallable | None:\n        \"\"\"Return a registered error handler for an exception in this order:\n        blueprint handler for a specific code, app handler for a specific code,\n        blueprint handler for an exception class, app handler for an exception\n        class, or ``None`` if a suitable handler is not found.\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(type(e))\n        names = (*blueprints, None)\n\n        for c in (code, None) if code is not None else (None,):\n            for name in names:\n                handler_map = self.error_handler_spec[name][c]\n\n                if not handler_map:\n                    continue\n\n                for cls in exc_class.__mro__:\n                    handler = handler_map.get(cls)\n\n                    if handler is not None:\n                        return handler\n        return None",
      "docstring": "Return a registered error handler for an exception in this order:\nblueprint handler for a specific code, app handler for a specific code,\nblueprint handler for an exception class, app handler for an exception\nclass, or ``None`` if a suitable handler is not found.",
      "decorators": [],
      "arguments": [
        "self",
        "e",
        "blueprints"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._get_exc_class_and_code",
          "body": "@staticmethod\ndef _get_exc_class_and_code(exc_class_or_code: type[Exception] | int) -> tuple[type[Exception], int | None]:\n    \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n    exc_class: type[Exception]\n    if isinstance(exc_class_or_code, int):\n        try:\n            exc_class = default_exceptions[exc_class_or_code]\n        except KeyError:\n            raise ValueError(f\"'{exc_class_or_code}' is not a recognized HTTP error code. Use a subclass of HTTPException with that code instead.\") from None\n    else:\n        exc_class = exc_class_or_code\n    if isinstance(exc_class, Exception):\n        raise TypeError(f'{exc_class!r} is an instance, not a class. Handlers can only be registered for Exception classes or HTTP error codes.')\n    if not issubclass(exc_class, Exception):\n        raise ValueError(f\"'{exc_class.__name__}' is not a subclass of Exception. Handlers can only be registered for Exception classes or HTTP error codes.\")\n    if issubclass(exc_class, HTTPException):\n        return (exc_class, exc_class.code)\n    else:\n        return (exc_class, None)"
        },
        {
          "name": "handler_map.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "trap_http_exception",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 848,
      "end_line_number": 881,
      "source_code": "def trap_http_exception(self, e: Exception) -> bool:\n        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n        this will return ``False`` for all exceptions except for a bad request\n        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\n        also returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\n        This is called for all HTTP exceptions raised by a view function.\n        If it returns ``True`` for any exception the error handler for this\n        exception is not called and it shows up as regular exception in the\n        traceback.  This is helpful for debugging implicitly raised HTTP\n        exceptions.\n\n        .. versionchanged:: 1.0\n            Bad request errors are not trapped by default in debug mode.\n\n        .. versionadded:: 0.8\n        \"\"\"\n        if self.config[\"TRAP_HTTP_EXCEPTIONS\"]:\n            return True\n\n        trap_bad_request = self.config[\"TRAP_BAD_REQUEST_ERRORS\"]\n\n        # if unset, trap key errors in debug mode\n        if (\n            trap_bad_request is None\n            and self.debug\n            and isinstance(e, BadRequestKeyError)\n        ):\n            return True\n\n        if trap_bad_request:\n            return isinstance(e, BadRequest)\n\n        return False",
      "docstring": "Checks if an HTTP exception should be trapped or not.  By default\nthis will return ``False`` for all exceptions except for a bad request\nkey error if ``TRAP_BAD_REQUEST_ERRORS`` is set to ``True``.  It\nalso returns ``True`` if ``TRAP_HTTP_EXCEPTIONS`` is set to ``True``.\n\nThis is called for all HTTP exceptions raised by a view function.\nIf it returns ``True`` for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions.\n\n.. versionchanged:: 1.0\n    Bad request errors are not trapped by default in debug mode.\n\n.. versionadded:: 0.8",
      "decorators": [],
      "arguments": [
        "self",
        "e"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "should_ignore_error",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 883,
      "end_line_number": 891,
      "source_code": "def should_ignore_error(self, error: BaseException | None) -> bool:\n        \"\"\"This is called to figure out if an error should be ignored\n        or not as far as the teardown system is concerned.  If this\n        function returns ``True`` then the teardown handlers will not be\n        passed the error.\n\n        .. versionadded:: 0.10\n        \"\"\"\n        return False",
      "docstring": "This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns ``True`` then the teardown handlers will not be\npassed the error.\n\n.. versionadded:: 0.10",
      "decorators": [],
      "arguments": [
        "self",
        "error"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "redirect",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 893,
      "end_line_number": 909,
      "source_code": "def redirect(self, location: str, code: int = 302) -> BaseResponse:\n        \"\"\"Create a redirect response object.\n\n        This is called by :func:`flask.redirect`, and can be called\n        directly as well.\n\n        :param location: The URL to redirect to.\n        :param code: The status code for the redirect.\n\n        .. versionadded:: 2.2\n            Moved from ``flask.redirect``, which calls this method.\n        \"\"\"\n        return _wz_redirect(\n            location,\n            code=code,\n            Response=self.response_class,  # type: ignore[arg-type]\n        )",
      "docstring": "Create a redirect response object.\n\nThis is called by :func:`flask.redirect`, and can be called\ndirectly as well.\n\n:param location: The URL to redirect to.\n:param code: The status code for the redirect.\n\n.. versionadded:: 2.2\n    Moved from ``flask.redirect``, which calls this method.",
      "decorators": [],
      "arguments": [
        "self",
        "location",
        "code"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "inject_url_defaults",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 911,
      "end_line_number": 930,
      "source_code": "def inject_url_defaults(self, endpoint: str, values: dict[str, t.Any]) -> None:\n        \"\"\"Injects the URL defaults for the given endpoint directly into\n        the values dictionary passed.  This is used internally and\n        automatically called on URL building.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        names: t.Iterable[str | None] = (None,)\n\n        # url_for may be called outside a request context, parse the\n        # passed endpoint instead of using request.blueprints.\n        if \".\" in endpoint:\n            names = chain(\n                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))\n            )\n\n        for name in names:\n            if name in self.url_default_functions:\n                for func in self.url_default_functions[name]:\n                    func(endpoint, values)",
      "docstring": "Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building.\n\n.. versionadded:: 0.7",
      "decorators": [],
      "arguments": [
        "self",
        "endpoint",
        "values"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_split_blueprint_path",
          "body": "@cache\ndef _split_blueprint_path(name: str) -> list[str]:\n    out: list[str] = [name]\n    if '.' in name:\n        out.extend(_split_blueprint_path(name.rpartition('.')[0]))\n    return out"
        }
      ]
    },
    {
      "name": "handle_url_build_error",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 932,
      "end_line_number": 964,
      "source_code": "def handle_url_build_error(\n        self, error: BuildError, endpoint: str, values: dict[str, t.Any]\n    ) -> str:\n        \"\"\"Called by :meth:`.url_for` if a\n        :exc:`~werkzeug.routing.BuildError` was raised. If this returns\n        a value, it will be returned by ``url_for``, otherwise the error\n        will be re-raised.\n\n        Each function in :attr:`url_build_error_handlers` is called with\n        ``error``, ``endpoint`` and ``values``. If a function returns\n        ``None`` or raises a ``BuildError``, it is skipped. Otherwise,\n        its return value is returned by ``url_for``.\n\n        :param error: The active ``BuildError`` being handled.\n        :param endpoint: The endpoint being built.\n        :param values: The keyword arguments passed to ``url_for``.\n        \"\"\"\n        for handler in self.url_build_error_handlers:\n            try:\n                rv = handler(error, endpoint, values)\n            except BuildError as e:\n                # make error available outside except block\n                error = e\n            else:\n                if rv is not None:\n                    return rv\n\n        # Re-raise if called with an active exception, otherwise raise\n        # the passed in exception.\n        if error is sys.exc_info()[1]:\n            raise\n\n        raise error",
      "docstring": "Called by :meth:`.url_for` if a\n:exc:`~werkzeug.routing.BuildError` was raised. If this returns\na value, it will be returned by ``url_for``, otherwise the error\nwill be re-raised.\n\nEach function in :attr:`url_build_error_handlers` is called with\n``error``, ``endpoint`` and ``values``. If a function returns\n``None`` or raises a ``BuildError``, it is skipped. Otherwise,\nits return value is returned by ``url_for``.\n\n:param error: The active ``BuildError`` being handled.\n:param endpoint: The endpoint being built.\n:param values: The keyword arguments passed to ``url_for``.",
      "decorators": [],
      "arguments": [
        "self",
        "error",
        "endpoint",
        "values"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 679,
      "end_line_number": 681,
      "source_code": "def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_template_filter(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_filter",
          "body": "@setupmethod\ndef add_template_filter(self, f: ft.TemplateFilterCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template filter.  Works exactly like the\n        :meth:`template_filter` decorator.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.filters[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "decorator",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 720,
      "end_line_number": 722,
      "source_code": "def decorator(f: T_template_test) -> T_template_test:\n            self.add_template_test(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_test",
          "body": "@setupmethod\ndef add_template_test(self, f: ft.TemplateTestCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.tests[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "decorator",
      "module": "app",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\app.py",
      "line_number": 758,
      "end_line_number": 760,
      "source_code": "def decorator(f: T_template_global) -> T_template_global:\n            self.add_template_global(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "logging",
        "os",
        "sys",
        "typing",
        "datetime.timedelta",
        "itertools.chain",
        "werkzeug.exceptions.Aborter",
        "werkzeug.exceptions.BadRequest",
        "werkzeug.exceptions.BadRequestKeyError",
        "werkzeug.routing.BuildError",
        "werkzeug.routing.Map",
        "werkzeug.routing.Rule",
        "werkzeug.sansio.response.Response",
        "werkzeug.utils.cached_property",
        "werkzeug.utils.redirect",
        ".typing",
        "config.Config",
        "config.ConfigAttribute",
        "ctx._AppCtxGlobals",
        "helpers._split_blueprint_path",
        "helpers.get_debug_flag",
        "json.provider.DefaultJSONProvider",
        "json.provider.JSONProvider",
        "logging.create_logger",
        "templating.DispatchingJinjaLoader",
        "templating.Environment",
        "scaffold._endpoint_from_view_func",
        "scaffold.find_package",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "werkzeug.wrappers.Response",
        "testing.FlaskClient",
        "testing.FlaskCliRunner",
        "blueprints.Blueprint"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_template_global",
          "body": "@setupmethod\ndef add_template_global(self, f: ft.TemplateGlobalCallable, name: str | None=None) -> None:\n    \"\"\"Register a custom template global function. Works exactly like the\n        :meth:`template_global` decorator.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global function, otherwise the\n                     function name will be used.\n        \"\"\"\n    self.jinja_env.globals[name or f.__name__] = f"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 41,
      "end_line_number": 85,
      "source_code": "def __init__(\n        self,\n        blueprint: Blueprint,\n        app: App,\n        options: t.Any,\n        first_registration: bool,\n    ) -> None:\n        #: a reference to the current application\n        self.app = app\n\n        #: a reference to the blueprint that created this setup state.\n        self.blueprint = blueprint\n\n        #: a dictionary with all options that were passed to the\n        #: :meth:`~flask.Flask.register_blueprint` method.\n        self.options = options\n\n        #: as blueprints can be registered multiple times with the\n        #: application and not everything wants to be registered\n        #: multiple times on it, this attribute can be used to figure\n        #: out if the blueprint was registered in the past already.\n        self.first_registration = first_registration\n\n        subdomain = self.options.get(\"subdomain\")\n        if subdomain is None:\n            subdomain = self.blueprint.subdomain\n\n        #: The subdomain that the blueprint should be active for, ``None``\n        #: otherwise.\n        self.subdomain = subdomain\n\n        url_prefix = self.options.get(\"url_prefix\")\n        if url_prefix is None:\n            url_prefix = self.blueprint.url_prefix\n        #: The prefix that should be used for all URLs defined on the\n        #: blueprint.\n        self.url_prefix = url_prefix\n\n        self.name = self.options.get(\"name\", blueprint.name)\n        self.name_prefix = self.options.get(\"name_prefix\", \"\")\n\n        #: A dictionary with URL defaults that is added to each and every\n        #: URL that was defined with the blueprint.\n        self.url_defaults = dict(self.blueprint.url_values_defaults)\n        self.url_defaults.update(self.options.get(\"url_defaults\", ()))",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "blueprint",
        "app",
        "options",
        "first_registration"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        }
      ]
    },
    {
      "name": "add_url_rule",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 87,
      "end_line_number": 116,
      "source_code": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"A helper method to register a rule (and optionally a view function)\n        to the application.  The endpoint is automatically prefixed with the\n        blueprint's name.\n        \"\"\"\n        if self.url_prefix is not None:\n            if rule:\n                rule = \"/\".join((self.url_prefix.rstrip(\"/\"), rule.lstrip(\"/\")))\n            else:\n                rule = self.url_prefix\n        options.setdefault(\"subdomain\", self.subdomain)\n        if endpoint is None:\n            endpoint = _endpoint_from_view_func(view_func)  # type: ignore\n        defaults = self.url_defaults\n        if \"defaults\" in options:\n            defaults = dict(defaults, **options.pop(\"defaults\"))\n\n        self.app.add_url_rule(\n            rule,\n            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),\n            view_func,\n            defaults=defaults,\n            **options,\n        )",
      "docstring": "A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint's name.",
      "decorators": [],
      "arguments": [
        "self",
        "rule",
        "endpoint",
        "view_func"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "options.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        },
        {
          "name": "self.app.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        },
        {
          "name": "_endpoint_from_view_func",
          "body": "def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, 'expected view func if endpoint is not provided.'\n    return view_func.__name__"
        },
        {
          "name": "options.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 174,
      "end_line_number": 211,
      "source_code": "def __init__(\n        self,\n        name: str,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        url_prefix: str | None = None,\n        subdomain: str | None = None,\n        url_defaults: dict[str, t.Any] | None = None,\n        root_path: str | None = None,\n        cli_group: str | None = _sentinel,  # type: ignore[assignment]\n    ):\n        super().__init__(\n            import_name=import_name,\n            static_folder=static_folder,\n            static_url_path=static_url_path,\n            template_folder=template_folder,\n            root_path=root_path,\n        )\n\n        if not name:\n            raise ValueError(\"'name' may not be empty.\")\n\n        if \".\" in name:\n            raise ValueError(\"'name' may not contain a dot '.' character.\")\n\n        self.name = name\n        self.url_prefix = url_prefix\n        self.subdomain = subdomain\n        self.deferred_functions: list[DeferredSetupFunction] = []\n\n        if url_defaults is None:\n            url_defaults = {}\n\n        self.url_values_defaults = url_defaults\n        self.cli_group = cli_group\n        self._blueprints: list[tuple[Blueprint, dict[str, t.Any]]] = []",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "name",
        "import_name",
        "static_folder",
        "static_url_path",
        "template_folder",
        "url_prefix",
        "subdomain",
        "url_defaults",
        "root_path",
        "cli_group"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_check_setup_finished",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 213,
      "end_line_number": 221,
      "source_code": "def _check_setup_finished(self, f_name: str) -> None:\n        if self._got_registered_once:\n            raise AssertionError(\n                f\"The setup method '{f_name}' can no longer be called on the blueprint\"\n                f\" '{self.name}'. It has already been registered at least once, any\"\n                \" changes will not be applied consistently.\\n\"\n                \"Make sure all imports, decorators, functions, etc. needed to set up\"\n                \" the blueprint are done before registering it.\"\n            )",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "f_name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "record",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 224,
      "end_line_number": 230,
      "source_code": "def record(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        \"\"\"\n        self.deferred_functions.append(func)",
      "docstring": "Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the :meth:`make_setup_state`\nmethod.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "func"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "record_once",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 233,
      "end_line_number": 244,
      "source_code": "def record_once(self, func: DeferredSetupFunction) -> None:\n        \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n        def wrapper(state: BlueprintSetupState) -> None:\n            if state.first_registration:\n                func(state)\n\n        self.record(update_wrapper(wrapper, func))",
      "docstring": "Works like :meth:`record` but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "func"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record",
          "body": "@setupmethod\ndef record(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        \"\"\"\n    self.deferred_functions.append(func)"
        }
      ]
    },
    {
      "name": "make_setup_state",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 246,
      "end_line_number": 253,
      "source_code": "def make_setup_state(\n        self, app: App, options: dict[str, t.Any], first_registration: bool = False\n    ) -> BlueprintSetupState:\n        \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        \"\"\"\n        return BlueprintSetupState(self, app, options, first_registration)",
      "docstring": "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state.",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "options",
        "first_registration"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "register_blueprint",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 256,
      "end_line_number": 271,
      "source_code": "def register_blueprint(self, blueprint: Blueprint, **options: t.Any) -> None:\n        \"\"\"Register a :class:`~flask.Blueprint` on this blueprint. Keyword\n        arguments passed to this method will override the defaults set\n        on the blueprint.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        if blueprint is self:\n            raise ValueError(\"Cannot register a blueprint on itself\")\n        self._blueprints.append((blueprint, options))",
      "docstring": "Register a :class:`~flask.Blueprint` on this blueprint. Keyword\narguments passed to this method will override the defaults set\non the blueprint.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "blueprint"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "register",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 273,
      "end_line_number": 377,
      "source_code": "def register(self, app: App, options: dict[str, t.Any]) -> None:\n        \"\"\"Called by :meth:`Flask.register_blueprint` to register all\n        views and callbacks registered on the blueprint with the\n        application. Creates a :class:`.BlueprintSetupState` and calls\n        each :meth:`record` callback with it.\n\n        :param app: The application this blueprint is being registered\n            with.\n        :param options: Keyword arguments forwarded from\n            :meth:`~Flask.register_blueprint`.\n\n        .. versionchanged:: 2.3\n            Nested blueprints now correctly apply subdomains.\n\n        .. versionchanged:: 2.1\n            Registering the same blueprint with the same name multiple\n            times is an error.\n\n        .. versionchanged:: 2.0.1\n            Nested blueprints are registered with their dotted name.\n            This allows different blueprints with the same name to be\n            nested at different locations.\n\n        .. versionchanged:: 2.0.1\n            The ``name`` option can be used to change the (pre-dotted)\n            name the blueprint is registered with. This allows the same\n            blueprint to be registered multiple times with unique names\n            for ``url_for``.\n        \"\"\"\n        name_prefix = options.get(\"name_prefix\", \"\")\n        self_name = options.get(\"name\", self.name)\n        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n\n        if name in app.blueprints:\n            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"\n            existing_at = f\" '{name}'\" if self_name != name else \"\"\n\n            raise ValueError(\n                f\"The name '{self_name}' is already registered for\"\n                f\" {bp_desc} blueprint{existing_at}. Use 'name=' to\"\n                f\" provide a unique name.\"\n            )\n\n        first_bp_registration = not any(bp is self for bp in app.blueprints.values())\n        first_name_registration = name not in app.blueprints\n\n        app.blueprints[name] = self\n        self._got_registered_once = True\n        state = self.make_setup_state(app, options, first_bp_registration)\n\n        if self.has_static_folder:\n            state.add_url_rule(\n                f\"{self.static_url_path}/<path:filename>\",\n                view_func=self.send_static_file,  # type: ignore[attr-defined]\n                endpoint=\"static\",\n            )\n\n        # Merge blueprint data into parent.\n        if first_bp_registration or first_name_registration:\n            self._merge_blueprint_funcs(app, name)\n\n        for deferred in self.deferred_functions:\n            deferred(state)\n\n        cli_resolved_group = options.get(\"cli_group\", self.cli_group)\n\n        if self.cli.commands:\n            if cli_resolved_group is None:\n                app.cli.commands.update(self.cli.commands)\n            elif cli_resolved_group is _sentinel:\n                self.cli.name = name\n                app.cli.add_command(self.cli)\n            else:\n                self.cli.name = cli_resolved_group\n                app.cli.add_command(self.cli)\n\n        for blueprint, bp_options in self._blueprints:\n            bp_options = bp_options.copy()\n            bp_url_prefix = bp_options.get(\"url_prefix\")\n            bp_subdomain = bp_options.get(\"subdomain\")\n\n            if bp_subdomain is None:\n                bp_subdomain = blueprint.subdomain\n\n            if state.subdomain is not None and bp_subdomain is not None:\n                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain\n            elif bp_subdomain is not None:\n                bp_options[\"subdomain\"] = bp_subdomain\n            elif state.subdomain is not None:\n                bp_options[\"subdomain\"] = state.subdomain\n\n            if bp_url_prefix is None:\n                bp_url_prefix = blueprint.url_prefix\n\n            if state.url_prefix is not None and bp_url_prefix is not None:\n                bp_options[\"url_prefix\"] = (\n                    state.url_prefix.rstrip(\"/\") + \"/\" + bp_url_prefix.lstrip(\"/\")\n                )\n            elif bp_url_prefix is not None:\n                bp_options[\"url_prefix\"] = bp_url_prefix\n            elif state.url_prefix is not None:\n                bp_options[\"url_prefix\"] = state.url_prefix\n\n            bp_options[\"name_prefix\"] = name\n            blueprint.register(app, bp_options)",
      "docstring": "Called by :meth:`Flask.register_blueprint` to register all\nviews and callbacks registered on the blueprint with the\napplication. Creates a :class:`.BlueprintSetupState` and calls\neach :meth:`record` callback with it.\n\n:param app: The application this blueprint is being registered\n    with.\n:param options: Keyword arguments forwarded from\n    :meth:`~Flask.register_blueprint`.\n\n.. versionchanged:: 2.3\n    Nested blueprints now correctly apply subdomains.\n\n.. versionchanged:: 2.1\n    Registering the same blueprint with the same name multiple\n    times is an error.\n\n.. versionchanged:: 2.0.1\n    Nested blueprints are registered with their dotted name.\n    This allows different blueprints with the same name to be\n    nested at different locations.\n\n.. versionchanged:: 2.0.1\n    The ``name`` option can be used to change the (pre-dotted)\n    name the blueprint is registered with. This allows the same\n    blueprint to be registered multiple times with unique names\n    for ``url_for``.",
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "options"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "self.make_setup_state",
          "body": "def make_setup_state(self, app: App, options: dict[str, t.Any], first_registration: bool=False) -> BlueprintSetupState:\n    \"\"\"Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`\n        object that is later passed to the register callback functions.\n        Subclasses can override this to return a subclass of the setup state.\n        \"\"\"\n    return BlueprintSetupState(self, app, options, first_registration)"
        },
        {
          "name": "options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "state.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        },
        {
          "name": "self._merge_blueprint_funcs",
          "body": "def _merge_blueprint_funcs(self, app: App, name: str) -> None:\n\n    def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n        for key, values in bp_dict.items():\n            key = name if key is None else f'{name}.{key}'\n            parent_dict[key].extend(values)\n    for key, value in self.error_handler_spec.items():\n        key = name if key is None else f'{name}.{key}'\n        value = defaultdict(dict, {code: {exc_class: func for exc_class, func in code_values.items()} for code, code_values in value.items()})\n        app.error_handler_spec[key] = value\n    for endpoint, func in self.view_functions.items():\n        app.view_functions[endpoint] = func\n    extend(self.before_request_funcs, app.before_request_funcs)\n    extend(self.after_request_funcs, app.after_request_funcs)\n    extend(self.teardown_request_funcs, app.teardown_request_funcs)\n    extend(self.url_default_functions, app.url_default_functions)\n    extend(self.url_value_preprocessors, app.url_value_preprocessors)\n    extend(self.template_context_processors, app.template_context_processors)"
        },
        {
          "name": "bp_options.copy",
          "body": "def copy(self) -> RequestContext:\n    \"\"\"Creates a copy of this request context with the same request object.\n        This can be used to move a request context to a different greenlet.\n        Because the actual request object is the same this cannot be used to\n        move a request context to a different thread unless access to the\n        request object is locked.\n\n        .. versionadded:: 0.10\n\n        .. versionchanged:: 1.1\n           The current session object is used instead of reloading the original\n           data. This prevents `flask.session` pointing to an out-of-date object.\n        \"\"\"\n    return self.__class__(self.app, environ=self.request.environ, request=self.request, session=self.session)"
        },
        {
          "name": "bp_options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "bp_options.get",
          "body": "def get(self, name: str, default: t.Any | None=None) -> t.Any:\n    \"\"\"Get an attribute by name, or a default value. Like\n        :meth:`dict.get`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to return if the attribute is not present.\n\n        .. versionadded:: 0.10\n        \"\"\"\n    return self.__dict__.get(name, default)"
        },
        {
          "name": "blueprint.register",
          "body": "def register(self, tag_class: type[JSONTag], force: bool=False, index: int | None=None) -> None:\n    \"\"\"Register a new tag with this serializer.\n\n        :param tag_class: tag class to register. Will be instantiated with this\n            serializer instance.\n        :param force: overwrite an existing tag. If false (default), a\n            :exc:`KeyError` is raised.\n        :param index: index to insert the new tag in the tag order. Useful when\n            the new tag is a special case of an existing tag. If ``None``\n            (default), the tag is appended to the end of the order.\n\n        :raise KeyError: if the tag key is already registered and ``force`` is\n            not true.\n        \"\"\"\n    tag = tag_class(self)\n    key = tag.key\n    if key:\n        if not force and key in self.tags:\n            raise KeyError(f\"Tag '{key}' is already registered.\")\n        self.tags[key] = tag\n    if index is None:\n        self.order.append(tag)\n    else:\n        self.order.insert(index, tag)"
        }
      ]
    },
    {
      "name": "_merge_blueprint_funcs",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 379,
      "end_line_number": 410,
      "source_code": "def _merge_blueprint_funcs(self, app: App, name: str) -> None:\n        def extend(\n            bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n            parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n        ) -> None:\n            for key, values in bp_dict.items():\n                key = name if key is None else f\"{name}.{key}\"\n                parent_dict[key].extend(values)\n\n        for key, value in self.error_handler_spec.items():\n            key = name if key is None else f\"{name}.{key}\"\n            value = defaultdict(\n                dict,\n                {\n                    code: {exc_class: func for exc_class, func in code_values.items()}\n                    for code, code_values in value.items()\n                },\n            )\n            app.error_handler_spec[key] = value\n\n        for endpoint, func in self.view_functions.items():\n            app.view_functions[endpoint] = func\n\n        extend(self.before_request_funcs, app.before_request_funcs)\n        extend(self.after_request_funcs, app.after_request_funcs)\n        extend(\n            self.teardown_request_funcs,\n            app.teardown_request_funcs,\n        )\n        extend(self.url_default_functions, app.url_default_functions)\n        extend(self.url_value_preprocessors, app.url_value_preprocessors)\n        extend(self.template_context_processors, app.template_context_processors)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "app",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        },
        {
          "name": "extend",
          "body": "def extend(bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]], parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]]) -> None:\n    for key, values in bp_dict.items():\n        key = name if key is None else f'{name}.{key}'\n        parent_dict[key].extend(values)"
        }
      ]
    },
    {
      "name": "add_url_rule",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 413,
      "end_line_number": 441,
      "source_code": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\n        full documentation.\n\n        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\n        used with :func:`url_for`, is prefixed with the blueprint's name.\n        \"\"\"\n        if endpoint and \".\" in endpoint:\n            raise ValueError(\"'endpoint' may not contain a dot '.' character.\")\n\n        if view_func and hasattr(view_func, \"__name__\") and \".\" in view_func.__name__:\n            raise ValueError(\"'view_func' name may not contain a dot '.' character.\")\n\n        self.record(\n            lambda s: s.add_url_rule(\n                rule,\n                endpoint,\n                view_func,\n                provide_automatic_options=provide_automatic_options,\n                **options,\n            )\n        )",
      "docstring": "Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\nfull documentation.\n\nThe URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\nused with :func:`url_for`, is prefixed with the blueprint's name.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule",
        "endpoint",
        "view_func",
        "provide_automatic_options"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record",
          "body": "@setupmethod\ndef record(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Registers a function that is called when the blueprint is\n        registered on the application.  This function is called with the\n        state as argument as returned by the :meth:`make_setup_state`\n        method.\n        \"\"\"\n    self.deferred_functions.append(func)"
        },
        {
          "name": "s.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        }
      ]
    },
    {
      "name": "app_template_filter",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 444,
      "end_line_number": 458,
      "source_code": "def app_template_filter(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_filter], T_template_filter]:\n        \"\"\"Register a template filter, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_app_template_filter(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "Register a template filter, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_filter",
          "body": "@setupmethod\ndef add_app_template_filter(self, f: ft.TemplateFilterCallable, name: str | None=None) -> None:\n    \"\"\"Register a template filter, available in any template rendered by the\n        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n        :meth:`.Flask.add_template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.filters[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "add_app_template_filter",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 461,
      "end_line_number": 475,
      "source_code": "def add_app_template_filter(\n        self, f: ft.TemplateFilterCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template filter, available in any template rendered by the\n        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n        :meth:`.Flask.add_template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.filters[name or f.__name__] = f\n\n        self.record_once(register_template)",
      "docstring": "Register a template filter, available in any template rendered by the\napplication. Works like the :meth:`app_template_filter` decorator. Equivalent to\n:meth:`.Flask.add_template_filter`.\n\n:param name: the optional name of the filter, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        }
      ]
    },
    {
      "name": "app_template_test",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 478,
      "end_line_number": 494,
      "source_code": "def app_template_test(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_test], T_template_test]:\n        \"\"\"Register a template test, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_test) -> T_template_test:\n            self.add_app_template_test(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "Register a template test, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_test",
          "body": "@setupmethod\ndef add_app_template_test(self, f: ft.TemplateTestCallable, name: str | None=None) -> None:\n    \"\"\"Register a template test, available in any template rendered by the\n        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n        :meth:`.Flask.add_template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.tests[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "add_app_template_test",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 497,
      "end_line_number": 513,
      "source_code": "def add_app_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template test, available in any template rendered by the\n        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n        :meth:`.Flask.add_template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.tests[name or f.__name__] = f\n\n        self.record_once(register_template)",
      "docstring": "Register a template test, available in any template rendered by the\napplication. Works like the :meth:`app_template_test` decorator. Equivalent to\n:meth:`.Flask.add_template_test`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the test, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        }
      ]
    },
    {
      "name": "app_template_global",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 516,
      "end_line_number": 532,
      "source_code": "def app_template_global(\n        self, name: str | None = None\n    ) -> t.Callable[[T_template_global], T_template_global]:\n        \"\"\"Register a template global, available in any template rendered by the\n        application. Equivalent to :meth:`.Flask.template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def decorator(f: T_template_global) -> T_template_global:\n            self.add_app_template_global(f, name=name)\n            return f\n\n        return decorator",
      "docstring": "Register a template global, available in any template rendered by the\napplication. Equivalent to :meth:`.Flask.template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_global",
          "body": "@setupmethod\ndef add_app_template_global(self, f: ft.TemplateGlobalCallable, name: str | None=None) -> None:\n    \"\"\"Register a template global, available in any template rendered by the\n        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n        :meth:`.Flask.add_template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.globals[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "add_app_template_global",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 535,
      "end_line_number": 551,
      "source_code": "def add_app_template_global(\n        self, f: ft.TemplateGlobalCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a template global, available in any template rendered by the\n        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n        :meth:`.Flask.add_template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n        def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.globals[name or f.__name__] = f\n\n        self.record_once(register_template)",
      "docstring": "Register a template global, available in any template rendered by the\napplication. Works like the :meth:`app_template_global` decorator. Equivalent to\n:meth:`.Flask.add_template_global`.\n\n.. versionadded:: 0.10\n\n:param name: the optional name of the global, otherwise the\n             function name will be used.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f",
        "name"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        }
      ]
    },
    {
      "name": "before_app_request",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 554,
      "end_line_number": 561,
      "source_code": "def before_app_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Like :meth:`before_request`, but before every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.before_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`before_request`, but before every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.before_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.before_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "after_app_request",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 564,
      "end_line_number": 571,
      "source_code": "def after_app_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Like :meth:`after_request`, but after every request, not only those handled\n        by the blueprint. Equivalent to :meth:`.Flask.after_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`after_request`, but after every request, not only those handled\nby the blueprint. Equivalent to :meth:`.Flask.after_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.after_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "teardown_app_request",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 574,
      "end_line_number": 581,
      "source_code": "def teardown_app_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Like :meth:`teardown_request`, but after every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`teardown_request`, but after every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.teardown_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "app_context_processor",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 584,
      "end_line_number": 593,
      "source_code": "def app_context_processor(\n        self, f: T_template_context_processor\n    ) -> T_template_context_processor:\n        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not\n        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.template_context_processors.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`context_processor`, but for templates rendered by every view, not\nonly by the blueprint. Equivalent to :meth:`.Flask.context_processor`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.template_context_processors.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "app_errorhandler",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 596,
      "end_line_number": 610,
      "source_code": "def app_errorhandler(\n        self, code: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.\n        \"\"\"\n\n        def decorator(f: T_error_handler) -> T_error_handler:\n            def from_blueprint(state: BlueprintSetupState) -> None:\n                state.app.errorhandler(code)(f)\n\n            self.record_once(from_blueprint)\n            return f\n\n        return decorator",
      "docstring": "Like :meth:`errorhandler`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.errorhandler`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "code"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "state.app.errorhandler",
          "body": "@setupmethod\ndef errorhandler(self, code_or_exception: type[Exception] | int) -> t.Callable[[T_error_handler], T_error_handler]:\n    \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n    def decorator(f: T_error_handler) -> T_error_handler:\n        self.register_error_handler(code_or_exception, f)\n        return f\n    return decorator"
        }
      ]
    },
    {
      "name": "app_url_value_preprocessor",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 613,
      "end_line_number": 622,
      "source_code": "def app_url_value_preprocessor(\n        self, f: T_url_value_preprocessor\n    ) -> T_url_value_preprocessor:\n        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those\n        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`url_value_preprocessor`, but for every request, not only those\nhandled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.url_value_preprocessors.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "app_url_defaults",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 625,
      "end_line_number": 632,
      "source_code": "def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by\n        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.\n        \"\"\"\n        self.record_once(\n            lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n        )\n        return f",
      "docstring": "Like :meth:`url_defaults`, but for every request, not only those handled by\nthe blueprint. Equivalent to :meth:`.Flask.url_defaults`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "s.app.url_default_functions.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "wrapper",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 240,
      "end_line_number": 242,
      "source_code": "def wrapper(state: BlueprintSetupState) -> None:\n            if state.first_registration:\n                func(state)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "state"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "extend",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 380,
      "end_line_number": 386,
      "source_code": "def extend(\n            bp_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n            parent_dict: dict[ft.AppOrBlueprintKey, list[t.Any]],\n        ) -> None:\n            for key, values in bp_dict.items():\n                key = name if key is None else f\"{name}.{key}\"\n                parent_dict[key].extend(values)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "bp_dict",
        "parent_dict"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 454,
      "end_line_number": 456,
      "source_code": "def decorator(f: T_template_filter) -> T_template_filter:\n            self.add_app_template_filter(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_filter",
          "body": "@setupmethod\ndef add_app_template_filter(self, f: ft.TemplateFilterCallable, name: str | None=None) -> None:\n    \"\"\"Register a template filter, available in any template rendered by the\n        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n        :meth:`.Flask.add_template_filter`.\n\n        :param name: the optional name of the filter, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.filters[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "register_template",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 472,
      "end_line_number": 473,
      "source_code": "def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.filters[name or f.__name__] = f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "state"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 490,
      "end_line_number": 492,
      "source_code": "def decorator(f: T_template_test) -> T_template_test:\n            self.add_app_template_test(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_test",
          "body": "@setupmethod\ndef add_app_template_test(self, f: ft.TemplateTestCallable, name: str | None=None) -> None:\n    \"\"\"Register a template test, available in any template rendered by the\n        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n        :meth:`.Flask.add_template_test`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the test, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.tests[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "register_template",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 510,
      "end_line_number": 511,
      "source_code": "def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.tests[name or f.__name__] = f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "state"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 528,
      "end_line_number": 530,
      "source_code": "def decorator(f: T_template_global) -> T_template_global:\n            self.add_app_template_global(f, name=name)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.add_app_template_global",
          "body": "@setupmethod\ndef add_app_template_global(self, f: ft.TemplateGlobalCallable, name: str | None=None) -> None:\n    \"\"\"Register a template global, available in any template rendered by the\n        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n        :meth:`.Flask.add_template_global`.\n\n        .. versionadded:: 0.10\n\n        :param name: the optional name of the global, otherwise the\n                     function name will be used.\n        \"\"\"\n\n    def register_template(state: BlueprintSetupState) -> None:\n        state.app.jinja_env.globals[name or f.__name__] = f\n    self.record_once(register_template)"
        }
      ]
    },
    {
      "name": "register_template",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 548,
      "end_line_number": 549,
      "source_code": "def register_template(state: BlueprintSetupState) -> None:\n            state.app.jinja_env.globals[name or f.__name__] = f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "state"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 603,
      "end_line_number": 608,
      "source_code": "def decorator(f: T_error_handler) -> T_error_handler:\n            def from_blueprint(state: BlueprintSetupState) -> None:\n                state.app.errorhandler(code)(f)\n\n            self.record_once(from_blueprint)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.record_once",
          "body": "@setupmethod\ndef record_once(self, func: DeferredSetupFunction) -> None:\n    \"\"\"Works like :meth:`record` but wraps the function in another\n        function that will ensure the function is only called once.  If the\n        blueprint is registered a second time on the application, the\n        function passed is not called.\n        \"\"\"\n\n    def wrapper(state: BlueprintSetupState) -> None:\n        if state.first_registration:\n            func(state)\n    self.record(update_wrapper(wrapper, func))"
        },
        {
          "name": "state.app.errorhandler",
          "body": "@setupmethod\ndef errorhandler(self, code_or_exception: type[Exception] | int) -> t.Callable[[T_error_handler], T_error_handler]:\n    \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n    def decorator(f: T_error_handler) -> T_error_handler:\n        self.register_error_handler(code_or_exception, f)\n        return f\n    return decorator"
        }
      ]
    },
    {
      "name": "from_blueprint",
      "module": "blueprints",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\blueprints.py",
      "line_number": 604,
      "end_line_number": 605,
      "source_code": "def from_blueprint(state: BlueprintSetupState) -> None:\n                state.app.errorhandler(code)(f)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "state"
      ],
      "imports": [
        "__future__.annotations",
        "os",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        ".typing",
        "scaffold._endpoint_from_view_func",
        "scaffold._sentinel",
        "scaffold.Scaffold",
        "scaffold.setupmethod",
        "app.App"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "state.app.errorhandler",
          "body": "@setupmethod\ndef errorhandler(self, code_or_exception: type[Exception] | int) -> t.Callable[[T_error_handler], T_error_handler]:\n    \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n    def decorator(f: T_error_handler) -> T_error_handler:\n        self.register_error_handler(code_or_exception, f)\n        return f\n    return decorator"
        }
      ]
    },
    {
      "name": "setupmethod",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 42,
      "end_line_number": 49,
      "source_code": "def setupmethod(f: F) -> F:\n    f_name = f.__name__\n\n    def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        self._check_setup_finished(f_name)\n        return f(self, *args, **kwargs)\n\n    return t.cast(F, update_wrapper(wrapper_func, f))",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._check_setup_finished",
          "body": "def _check_setup_finished(self, f_name: str) -> None:\n    if self._got_first_request:\n        raise AssertionError(f\"The setup method '{f_name}' can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.\\nMake sure all imports, decorators, functions, etc. needed to set up the application are done before running it.\")"
        }
      ]
    },
    {
      "name": "_endpoint_from_view_func",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 701,
      "end_line_number": 706,
      "source_code": "def _endpoint_from_view_func(view_func: ft.RouteCallable) -> str:\n    \"\"\"Internal helper that returns the default endpoint for a given\n    function.  This always is the function name.\n    \"\"\"\n    assert view_func is not None, \"expected view func if endpoint is not provided.\"\n    return view_func.__name__",
      "docstring": "Internal helper that returns the default endpoint for a given\nfunction.  This always is the function name.",
      "decorators": [],
      "arguments": [
        "view_func"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [
        "assert view_func is not None, 'expected view func if endpoint is not provided.'"
      ],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_find_package_path",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 709,
      "end_line_number": 751,
      "source_code": "def _find_package_path(import_name: str) -> str:\n    \"\"\"Find the path that contains the package or module.\"\"\"\n    root_mod_name, _, _ = import_name.partition(\".\")\n\n    try:\n        root_spec = importlib.util.find_spec(root_mod_name)\n\n        if root_spec is None:\n            raise ValueError(\"not found\")\n    except (ImportError, ValueError):\n        # ImportError: the machinery told us it does not exist\n        # ValueError:\n        #    - the module name was invalid\n        #    - the module name is __main__\n        #    - we raised `ValueError` due to `root_spec` being `None`\n        return os.getcwd()\n\n    if root_spec.submodule_search_locations:\n        if root_spec.origin is None or root_spec.origin == \"namespace\":\n            # namespace package\n            package_spec = importlib.util.find_spec(import_name)\n\n            if package_spec is not None and package_spec.submodule_search_locations:\n                # Pick the path in the namespace that contains the submodule.\n                package_path = pathlib.Path(\n                    os.path.commonpath(package_spec.submodule_search_locations)\n                )\n                search_location = next(\n                    location\n                    for location in root_spec.submodule_search_locations\n                    if package_path.is_relative_to(location)\n                )\n            else:\n                # Pick the first path.\n                search_location = root_spec.submodule_search_locations[0]\n\n            return os.path.dirname(search_location)\n        else:\n            # package with __init__.py\n            return os.path.dirname(os.path.dirname(root_spec.origin))\n    else:\n        # module\n        return os.path.dirname(root_spec.origin)",
      "docstring": "Find the path that contains the package or module.",
      "decorators": [],
      "arguments": [
        "import_name"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "find_package",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 754,
      "end_line_number": 792,
      "source_code": "def find_package(import_name: str) -> tuple[str | None, str]:\n    \"\"\"Find the prefix that a package is installed under, and the path\n    that it would be imported from.\n\n    The prefix is the directory containing the standard directory\n    hierarchy (lib, bin, etc.). If the package is not installed to the\n    system (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n    ``None`` is returned.\n\n    The path is the entry in :attr:`sys.path` that contains the package\n    for import. If the package is not installed, it's assumed that the\n    package was imported from the current working directory.\n    \"\"\"\n    package_path = _find_package_path(import_name)\n    py_prefix = os.path.abspath(sys.prefix)\n\n    # installed to the system\n    if pathlib.PurePath(package_path).is_relative_to(py_prefix):\n        return py_prefix, package_path\n\n    site_parent, site_folder = os.path.split(package_path)\n\n    # installed to a virtualenv\n    if site_folder.lower() == \"site-packages\":\n        parent, folder = os.path.split(site_parent)\n\n        # Windows (prefix/lib/site-packages)\n        if folder.lower() == \"lib\":\n            return parent, package_path\n\n        # Unix (prefix/lib/pythonX.Y/site-packages)\n        if os.path.basename(parent).lower() == \"lib\":\n            return os.path.dirname(parent), package_path\n\n        # something else (prefix/site-packages)\n        return site_parent, package_path\n\n    # not installed\n    return None, package_path",
      "docstring": "Find the prefix that a package is installed under, and the path\nthat it would be imported from.\n\nThe prefix is the directory containing the standard directory\nhierarchy (lib, bin, etc.). If the package is not installed to the\nsystem (:attr:`sys.prefix`) or a virtualenv (``site-packages``),\n``None`` is returned.\n\nThe path is the entry in :attr:`sys.path` that contains the package\nfor import. If the package is not installed, it's assumed that the\npackage was imported from the current working directory.",
      "decorators": [],
      "arguments": [
        "import_name"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "_find_package_path",
          "body": "def _find_package_path(import_name: str) -> str:\n    \"\"\"Find the path that contains the package or module.\"\"\"\n    root_mod_name, _, _ = import_name.partition('.')\n    try:\n        root_spec = importlib.util.find_spec(root_mod_name)\n        if root_spec is None:\n            raise ValueError('not found')\n    except (ImportError, ValueError):\n        return os.getcwd()\n    if root_spec.submodule_search_locations:\n        if root_spec.origin is None or root_spec.origin == 'namespace':\n            package_spec = importlib.util.find_spec(import_name)\n            if package_spec is not None and package_spec.submodule_search_locations:\n                package_path = pathlib.Path(os.path.commonpath(package_spec.submodule_search_locations))\n                search_location = next((location for location in root_spec.submodule_search_locations if package_path.is_relative_to(location)))\n            else:\n                search_location = root_spec.submodule_search_locations[0]\n            return os.path.dirname(search_location)\n        else:\n            return os.path.dirname(os.path.dirname(root_spec.origin))\n    else:\n        return os.path.dirname(root_spec.origin)"
        }
      ]
    },
    {
      "name": "wrapper_func",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 45,
      "end_line_number": 47,
      "source_code": "def wrapper_func(self: Scaffold, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        self._check_setup_finished(f_name)\n        return f(self, *args, **kwargs)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._check_setup_finished",
          "body": "def _check_setup_finished(self, f_name: str) -> None:\n    if self._got_first_request:\n        raise AssertionError(f\"The setup method '{f_name}' can no longer be called on the application. It has already handled its first request, any changes will not be applied consistently.\\nMake sure all imports, decorators, functions, etc. needed to set up the application are done before running it.\")"
        }
      ]
    },
    {
      "name": "__init__",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 75,
      "end_line_number": 215,
      "source_code": "def __init__(\n        self,\n        import_name: str,\n        static_folder: str | os.PathLike[str] | None = None,\n        static_url_path: str | None = None,\n        template_folder: str | os.PathLike[str] | None = None,\n        root_path: str | None = None,\n    ):\n        #: The name of the package or module that this object belongs\n        #: to. Do not change this once it is set by the constructor.\n        self.import_name = import_name\n\n        self.static_folder = static_folder  # type: ignore\n        self.static_url_path = static_url_path\n\n        #: The path to the templates folder, relative to\n        #: :attr:`root_path`, to add to the template loader. ``None`` if\n        #: templates should not be added.\n        self.template_folder = template_folder\n\n        if root_path is None:\n            root_path = get_root_path(self.import_name)\n\n        #: Absolute path to the package on the filesystem. Used to look\n        #: up resources contained in the package.\n        self.root_path = root_path\n\n        #: A dictionary mapping endpoint names to view functions.\n        #:\n        #: To register a view function, use the :meth:`route` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.view_functions: dict[str, ft.RouteCallable] = {}\n\n        #: A data structure of registered error handlers, in the format\n        #: ``{scope: {code: {class: handler}}}``. The ``scope`` key is\n        #: the name of a blueprint the handlers are active for, or\n        #: ``None`` for all requests. The ``code`` key is the HTTP\n        #: status code for ``HTTPException``, or ``None`` for\n        #: other exceptions. The innermost dictionary maps exception\n        #: classes to handler functions.\n        #:\n        #: To register an error handler, use the :meth:`errorhandler`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.error_handler_spec: dict[\n            ft.AppOrBlueprintKey,\n            dict[int | None, dict[type[Exception], ft.ErrorHandlerCallable]],\n        ] = defaultdict(lambda: defaultdict(dict))\n\n        #: A data structure of functions to call at the beginning of\n        #: each request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`before_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.before_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.BeforeRequestCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request, in the format ``{scope: [functions]}``. The\n        #: ``scope`` key is the name of a blueprint the functions are\n        #: active for, or ``None`` for all requests.\n        #:\n        #: To register a function, use the :meth:`after_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.after_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.AfterRequestCallable[t.Any]]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call at the end of each\n        #: request even if an exception is raised, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`teardown_request`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.teardown_request_funcs: dict[\n            ft.AppOrBlueprintKey, list[ft.TeardownCallable]\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to pass extra context\n        #: values when rendering templates, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`context_processor`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.template_context_processors: dict[\n            ft.AppOrBlueprintKey, list[ft.TemplateContextProcessorCallable]\n        ] = defaultdict(list, {None: [_default_template_ctx_processor]})\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments passed to the view function, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the\n        #: :meth:`url_value_preprocessor` decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_value_preprocessors: dict[\n            ft.AppOrBlueprintKey,\n            list[ft.URLValuePreprocessorCallable],\n        ] = defaultdict(list)\n\n        #: A data structure of functions to call to modify the keyword\n        #: arguments when generating URLs, in the format\n        #: ``{scope: [functions]}``. The ``scope`` key is the name of a\n        #: blueprint the functions are active for, or ``None`` for all\n        #: requests.\n        #:\n        #: To register a function, use the :meth:`url_defaults`\n        #: decorator.\n        #:\n        #: This data structure is internal. It should not be modified\n        #: directly and its format may change at any time.\n        self.url_default_functions: dict[\n            ft.AppOrBlueprintKey, list[ft.URLDefaultCallable]\n        ] = defaultdict(list)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "import_name",
        "static_folder",
        "static_url_path",
        "template_folder",
        "root_path"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "get_root_path",
          "body": "def get_root_path(import_name: str) -> str:\n    \"\"\"Find the root path of a package, or the path that contains a\n    module. If it cannot be found, returns the current working\n    directory.\n\n    Not to be confused with the value returned by :func:`find_package`.\n\n    :meta private:\n    \"\"\"\n    mod = sys.modules.get(import_name)\n    if mod is not None and hasattr(mod, '__file__') and (mod.__file__ is not None):\n        return os.path.dirname(os.path.abspath(mod.__file__))\n    try:\n        spec = importlib.util.find_spec(import_name)\n        if spec is None:\n            raise ValueError\n    except (ImportError, ValueError):\n        loader = None\n    else:\n        loader = spec.loader\n    if loader is None:\n        return os.getcwd()\n    if hasattr(loader, 'get_filename'):\n        filepath = loader.get_filename(import_name)\n    else:\n        __import__(import_name)\n        mod = sys.modules[import_name]\n        filepath = getattr(mod, '__file__', None)\n        if filepath is None:\n            raise RuntimeError(f\"No root path can be found for the provided module {import_name!r}. This can happen because the module came from an import hook that does not provide file name information or because it's a namespace package. In this case the root path needs to be explicitly provided.\")\n    return os.path.dirname(os.path.abspath(filepath))"
        }
      ]
    },
    {
      "name": "__repr__",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 217,
      "end_line_number": 218,
      "source_code": "def __repr__(self) -> str:\n        return f\"<{type(self).__name__} {self.name!r}>\"",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_check_setup_finished",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 220,
      "end_line_number": 221,
      "source_code": "def _check_setup_finished(self, f_name: str) -> None:\n        raise NotImplementedError",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "f_name"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "static_folder",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 224,
      "end_line_number": 231,
      "source_code": "def static_folder(self) -> str | None:\n        \"\"\"The absolute path to the configured static folder. ``None``\n        if no static folder is set.\n        \"\"\"\n        if self._static_folder is not None:\n            return os.path.join(self.root_path, self._static_folder)\n        else:\n            return None",
      "docstring": "The absolute path to the configured static folder. ``None``\nif no static folder is set.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "static_folder",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 234,
      "end_line_number": 238,
      "source_code": "def static_folder(self, value: str | os.PathLike[str] | None) -> None:\n        if value is not None:\n            value = os.fspath(value).rstrip(r\"\\/\")\n\n        self._static_folder = value",
      "docstring": null,
      "decorators": [
        "static_folder.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "has_static_folder",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 241,
      "end_line_number": 246,
      "source_code": "def has_static_folder(self) -> bool:\n        \"\"\"``True`` if :attr:`static_folder` is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        return self.static_folder is not None",
      "docstring": "``True`` if :attr:`static_folder` is set.\n\n.. versionadded:: 0.5",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "static_url_path",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 249,
      "end_line_number": 262,
      "source_code": "def static_url_path(self) -> str | None:\n        \"\"\"The URL prefix that the static route will be accessible from.\n\n        If it was not configured during init, it is derived from\n        :attr:`static_folder`.\n        \"\"\"\n        if self._static_url_path is not None:\n            return self._static_url_path\n\n        if self.static_folder is not None:\n            basename = os.path.basename(self.static_folder)\n            return f\"/{basename}\".rstrip(\"/\")\n\n        return None",
      "docstring": "The URL prefix that the static route will be accessible from.\n\nIf it was not configured during init, it is derived from\n:attr:`static_folder`.",
      "decorators": [
        "property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "static_url_path",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 265,
      "end_line_number": 269,
      "source_code": "def static_url_path(self, value: str | None) -> None:\n        if value is not None:\n            value = value.rstrip(\"/\")\n\n        self._static_url_path = value",
      "docstring": null,
      "decorators": [
        "static_url_path.setter"
      ],
      "arguments": [
        "self",
        "value"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "jinja_loader",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 272,
      "end_line_number": 282,
      "source_code": "def jinja_loader(self) -> BaseLoader | None:\n        \"\"\"The Jinja loader for this object's templates. By default this\n        is a class :class:`jinja2.loaders.FileSystemLoader` to\n        :attr:`template_folder` if it is set.\n\n        .. versionadded:: 0.5\n        \"\"\"\n        if self.template_folder is not None:\n            return FileSystemLoader(os.path.join(self.root_path, self.template_folder))\n        else:\n            return None",
      "docstring": "The Jinja loader for this object's templates. By default this\nis a class :class:`jinja2.loaders.FileSystemLoader` to\n:attr:`template_folder` if it is set.\n\n.. versionadded:: 0.5",
      "decorators": [
        "cached_property"
      ],
      "arguments": [
        "self"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "_method_route",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 284,
      "end_line_number": 293,
      "source_code": "def _method_route(\n        self,\n        method: str,\n        rule: str,\n        options: dict[str, t.Any],\n    ) -> t.Callable[[T_route], T_route]:\n        if \"methods\" in options:\n            raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n\n        return self.route(rule, methods=[method], **options)",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "self",
        "method",
        "rule",
        "options"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.route",
          "body": "@setupmethod\ndef route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n    \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n    def decorator(f: T_route) -> T_route:\n        endpoint = options.pop('endpoint', None)\n        self.add_url_rule(rule, endpoint, f, **options)\n        return f\n    return decorator"
        }
      ]
    },
    {
      "name": "get",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 296,
      "end_line_number": 301,
      "source_code": "def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"GET\", rule, options)",
      "docstring": "Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._method_route",
          "body": "def _method_route(self, method: str, rule: str, options: dict[str, t.Any]) -> t.Callable[[T_route], T_route]:\n    if 'methods' in options:\n        raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n    return self.route(rule, methods=[method], **options)"
        }
      ]
    },
    {
      "name": "post",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 304,
      "end_line_number": 309,
      "source_code": "def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"POST\", rule, options)",
      "docstring": "Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._method_route",
          "body": "def _method_route(self, method: str, rule: str, options: dict[str, t.Any]) -> t.Callable[[T_route], T_route]:\n    if 'methods' in options:\n        raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n    return self.route(rule, methods=[method], **options)"
        }
      ]
    },
    {
      "name": "put",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 312,
      "end_line_number": 317,
      "source_code": "def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PUT\", rule, options)",
      "docstring": "Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._method_route",
          "body": "def _method_route(self, method: str, rule: str, options: dict[str, t.Any]) -> t.Callable[[T_route], T_route]:\n    if 'methods' in options:\n        raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n    return self.route(rule, methods=[method], **options)"
        }
      ]
    },
    {
      "name": "delete",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 320,
      "end_line_number": 325,
      "source_code": "def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"DELETE\", rule, options)",
      "docstring": "Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._method_route",
          "body": "def _method_route(self, method: str, rule: str, options: dict[str, t.Any]) -> t.Callable[[T_route], T_route]:\n    if 'methods' in options:\n        raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n    return self.route(rule, methods=[method], **options)"
        }
      ]
    },
    {
      "name": "patch",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 328,
      "end_line_number": 333,
      "source_code": "def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        return self._method_route(\"PATCH\", rule, options)",
      "docstring": "Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n\n.. versionadded:: 2.0",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._method_route",
          "body": "def _method_route(self, method: str, rule: str, options: dict[str, t.Any]) -> t.Callable[[T_route], T_route]:\n    if 'methods' in options:\n        raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n    return self.route(rule, methods=[method], **options)"
        }
      ]
    },
    {
      "name": "route",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 336,
      "end_line_number": 365,
      "source_code": "def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n        def decorator(f: T_route) -> T_route:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f\n\n        return decorator",
      "docstring": "Decorate a view function to register it with the given URL\nrule and options. Calls :meth:`add_url_rule`, which has more\ndetails about the implementation.\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        return \"Hello, World!\"\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n``OPTIONS`` are added automatically.\n\n:param rule: The URL rule string.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "options.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "self.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        }
      ]
    },
    {
      "name": "add_url_rule",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 368,
      "end_line_number": 433,
      "source_code": "def add_url_rule(\n        self,\n        rule: str,\n        endpoint: str | None = None,\n        view_func: ft.RouteCallable | None = None,\n        provide_automatic_options: bool | None = None,\n        **options: t.Any,\n    ) -> None:\n        \"\"\"Register a rule for routing incoming requests and building\n        URLs. The :meth:`route` decorator is a shortcut to call this\n        with the ``view_func`` argument. These are equivalent:\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                ...\n\n        .. code-block:: python\n\n            def index():\n                ...\n\n            app.add_url_rule(\"/\", view_func=index)\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed. An error\n        will be raised if a function has already been registered for the\n        endpoint.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\n        always added automatically, and ``OPTIONS`` is added\n        automatically by default.\n\n        ``view_func`` does not necessarily need to be passed, but if the\n        rule should participate in routing an endpoint name must be\n        associated with a view function at some point with the\n        :meth:`endpoint` decorator.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/\", endpoint=\"index\")\n\n            @app.endpoint(\"index\")\n            def index():\n                ...\n\n        If ``view_func`` has a ``required_methods`` attribute, those\n        methods are added to the passed and automatic methods. If it\n        has a ``provide_automatic_methods`` attribute, it is used as the\n        default if the parameter is not passed.\n\n        :param rule: The URL rule string.\n        :param endpoint: The endpoint name to associate with the rule\n            and view function. Used when routing and building URLs.\n            Defaults to ``view_func.__name__``.\n        :param view_func: The view function to associate with the\n            endpoint name.\n        :param provide_automatic_options: Add the ``OPTIONS`` method and\n            respond to ``OPTIONS`` requests automatically.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n        raise NotImplementedError",
      "docstring": "Register a rule for routing incoming requests and building\nURLs. The :meth:`route` decorator is a shortcut to call this\nwith the ``view_func`` argument. These are equivalent:\n\n.. code-block:: python\n\n    @app.route(\"/\")\n    def index():\n        ...\n\n.. code-block:: python\n\n    def index():\n        ...\n\n    app.add_url_rule(\"/\", view_func=index)\n\nSee :ref:`url-route-registrations`.\n\nThe endpoint name for the route defaults to the name of the view\nfunction if the ``endpoint`` parameter isn't passed. An error\nwill be raised if a function has already been registered for the\nendpoint.\n\nThe ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` is\nalways added automatically, and ``OPTIONS`` is added\nautomatically by default.\n\n``view_func`` does not necessarily need to be passed, but if the\nrule should participate in routing an endpoint name must be\nassociated with a view function at some point with the\n:meth:`endpoint` decorator.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/\", endpoint=\"index\")\n\n    @app.endpoint(\"index\")\n    def index():\n        ...\n\nIf ``view_func`` has a ``required_methods`` attribute, those\nmethods are added to the passed and automatic methods. If it\nhas a ``provide_automatic_methods`` attribute, it is used as the\ndefault if the parameter is not passed.\n\n:param rule: The URL rule string.\n:param endpoint: The endpoint name to associate with the rule\n    and view function. Used when routing and building URLs.\n    Defaults to ``view_func.__name__``.\n:param view_func: The view function to associate with the\n    endpoint name.\n:param provide_automatic_options: Add the ``OPTIONS`` method and\n    respond to ``OPTIONS`` requests automatically.\n:param options: Extra options passed to the\n    :class:`~werkzeug.routing.Rule` object.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "rule",
        "endpoint",
        "view_func",
        "provide_automatic_options"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "endpoint",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 436,
      "end_line_number": 457,
      "source_code": "def endpoint(self, endpoint: str) -> t.Callable[[F], F]:\n        \"\"\"Decorate a view function to register it for the given\n        endpoint. Used if a rule is added without a ``view_func`` with\n        :meth:`add_url_rule`.\n\n        .. code-block:: python\n\n            app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n            @app.endpoint(\"example\")\n            def example():\n                ...\n\n        :param endpoint: The endpoint name to associate with the view\n            function.\n        \"\"\"\n\n        def decorator(f: F) -> F:\n            self.view_functions[endpoint] = f\n            return f\n\n        return decorator",
      "docstring": "Decorate a view function to register it for the given\nendpoint. Used if a rule is added without a ``view_func`` with\n:meth:`add_url_rule`.\n\n.. code-block:: python\n\n    app.add_url_rule(\"/ex\", endpoint=\"example\")\n\n    @app.endpoint(\"example\")\n    def example():\n        ...\n\n:param endpoint: The endpoint name to associate with the view\n    function.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "endpoint"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "before_request",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 460,
      "end_line_number": 484,
      "source_code": "def before_request(self, f: T_before_request) -> T_before_request:\n        \"\"\"Register a function to run before each request.\n\n        For example, this can be used to open a database connection, or\n        to load the logged in user from the session.\n\n        .. code-block:: python\n\n            @app.before_request\n            def load_user():\n                if \"user_id\" in session:\n                    g.user = db.session.get(session[\"user_id\"])\n\n        The function will be called without any arguments. If it returns\n        a non-``None`` value, the value is handled as if it was the\n        return value from the view, and further request handling is\n        stopped.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes before every request. When used on a blueprint, this executes before\n        every request that the blueprint handles. To register with a blueprint and\n        execute before every request, use :meth:`.Blueprint.before_app_request`.\n        \"\"\"\n        self.before_request_funcs.setdefault(None, []).append(f)\n        return f",
      "docstring": "Register a function to run before each request.\n\nFor example, this can be used to open a database connection, or\nto load the logged in user from the session.\n\n.. code-block:: python\n\n    @app.before_request\n    def load_user():\n        if \"user_id\" in session:\n            g.user = db.session.get(session[\"user_id\"])\n\nThe function will be called without any arguments. If it returns\na non-``None`` value, the value is handled as if it was the\nreturn value from the view, and further request handling is\nstopped.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes before every request. When used on a blueprint, this executes before\nevery request that the blueprint handles. To register with a blueprint and\nexecute before every request, use :meth:`.Blueprint.before_app_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.before_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "after_request",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 487,
      "end_line_number": 505,
      "source_code": "def after_request(self, f: T_after_request) -> T_after_request:\n        \"\"\"Register a function to run after each request to this object.\n\n        The function is called with the response object, and must return\n        a response object. This allows the functions to modify or\n        replace the response before it is sent.\n\n        If a function raises an exception, any remaining\n        ``after_request`` functions will not be called. Therefore, this\n        should not be used for actions that must execute, such as to\n        close resources. Use :meth:`teardown_request` for that.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.after_app_request`.\n        \"\"\"\n        self.after_request_funcs.setdefault(None, []).append(f)\n        return f",
      "docstring": "Register a function to run after each request to this object.\n\nThe function is called with the response object, and must return\na response object. This allows the functions to modify or\nreplace the response before it is sent.\n\nIf a function raises an exception, any remaining\n``after_request`` functions will not be called. Therefore, this\nshould not be used for actions that must execute, such as to\nclose resources. Use :meth:`teardown_request` for that.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.after_app_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.after_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "teardown_request",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 508,
      "end_line_number": 539,
      "source_code": "def teardown_request(self, f: T_teardown) -> T_teardown:\n        \"\"\"Register a function to be called when the request context is\n        popped. Typically this happens at the end of each request, but\n        contexts may be pushed manually as well during testing.\n\n        .. code-block:: python\n\n            with app.test_request_context():\n                ...\n\n        When the ``with`` block exits (or ``ctx.pop()`` is called), the\n        teardown functions are called just before the request context is\n        made inactive.\n\n        When a teardown function was called because of an unhandled\n        exception it will be passed an error object. If an\n        :meth:`errorhandler` is registered, it will handle the exception\n        and the teardown will not receive it.\n\n        Teardown functions must avoid raising exceptions. If they\n        execute code that might fail they must surround that code with a\n        ``try``/``except`` block and log any errors.\n\n        The return values of teardown functions are ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        executes after every request. When used on a blueprint, this executes after\n        every request that the blueprint handles. To register with a blueprint and\n        execute after every request, use :meth:`.Blueprint.teardown_app_request`.\n        \"\"\"\n        self.teardown_request_funcs.setdefault(None, []).append(f)\n        return f",
      "docstring": "Register a function to be called when the request context is\npopped. Typically this happens at the end of each request, but\ncontexts may be pushed manually as well during testing.\n\n.. code-block:: python\n\n    with app.test_request_context():\n        ...\n\nWhen the ``with`` block exits (or ``ctx.pop()`` is called), the\nteardown functions are called just before the request context is\nmade inactive.\n\nWhen a teardown function was called because of an unhandled\nexception it will be passed an error object. If an\n:meth:`errorhandler` is registered, it will handle the exception\nand the teardown will not receive it.\n\nTeardown functions must avoid raising exceptions. If they\nexecute code that might fail they must surround that code with a\n``try``/``except`` block and log any errors.\n\nThe return values of teardown functions are ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nexecutes after every request. When used on a blueprint, this executes after\nevery request that the blueprint handles. To register with a blueprint and\nexecute after every request, use :meth:`.Blueprint.teardown_app_request`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.teardown_request_funcs.setdefault",
          "body": "def setdefault(self, name: str, default: t.Any=None) -> t.Any:\n    \"\"\"Get the value of an attribute if it is present, otherwise\n        set and return a default value. Like :meth:`dict.setdefault`.\n\n        :param name: Name of attribute to get.\n        :param default: Value to set and return if the attribute is not\n            present.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    return self.__dict__.setdefault(name, default)"
        }
      ]
    },
    {
      "name": "context_processor",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 542,
      "end_line_number": 556,
      "source_code": "def context_processor(\n        self,\n        f: T_template_context_processor,\n    ) -> T_template_context_processor:\n        \"\"\"Registers a template context processor function. These functions run before\n        rendering a template. The keys of the returned dict are added as variables\n        available in the template.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every rendered template. When used on a blueprint, this is called\n        for templates rendered from the blueprint's views. To register with a blueprint\n        and affect every template, use :meth:`.Blueprint.app_context_processor`.\n        \"\"\"\n        self.template_context_processors[None].append(f)\n        return f",
      "docstring": "Registers a template context processor function. These functions run before\nrendering a template. The keys of the returned dict are added as variables\navailable in the template.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every rendered template. When used on a blueprint, this is called\nfor templates rendered from the blueprint's views. To register with a blueprint\nand affect every template, use :meth:`.Blueprint.app_context_processor`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "url_value_preprocessor",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 559,
      "end_line_number": 581,
      "source_code": "def url_value_preprocessor(\n        self,\n        f: T_url_value_preprocessor,\n    ) -> T_url_value_preprocessor:\n        \"\"\"Register a URL value preprocessor function for all view\n        functions in the application. These functions will be called before the\n        :meth:`before_request` functions.\n\n        The function can modify the values captured from the matched url before\n        they are passed to the view. For example, this can be used to pop a\n        common language code value and place it in ``g`` rather than pass it to\n        every view.\n\n        The function is passed the endpoint name and values dict. The return\n        value is ignored.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.\n        \"\"\"\n        self.url_value_preprocessors[None].append(f)\n        return f",
      "docstring": "Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n:meth:`before_request` functions.\n\nThe function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in ``g`` rather than pass it to\nevery view.\n\nThe function is passed the endpoint name and values dict. The return\nvalue is ignored.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_value_preprocessor`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "url_defaults",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 584,
      "end_line_number": 595,
      "source_code": "def url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n        \"\"\"Callback function for URL defaults for all view functions of the\n        application.  It's called with the endpoint and values and should\n        update the values passed in place.\n\n        This is available on both app and blueprint objects. When used on an app, this\n        is called for every request. When used on a blueprint, this is called for\n        requests that the blueprint handles. To register with a blueprint and affect\n        every request, use :meth:`.Blueprint.app_url_defaults`.\n        \"\"\"\n        self.url_default_functions[None].append(f)\n        return f",
      "docstring": "Callback function for URL defaults for all view functions of the\napplication.  It's called with the endpoint and values and should\nupdate the values passed in place.\n\nThis is available on both app and blueprint objects. When used on an app, this\nis called for every request. When used on a blueprint, this is called for\nrequests that the blueprint handles. To register with a blueprint and affect\nevery request, use :meth:`.Blueprint.app_url_defaults`.",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "errorhandler",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 598,
      "end_line_number": 639,
      "source_code": "def errorhandler(\n        self, code_or_exception: type[Exception] | int\n    ) -> t.Callable[[T_error_handler], T_error_handler]:\n        \"\"\"Register a function to handle errors by code or exception class.\n\n        A decorator that is used to register a function given an\n        error code.  Example::\n\n            @app.errorhandler(404)\n            def page_not_found(error):\n                return 'This page does not exist', 404\n\n        You can also register handlers for arbitrary exceptions::\n\n            @app.errorhandler(DatabaseError)\n            def special_exception_handler(error):\n                return 'Database connection failed', 500\n\n        This is available on both app and blueprint objects. When used on an app, this\n        can handle errors from every request. When used on a blueprint, this can handle\n        errors from requests that the blueprint handles. To register with a blueprint\n        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n        .. versionadded:: 0.7\n            Use :meth:`register_error_handler` instead of modifying\n            :attr:`error_handler_spec` directly, for application wide error\n            handlers.\n\n        .. versionadded:: 0.7\n           One can now additionally also register custom exception types\n           that do not necessarily have to be a subclass of the\n           :class:`~werkzeug.exceptions.HTTPException` class.\n\n        :param code_or_exception: the code as integer for the handler, or\n                                  an arbitrary exception\n        \"\"\"\n\n        def decorator(f: T_error_handler) -> T_error_handler:\n            self.register_error_handler(code_or_exception, f)\n            return f\n\n        return decorator",
      "docstring": "Register a function to handle errors by code or exception class.\n\nA decorator that is used to register a function given an\nerror code.  Example::\n\n    @app.errorhandler(404)\n    def page_not_found(error):\n        return 'This page does not exist', 404\n\nYou can also register handlers for arbitrary exceptions::\n\n    @app.errorhandler(DatabaseError)\n    def special_exception_handler(error):\n        return 'Database connection failed', 500\n\nThis is available on both app and blueprint objects. When used on an app, this\ncan handle errors from every request. When used on a blueprint, this can handle\nerrors from requests that the blueprint handles. To register with a blueprint\nand affect every request, use :meth:`.Blueprint.app_errorhandler`.\n\n.. versionadded:: 0.7\n    Use :meth:`register_error_handler` instead of modifying\n    :attr:`error_handler_spec` directly, for application wide error\n    handlers.\n\n.. versionadded:: 0.7\n   One can now additionally also register custom exception types\n   that do not necessarily have to be a subclass of the\n   :class:`~werkzeug.exceptions.HTTPException` class.\n\n:param code_or_exception: the code as integer for the handler, or\n                          an arbitrary exception",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "code_or_exception"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.register_error_handler",
          "body": "@setupmethod\ndef register_error_handler(self, code_or_exception: type[Exception] | int, f: ft.ErrorHandlerCallable) -> None:\n    \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    exc_class, code = self._get_exc_class_and_code(code_or_exception)\n    self.error_handler_spec[None][code][exc_class] = f"
        }
      ]
    },
    {
      "name": "register_error_handler",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 642,
      "end_line_number": 654,
      "source_code": "def register_error_handler(\n        self,\n        code_or_exception: type[Exception] | int,\n        f: ft.ErrorHandlerCallable,\n    ) -> None:\n        \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n        exc_class, code = self._get_exc_class_and_code(code_or_exception)\n        self.error_handler_spec[None][code][exc_class] = f",
      "docstring": "Alternative error attach function to the :meth:`errorhandler`\ndecorator that is more straightforward to use for non decorator\nusage.\n\n.. versionadded:: 0.7",
      "decorators": [
        "setupmethod"
      ],
      "arguments": [
        "self",
        "code_or_exception",
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self._get_exc_class_and_code",
          "body": "@staticmethod\ndef _get_exc_class_and_code(exc_class_or_code: type[Exception] | int) -> tuple[type[Exception], int | None]:\n    \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n    exc_class: type[Exception]\n    if isinstance(exc_class_or_code, int):\n        try:\n            exc_class = default_exceptions[exc_class_or_code]\n        except KeyError:\n            raise ValueError(f\"'{exc_class_or_code}' is not a recognized HTTP error code. Use a subclass of HTTPException with that code instead.\") from None\n    else:\n        exc_class = exc_class_or_code\n    if isinstance(exc_class, Exception):\n        raise TypeError(f'{exc_class!r} is an instance, not a class. Handlers can only be registered for Exception classes or HTTP error codes.')\n    if not issubclass(exc_class, Exception):\n        raise ValueError(f\"'{exc_class.__name__}' is not a subclass of Exception. Handlers can only be registered for Exception classes or HTTP error codes.\")\n    if issubclass(exc_class, HTTPException):\n        return (exc_class, exc_class.code)\n    else:\n        return (exc_class, None)"
        }
      ]
    },
    {
      "name": "_get_exc_class_and_code",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 657,
      "end_line_number": 698,
      "source_code": "def _get_exc_class_and_code(\n        exc_class_or_code: type[Exception] | int,\n    ) -> tuple[type[Exception], int | None]:\n        \"\"\"Get the exception class being handled. For HTTP status codes\n        or ``HTTPException`` subclasses, return both the exception and\n        status code.\n\n        :param exc_class_or_code: Any exception class, or an HTTP status\n            code as an integer.\n        \"\"\"\n        exc_class: type[Exception]\n\n        if isinstance(exc_class_or_code, int):\n            try:\n                exc_class = default_exceptions[exc_class_or_code]\n            except KeyError:\n                raise ValueError(\n                    f\"'{exc_class_or_code}' is not a recognized HTTP\"\n                    \" error code. Use a subclass of HTTPException with\"\n                    \" that code instead.\"\n                ) from None\n        else:\n            exc_class = exc_class_or_code\n\n        if isinstance(exc_class, Exception):\n            raise TypeError(\n                f\"{exc_class!r} is an instance, not a class. Handlers\"\n                \" can only be registered for Exception classes or HTTP\"\n                \" error codes.\"\n            )\n\n        if not issubclass(exc_class, Exception):\n            raise ValueError(\n                f\"'{exc_class.__name__}' is not a subclass of Exception.\"\n                \" Handlers can only be registered for Exception classes\"\n                \" or HTTP error codes.\"\n            )\n\n        if issubclass(exc_class, HTTPException):\n            return exc_class, exc_class.code\n        else:\n            return exc_class, None",
      "docstring": "Get the exception class being handled. For HTTP status codes\nor ``HTTPException`` subclasses, return both the exception and\nstatus code.\n\n:param exc_class_or_code: Any exception class, or an HTTP status\n    code as an integer.",
      "decorators": [
        "staticmethod"
      ],
      "arguments": [
        "exc_class_or_code"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 360,
      "end_line_number": 363,
      "source_code": "def decorator(f: T_route) -> T_route:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "options.pop",
          "body": "def pop(self, name: str, default: t.Any=_sentinel) -> t.Any:\n    \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n\n        :param name: Name of attribute to pop.\n        :param default: Value to return if the attribute is not present,\n            instead of raising a ``KeyError``.\n\n        .. versionadded:: 0.11\n        \"\"\"\n    if default is _sentinel:\n        return self.__dict__.pop(name)\n    else:\n        return self.__dict__.pop(name, default)"
        },
        {
          "name": "self.add_url_rule",
          "body": "@setupmethod\ndef add_url_rule(self, rule: str, endpoint: str | None=None, view_func: ft.RouteCallable | None=None, provide_automatic_options: bool | None=None, **options: t.Any) -> None:\n    if endpoint is None:\n        endpoint = _endpoint_from_view_func(view_func)\n    options['endpoint'] = endpoint\n    methods = options.pop('methods', None)\n    if methods is None:\n        methods = getattr(view_func, 'methods', None) or ('GET',)\n    if isinstance(methods, str):\n        raise TypeError('Allowed methods must be a list of strings, for example: @app.route(..., methods=[\"POST\"])')\n    methods = {item.upper() for item in methods}\n    required_methods: set[str] = set(getattr(view_func, 'required_methods', ()))\n    if provide_automatic_options is None:\n        provide_automatic_options = getattr(view_func, 'provide_automatic_options', None)\n    if provide_automatic_options is None:\n        if 'OPTIONS' not in methods and self.config['PROVIDE_AUTOMATIC_OPTIONS']:\n            provide_automatic_options = True\n            required_methods.add('OPTIONS')\n        else:\n            provide_automatic_options = False\n    methods |= required_methods\n    rule_obj = self.url_rule_class(rule, methods=methods, **options)\n    rule_obj.provide_automatic_options = provide_automatic_options\n    self.url_map.add(rule_obj)\n    if view_func is not None:\n        old_func = self.view_functions.get(endpoint)\n        if old_func is not None and old_func != view_func:\n            raise AssertionError(f'View function mapping is overwriting an existing endpoint function: {endpoint}')\n        self.view_functions[endpoint] = view_func"
        }
      ]
    },
    {
      "name": "decorator",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 453,
      "end_line_number": 455,
      "source_code": "def decorator(f: F) -> F:\n            self.view_functions[endpoint] = f\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": []
    },
    {
      "name": "decorator",
      "module": "scaffold",
      "class_name": null,
      "file_path": "__internal__\\_data\\flask\\src\\flask\\sansio\\scaffold.py",
      "line_number": 635,
      "end_line_number": 637,
      "source_code": "def decorator(f: T_error_handler) -> T_error_handler:\n            self.register_error_handler(code_or_exception, f)\n            return f",
      "docstring": null,
      "decorators": [],
      "arguments": [
        "f"
      ],
      "imports": [
        "__future__.annotations",
        "importlib.util",
        "os",
        "pathlib",
        "sys",
        "typing",
        "collections.defaultdict",
        "functools.update_wrapper",
        "jinja2.BaseLoader",
        "jinja2.FileSystemLoader",
        "werkzeug.exceptions.default_exceptions",
        "werkzeug.exceptions.HTTPException",
        "werkzeug.utils.cached_property",
        ".typing",
        "helpers.get_root_path",
        "templating._default_template_ctx_processor",
        "click.Group"
      ],
      "fixtures": [],
      "assertions": [],
      "setup_method": null,
      "teardown_method": null,
      "mocks": [],
      "methods_under_test": [
        {
          "name": "self.register_error_handler",
          "body": "@setupmethod\ndef register_error_handler(self, code_or_exception: type[Exception] | int, f: ft.ErrorHandlerCallable) -> None:\n    \"\"\"Alternative error attach function to the :meth:`errorhandler`\n        decorator that is more straightforward to use for non decorator\n        usage.\n\n        .. versionadded:: 0.7\n        \"\"\"\n    exc_class, code = self._get_exc_class_and_code(code_or_exception)\n    self.error_handler_spec[None][code][exc_class] = f"
        }
      ]
    }
  ]
}