{
  "test_name": "test_access_logger_atoms",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_log.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "AccessLogger",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "access_logger.log",
      "source_code": "    def log(\n        self,\n        *objects: Any,\n        sep: str = \" \",\n        end: str = \"\\n\",\n        style: Optional[Union[str, Style]] = None,\n        justify: Optional[JustifyMethod] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n        log_locals: bool = False,\n        _stack_offset: int = 1,\n    ) -> None:\n        \"\"\"Log rich content to the terminal.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line_number": 1902
    },
    {
      "name": "mock_logger.info.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "AccessLogger",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "access_logger.log",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/console.py",
      "line": 1902,
      "caller": "test_access_logger_atoms",
      "source_code": "    def log(\n        self,\n        *objects: Any,\n        sep: str = \" \",\n        end: str = \"\\n\",\n        style: Optional[Union[str, Style]] = None,\n        justify: Optional[JustifyMethod] = None,\n        emoji: Optional[bool] = None,\n        markup: Optional[bool] = None,\n        highlight: Optional[bool] = None,\n        log_locals: bool = False,\n        _stack_offset: int = 1,\n"
    },
    {
      "function": "mock_logger.info.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    },
    {
      "function": "cls",
      "filename": "",
      "line": 0,
      "caller": "test_access_logger_atoms",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not mock_logger.exception.called, mock_logger.exception.call_args"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_access_logger_atoms(\n    monkeypatch: pytest.MonkeyPatch,\n    log_format: str,\n    expected: str,\n    extra: Dict[str, object],\n) -> None:\n    class PatchedDatetime(datetime.datetime):\n        @classmethod\n        def now(cls, tz: Optional[datetime.tzinfo] = None) -> Self:\n            return cls(1843, 1, 1, 0, 30, tzinfo=tz)\n\n    monkeypatch.setattr(\"datetime.datetime\", PatchedDatetime)\n    monkeypatch.setattr(\"time.timezone\", -28800)\n    monkeypatch.setattr(\"os.getpid\", lambda: 42)\n    mock_logger = mock.Mock()\n    access_logger = AccessLogger(mock_logger, log_format)\n    request = mock.Mock(\n        headers={\"H1\": \"a\", \"H2\": \"b\"},\n        method=\"GET\",\n        path_qs=\"/path\",\n        version=aiohttp.HttpVersion(1, 1),\n        remote=\"127.0.0.2\",\n    )\n    response = mock.Mock(headers={}, body_length=42, status=200)\n    access_logger.log(request, response, 3.1415926)\n    assert not mock_logger.exception.called, mock_logger.exception.call_args\n\n    mock_logger.info.assert_called_with(expected, extra=extra)"
}