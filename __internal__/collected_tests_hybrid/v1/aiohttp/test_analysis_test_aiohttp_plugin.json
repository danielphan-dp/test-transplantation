{
  "test_name": "test_aiohttp_plugin",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_pytest_plugin.py",
  "static_methods": [
    {
      "name": "testdir.makepyfile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "testdir.makeconftest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "testdir.runpytest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "result.assert_outcomes",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "testdir.makepyfile",
      "filename": "",
      "line": 0,
      "caller": "test_aiohttp_plugin",
      "source_code": ""
    },
    {
      "function": "testdir.makeconftest",
      "filename": "",
      "line": 0,
      "caller": "test_aiohttp_plugin",
      "source_code": ""
    },
    {
      "function": "testdir.runpytest",
      "filename": "",
      "line": 0,
      "caller": "test_aiohttp_plugin",
      "source_code": ""
    },
    {
      "function": "result.assert_outcomes",
      "filename": "",
      "line": 0,
      "caller": "test_aiohttp_plugin",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_aiohttp_plugin(testdir: pytest.Testdir) -> None:\n    testdir.makepyfile(\n        \"\"\"\\\nimport pytest\nfrom unittest import mock\n\nfrom aiohttp import web\n\nvalue = web.AppKey('value', str)\n\n\nasync def hello(request):\n    return web.Response(body=b'Hello, world')\n\n\nasync def create_app():\n    app = web.Application()\n    app.router.add_route('GET', '/', hello)\n    return app\n\n\nasync def test_hello(aiohttp_client) -> None:\n    client = await aiohttp_client(await create_app())\n    resp = await client.get('/')\n    assert resp.status == 200\n    text = await resp.text()\n    assert 'Hello, world' in text\n\n\nasync def test_hello_from_app(aiohttp_client) -> None:\n    app = web.Application()\n    app.router.add_get('/', hello)\n    client = await aiohttp_client(app)\n    resp = await client.get('/')\n    assert resp.status == 200\n    text = await resp.text()\n    assert 'Hello, world' in text\n\n\nasync def test_hello_with_loop(aiohttp_client) -> None:\n    client = await aiohttp_client(await create_app())\n    resp = await client.get('/')\n    assert resp.status == 200\n    text = await resp.text()\n    assert 'Hello, world' in text\n\n\nasync def test_noop() -> None:\n    pass\n\n\nasync def previous(request):\n    if request.method == 'POST':\n        with pytest.deprecated_call():  # FIXME: this isn't actually called\n            request.app[value] = (await request.post())['value']\n        return web.Response(body=b'thanks for the data')\n    else:\n        v = request.app.get(value, 'unknown')\n        return web.Response(body='value: {}'.format(v).encode())\n\n\ndef create_stateful_app():\n    app = web.Application()\n    app.router.add_route('*', '/', previous)\n    return app\n\n\n@pytest.fixture\ndef cli(loop, aiohttp_client):\n    return loop.run_until_complete(aiohttp_client(create_stateful_app()))\n\n\ndef test_noncoro() -> None:\n    assert True\n\n\nasync def test_failed_to_create_client(aiohttp_client) -> None:\n\n    def make_app():\n        raise RuntimeError()\n\n    with pytest.raises(RuntimeError):\n        await aiohttp_client(make_app())\n\n\nasync def test_custom_port_aiohttp_client(aiohttp_client, aiohttp_unused_port):\n    port = aiohttp_unused_port()\n    client = await aiohttp_client(await create_app(),\n                                  server_kwargs={'port': port})\n    assert client.port == port\n    resp = await client.get('/')\n    assert resp.status == 200\n    text = await resp.text()\n    assert 'Hello, world' in text\n\n\nasync def test_custom_port_test_server(aiohttp_server, aiohttp_unused_port):\n    app = await create_app()\n    port = aiohttp_unused_port()\n    server = await aiohttp_server(app, port=port)\n    assert server.port == port\n\"\"\"\n    )\n    testdir.makeconftest(CONFTEST)\n    result = testdir.runpytest(\"-p\", \"no:sugar\", \"--aiohttp-loop=pyloop\")\n    result.assert_outcomes(passed=8)"
}