{
  "test_name": "test_base_ctor",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_request.py",
  "static_methods": [
    {
      "name": "RawRequestMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "web.BaseRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "HttpVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CIMultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "HttpVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "req.host.lower",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dir",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RawRequestMessage",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "web.BaseRequest",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "HttpVersion",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "CIMultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "HttpVersion",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "req.host.lower",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "dir",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    },
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_base_ctor",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'GET' == req.method",
    "assert HttpVersion(1, 1) == req.version",
    "assert req.host.lower() in socket.getfqdn().lower()",
    "assert '/path/to?a=1&b=2' == req.path_qs",
    "assert '/path/to' == req.path",
    "assert 'a=1&b=2' == req.query_string",
    "assert CIMultiDict() == req.headers",
    "assert () == req.raw_headers",
    "assert MultiDict([('a', '1'), ('b', '2')]) == get",
    "assert get is req.query",
    "assert req.keep_alive",
    "assert '__dict__' not in dir(req)",
    "assert req"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_base_ctor() -> None:\n    message = RawRequestMessage(\n        \"GET\",\n        \"/path/to?a=1&b=2\",\n        HttpVersion(1, 1),\n        CIMultiDictProxy(CIMultiDict()),\n        (),\n        False,\n        None,\n        False,\n        False,\n        URL(\"/path/to?a=1&b=2\"),\n    )\n\n    req = web.BaseRequest(\n        message, mock.Mock(), mock.Mock(), mock.Mock(), mock.Mock(), mock.Mock()\n    )\n\n    assert \"GET\" == req.method\n    assert HttpVersion(1, 1) == req.version\n    # MacOS may return CamelCased host name, need .lower()\n    # FQDN can be wider than host, e.g.\n    # 'fv-az397-495' in 'fv-az397-495.internal.cloudapp.net'\n    assert req.host.lower() in socket.getfqdn().lower()\n    assert \"/path/to?a=1&b=2\" == req.path_qs\n    assert \"/path/to\" == req.path\n    assert \"a=1&b=2\" == req.query_string\n    assert CIMultiDict() == req.headers\n    assert () == req.raw_headers\n\n    get = req.query\n    assert MultiDict([(\"a\", \"1\"), (\"b\", \"2\")]) == get\n    # second call should return the same object\n    assert get is req.query\n\n    assert req.keep_alive\n\n    assert \"__dict__\" not in dir(req)\n\n    assert req"
}