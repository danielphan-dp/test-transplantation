{
  "test_name": "test_cookie_coded_value_preserved",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_request.py",
  "static_methods": [
    {
      "name": "ClientRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "req.update_cookies",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line_number": 405
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SimpleCookie",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ClientRequest",
      "filename": "",
      "line": 0,
      "caller": "test_cookie_coded_value_preserved",
      "source_code": ""
    },
    {
      "function": "req.update_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line": 405,
      "caller": "test_cookie_coded_value_preserved",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return\n\n        c = SimpleCookie()\n        if hdrs.COOKIE in self.headers:\n            c.load(self.headers.get(hdrs.COOKIE, \"\"))\n            del self.headers[hdrs.COOKIE]\n\n        if isinstance(cookies, Mapping):\n            iter_cookies = cookies.items()\n        else:\n            iter_cookies = cookies  # type: ignore[assignment]\n        for name, value in iter_cookies:\n            if isinstance(value, Morsel):\n                # Preserve coded_value\n                mrsl_val = value.get(value.key, Morsel())\n                mrsl_val.set(value.key, value.value, value.coded_value)\n                c[name] = mrsl_val\n            else:\n                c[name] = value  # type: ignore[assignment]\n\n        self.headers[hdrs.COOKIE] = c.output(header=\"\", sep=\";\").strip()\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_cookie_coded_value_preserved",
      "source_code": ""
    },
    {
      "function": "SimpleCookie",
      "filename": "",
      "line": 0,
      "caller": "test_cookie_coded_value_preserved",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert req.headers['COOKIE'] == 'ip-cookie=\"second\"'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cookie_coded_value_preserved(loop: asyncio.AbstractEventLoop) -> None:\n    \"\"\"Verify the coded value of a cookie is preserved.\"\"\"\n    # https://github.com/aio-libs/aiohttp/pull/1453\n    req = ClientRequest(\"get\", URL(\"http://python.org\"), loop=loop)\n    req.update_cookies(cookies=SimpleCookie('ip-cookie=\"second\"; Domain=127.0.0.1;'))\n    assert req.headers[\"COOKIE\"] == 'ip-cookie=\"second\"'"
}