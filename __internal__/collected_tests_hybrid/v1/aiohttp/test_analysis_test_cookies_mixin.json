{
  "test_name": "test_cookies_mixin",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "CookieImplementation",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sut.set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line_number": 349
    },
    {
      "name": "sut.set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line_number": 349
    },
    {
      "name": "sut.del_cookie",
      "source_code": "    def del_cookie(\n        self,\n        name: str,\n        *,\n        domain: Optional[str] = None,\n        path: str = \"/\",\n        secure: Optional[bool] = None,\n        httponly: Optional[bool] = None,\n        samesite: Optional[str] = None,\n    ) -> None:\n        \"\"\"Delete cookie.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line_number": 981
    },
    {
      "name": "sut.set_cookie",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line_number": 349
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "CookieImplementation",
      "filename": "",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "sut.set_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line": 349,
      "caller": "test_cookies_mixin",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n"
    },
    {
      "function": "sut.set_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line": 349,
      "caller": "test_cookies_mixin",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n"
    },
    {
      "function": "sut.del_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line": 981,
      "caller": "test_cookies_mixin",
      "source_code": "    def del_cookie(\n        self,\n        name: str,\n        *,\n        domain: Optional[str] = None,\n        path: str = \"/\",\n        secure: Optional[bool] = None,\n        httponly: Optional[bool] = None,\n        samesite: Optional[str] = None,\n"
    },
    {
      "function": "sut.set_cookie",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/cookies.py",
      "line": 349,
      "caller": "test_cookies_mixin",
      "source_code": "    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cookies_mixin",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert sut.cookies == {}",
    "assert str(sut.cookies) == ''",
    "assert str(sut.cookies) == 'Set-Cookie: name=value; Path=/'",
    "assert str(sut.cookies) == 'Set-Cookie: name=other_value; Path=/'",
    "assert str(sut.cookies) == 'Set-Cookie: name=another_other_value; Max-Age=10; Path=/'",
    "assert str(sut.cookies) == expected",
    "assert str(sut.cookies) == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cookies_mixin() -> None:\n    sut = CookieImplementation()\n\n    assert sut.cookies == {}\n    assert str(sut.cookies) == \"\"\n\n    sut.set_cookie(\"name\", \"value\")\n    assert str(sut.cookies) == \"Set-Cookie: name=value; Path=/\"\n    sut.set_cookie(\"name\", \"other_value\")\n    assert str(sut.cookies) == \"Set-Cookie: name=other_value; Path=/\"\n\n    sut.cookies[\"name\"] = \"another_other_value\"\n    sut.cookies[\"name\"][\"max-age\"] = 10\n    assert (\n        str(sut.cookies) == \"Set-Cookie: name=another_other_value; Max-Age=10; Path=/\"\n    )\n\n    sut.del_cookie(\"name\")\n    expected = (\n        'Set-Cookie: name=\"\"; '\n        \"expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; Path=/\"\n    )\n    assert str(sut.cookies) == expected\n\n    sut.set_cookie(\"name\", \"value\", domain=\"local.host\")\n    expected = \"Set-Cookie: name=value; Domain=local.host; Path=/\"\n    assert str(sut.cookies) == expected"
}