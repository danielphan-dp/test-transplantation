{
  "test_name": "test_del",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_response.py",
  "static_methods": [
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ClientResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.set_exception_handler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "connection.release.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WriterMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TimerNoop",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "ClientResponse",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "loop.set_exception_handler",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "connection.release.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "WriterMock",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    },
    {
      "function": "TimerNoop",
      "filename": "",
      "line": 0,
      "caller": "test_del",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_del(session: ClientSession) -> None:\n    loop = mock.Mock()\n    response = ClientResponse(\n        \"get\",\n        URL(\"http://del-cl-resp.org\"),\n        request_info=mock.Mock(),\n        writer=WriterMock(),\n        continue100=None,\n        timer=TimerNoop(),\n        traces=[],\n        loop=loop,\n        session=session,\n    )\n    loop.get_debug = mock.Mock()\n    loop.get_debug.return_value = True\n\n    connection = mock.Mock()\n    response._closed = False\n    response._connection = connection\n    loop.set_exception_handler(lambda loop, ctx: None)\n\n    with pytest.warns(ResourceWarning):\n        del response\n        gc.collect()\n\n    connection.release.assert_called_with()"
}