{
  "test_name": "test_expires",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
  "static_methods": [
    {
      "name": "self.timed_request",
      "source_code": "    def timed_request(\n        self, url: str, update_time: float, send_time: float\n    ) -> \"BaseCookie[str]\":\n        freeze_update_time: Union[datetime.datetime, datetime.timedelta]\n        freeze_send_time: Union[datetime.datetime, datetime.timedelta]\n        if isinstance(update_time, int):\n            freeze_update_time = datetime.timedelta(seconds=update_time)\n        else:\n            freeze_update_time = datetime.datetime.fromtimestamp(update_time)\n        if isinstance(send_time, int):\n            freeze_send_time = datetime.timedelta(seconds=send_time)\n        else:\n            freeze_send_time = datetime.datetime.fromtimestamp(send_time)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
      "line_number": 500
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.timed_request",
      "source_code": "    def timed_request(\n        self, url: str, update_time: float, send_time: float\n    ) -> \"BaseCookie[str]\":\n        freeze_update_time: Union[datetime.datetime, datetime.timedelta]\n        freeze_send_time: Union[datetime.datetime, datetime.timedelta]\n        if isinstance(update_time, int):\n            freeze_update_time = datetime.timedelta(seconds=update_time)\n        else:\n            freeze_update_time = datetime.datetime.fromtimestamp(update_time)\n        if isinstance(send_time, int):\n            freeze_send_time = datetime.timedelta(seconds=send_time)\n        else:\n            freeze_send_time = datetime.datetime.fromtimestamp(send_time)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
      "line_number": 500
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "cookies_sent.keys",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 745
    },
    {
      "name": "cookies_sent.keys",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 745
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.timed_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
      "line": 500,
      "caller": "test_expires",
      "source_code": "    def timed_request(\n        self, url: str, update_time: float, send_time: float\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_expires",
      "source_code": ""
    },
    {
      "function": "self.timed_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
      "line": 500,
      "caller": "test_expires",
      "source_code": "    def timed_request(\n        self, url: str, update_time: float, send_time: float\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_expires",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_expires",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_expires",
      "source_code": ""
    },
    {
      "function": "cookies_sent.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 745,
      "caller": "test_expires",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)\n\n"
    },
    {
      "function": "cookies_sent.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 745,
      "caller": "test_expires",
      "source_code": "        def keys(self):\n            'od.keys() -> list of keys in od'\n            return list(self)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_expires(self) -> None:\n        ts_before = datetime.datetime(\n            1975, 1, 1, tzinfo=datetime.timezone.utc\n        ).timestamp()\n\n        ts_after = datetime.datetime(\n            2030, 1, 1, tzinfo=datetime.timezone.utc\n        ).timestamp()\n\n        cookies_sent = self.timed_request(\n            \"http://expirestest.com/\", ts_before, ts_before\n        )\n\n        self.assertEqual(set(cookies_sent.keys()), {\"shared-cookie\", \"expires-cookie\"})\n\n        cookies_sent = self.timed_request(\n            \"http://expirestest.com/\", ts_before, ts_after\n        )\n\n        self.assertEqual(set(cookies_sent.keys()), {\"shared-cookie\"})"
}