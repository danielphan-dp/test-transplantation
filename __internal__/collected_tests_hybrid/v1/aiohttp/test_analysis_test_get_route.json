{
  "test_name": "test_get_route",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_test_utils.py",
  "static_methods": [
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_get_route",
      "source_code": "def test_get_route(loop: asyncio.AbstractEventLoop, test_client: _TestClient) -> None:\n    async def test_get_route() -> None:\n        resp = await test_client.request(\"GET\", \"/\")\n        assert resp.status == 200\n        text = await resp.text()\n        assert _hello_world_str == text",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_test_utils.py",
      "line_number": 124
    },
    {
      "name": "test_client.request",
      "source_code": "    def request(\n        self,\n        method,\n        url,\n        params=None,\n        data=None,\n        headers=None,\n        cookies=None,\n        files=None,\n        auth=None,\n        timeout=None,\n        allow_redirects=True,\n        proxies=None,\n        hooks=None,\n        stream=None,\n        verify=None,\n        cert=None,\n        json=None,\n    ):\n        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n        Returns :class:`Response <Response>` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 500
    },
    {
      "name": "resp.text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    }
  ],
  "dynamic_methods": [
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_get_route",
      "source_code": ""
    },
    {
      "function": "test_get_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_test_utils.py",
      "line": 124,
      "caller": "test_get_route",
      "source_code": "def test_get_route(loop: asyncio.AbstractEventLoop, test_client: _TestClient) -> None:\n    async def test_get_route() -> None:\n        resp = await test_client.request(\"GET\", \"/\")\n        assert resp.status == 200\n        text = await resp.text()\n        assert _hello_world_str == text\n\n    loop.run_until_complete(test_get_route())\n\n\n"
    },
    {
      "function": "test_client.request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 500,
      "caller": "test_get_route",
      "source_code": "    def request(\n        self,\n        method,\n        url,\n        params=None,\n        data=None,\n        headers=None,\n        cookies=None,\n        files=None,\n        auth=None,\n        timeout=None,\n        allow_redirects=True,\n        proxies=None,\n        hooks=None,\n        stream=None,\n        verify=None,\n        cert=None,\n        json=None,\n"
    },
    {
      "function": "resp.text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_get_route",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    }
  ],
  "assertions": [
    "assert resp.status == 200",
    "assert _hello_world_str == text"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_route(loop: asyncio.AbstractEventLoop, test_client: _TestClient) -> None:\n    async def test_get_route() -> None:\n        resp = await test_client.request(\"GET\", \"/\")\n        assert resp.status == 200\n        text = await resp.text()\n        assert _hello_world_str == text\n\n    loop.run_until_complete(test_get_route())"
}