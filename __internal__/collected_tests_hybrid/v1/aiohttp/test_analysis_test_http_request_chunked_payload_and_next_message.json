{
  "test_name": "test_http_request_chunked_payload_and_next_message",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
  "static_methods": [
    {
      "name": "payload.is_eof",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line_number": 233
    },
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "payload2.is_eof",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line_number": 233
    }
  ],
  "dynamic_methods": [
    {
      "function": "payload.is_eof",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line": 233,
      "caller": "test_http_request_chunked_payload_and_next_message",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof\n\n"
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_http_request_chunked_payload_and_next_message",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_http_request_chunked_payload_and_next_message",
      "source_code": ""
    },
    {
      "function": "payload2.is_eof",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line": 233,
      "caller": "test_http_request_chunked_payload_and_next_message",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof\n\n"
    }
  ],
  "assertions": [
    "assert b'dataline' == b''.join((d for d in payload._buffer))",
    "assert [4, 8] == payload._http_chunk_splits",
    "assert payload.is_eof()",
    "assert len(messages) == 1",
    "assert msg2.method == 'POST'",
    "assert msg2.chunked",
    "assert not payload2.is_eof()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_http_request_chunked_payload_and_next_message(\n    parser: HttpRequestParser,\n) -> None:\n    text = b\"GET /test HTTP/1.1\\r\\ntransfer-encoding: chunked\\r\\n\\r\\n\"\n    msg, payload = parser.feed_data(text)[0][0]\n\n    messages, upgraded, tail = parser.feed_data(\n        b\"4\\r\\ndata\\r\\n4\\r\\nline\\r\\n0\\r\\n\\r\\n\"\n        b\"POST /test2 HTTP/1.1\\r\\n\"\n        b\"transfer-encoding: chunked\\r\\n\\r\\n\"\n    )\n\n    assert b\"dataline\" == b\"\".join(d for d in payload._buffer)\n    assert [4, 8] == payload._http_chunk_splits\n    assert payload.is_eof()\n\n    assert len(messages) == 1\n    msg2, payload2 = messages[0]\n\n    assert msg2.method == \"POST\"\n    assert msg2.chunked\n    assert not payload2.is_eof()"
}