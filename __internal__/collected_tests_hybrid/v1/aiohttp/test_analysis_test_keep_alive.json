{
  "test_name": "test_keep_alive",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_request.py",
  "static_methods": [
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "req.keep_alive",
      "source_code": "    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line_number": 574
    },
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "req.keep_alive",
      "source_code": "    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line_number": 574
    },
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "req.keep_alive",
      "source_code": "    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line_number": 574
    },
    {
      "name": "req.keep_alive",
      "source_code": "    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line_number": 574
    },
    {
      "name": "req.keep_alive",
      "source_code": "    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line_number": 574
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_keep_alive",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_keep_alive",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_keep_alive",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "req.keep_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line": 574,
      "caller": "test_keep_alive",
      "source_code": "    @reify\n    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close\n\n"
    },
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_keep_alive",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "req.keep_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line": 574,
      "caller": "test_keep_alive",
      "source_code": "    @reify\n    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close\n\n"
    },
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_keep_alive",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "req.keep_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line": 574,
      "caller": "test_keep_alive",
      "source_code": "    @reify\n    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close\n\n"
    },
    {
      "function": "req.keep_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line": 574,
      "caller": "test_keep_alive",
      "source_code": "    @reify\n    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close\n\n"
    },
    {
      "function": "req.keep_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_request.py",
      "line": 574,
      "caller": "test_keep_alive",
      "source_code": "    @reify\n    def keep_alive(self) -> bool:\n        \"\"\"Is keepalive enabled by client?\"\"\"\n        return not self._message.should_close\n\n"
    }
  ],
  "assertions": [
    "assert not req.keep_alive()",
    "assert not req.keep_alive()",
    "assert req.keep_alive()",
    "assert req.keep_alive()",
    "assert not req.keep_alive()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_keep_alive(make_request: _RequestMaker) -> None:\n    req = make_request(\"get\", \"http://python.org/\", version=(0, 9))\n    assert not req.keep_alive()\n\n    req = make_request(\"get\", \"http://python.org/\", version=(1, 0))\n    assert not req.keep_alive()\n\n    req = make_request(\n        \"get\",\n        \"http://python.org/\",\n        version=(1, 0),\n        headers={\"connection\": \"keep-alive\"},\n    )\n    assert req.keep_alive()\n\n    req = make_request(\"get\", \"http://python.org/\", version=(1, 1))\n    assert req.keep_alive()\n\n    req = make_request(\n        \"get\", \"http://python.org/\", version=(1, 1), headers={\"connection\": \"close\"}\n    )\n    assert not req.keep_alive()"
}