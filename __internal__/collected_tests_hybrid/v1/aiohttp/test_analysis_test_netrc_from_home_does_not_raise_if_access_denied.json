{
  "test_name": "test_netrc_from_home_does_not_raise_if_access_denied",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.delenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helpers.netrc_from_env",
      "source_code": "def netrc_from_env() -> Optional[netrc.netrc]:\n    \"\"\"Load netrc from file.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line_number": 186
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_netrc_from_home_does_not_raise_if_access_denied",
      "source_code": ""
    },
    {
      "function": "monkeypatch.delenv",
      "filename": "",
      "line": 0,
      "caller": "test_netrc_from_home_does_not_raise_if_access_denied",
      "source_code": ""
    },
    {
      "function": "helpers.netrc_from_env",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/helpers.py",
      "line": 186,
      "caller": "test_netrc_from_home_does_not_raise_if_access_denied",
      "source_code": "def netrc_from_env() -> Optional[netrc.netrc]:\n    \"\"\"Load netrc from file.\n\n    Attempt to load it from the path specified by the env-var\n    NETRC or in the default location in the user's home directory.\n\n    Returns None if it couldn't be found or fails to parse.\n    \"\"\"\n    netrc_env = os.environ.get(\"NETRC\")\n\n    if netrc_env is not None:\n        netrc_path = Path(netrc_env)\n    else:\n        try:\n            home_dir = Path.home()\n        except RuntimeError as e:  # pragma: no cover\n            # if pathlib can't resolve home, it may raise a RuntimeError\n            client_logger.debug(\n                \"Could not resolve home directory when \"\n                \"trying to look for .netrc file: %s\",\n                e,\n            )\n            return None\n\n        netrc_path = home_dir / (\n            \"_netrc\" if platform.system() == \"Windows\" else \".netrc\"\n        )\n\n    try:\n        return netrc.netrc(str(netrc_path))\n    except netrc.NetrcParseError as e:\n        client_logger.warning(\"Could not parse .netrc file: %s\", e)\n    except OSError as e:\n        netrc_exists = False\n        with contextlib.suppress(OSError):\n            netrc_exists = netrc_path.is_file()\n        # we couldn't read the file (doesn't exist, permissions, etc.)\n        if netrc_env or netrc_exists:\n            # only warn if the environment wanted us to load it,\n            # or it appears like the default file does actually exist\n            client_logger.warning(\"Could not read .netrc file: %s\", e)\n\n    return None\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_netrc_from_home_does_not_raise_if_access_denied(\n    protected_dir: Path, monkeypatch: pytest.MonkeyPatch\n) -> None:\n    monkeypatch.setattr(Path, \"home\", lambda: protected_dir)\n    monkeypatch.delenv(\"NETRC\", raising=False)\n\n    helpers.netrc_from_env()"
}