{
  "test_name": "test_parse_no_length_or_te_on_post",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
  "static_methods": [
    {
      "name": "request_cls",
      "source_code": "def request_cls(request: pytest.FixtureRequest) -> Type[HttpRequestParser]:\n    # Request Parser class\n    return request.param  # type: ignore[no-any-return]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
      "line_number": 77
    },
    {
      "name": "payload.is_eof",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line_number": 233
    }
  ],
  "dynamic_methods": [
    {
      "function": "request_cls",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_http_parser.py",
      "line": 77,
      "caller": "test_parse_no_length_or_te_on_post",
      "source_code": "@pytest.fixture(params=REQUEST_PARSERS, ids=_gen_ids(REQUEST_PARSERS))\ndef request_cls(request: pytest.FixtureRequest) -> Type[HttpRequestParser]:\n    # Request Parser class\n    return request.param  # type: ignore[no-any-return]\n\n\n"
    },
    {
      "function": "payload.is_eof",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line": 233,
      "caller": "test_parse_no_length_or_te_on_post",
      "source_code": "    def is_eof(self) -> bool:\n        \"\"\"Return True if  'feed_eof' was called.\"\"\"\n        return self._eof\n\n"
    }
  ],
  "assertions": [
    "assert payload.is_eof()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_parse_no_length_or_te_on_post(\n    loop: asyncio.AbstractEventLoop,\n    protocol: BaseProtocol,\n    request_cls: Type[HttpRequestParser],\n) -> None:\n    parser = request_cls(protocol, loop, limit=2**16)\n    text = b\"POST /test HTTP/1.1\\r\\n\\r\\n\"\n    msg, payload = parser.feed_data(text)[0][0]\n\n    assert payload.is_eof()"
}