{
  "test_name": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_cookiejar.py",
  "static_methods": [
    {
      "name": "self.loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jar.update_cookies",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line_number": 405
    },
    {
      "name": "jar.update_cookies",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line_number": 405
    },
    {
      "name": "jar.update_cookies",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line_number": 405
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jar.filter_cookies",
      "source_code": "    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line_number": 184
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jar.filter_cookies",
      "source_code": "    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line_number": 184
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jar.filter_cookies",
      "source_code": "    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line_number": 184
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CookieJar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "make_jar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SimpleCookie",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SimpleCookie",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SimpleCookie",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "jar.update_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line": 405,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return\n\n        c = SimpleCookie()\n        if hdrs.COOKIE in self.headers:\n            c.load(self.headers.get(hdrs.COOKIE, \"\"))\n            del self.headers[hdrs.COOKIE]\n\n        if isinstance(cookies, Mapping):\n            iter_cookies = cookies.items()\n        else:\n            iter_cookies = cookies  # type: ignore[assignment]\n        for name, value in iter_cookies:\n            if isinstance(value, Morsel):\n                # Preserve coded_value\n                mrsl_val = value.get(value.key, Morsel())\n                mrsl_val.set(value.key, value.value, value.coded_value)\n                c[name] = mrsl_val\n            else:\n                c[name] = value  # type: ignore[assignment]\n\n        self.headers[hdrs.COOKIE] = c.output(header=\"\", sep=\";\").strip()\n\n"
    },
    {
      "function": "jar.update_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line": 405,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return\n\n        c = SimpleCookie()\n        if hdrs.COOKIE in self.headers:\n            c.load(self.headers.get(hdrs.COOKIE, \"\"))\n            del self.headers[hdrs.COOKIE]\n\n        if isinstance(cookies, Mapping):\n            iter_cookies = cookies.items()\n        else:\n            iter_cookies = cookies  # type: ignore[assignment]\n        for name, value in iter_cookies:\n            if isinstance(value, Morsel):\n                # Preserve coded_value\n                mrsl_val = value.get(value.key, Morsel())\n                mrsl_val.set(value.key, value.value, value.coded_value)\n                c[name] = mrsl_val\n            else:\n                c[name] = value  # type: ignore[assignment]\n\n        self.headers[hdrs.COOKIE] = c.output(header=\"\", sep=\";\").strip()\n\n"
    },
    {
      "function": "jar.update_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line": 405,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    def update_cookies(self, cookies: Optional[LooseCookies]) -> None:\n        \"\"\"Update request cookies header.\"\"\"\n        if not cookies:\n            return\n\n        c = SimpleCookie()\n        if hdrs.COOKIE in self.headers:\n            c.load(self.headers.get(hdrs.COOKIE, \"\"))\n            del self.headers[hdrs.COOKIE]\n\n        if isinstance(cookies, Mapping):\n            iter_cookies = cookies.items()\n        else:\n            iter_cookies = cookies  # type: ignore[assignment]\n        for name, value in iter_cookies:\n            if isinstance(value, Morsel):\n                # Preserve coded_value\n                mrsl_val = value.get(value.key, Morsel())\n                mrsl_val.set(value.key, value.value, value.coded_value)\n                c[name] = mrsl_val\n            else:\n                c[name] = value  # type: ignore[assignment]\n\n        self.headers[hdrs.COOKIE] = c.output(header=\"\", sep=\";\").strip()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "jar.filter_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line": 184,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    @abstractmethod\n    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "jar.filter_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line": 184,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    @abstractmethod\n    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "jar.filter_cookies",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/abc.py",
      "line": 184,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": "    @abstractmethod\n    def filter_cookies(self, request_url: URL) -> \"BaseCookie[str]\":\n        \"\"\"Return the jar's cookies filtered by their attributes.\"\"\"\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "CookieJar",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "make_jar",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "SimpleCookie",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "SimpleCookie",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "SimpleCookie",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_path_filter_diff_folder_same_name_return_best_match_independent_from_put_order(\n        self,\n    ) -> None:\n        async def make_jar() -> CookieJar:\n            return CookieJar(unsafe=True)\n\n        jar = self.loop.run_until_complete(make_jar())\n        jar.update_cookies(\n            SimpleCookie(\"path-cookie=one; Domain=pathtest.com; Path=/one; \")\n        )\n        jar.update_cookies(\n            SimpleCookie(\"path-cookie=zero; Domain=pathtest.com; Path=/; \")\n        )\n        jar.update_cookies(\n            SimpleCookie(\"path-cookie=two; Domain=pathtest.com; Path=/second; \")\n        )\n        self.assertEqual(len(jar), 3)\n\n        jar_filtered = jar.filter_cookies(URL(\"http://pathtest.com/\"))\n        self.assertEqual(len(jar_filtered), 1)\n        self.assertEqual(jar_filtered[\"path-cookie\"].value, \"zero\")\n\n        jar_filtered = jar.filter_cookies(URL(\"http://pathtest.com/second\"))\n        self.assertEqual(len(jar_filtered), 1)\n        self.assertEqual(jar_filtered[\"path-cookie\"].value, \"two\")\n\n        jar_filtered = jar.filter_cookies(URL(\"http://pathtest.com/one\"))\n        self.assertEqual(len(jar_filtered), 1)\n        self.assertEqual(jar_filtered[\"path-cookie\"].value, \"one\")"
}