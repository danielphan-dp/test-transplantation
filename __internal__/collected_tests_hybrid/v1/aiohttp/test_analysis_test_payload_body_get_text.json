{
  "test_name": "test_payload_body_get_text",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_response.py",
  "static_methods": [
    {
      "name": "web.Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CustomIO",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "async_iter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BodyPartReader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CIMultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CIMultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.Response",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "CustomIO",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "async_iter",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "BodyPartReader",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "CIMultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    },
    {
      "function": "CIMultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_payload_body_get_text",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert resp.text == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_payload_body_get_text(payload: object, expected: Optional[str]) -> None:\n    resp = web.Response(body=payload)\n    if expected is None:\n        with pytest.raises(TypeError):\n            resp.text\n    else:\n        assert resp.text == expected"
}