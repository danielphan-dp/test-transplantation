{
  "test_name": "test_pickle",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_exceptions.py",
  "static_methods": [
    {
      "name": "client.InvalidURL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "client.InvalidURL",
      "filename": "",
      "line": 0,
      "caller": "test_pickle",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_pickle",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert err2.url == ':wrong:url:'",
    "assert err2.foo == 'bar'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pickle(self) -> None:\n        err = client.InvalidURL(url=\":wrong:url:\")\n        err.foo = \"bar\"  # type: ignore[attr-defined]\n        for proto in range(pickle.HIGHEST_PROTOCOL + 1):\n            pickled = pickle.dumps(err, proto)\n            err2 = pickle.loads(pickled)\n            assert err2.url == \":wrong:url:\"\n            assert err2.foo == \"bar\""
}