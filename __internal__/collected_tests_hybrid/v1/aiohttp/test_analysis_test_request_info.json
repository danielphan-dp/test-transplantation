{
  "test_name": "test_request_info",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_request.py",
  "static_methods": [
    {
      "name": "make_request",
      "source_code": "def make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line_number": 45
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CIMultiDictProxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_websocket.py",
      "line": 45,
      "caller": "test_request_info",
      "source_code": "@pytest.fixture\ndef make_request(\n    app: web.Application, protocol: web.RequestHandler[web.Request]\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_request_info",
      "source_code": ""
    },
    {
      "function": "CIMultiDictProxy",
      "filename": "",
      "line": 0,
      "caller": "test_request_info",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert req.request_info == aiohttp.RequestInfo(url, 'GET', h, url)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_request_info(make_request: _RequestMaker) -> None:\n    req = make_request(\"get\", \"http://python.org/\")\n    url = URL(\"http://python.org/\")\n    h = CIMultiDictProxy(req.headers)\n    assert req.request_info == aiohttp.RequestInfo(url, \"GET\", h, url)"
}