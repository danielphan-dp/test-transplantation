{
  "test_name": "test_routedef_sequence_protocol",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_route_def.py",
  "static_methods": [
    {
      "name": "web.RouteTableDef",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "routes.delete",
      "source_code": "    def delete(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 20
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.RouteTableDef",
      "filename": "",
      "line": 0,
      "caller": "test_routedef_sequence_protocol",
      "source_code": ""
    },
    {
      "function": "routes.delete",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 20,
      "caller": "test_routedef_sequence_protocol",
      "source_code": "    def delete(self, key):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_routedef_sequence_protocol",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_routedef_sequence_protocol",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_routedef_sequence_protocol",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(routes) == 1",
    "assert isinstance(info, web.RouteDef)",
    "assert info in routes",
    "assert list(routes)[0] is info",
    "assert False"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_routedef_sequence_protocol() -> None:\n    routes = web.RouteTableDef()\n\n    @routes.delete(\"/path\")\n    async def handler(request: web.Request) -> NoReturn:\n        assert False\n\n    assert len(routes) == 1\n\n    info = routes[0]\n    assert isinstance(info, web.RouteDef)\n    assert info in routes\n    assert list(routes)[0] is info"
}