{
  "test_name": "test_shutdown_close_websockets",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
  "static_methods": [
    {
      "name": "aiohttp_unused_port",
      "source_code": "def aiohttp_unused_port() -> Callable[[], int]:\n    \"\"\"Return a port that is unused on the current host.\"\"\"\n    return _unused_port",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/pytest_plugin.py",
      "line_number": 293
    },
    {
      "name": "web.AppKey",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.on_shutdown.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "app.cleanup_ctx.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "app.router.add_get",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n    ) -> AbstractRoute:\n        \"\"\"Shortcut for add_route with method GET.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 1194
    },
    {
      "name": "app.router.add_get",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n    ) -> AbstractRoute:\n        \"\"\"Shortcut for add_route with method GET.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 1194
    },
    {
      "name": "web.run_app",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n    ) -> Tuple[\"asyncio.Task[None]\", int]:\n        num_connections = -1\n        t = test_task = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 1007
    },
    {
      "name": "web.WebSocketResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.app.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "t.cancel",
      "source_code": "    def cancel(self, title, next, name = \"Cancel\", active = 1):\n        \"\"\"Add a cancel button with a given title, the tab-next button,\n        its name in the Control table, possibly initially disabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py",
      "line_number": 55
    },
    {
      "name": "ws.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    },
    {
      "name": "ClientSession",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ws.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "sess.ws_connect",
      "source_code": "    def ws_connect(\n        self,\n        url: StrOrURL,\n        *,\n        method: str = hdrs.METH_GET,\n        protocols: Collection[str] = (),\n        timeout: Union[ClientWSTimeout, _SENTINEL] = sentinel,\n        receive_timeout: Optional[float] = None,\n        autoclose: bool = True,\n        autoping: bool = True,\n        heartbeat: Optional[float] = None,\n        auth: Optional[BasicAuth] = None,\n        origin: Optional[str] = None,\n        params: Query = None,\n        headers: Optional[LooseHeaders] = None,\n        proxy: Optional[StrOrURL] = None,\n        proxy_auth: Optional[BasicAuth] = None,\n        ssl: Union[SSLContext, bool, Fingerprint] = True,\n        server_hostname: Optional[str] = None,\n        proxy_headers: Optional[LooseHeaders] = None,\n        compress: int = 0,\n        max_msg_size: int = 4 * 1024 * 1024,\n    ) -> \"_WSRequestContextManager\":\n        \"\"\"Initiate websocket connection.\"\"\"\n        return _WSRequestContextManager(\n            self._ws_connect(\n                url,\n                method=method,\n                protocols=protocols,\n                timeout=timeout,\n                receive_timeout=receive_timeout,\n                autoclose=autoclose,\n                autoping=autoping,\n                heartbeat=heartbeat,\n                auth=auth,\n                origin=origin,\n                params=params,\n                headers=headers,\n                proxy=proxy,\n                proxy_auth=proxy_auth,\n                ssl=ssl,\n                server_hostname=server_hostname,\n                proxy_headers=proxy_headers,\n                compress=compress,\n                max_msg_size=max_msg_size,\n            )\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client.py",
      "line_number": 810
    },
    {
      "name": "sess.get",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 14
    }
  ],
  "dynamic_methods": [
    {
      "function": "aiohttp_unused_port",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/pytest_plugin.py",
      "line": 293,
      "caller": "test_shutdown_close_websockets",
      "source_code": "@pytest.fixture\ndef aiohttp_unused_port() -> Callable[[], int]:\n    \"\"\"Return a port that is unused on the current host.\"\"\"\n    return _unused_port\n\n\n"
    },
    {
      "function": "web.AppKey",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_close_websockets",
      "source_code": ""
    },
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_close_websockets",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_shutdown_close_websockets",
      "source_code": ""
    },
    {
      "function": "app.on_shutdown.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "app.cleanup_ctx.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "app.router.add_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 1194,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n"
    },
    {
      "function": "app.router.add_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 1194,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n"
    },
    {
      "function": "web.run_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 1007,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n"
    },
    {
      "function": "web.WebSocketResponse",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_close_websockets",
      "source_code": ""
    },
    {
      "function": "request.app.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "t.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/setuptools/_distutils/command/bdist_msi.py",
      "line": 55,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def cancel(self, title, next, name = \"Cancel\", active = 1):\n        \"\"\"Add a cancel button with a given title, the tab-next button,\n        its name in the Control table, possibly initially disabled.\n\n        Return the button, so that events can be associated\"\"\"\n        if active:\n            flags = 3 # Visible|Enabled\n        else:\n            flags = 1 # Visible\n        return self.pushbutton(name, 304, self.h-27, 56, 17, flags, title, next)\n\n"
    },
    {
      "function": "ws.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    },
    {
      "function": "ClientSession",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_close_websockets",
      "source_code": ""
    },
    {
      "function": "ws.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "sess.ws_connect",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client.py",
      "line": 810,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def ws_connect(\n        self,\n        url: StrOrURL,\n        *,\n        method: str = hdrs.METH_GET,\n        protocols: Collection[str] = (),\n        timeout: Union[ClientWSTimeout, _SENTINEL] = sentinel,\n        receive_timeout: Optional[float] = None,\n        autoclose: bool = True,\n        autoping: bool = True,\n        heartbeat: Optional[float] = None,\n        auth: Optional[BasicAuth] = None,\n        origin: Optional[str] = None,\n        params: Query = None,\n        headers: Optional[LooseHeaders] = None,\n        proxy: Optional[StrOrURL] = None,\n        proxy_auth: Optional[BasicAuth] = None,\n        ssl: Union[SSLContext, bool, Fingerprint] = True,\n        server_hostname: Optional[str] = None,\n        proxy_headers: Optional[LooseHeaders] = None,\n        compress: int = 0,\n        max_msg_size: int = 4 * 1024 * 1024,\n"
    },
    {
      "function": "sess.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 14,
      "caller": "test_shutdown_close_websockets",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
    }
  ],
  "assertions": [
    "assert time.time() - start < 5",
    "assert client_finished",
    "assert server_finished"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_shutdown_close_websockets(\n        self, aiohttp_unused_port: Callable[[], int]\n    ) -> None:\n        port = aiohttp_unused_port()\n        WS = web.AppKey(\"ws\", Set[web.WebSocketResponse])\n        client_finished = server_finished = False\n        t = None\n\n        async def ws_handler(request: web.Request) -> web.WebSocketResponse:\n            ws = web.WebSocketResponse()\n            await ws.prepare(request)\n            request.app[WS].add(ws)\n            async for msg in ws:\n                pass\n            nonlocal server_finished\n            server_finished = True\n            return ws\n\n        async def close_websockets(app: web.Application) -> None:\n            for ws in app[WS]:\n                await ws.close(code=WSCloseCode.GOING_AWAY)\n\n        async def test() -> None:\n            await asyncio.sleep(1)\n            async with ClientSession() as sess:\n                async with sess.ws_connect(f\"http://localhost:{port}/ws\") as ws:\n                    async with sess.get(f\"http://localhost:{port}/stop\"):\n                        pass\n\n                    async for msg in ws:\n                        pass\n                    nonlocal client_finished\n                    client_finished = True\n\n        async def run_test(app: web.Application) -> AsyncIterator[None]:\n            nonlocal t\n            t = asyncio.create_task(test())\n            yield\n            t.cancel()\n            with contextlib.suppress(asyncio.CancelledError):\n                await t\n\n        app = web.Application()\n        app[WS] = set()\n        app.on_shutdown.append(close_websockets)\n        app.cleanup_ctx.append(run_test)\n        app.router.add_get(\"/ws\", ws_handler)\n        app.router.add_get(\"/stop\", self.stop)\n\n        start = time.time()\n        web.run_app(app, port=port, shutdown_timeout=10)\n        assert time.time() - start < 5\n        assert client_finished\n        assert server_finished"
}