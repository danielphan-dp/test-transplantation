{
  "test_name": "test_shutdown_pending_handler_responds",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
  "static_methods": [
    {
      "name": "aiohttp_unused_port",
      "source_code": "def aiohttp_unused_port() -> Callable[[], int]:\n    \"\"\"Return a port that is unused on the current host.\"\"\"\n    return _unused_port",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/pytest_plugin.py",
      "line_number": 293
    },
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.cleanup_ctx.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "app.router.add_get",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n    ) -> AbstractRoute:\n        \"\"\"Shortcut for add_route with method GET.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 1194
    },
    {
      "name": "app.router.add_get",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n    ) -> AbstractRoute:\n        \"\"\"Shortcut for add_route with method GET.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 1194
    },
    {
      "name": "web.run_app",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n    ) -> Tuple[\"asyncio.Task[None]\", int]:\n        num_connections = -1\n        t = test_task = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line_number": 1007
    },
    {
      "name": "web.Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "t.exception",
      "source_code": "    def exception(self) -> Optional[Union[Type[BaseException], BaseException]]:\n        return self._exception",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line_number": 182
    },
    {
      "name": "ClientSession",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sess.get",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 14
    },
    {
      "name": "test_resp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sess.get",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 14
    },
    {
      "name": "resp.text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    }
  ],
  "dynamic_methods": [
    {
      "function": "aiohttp_unused_port",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/pytest_plugin.py",
      "line": 293,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "@pytest.fixture\ndef aiohttp_unused_port() -> Callable[[], int]:\n    \"\"\"Return a port that is unused on the current host.\"\"\"\n    return _unused_port\n\n\n"
    },
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": ""
    },
    {
      "function": "app.cleanup_ctx.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "app.router.add_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 1194,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n"
    },
    {
      "function": "app.router.add_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 1194,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n"
    },
    {
      "function": "web.run_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_run_app.py",
      "line": 1007,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def run_app(\n        self,\n        port: int,\n        timeout: int,\n        task: Callable[[], Coroutine[None, None, None]],\n        extra_test: Optional[Callable[[ClientSession], Awaitable[None]]] = None,\n"
    },
    {
      "function": "web.Response",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": ""
    },
    {
      "function": "t.exception",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/streams.py",
      "line": 182,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def exception(self) -> Optional[Union[Type[BaseException], BaseException]]:\n        return self._exception\n\n"
    },
    {
      "function": "ClientSession",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": ""
    },
    {
      "function": "sess.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 14,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "test_resp",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": ""
    },
    {
      "function": "sess.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 14,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "resp.text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_shutdown_pending_handler_responds",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    }
  ],
  "assertions": [
    "assert t is not None",
    "assert t.exception() is None",
    "assert finished is True",
    "assert finished is False",
    "assert await resp.text() == 'FOO'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_shutdown_pending_handler_responds(\n        self, aiohttp_unused_port: Callable[[], int]\n    ) -> None:\n        port = aiohttp_unused_port()\n        finished = False\n        t = None\n\n        async def test() -> None:\n            async def test_resp(sess: ClientSession) -> None:\n                async with sess.get(f\"http://localhost:{port}/\") as resp:\n                    assert await resp.text() == \"FOO\"\n\n            await asyncio.sleep(1)\n            async with ClientSession() as sess:\n                t = asyncio.create_task(test_resp(sess))\n                await asyncio.sleep(1)\n                # Handler is in-progress while we trigger server shutdown.\n                async with sess.get(f\"http://localhost:{port}/stop\"):\n                    pass\n\n                assert finished is False\n                # Handler should still complete and produce a response.\n                await t\n\n        async def run_test(app: web.Application) -> AsyncIterator[None]:\n            nonlocal t\n            t = asyncio.create_task(test())\n            yield\n            await t\n\n        async def handler(request: web.Request) -> web.Response:\n            nonlocal finished\n            await asyncio.sleep(3)\n            finished = True\n            return web.Response(text=\"FOO\")\n\n        app = web.Application()\n        app.cleanup_ctx.append(run_test)\n        app.router.add_get(\"/\", handler)\n        app.router.add_get(\"/stop\", self.stop)\n\n        web.run_app(app, port=port, shutdown_timeout=5)\n        assert t is not None\n        assert t.exception() is None\n        assert finished is True"
}