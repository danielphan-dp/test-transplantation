{
  "test_name": "test_subapp_rule_resource",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_urldispatch.py",
  "static_methods": [
    {
      "name": "web.Application",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "subapp.router.add_get",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n    ) -> AbstractRoute:\n        \"\"\"Shortcut for add_route with method GET.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 1194
    },
    {
      "name": "Domain",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_domain",
      "source_code": "    def add_domain(self, domain: str, subapp: \"Application\") -> MatchedSubAppResource:\n        if not isinstance(domain, str):\n            raise TypeError(\"Domain must be str\")\n        elif \"*\" in domain:\n            rule: Domain = MaskDomain(domain)\n        else:\n            rule = Domain(domain)\n        factory = partial(MatchedSubAppResource, rule, subapp)\n        return self._add_subapp(factory, subapp)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_app.py",
      "line_number": 314
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "make_handler",
      "source_code": "    def make_handler(appname: str) -> Handler:\n        async def handler(request: web.Request) -> web.Response:\n            values.append(f\"{appname}: {request.app[my_value]}\")\n            return web.Response(text=\"Ok\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_functional.py",
      "line_number": 1589
    },
    {
      "name": "rule.get_info",
      "source_code": "    def get_info(self) -> _InfoDict:\n        \"\"\"Return a dict with additional info useful for introspection\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line_number": 154
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "web.Application",
      "filename": "",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    },
    {
      "function": "subapp.router.add_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 1194,
      "caller": "test_subapp_rule_resource",
      "source_code": "    def add_get(\n        self,\n        path: str,\n        handler: Handler,\n        *,\n        name: Optional[str] = None,\n        allow_head: bool = True,\n        **kwargs: Any,\n"
    },
    {
      "function": "Domain",
      "filename": "",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    },
    {
      "function": "app.add_domain",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_app.py",
      "line": 314,
      "caller": "test_subapp_rule_resource",
      "source_code": "    def add_domain(self, domain: str, subapp: \"Application\") -> MatchedSubAppResource:\n        if not isinstance(domain, str):\n            raise TypeError(\"Domain must be str\")\n        elif \"*\" in domain:\n            rule: Domain = MaskDomain(domain)\n        else:\n            rule = Domain(domain)\n        factory = partial(MatchedSubAppResource, rule, subapp)\n        return self._add_subapp(factory, subapp)\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    },
    {
      "function": "repr.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    },
    {
      "function": "make_handler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_web_functional.py",
      "line": 1589,
      "caller": "test_subapp_rule_resource",
      "source_code": "    def make_handler(appname: str) -> Handler:\n        async def handler(request: web.Request) -> web.Response:\n            values.append(f\"{appname}: {request.app[my_value]}\")\n            return web.Response(text=\"Ok\")\n\n        return handler\n\n"
    },
    {
      "function": "rule.get_info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/web_urldispatcher.py",
      "line": 154,
      "caller": "test_subapp_rule_resource",
      "source_code": "    @abc.abstractmethod\n    def get_info(self) -> _InfoDict:\n        \"\"\"Return a dict with additional info useful for introspection\"\"\"\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subapp_rule_resource",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert rule.get_info() == {'domain': 'example.com'}",
    "assert resource.canonical == 'example.com'",
    "assert resource.get_info() == {'rule': resource._rule, 'app': subapp}",
    "assert len(resource)",
    "assert list(resource)",
    "assert repr(resource).startswith('<MatchedSubAppResource')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subapp_rule_resource(app: web.Application) -> None:\n    subapp = web.Application()\n    subapp.router.add_get(\"/\", make_handler())\n    rule = Domain(\"example.com\")\n    assert rule.get_info() == {\"domain\": \"example.com\"}\n    resource = app.add_domain(\"example.com\", subapp)\n    assert resource.canonical == \"example.com\"\n    assert resource.get_info() == {\"rule\": resource._rule, \"app\": subapp}\n    resource.add_prefix(\"/a\")\n    resource.raw_match(\"/b\")\n    assert len(resource)\n    assert list(resource)\n    assert repr(resource).startswith(\"<MatchedSubAppResource\")\n    with pytest.raises(RuntimeError):\n        resource.url_for()"
}