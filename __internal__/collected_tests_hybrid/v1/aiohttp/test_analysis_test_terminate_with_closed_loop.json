{
  "test_name": "test_terminate_with_closed_loop",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_client_request.py",
  "static_methods": [
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "req.terminate",
      "source_code": "    def terminate(self) -> None:\n        if self.__writer is not None:\n            if not self.loop.is_closed():\n                self.__writer.cancel()\n            self.__writer.remove_done_callback(self.__reset_writer)\n            self.__writer = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line_number": 726
    },
    {
      "name": "resp.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "ClientRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WriterMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "go",
      "source_code": "    def go() -> List[web.AbstractRoute]:\n        route1 = router.add_route(\"GET\", \"/plain\", make_handler())\n        route2 = router.add_route(\"GET\", \"/variable/{name}\", make_handler())\n        resource = router.add_static(\"/static\", pathlib.Path(aiohttp.__file__).parent)\n        return [route1, route2] + list(resource)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_urldispatch.py",
      "line_number": 50
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "req.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "loop.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_terminate_with_closed_loop",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "req.terminate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/client_reqrep.py",
      "line": 726,
      "caller": "test_terminate_with_closed_loop",
      "source_code": "    def terminate(self) -> None:\n        if self.__writer is not None:\n            if not self.loop.is_closed():\n                self.__writer.cancel()\n            self.__writer.remove_done_callback(self.__reset_writer)\n            self.__writer = None\n\n"
    },
    {
      "function": "resp.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_terminate_with_closed_loop",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "ClientRequest",
      "filename": "",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "WriterMock",
      "filename": "",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "mock.Mock",
      "filename": "",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "go",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_urldispatch.py",
      "line": 50,
      "caller": "test_terminate_with_closed_loop",
      "source_code": "    def go() -> List[web.AbstractRoute]:\n        route1 = router.add_route(\"GET\", \"/plain\", make_handler())\n        route2 = router.add_route(\"GET\", \"/variable/{name}\", make_handler())\n        resource = router.add_static(\"/static\", pathlib.Path(aiohttp.__file__).parent)\n        return [route1, route2] + list(resource)\n\n"
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_terminate_with_closed_loop",
      "source_code": ""
    },
    {
      "function": "req.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_terminate_with_closed_loop",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    }
  ],
  "assertions": [
    "assert req is not None",
    "assert req._writer is None",
    "assert writer is not None",
    "assert not writer.cancel.called",
    "assert resp is not None",
    "assert req._writer is not None"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_terminate_with_closed_loop(\n    loop: asyncio.AbstractEventLoop, conn: mock.Mock\n) -> None:\n    req = resp = writer = None\n\n    async def go() -> None:\n        nonlocal req, resp, writer\n        req = ClientRequest(\"get\", URL(\"http://python.org\"), loop=loop)\n\n        async def _mock_write_bytes(*args: object, **kwargs: object) -> None:\n            # Ensure the task is scheduled\n            await asyncio.sleep(0)\n\n        with mock.patch.object(req, \"write_bytes\", _mock_write_bytes):\n            resp = await req.send(conn)\n\n        assert req._writer is not None\n        writer = WriterMock()\n        writer.done = mock.Mock(return_value=False)\n        req._writer = writer\n        resp._writer = writer\n\n        await asyncio.sleep(0.05)\n\n    loop.run_until_complete(go())\n\n    loop.close()\n    assert req is not None\n    req.terminate()\n    assert req._writer is None\n    assert writer is not None\n    assert not writer.cancel.called\n    assert resp is not None\n    resp.close()"
}