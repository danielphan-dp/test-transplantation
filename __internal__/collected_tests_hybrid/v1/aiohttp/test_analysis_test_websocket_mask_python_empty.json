{
  "test_name": "test_websocket_mask_python_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/tests/test_websocket_parser.py",
  "static_methods": [
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_websocket_helpers._websocket_mask_python",
      "source_code": "def _websocket_mask_python(mask: bytes, data: bytearray) -> None:\n    \"\"\"Websocket masking function.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/_websocket/helpers.py",
      "line_number": 30
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_websocket_mask_python_empty",
      "source_code": ""
    },
    {
      "function": "_websocket_helpers._websocket_mask_python",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/aiohttp/build/lib.linux-x86_64-cpython-39/aiohttp/_websocket/helpers.py",
      "line": 30,
      "caller": "test_websocket_mask_python_empty",
      "source_code": "def _websocket_mask_python(mask: bytes, data: bytearray) -> None:\n    \"\"\"Websocket masking function.\n\n    `mask` is a `bytes` object of length 4; `data` is a `bytearray`\n    object of any length. The contents of `data` are masked with `mask`,\n    as specified in section 5.3 of RFC 6455.\n\n    Note that this function mutates the `data` argument.\n\n    This pure-python implementation may be replaced by an optimized\n    version when available.\n\n    \"\"\"\n    assert isinstance(data, bytearray), data\n    assert len(mask) == 4, mask\n\n    if data:\n        _XOR_TABLE = _xor_table()\n        a, b, c, d = (_XOR_TABLE[n] for n in mask)\n        data[::4] = data[::4].translate(a)\n        data[1::4] = data[1::4].translate(b)\n        data[2::4] = data[2::4].translate(c)\n        data[3::4] = data[3::4].translate(d)\n\n\n"
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_websocket_mask_python_empty",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert message == bytearray()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_websocket_mask_python_empty() -> None:\n    message = bytearray()\n    _websocket_helpers._websocket_mask_python(websocket_mask_mask, message)\n    assert message == bytearray()"
}