{
  "test_name": "test_True_is_not_a_schema",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.Validator.check_schema",
      "source_code": "        def check_schema(cls, schema, format_checker=_UNSET):\n            Validator = validator_for(cls.META_SCHEMA, default=cls)\n            if format_checker is _UNSET:\n                format_checker = Validator.FORMAT_CHECKER\n            validator = Validator(\n                schema=cls.META_SCHEMA,\n                format_checker=format_checker,\n            )\n            for error in validator.iter_errors(schema):\n                raise exceptions.SchemaError.create_from(error)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 308
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_True_is_not_a_schema",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_True_is_not_a_schema",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_True_is_not_a_schema",
      "source_code": ""
    },
    {
      "function": "self.Validator.check_schema",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 308,
      "caller": "test_True_is_not_a_schema",
      "source_code": "        @classmethod\n        def check_schema(cls, schema, format_checker=_UNSET):\n            Validator = validator_for(cls.META_SCHEMA, default=cls)\n            if format_checker is _UNSET:\n                format_checker = Validator.FORMAT_CHECKER\n            validator = Validator(\n                schema=cls.META_SCHEMA,\n                format_checker=format_checker,\n            )\n            for error in validator.iter_errors(schema):\n                raise exceptions.SchemaError.create_from(error)\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_True_is_not_a_schema",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_True_is_not_a_schema(self):\n        with self.assertRaises(exceptions.SchemaError) as e:\n            self.Validator.check_schema(True)\n        self.assertIn(\"True is not of type\", str(e.exception))"
}