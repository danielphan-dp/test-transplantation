{
  "test_name": "test_additionalProperties_multiple_failures",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.message_for",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 307
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict.fromkeys",
      "source_code": "    def fromkeys(\n        cls, keys: cabc.Iterable[K], value: None\n    ) -> ImmutableDictMixin[K, t.Any | None]: ...\n    @classmethod\n    @t.overload\n    def fromkeys(cls, keys: cabc.Iterable[K], value: V) -> ImmutableDictMixin[K, V]: ...\n    @classmethod\n    def fromkeys(\n        cls, keys: cabc.Iterable[K], value: V | None = None\n    ) -> ImmutableDictMixin[K, t.Any | None] | ImmutableDictMixin[K, V]:\n        instance = super().__new__(cls)\n        instance.__init__(zip(keys, repeat(value)))  # type: ignore[misc]\n        return instance",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/mixins.py",
      "line_number": 91
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.message_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 307,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": "    def message_for(self, instance, schema, *args, **kwargs):\n        cls = kwargs.pop(\"cls\", validators._LATEST_VERSION)\n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        errors = list(validator.iter_errors(instance))\n        self.assertTrue(errors, msg=f\"No errors were raised for {instance!r}\")\n        self.assertEqual(\n            len(errors),\n            1,\n            msg=f\"Expected exactly one error, found {errors!r}\",\n        )\n        return errors[0].message\n\n"
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": ""
    },
    {
      "function": "dict.fromkeys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/mixins.py",
      "line": 91,
      "caller": "test_additionalProperties_multiple_failures",
      "source_code": "    @classmethod\n    @t.overload\n    def fromkeys(\n        cls, keys: cabc.Iterable[K], value: None\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_additionalProperties_multiple_failures(self):\n        schema = {\"additionalProperties\": False}\n        message = self.message_for(\n            instance=dict.fromkeys([\"foo\", \"bar\"]),\n            schema=schema,\n        )\n\n        self.assertIn(repr(\"foo\"), message)\n        self.assertIn(repr(\"bar\"), message)\n        self.assertIn(\"were unexpected)\", message)"
}