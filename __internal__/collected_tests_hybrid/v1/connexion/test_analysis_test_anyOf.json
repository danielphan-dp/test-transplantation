{
  "test_name": "test_anyOf",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "validators.Draft4Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsNone",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted_errors",
      "source_code": "def sorted_errors(errors):\n    def key(error):\n        return (\n            [str(e) for e in error.path],\n            [str(e) for e in error.schema_path],\n        )\n    return sorted(errors, key=key)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 2548
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.iter_errors",
      "source_code": "        def iter_errors(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.iter_errors \"\n                        \"is deprecated and will be removed in a future \"\n                        \"release. Call validator.evolve(schema=new_schema).\"\n                        \"iter_errors(...) instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                validators = [\n                    (self.VALIDATORS[k], k, v)\n                    for k, v in applicable_validators(_schema)\n                    if k in self.VALIDATORS\n                ]\n            else:\n                _schema, validators = self.schema, self._validators",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 350
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "validators.Draft4Validator",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertIsNone",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "sorted_errors",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 2548,
      "caller": "test_anyOf",
      "source_code": "def sorted_errors(errors):\n    def key(error):\n        return (\n            [str(e) for e in error.path],\n            [str(e) for e in error.schema_path],\n        )\n    return sorted(errors, key=key)\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "validator.iter_errors",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 350,
      "caller": "test_anyOf",
      "source_code": "        def iter_errors(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.iter_errors \"\n                        \"is deprecated and will be removed in a future \"\n                        \"release. Call validator.evolve(schema=new_schema).\"\n                        \"iter_errors(...) instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                validators = [\n                    (self.VALIDATORS[k], k, v)\n                    for k, v in applicable_validators(_schema)\n                    if k in self.VALIDATORS\n                ]\n            else:\n                _schema, validators = self.schema, self._validators\n\n            if _schema is True:\n                return\n            elif _schema is False:\n                yield exceptions.ValidationError(\n                    f\"False schema does not allow {instance!r}\",\n                    validator=None,\n                    validator_value=None,\n                    instance=instance,\n                    schema=_schema,\n                )\n                return\n\n            for validator, k, v in validators:\n                errors = validator(self, v, instance, _schema) or ()\n                for error in errors:\n                    # set details if not already set by the called fn\n                    error._set(\n                        validator=k,\n                        validator_value=v,\n                        instance=instance,\n                        schema=_schema,\n                        type_checker=self.TYPE_CHECKER,\n                    )\n                    if k not in {\"if\", \"$ref\"}:\n                        error.schema_path.appendleft(k)\n                    yield error\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_anyOf",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_anyOf(self):\n        instance = 5\n        schema = {\n            \"anyOf\": [\n                {\"minimum\": 20},\n                {\"type\": \"string\"},\n            ],\n        }\n\n        validator = validators.Draft4Validator(schema)\n        errors = list(validator.iter_errors(instance))\n        self.assertEqual(len(errors), 1)\n        e = errors[0]\n\n        self.assertEqual(e.validator, \"anyOf\")\n        self.assertEqual(e.validator_value, schema[\"anyOf\"])\n        self.assertEqual(e.instance, instance)\n        self.assertEqual(e.schema, schema)\n        self.assertIsNone(e.parent)\n\n        self.assertEqual(e.path, deque([]))\n        self.assertEqual(e.relative_path, deque([]))\n        self.assertEqual(e.absolute_path, deque([]))\n        self.assertEqual(e.json_path, \"$\")\n\n        self.assertEqual(e.schema_path, deque([\"anyOf\"]))\n        self.assertEqual(e.relative_schema_path, deque([\"anyOf\"]))\n        self.assertEqual(e.absolute_schema_path, deque([\"anyOf\"]))\n\n        self.assertEqual(len(e.context), 2)\n\n        e1, e2 = sorted_errors(e.context)\n\n        self.assertEqual(e1.validator, \"minimum\")\n        self.assertEqual(e1.validator_value, schema[\"anyOf\"][0][\"minimum\"])\n        self.assertEqual(e1.instance, instance)\n        self.assertEqual(e1.schema, schema[\"anyOf\"][0])\n        self.assertIs(e1.parent, e)\n\n        self.assertEqual(e1.path, deque([]))\n        self.assertEqual(e1.absolute_path, deque([]))\n        self.assertEqual(e1.relative_path, deque([]))\n        self.assertEqual(e1.json_path, \"$\")\n\n        self.assertEqual(e1.schema_path, deque([0, \"minimum\"]))\n        self.assertEqual(e1.relative_schema_path, deque([0, \"minimum\"]))\n        self.assertEqual(\n            e1.absolute_schema_path, deque([\"anyOf\", 0, \"minimum\"]),\n        )\n\n        self.assertFalse(e1.context)\n\n        self.assertEqual(e2.validator, \"type\")\n        self.assertEqual(e2.validator_value, schema[\"anyOf\"][1][\"type\"])\n        self.assertEqual(e2.instance, instance)\n        self.assertEqual(e2.schema, schema[\"anyOf\"][1])\n        self.assertIs(e2.parent, e)\n\n        self.assertEqual(e2.path, deque([]))\n        self.assertEqual(e2.relative_path, deque([]))\n        self.assertEqual(e2.absolute_path, deque([]))\n        self.assertEqual(e2.json_path, \"$\")\n\n        self.assertEqual(e2.schema_path, deque([1, \"type\"]))\n        self.assertEqual(e2.relative_schema_path, deque([1, \"type\"]))\n        self.assertEqual(e2.absolute_schema_path, deque([\"anyOf\", 1, \"type\"]))\n\n        self.assertEqual(len(e2.context), 0)"
}