{
  "test_name": "test_automagic_connection_close_handling",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "ConnectionPair",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ConnectionPair",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automagic_connection_close_handling",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automagic_connection_close_handling",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_automagic_connection_close_handling",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert conn.states[CLIENT] is MUST_CLOSE",
    "assert conn.states == {CLIENT: MUST_CLOSE, SERVER: MUST_CLOSE}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_automagic_connection_close_handling() -> None:\n    p = ConnectionPair()\n    # If the user explicitly sets Connection: close, then we notice and\n    # respect it\n    p.send(\n        CLIENT,\n        [\n            Request(\n                method=\"GET\",\n                target=\"/\",\n                headers=[(\"Host\", \"example.com\"), (\"Connection\", \"close\")],\n            ),\n            EndOfMessage(),\n        ],\n    )\n    for conn in p.conns:\n        assert conn.states[CLIENT] is MUST_CLOSE\n    # And if the client sets it, the server automatically echoes it back\n    p.send(\n        SERVER,\n        # no header here...\n        [Response(status_code=204, headers=[]), EndOfMessage()],  # type: ignore[arg-type]\n        # ...but oh look, it arrived anyway\n        expect=[\n            Response(status_code=204, headers=[(\"connection\", \"close\")]),\n            EndOfMessage(),\n        ],\n    )\n    for conn in p.conns:\n        assert conn.states == {CLIENT: MUST_CLOSE, SERVER: MUST_CLOSE}"
}