{
  "test_name": "test_automatic_transfer_encoding_in_response",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "cast",
      "source_code": "    def cast(type_, value):  # noqa\n        return value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line_number": 47
    },
    {
      "name": "ConnectionPair",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "cast",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/setuptools/_vendor/packaging/_typing.py",
      "line": 47,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "    def cast(type_, value):  # noqa\n        return value\n"
    },
    {
      "function": "ConnectionPair",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_automatic_transfer_encoding_in_response",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert c.send(Response(status_code=200, headers=user_headers)) == b'HTTP/1.1 200 \\r\\nConnection: close\\r\\n\\r\\n'",
    "assert c.send(Data(data=b'12345')) == b'12345'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_automatic_transfer_encoding_in_response() -> None:\n    # Check that in responses, the user can specify either Transfer-Encoding:\n    # chunked or no framing at all, and in both cases we automatically select\n    # the right option depending on whether the peer speaks HTTP/1.0 or\n    # HTTP/1.1\n    for user_headers in [\n        [(\"Transfer-Encoding\", \"chunked\")],\n        [],\n        # In fact, this even works if Content-Length is set,\n        # because if both are set then Transfer-Encoding wins\n        [(\"Transfer-Encoding\", \"chunked\"), (\"Content-Length\", \"100\")],\n    ]:\n        user_headers = cast(List[Tuple[str, str]], user_headers)\n        p = ConnectionPair()\n        p.send(\n            CLIENT,\n            [\n                Request(method=\"GET\", target=\"/\", headers=[(\"Host\", \"example.com\")]),\n                EndOfMessage(),\n            ],\n        )\n        # When speaking to HTTP/1.1 client, all of the above cases get\n        # normalized to Transfer-Encoding: chunked\n        p.send(\n            SERVER,\n            Response(status_code=200, headers=user_headers),\n            expect=Response(\n                status_code=200, headers=[(\"Transfer-Encoding\", \"chunked\")]\n            ),\n        )\n\n        # When speaking to HTTP/1.0 client, all of the above cases get\n        # normalized to no-framing-headers\n        c = Connection(SERVER)\n        receive_and_get(c, b\"GET / HTTP/1.0\\r\\n\\r\\n\")\n        assert (\n            c.send(Response(status_code=200, headers=user_headers))\n            == b\"HTTP/1.1 200 \\r\\nConnection: close\\r\\n\\r\\n\"\n        )\n        assert c.send(Data(data=b\"12345\")) == b\"12345\""
}