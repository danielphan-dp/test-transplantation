{
  "test_name": "test_check_redefined_sequence",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "namedtuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.extend",
      "source_code": "    def extend(\n        self,\n        arg: (\n            Headers\n            | MultiDict[str, t.Any]\n            | cabc.Mapping[str, t.Any | list[t.Any] | tuple[t.Any, ...] | set[t.Any]]\n            | cabc.Iterable[tuple[str, t.Any]]\n            | None\n        ) = None,\n        /,\n        **kwargs: str,\n    ) -> None:\n        \"\"\"Extend headers in this object with items from another object\n        containing header items as well as keyword arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line_number": 225
    },
    {
      "name": "Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 84
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.Validator.TYPE_CHECKER.redefine_many",
      "source_code": "    def redefine_many(self, definitions=()) -> TypeChecker:\n        \"\"\"\n        Produce a new checker with the given types redefined.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_types.py",
      "line_number": 138
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.validate",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line_number": 84
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MyMapping",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "namedtuple",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "validators.extend",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line": 225,
      "caller": "test_check_redefined_sequence",
      "source_code": "    def extend(\n        self,\n        arg: (\n            Headers\n            | MultiDict[str, t.Any]\n            | cabc.Mapping[str, t.Any | list[t.Any] | tuple[t.Any, ...] | set[t.Any]]\n            | cabc.Iterable[tuple[str, t.Any]]\n            | None\n        ) = None,\n        /,\n        **kwargs: str,\n"
    },
    {
      "function": "Validator",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "validator.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 84,
      "caller": "test_check_redefined_sequence",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any\n"
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "self.Validator.TYPE_CHECKER.redefine_many",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/_types.py",
      "line": 138,
      "caller": "test_check_redefined_sequence",
      "source_code": "    def redefine_many(self, definitions=()) -> TypeChecker:\n        \"\"\"\n        Produce a new checker with the given types redefined.\n\n        Arguments:\n\n            definitions (dict):\n\n                A dictionary mapping types to their checking functions.\n\n        \"\"\"\n        type_checkers = self._type_checkers.update(definitions)\n        return evolve(self, type_checkers=type_checkers)\n\n"
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "validator.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/_util.py",
      "line": 84,
      "caller": "test_check_redefined_sequence",
      "source_code": "def validate(\n    regex: Pattern[bytes], data: bytes, msg: str = \"malformed data\", *format_args: Any\n"
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "MyMapping",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_check_redefined_sequence",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_check_redefined_sequence(self):\n        \"\"\"\n        Allow array to validate against another defined sequence type\n        \"\"\"\n        schema = {\"type\": \"array\", \"uniqueItems\": True}\n        MyMapping = namedtuple(\"MyMapping\", \"a, b\")\n        Validator = validators.extend(\n            self.Validator,\n            type_checker=self.Validator.TYPE_CHECKER.redefine_many(\n                {\n                    \"array\": lambda checker, thing: isinstance(\n                        thing, (list, deque),\n                    ),\n                    \"object\": lambda checker, thing: isinstance(\n                        thing, (dict, MyMapping),\n                    ),\n                },\n            ),\n        )\n        validator = Validator(schema)\n\n        valid_instances = [\n            deque([\"a\", None, \"1\", \"\", True]),\n            deque([[False], [0]]),\n            [deque([False]), deque([0])],\n            [[deque([False])], [deque([0])]],\n            [[[[[deque([False])]]]], [[[[deque([0])]]]]],\n            [deque([deque([False])]), deque([deque([0])])],\n            [MyMapping(\"a\", 0), MyMapping(\"a\", False)],\n            [\n                MyMapping(\"a\", [deque([0])]),\n                MyMapping(\"a\", [deque([False])]),\n            ],\n            [\n                MyMapping(\"a\", [MyMapping(\"a\", deque([0]))]),\n                MyMapping(\"a\", [MyMapping(\"a\", deque([False]))]),\n            ],\n            [deque(deque(deque([False]))), deque(deque(deque([0])))],\n        ]\n\n        for instance in valid_instances:\n            validator.validate(instance)\n\n        invalid_instances = [\n            deque([\"a\", \"b\", \"a\"]),\n            deque([[False], [False]]),\n            [deque([False]), deque([False])],\n            [[deque([False])], [deque([False])]],\n            [[[[[deque([False])]]]], [[[[deque([False])]]]]],\n            [deque([deque([False])]), deque([deque([False])])],\n            [MyMapping(\"a\", False), MyMapping(\"a\", False)],\n            [\n                MyMapping(\"a\", [deque([False])]),\n                MyMapping(\"a\", [deque([False])]),\n            ],\n            [\n                MyMapping(\"a\", [MyMapping(\"a\", deque([False]))]),\n                MyMapping(\"a\", [MyMapping(\"a\", deque([False]))]),\n            ],\n            [deque(deque(deque([False]))), deque(deque(deque([False])))],\n        ]\n\n        for instance in invalid_instances:\n            with self.assertRaises(exceptions.ValidationError):\n                validator.validate(instance)"
}