{
  "test_name": "test_client_talking_to_http10_server",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 183
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ConnectionClosed",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 183,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "    def send(self, message: Message) -> None:\n        self._receive_queue.put(message)\n        if hasattr(self, \"_queue_event\"):\n            self.portal.start_task_soon(self._queue_event.set)\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_client_talking_to_http10_server",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    },
    {
      "function": "ConnectionClosed",
      "filename": "",
      "line": 0,
      "caller": "test_client_talking_to_http10_server",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert c.our_state is DONE",
    "assert receive_and_get(c, b'HTTP/1.0 200 OK\\r\\n\\r\\n') == [Response(status_code=200, headers=[], http_version='1.0', reason=b'OK')]",
    "assert c.our_state is MUST_CLOSE",
    "assert receive_and_get(c, b'12345') == [Data(data=b'12345')]",
    "assert receive_and_get(c, b'67890') == [Data(data=b'67890')]",
    "assert receive_and_get(c, b'') == [EndOfMessage(), ConnectionClosed()]",
    "assert c.their_state is CLOSED"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_client_talking_to_http10_server() -> None:\n    c = Connection(CLIENT)\n    c.send(Request(method=\"GET\", target=\"/\", headers=[(\"Host\", \"example.com\")]))\n    c.send(EndOfMessage())\n    assert c.our_state is DONE\n    # No content-length, so Http10 framing for body\n    assert receive_and_get(c, b\"HTTP/1.0 200 OK\\r\\n\\r\\n\") == [\n        Response(status_code=200, headers=[], http_version=\"1.0\", reason=b\"OK\")  # type: ignore[arg-type]\n    ]\n    assert c.our_state is MUST_CLOSE\n    assert receive_and_get(c, b\"12345\") == [Data(data=b\"12345\")]\n    assert receive_and_get(c, b\"67890\") == [Data(data=b\"67890\")]\n    assert receive_and_get(c, b\"\") == [EndOfMessage(), ConnectionClosed()]\n    assert c.their_state is CLOSED"
}