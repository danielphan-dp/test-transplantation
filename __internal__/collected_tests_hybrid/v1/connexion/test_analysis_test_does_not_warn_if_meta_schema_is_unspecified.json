{
  "test_name": "test_does_not_warn_if_meta_schema_is_unspecified",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validators.validator_for",
      "source_code": "def validator_for(\n    schema,\n    default: Validator | _utils.Unset = _UNSET,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 1335
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_does_not_warn_if_meta_schema_is_unspecified",
      "source_code": ""
    },
    {
      "function": "validators.validator_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 1335,
      "caller": "test_does_not_warn_if_meta_schema_is_unspecified",
      "source_code": "def validator_for(\n    schema,\n    default: Validator | _utils.Unset = _UNSET,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_does_not_warn_if_meta_schema_is_unspecified(self):\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            validators.validator_for(schema={}, default={})\n        self.assertFalse(w)"
}