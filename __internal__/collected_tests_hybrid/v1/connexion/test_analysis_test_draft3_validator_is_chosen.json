{
  "test_name": "test_draft3_validator_is_chosen",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "self.assertUses",
      "source_code": "    def assertUses(self, schema, Validator):\n        result = []\n        with mock.patch.object(Validator, \"check_schema\", result.append):\n            validators.validate({}, schema)\n        self.assertEqual(result, [schema])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 2155
    },
    {
      "name": "self.assertUses",
      "source_code": "    def assertUses(self, schema, Validator):\n        result = []\n        with mock.patch.object(Validator, \"check_schema\", result.append):\n            validators.validate({}, schema)\n        self.assertEqual(result, [schema])",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 2155
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertUses",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 2155,
      "caller": "test_draft3_validator_is_chosen",
      "source_code": "    def assertUses(self, schema, Validator):\n        result = []\n        with mock.patch.object(Validator, \"check_schema\", result.append):\n            validators.validate({}, schema)\n        self.assertEqual(result, [schema])\n\n"
    },
    {
      "function": "self.assertUses",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 2155,
      "caller": "test_draft3_validator_is_chosen",
      "source_code": "    def assertUses(self, schema, Validator):\n        result = []\n        with mock.patch.object(Validator, \"check_schema\", result.append):\n            validators.validate({}, schema)\n        self.assertEqual(result, [schema])\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_draft3_validator_is_chosen(self):\n        self.assertUses(\n            schema={\"$schema\": \"http://json-schema.org/draft-03/schema#\"},\n            Validator=validators.Draft3Validator,\n        )\n        # Make sure it works without the empty fragment\n        self.assertUses(\n            schema={\"$schema\": \"http://json-schema.org/draft-03/schema\"},\n            Validator=validators.Draft3Validator,\n        )"
}