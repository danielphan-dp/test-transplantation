{
  "test_name": "test_events",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/h11/tests/test_events.py",
  "static_methods": [
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InformationalResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ConnectionClosed",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "target.append",
      "source_code": "    def append(self, key: typing.Any, value: typing.Any) -> None:\n        self._list.append((key, value))\n        self._dict[key] = value",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line_number": 358
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InformationalResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InformationalResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "InformationalResponse",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "ConnectionClosed",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "target.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line": 358,
      "caller": "test_events",
      "source_code": "    def append(self, key: typing.Any, value: typing.Any) -> None:\n        self._list.append((key, value))\n        self._dict[key] = value\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "InformationalResponse",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "InformationalResponse",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_events",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert req.method == b'GET'",
    "assert req.target == b'/'",
    "assert req.headers == [(b'a', b'b')]",
    "assert req.http_version == b'1.0'",
    "assert req.headers == [(b'a', b'b'), (b'host', b'example.com')]",
    "assert ir.status_code == 100",
    "assert ir.headers == [(b'host', b'a')]",
    "assert ir.http_version == b'1.1'",
    "assert resp.status_code == 204",
    "assert resp.headers == []",
    "assert resp.http_version == b'1.0'",
    "assert d.data == b'asdf'",
    "assert eom.headers == []",
    "assert repr(cc) == 'ConnectionClosed()'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_events() -> None:\n    with pytest.raises(LocalProtocolError):\n        # Missing Host:\n        req = Request(\n            method=\"GET\", target=\"/\", headers=[(\"a\", \"b\")], http_version=\"1.1\"\n        )\n    # But this is okay (HTTP/1.0)\n    req = Request(method=\"GET\", target=\"/\", headers=[(\"a\", \"b\")], http_version=\"1.0\")\n    # fields are normalized\n    assert req.method == b\"GET\"\n    assert req.target == b\"/\"\n    assert req.headers == [(b\"a\", b\"b\")]\n    assert req.http_version == b\"1.0\"\n\n    # This is also okay -- has a Host (with weird capitalization, which is ok)\n    req = Request(\n        method=\"GET\",\n        target=\"/\",\n        headers=[(\"a\", \"b\"), (\"hOSt\", \"example.com\")],\n        http_version=\"1.1\",\n    )\n    # we normalize header capitalization\n    assert req.headers == [(b\"a\", b\"b\"), (b\"host\", b\"example.com\")]\n\n    # Multiple host is bad too\n    with pytest.raises(LocalProtocolError):\n        req = Request(\n            method=\"GET\",\n            target=\"/\",\n            headers=[(\"Host\", \"a\"), (\"Host\", \"a\")],\n            http_version=\"1.1\",\n        )\n    # Even for HTTP/1.0\n    with pytest.raises(LocalProtocolError):\n        req = Request(\n            method=\"GET\",\n            target=\"/\",\n            headers=[(\"Host\", \"a\"), (\"Host\", \"a\")],\n            http_version=\"1.0\",\n        )\n\n    # Header values are validated\n    for bad_char in \"\\x00\\r\\n\\f\\v\":\n        with pytest.raises(LocalProtocolError):\n            req = Request(\n                method=\"GET\",\n                target=\"/\",\n                headers=[(\"Host\", \"a\"), (\"Foo\", \"asd\" + bad_char)],\n                http_version=\"1.0\",\n            )\n\n    # But for compatibility we allow non-whitespace control characters, even\n    # though they're forbidden by the spec.\n    Request(\n        method=\"GET\",\n        target=\"/\",\n        headers=[(\"Host\", \"a\"), (\"Foo\", \"asd\\x01\\x02\\x7f\")],\n        http_version=\"1.0\",\n    )\n\n    # Request target is validated\n    for bad_byte in b\"\\x00\\x20\\x7f\\xee\":\n        target = bytearray(b\"/\")\n        target.append(bad_byte)\n        with pytest.raises(LocalProtocolError):\n            Request(\n                method=\"GET\", target=target, headers=[(\"Host\", \"a\")], http_version=\"1.1\"\n            )\n\n    # Request method is validated\n    with pytest.raises(LocalProtocolError):\n        Request(\n            method=\"GET / HTTP/1.1\",\n            target=target,\n            headers=[(\"Host\", \"a\")],\n            http_version=\"1.1\",\n        )\n\n    ir = InformationalResponse(status_code=100, headers=[(\"Host\", \"a\")])\n    assert ir.status_code == 100\n    assert ir.headers == [(b\"host\", b\"a\")]\n    assert ir.http_version == b\"1.1\"\n\n    with pytest.raises(LocalProtocolError):\n        InformationalResponse(status_code=200, headers=[(\"Host\", \"a\")])\n\n    resp = Response(status_code=204, headers=[], http_version=\"1.0\")  # type: ignore[arg-type]\n    assert resp.status_code == 204\n    assert resp.headers == []\n    assert resp.http_version == b\"1.0\"\n\n    with pytest.raises(LocalProtocolError):\n        resp = Response(status_code=100, headers=[], http_version=\"1.0\")  # type: ignore[arg-type]\n\n    with pytest.raises(LocalProtocolError):\n        Response(status_code=\"100\", headers=[], http_version=\"1.0\")  # type: ignore[arg-type]\n\n    with pytest.raises(LocalProtocolError):\n        InformationalResponse(status_code=b\"100\", headers=[], http_version=\"1.0\")  # type: ignore[arg-type]\n\n    d = Data(data=b\"asdf\")\n    assert d.data == b\"asdf\"\n\n    eom = EndOfMessage()\n    assert eom.headers == []\n\n    cc = ConnectionClosed()\n    assert repr(cc) == \"ConnectionClosed()\""
}