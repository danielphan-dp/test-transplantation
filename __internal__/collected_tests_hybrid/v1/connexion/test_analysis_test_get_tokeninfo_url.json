{
  "test_name": "test_get_tokeninfo_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/decorators/test_security.py",
  "static_methods": [
    {
      "name": "OAuthSecurityHandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "logger.warn.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "security_handler.get_token_info_remote.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.warn.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.warn.reset_mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "security_handler.get_token_info_remote.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.warn.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "security_handler.get_tokeninfo_func",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line_number": 307
    },
    {
      "name": "security_handler.get_tokeninfo_func",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line_number": 307
    },
    {
      "name": "security_handler.get_tokeninfo_func",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line_number": 307
    }
  ],
  "dynamic_methods": [
    {
      "function": "OAuthSecurityHandler",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "logger.warn.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "security_handler.get_token_info_remote.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "logger.warn.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "logger.warn.reset_mock",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "security_handler.get_token_info_remote.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "logger.warn.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_get_tokeninfo_url",
      "source_code": ""
    },
    {
      "function": "security_handler.get_tokeninfo_func",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line": 307,
      "caller": "test_get_tokeninfo_url",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.\n\n        >>> get_tokeninfo_func({'x-tokenInfoFunc': 'foo.bar'})\n        '<function foo.bar>'\n        \"\"\"\n        token_info_func = self._get_function(\n            security_definition, \"x-tokenInfoFunc\", \"TOKENINFO_FUNC\"\n        )\n        if token_info_func:\n            return token_info_func\n\n        token_info_url = security_definition.get(\"x-tokenInfoUrl\") or os.environ.get(\n            \"TOKENINFO_URL\"\n        )\n        if token_info_url:\n            return self.get_token_info_remote(token_info_url)\n\n        return None\n\n"
    },
    {
      "function": "security_handler.get_tokeninfo_func",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line": 307,
      "caller": "test_get_tokeninfo_url",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.\n\n        >>> get_tokeninfo_func({'x-tokenInfoFunc': 'foo.bar'})\n        '<function foo.bar>'\n        \"\"\"\n        token_info_func = self._get_function(\n            security_definition, \"x-tokenInfoFunc\", \"TOKENINFO_FUNC\"\n        )\n        if token_info_func:\n            return token_info_func\n\n        token_info_url = security_definition.get(\"x-tokenInfoUrl\") or os.environ.get(\n            \"TOKENINFO_URL\"\n        )\n        if token_info_url:\n            return self.get_token_info_remote(token_info_url)\n\n        return None\n\n"
    },
    {
      "function": "security_handler.get_tokeninfo_func",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/security.py",
      "line": 307,
      "caller": "test_get_tokeninfo_url",
      "source_code": "    def get_tokeninfo_func(self, security_definition: dict) -> t.Optional[t.Callable]:\n        \"\"\"\n        Gets the function for retrieving the token info.\n        It is possible to specify a function or a URL. The function variant is\n        preferred. If it is not found, the URL variant is used with the\n        `get_token_info_remote` function.\n\n        >>> get_tokeninfo_func({'x-tokenInfoFunc': 'foo.bar'})\n        '<function foo.bar>'\n        \"\"\"\n        token_info_func = self._get_function(\n            security_definition, \"x-tokenInfoFunc\", \"TOKENINFO_FUNC\"\n        )\n        if token_info_func:\n            return token_info_func\n\n        token_info_url = security_definition.get(\"x-tokenInfoUrl\") or os.environ.get(\n            \"TOKENINFO_URL\"\n        )\n        if token_info_url:\n            return self.get_token_info_remote(token_info_url)\n\n        return None\n\n"
    }
  ],
  "assertions": [
    "assert security_handler.get_tokeninfo_func(security_def) is None",
    "assert security_handler.get_tokeninfo_func(security_def) == 'get_token_info_remote_result'",
    "assert security_handler.get_tokeninfo_func(security_def) == 'get_token_info_remote_result'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_tokeninfo_url(monkeypatch):\n    security_handler = OAuthSecurityHandler()\n    security_handler.get_token_info_remote = MagicMock(\n        return_value=\"get_token_info_remote_result\"\n    )\n    env = {}\n    monkeypatch.setattr(\"os.environ\", env)\n    logger = MagicMock()\n    monkeypatch.setattr(\"connexion.security.logger\", logger)\n\n    security_def = {}\n    assert security_handler.get_tokeninfo_func(security_def) is None\n    logger.warn.assert_not_called()\n\n    env[\"TOKENINFO_URL\"] = \"issue-146\"\n    assert (\n        security_handler.get_tokeninfo_func(security_def)\n        == \"get_token_info_remote_result\"\n    )\n    security_handler.get_token_info_remote.assert_called_with(\"issue-146\")\n    logger.warn.assert_not_called()\n    logger.warn.reset_mock()\n\n    security_def = {\"x-tokenInfoUrl\": \"bar\"}\n    assert (\n        security_handler.get_tokeninfo_func(security_def)\n        == \"get_token_info_remote_result\"\n    )\n    security_handler.get_token_info_remote.assert_called_with(\"bar\")\n    logger.warn.assert_not_called()"
}