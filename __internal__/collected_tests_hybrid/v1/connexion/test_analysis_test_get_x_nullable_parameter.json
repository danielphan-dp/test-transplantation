{
  "test_name": "test_get_x_nullable_parameter",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/decorators/test_validation.py",
  "static_methods": [
    {
      "name": "ParameterValidator.validate_parameter",
      "source_code": "    def validate_parameter(parameter_type, value, param, param_name=None):\n        if is_nullable(param) and is_null(value):\n            return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line_number": 46
    }
  ],
  "dynamic_methods": [
    {
      "function": "ParameterValidator.validate_parameter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/validators/parameter.py",
      "line": 46,
      "caller": "test_get_x_nullable_parameter",
      "source_code": "    @staticmethod\n    def validate_parameter(parameter_type, value, param, param_name=None):\n        if is_nullable(param) and is_null(value):\n            return\n\n        elif value is not None:\n            param = copy.deepcopy(param)\n            param = param.get(\"schema\", param)\n            try:\n                Draft4Validator(param, format_checker=draft4_format_checker).validate(\n                    value\n                )\n            except ValidationError as exception:\n                return str(exception)\n\n        elif param.get(\"required\"):\n            return \"Missing {parameter_type} parameter '{param[name]}'\".format(\n                **locals()\n            )\n\n"
    }
  ],
  "assertions": [
    "assert result is None"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_x_nullable_parameter():\n    param = {\"type\": \"number\", \"required\": True, \"name\": \"foo\", \"x-nullable\": True}\n    result = ParameterValidator.validate_parameter(\"formdata\", \"None\", param)\n    assert result is None"
}