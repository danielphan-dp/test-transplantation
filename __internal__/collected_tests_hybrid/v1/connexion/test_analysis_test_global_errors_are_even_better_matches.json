{
  "test_name": "test_global_errors_are_even_better_matches",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "exceptions.ValidationError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "exceptions.ValidationError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "exceptions.ValidationError",
      "filename": "",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "exceptions.ValidationError",
      "filename": "",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_global_errors_are_even_better_matches",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_global_errors_are_even_better_matches(self):\n        shallow = exceptions.ValidationError(\"Oh no!\", path=[])\n        deep = exceptions.ValidationError(\"Oh yes!\", path=[\"foo\"])\n\n        errors = sorted([shallow, deep], key=exceptions.relevance)\n        self.assertEqual(\n            [list(error.path) for error in errors],\n            [[\"foo\"], []],\n        )\n\n        errors = sorted([deep, shallow], key=exceptions.relevance)\n        self.assertEqual(\n            [list(error.path) for error in errors],\n            [[\"foo\"], []],\n        )"
}