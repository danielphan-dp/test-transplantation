{
  "test_name": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
  "static_methods": [
    {
      "name": "self.run_cli",
      "source_code": "    def run_cli(\n        self, argv, files=None, stdin=StringIO(), exit_code=0, **override,\n    ):\n        arguments = cli.parse_args(argv)\n        arguments.update(override)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
      "line_number": 66
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "StringIO",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.run_cli",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
      "line": 66,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": "    def run_cli(\n        self, argv, files=None, stdin=StringIO(), exit_code=0, **override,\n"
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": ""
    },
    {
      "function": "self.assertIn",
      "filename": "",
      "line": 0,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": ""
    },
    {
      "function": "self.assertNotIn",
      "filename": "",
      "line": 0,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": ""
    },
    {
      "function": "StringIO",
      "filename": "",
      "line": 0,
      "caller": "test_instance_is_invalid_JSON_on_stdin_pretty_output",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_instance_is_invalid_JSON_on_stdin_pretty_output(self):\n        stdout, stderr = self.run_cli(\n            files=dict(some_schema=\"{}\"),\n            stdin=StringIO(\"not valid JSON!\"),\n\n            argv=[\"--output\", \"pretty\", \"some_schema\"],\n\n            exit_code=1,\n        )\n        self.assertFalse(stdout)\n        self.assertIn(\n            \"(<stdin>)===\\n\\nTraceback (most recent call last):\\n\",\n            stderr,\n        )\n        self.assertNotIn(\"some_schema\", stderr)"
}