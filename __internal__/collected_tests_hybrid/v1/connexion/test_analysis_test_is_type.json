{
  "test_name": "test_is_type",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_types.py",
  "static_methods": [
    {
      "name": "TypeChecker",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "checker.is_type",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 453
    },
    {
      "name": "checker.is_type",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 453
    }
  ],
  "dynamic_methods": [
    {
      "function": "TypeChecker",
      "filename": "",
      "line": 0,
      "caller": "test_is_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_is_type",
      "source_code": ""
    },
    {
      "function": "checker.is_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 453,
      "caller": "test_is_type",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None\n\n"
    },
    {
      "function": "checker.is_type",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 453,
      "caller": "test_is_type",
      "source_code": "        def is_type(self, instance, type):\n            try:\n                return self.TYPE_CHECKER.is_type(instance, type)\n            except exceptions.UndefinedTypeCheck:\n                exc = exceptions.UnknownType(type, instance, self.schema)\n                raise exc from None\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_is_type(self):\n        checker = TypeChecker({\"two\": equals_2})\n        self.assertEqual(\n            (\n                checker.is_type(instance=2, type=\"two\"),\n                checker.is_type(instance=\"bar\", type=\"two\"),\n            ),\n            (True, False),\n        )"
}