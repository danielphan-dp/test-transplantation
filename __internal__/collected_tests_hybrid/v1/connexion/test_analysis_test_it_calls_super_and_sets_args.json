{
  "test_name": "test_it_calls_super_and_sets_args",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "self.make_error",
      "source_code": "    def make_error(self, **kwargs):\n        defaults = dict(\n            message=\"hello\",\n            validator=\"type\",\n            validator_value=\"string\",\n            instance=5,\n            schema={\"type\": \"string\"},\n        )\n        defaults.update(kwargs)\n        return exceptions.ValidationError(**defaults)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
      "line_number": 509
    },
    {
      "name": "self.assertGreater",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.make_error",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
      "line": 509,
      "caller": "test_it_calls_super_and_sets_args",
      "source_code": "    def make_error(self, **kwargs):\n        defaults = dict(\n            message=\"hello\",\n            validator=\"type\",\n            validator_value=\"string\",\n            instance=5,\n            schema={\"type\": \"string\"},\n        )\n        defaults.update(kwargs)\n        return exceptions.ValidationError(**defaults)\n\n"
    },
    {
      "function": "self.assertGreater",
      "filename": "",
      "line": 0,
      "caller": "test_it_calls_super_and_sets_args",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_calls_super_and_sets_args",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_calls_super_and_sets_args(self):\n        error = self.make_error()\n        self.assertGreater(len(error.args), 1)"
}