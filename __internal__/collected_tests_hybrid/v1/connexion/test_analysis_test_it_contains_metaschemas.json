{
  "test_name": "test_it_contains_metaschemas",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema_specifications/tests/test_jsonschema_specifications.py",
  "static_methods": [
    {
      "name": "REGISTRY.contents",
      "source_code": "    def contents() -> str:\n        return files(\"pip._vendor.certifi\").joinpath(\"cacert.pem\").read_text(encoding=\"ascii\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line_number": 41
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "REGISTRY.contents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/certifi/core.py",
      "line": 41,
      "caller": "test_it_contains_metaschemas",
      "source_code": "    def contents() -> str:\n        return files(\"pip._vendor.certifi\").joinpath(\"cacert.pem\").read_text(encoding=\"ascii\")\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_contains_metaschemas",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert isinstance(schema, Mapping)",
    "assert schema['$id'] == 'http://json-schema.org/draft-07/schema#'",
    "assert schema['title'] == 'Core schema meta-schema'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_it_contains_metaschemas():\n    schema = REGISTRY.contents(\"http://json-schema.org/draft-07/schema#\")\n    assert isinstance(schema, Mapping)\n    assert schema[\"$id\"] == \"http://json-schema.org/draft-07/schema#\"\n    assert schema[\"title\"] == \"Core schema meta-schema\""
}