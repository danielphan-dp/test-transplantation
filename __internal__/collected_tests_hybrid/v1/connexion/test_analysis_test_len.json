{
  "test_name": "test_len",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "Registry.with_contents",
      "source_code": "    def with_contents(\n        self,\n        pairs: Iterable[tuple[URI, D]],\n        **kwargs: Any,\n    ) -> Registry[D]:\n        r\"\"\"\n        Add the given contents to the registry, autodetecting when necessary.\n        \"\"\"\n        return self.with_resources(\n            (uri, Resource.from_contents(each, **kwargs))\n            for uri, each in pairs\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 532
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Registry.with_contents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 532,
      "caller": "test_len",
      "source_code": "    def with_contents(\n        self,\n        pairs: Iterable[tuple[URI, D]],\n        **kwargs: Any,\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_len",
      "source_code": ""
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_len",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_len",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_len",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(registry) == total"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_len(self):\n        total = 5\n        registry = Registry().with_contents(\n            [(str(i), {\"foo\": \"bar\"}) for i in range(total)],\n            default_specification=Specification.OPAQUE,\n        )\n        assert len(registry) == total"
}