{
  "test_name": "test_multi_body",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_operation2.py",
  "static_methods": [
    {
      "name": "make_operation",
      "source_code": "def make_operation(op, definitions=True, parameters=True):\n    \"\"\"note the wrapper because definitions namespace and\n    operation namespace collide\n    \"\"\"\n    new_op = {\"wrapper\": copy.deepcopy(op)}\n    if definitions:\n        new_op.update({\"definitions\": DEFINITIONS})\n    if parameters:\n        new_op.update({\"parameters\": PARAMETER_DEFINITIONS})\n    return resolve_refs(new_op)[\"wrapper\"]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_operation2.py",
      "line_number": 390
    },
    {
      "name": "Swagger2Operation",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "operation.body_schema",
      "source_code": "    def body_schema(self, content_type: t.Optional[str] = None) -> dict:\n        \"\"\"\n        The body schema definition for this operation.\n        \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/operations/abstract.py",
      "line_number": 172
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Resolver",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_operation",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_operation2.py",
      "line": 390,
      "caller": "test_multi_body",
      "source_code": "def make_operation(op, definitions=True, parameters=True):\n    \"\"\"note the wrapper because definitions namespace and\n    operation namespace collide\n    \"\"\"\n    new_op = {\"wrapper\": copy.deepcopy(op)}\n    if definitions:\n        new_op.update({\"definitions\": DEFINITIONS})\n    if parameters:\n        new_op.update({\"parameters\": PARAMETER_DEFINITIONS})\n    return resolve_refs(new_op)[\"wrapper\"]\n\n\n"
    },
    {
      "function": "Swagger2Operation",
      "filename": "",
      "line": 0,
      "caller": "test_multi_body",
      "source_code": ""
    },
    {
      "function": "operation.body_schema",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/operations/abstract.py",
      "line": 172,
      "caller": "test_multi_body",
      "source_code": "    @abc.abstractmethod\n    def body_schema(self, content_type: t.Optional[str] = None) -> dict:\n        \"\"\"\n        The body schema definition for this operation.\n        \"\"\"\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multi_body",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multi_body",
      "source_code": ""
    },
    {
      "function": "Resolver",
      "filename": "",
      "line": 0,
      "caller": "test_multi_body",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(exception) == \"GET endpoint: There can be one 'body' parameter at most\"",
    "assert repr(exception) == '<InvalidSpecification: \"GET endpoint: There can be one \\'body\\' parameter at most\">'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_multi_body(api):\n    with pytest.raises(InvalidSpecification) as exc_info:  # type: py.code.ExceptionInfo\n        op_spec = make_operation(OPERATION2)\n        operation = Swagger2Operation(\n            method=\"GET\",\n            path=\"endpoint\",\n            path_parameters=[],\n            operation=op_spec,\n            app_produces=[\"application/json\"],\n            app_consumes=[\"application/json\"],\n            definitions=DEFINITIONS,\n            resolver=Resolver(),\n        )\n        operation.body_schema()\n\n    exception = exc_info.value\n    assert str(exception) == \"GET endpoint: There can be one 'body' parameter at most\"\n    assert (\n        repr(exception)\n        == \"\"\"<InvalidSpecification: \"GET endpoint: There can be one 'body' parameter at most\">\"\"\"\n    )"
}