{
  "test_name": "test_multiple_nesting",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
  "static_methods": [
    {
      "name": "validators.Draft3Validator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "validator.iter_errors",
      "source_code": "        def iter_errors(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.iter_errors \"\n                        \"is deprecated and will be removed in a future \"\n                        \"release. Call validator.evolve(schema=new_schema).\"\n                        \"iter_errors(...) instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                validators = [\n                    (self.VALIDATORS[k], k, v)\n                    for k, v in applicable_validators(_schema)\n                    if k in self.VALIDATORS\n                ]\n            else:\n                _schema, validators = self.schema, self._validators",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 350
    },
    {
      "name": "sorted_errors",
      "source_code": "def sorted_errors(errors):\n    def key(error):\n        return (\n            [str(e) for e in error.path],\n            [str(e) for e in error.schema_path],\n        )\n    return sorted(errors, key=key)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 2548
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deque",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "validators.Draft3Validator",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "validator.iter_errors",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 350,
      "caller": "test_multiple_nesting",
      "source_code": "        def iter_errors(self, instance, _schema=None):\n            if _schema is not None:\n                warnings.warn(\n                    (\n                        \"Passing a schema to Validator.iter_errors \"\n                        \"is deprecated and will be removed in a future \"\n                        \"release. Call validator.evolve(schema=new_schema).\"\n                        \"iter_errors(...) instead.\"\n                    ),\n                    DeprecationWarning,\n                    stacklevel=2,\n                )\n                validators = [\n                    (self.VALIDATORS[k], k, v)\n                    for k, v in applicable_validators(_schema)\n                    if k in self.VALIDATORS\n                ]\n            else:\n                _schema, validators = self.schema, self._validators\n\n            if _schema is True:\n                return\n            elif _schema is False:\n                yield exceptions.ValidationError(\n                    f\"False schema does not allow {instance!r}\",\n                    validator=None,\n                    validator_value=None,\n                    instance=instance,\n                    schema=_schema,\n                )\n                return\n\n            for validator, k, v in validators:\n                errors = validator(self, v, instance, _schema) or ()\n                for error in errors:\n                    # set details if not already set by the called fn\n                    error._set(\n                        validator=k,\n                        validator_value=v,\n                        instance=instance,\n                        schema=_schema,\n                        type_checker=self.TYPE_CHECKER,\n                    )\n                    if k not in {\"if\", \"$ref\"}:\n                        error.schema_path.appendleft(k)\n                    yield error\n\n"
    },
    {
      "function": "sorted_errors",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 2548,
      "caller": "test_multiple_nesting",
      "source_code": "def sorted_errors(errors):\n    def key(error):\n        return (\n            [str(e) for e in error.path],\n            [str(e) for e in error.schema_path],\n        )\n    return sorted(errors, key=key)\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "deque",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multiple_nesting",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_multiple_nesting(self):\n        instance = [1, {\"foo\": 2, \"bar\": {\"baz\": [1]}}, \"quux\"]\n        schema = {\n            \"type\": \"string\",\n            \"items\": {\n                \"type\": [\"string\", \"object\"],\n                \"properties\": {\n                    \"foo\": {\"enum\": [1, 3]},\n                    \"bar\": {\n                        \"type\": \"array\",\n                        \"properties\": {\n                            \"bar\": {\"required\": True},\n                            \"baz\": {\"minItems\": 2},\n                        },\n                    },\n                },\n            },\n        }\n\n        validator = validators.Draft3Validator(schema)\n        errors = validator.iter_errors(instance)\n        e1, e2, e3, e4, e5, e6 = sorted_errors(errors)\n\n        self.assertEqual(e1.path, deque([]))\n        self.assertEqual(e2.path, deque([0]))\n        self.assertEqual(e3.path, deque([1, \"bar\"]))\n        self.assertEqual(e4.path, deque([1, \"bar\", \"bar\"]))\n        self.assertEqual(e5.path, deque([1, \"bar\", \"baz\"]))\n        self.assertEqual(e6.path, deque([1, \"foo\"]))\n\n        self.assertEqual(e1.json_path, \"$\")\n        self.assertEqual(e2.json_path, \"$[0]\")\n        self.assertEqual(e3.json_path, \"$[1].bar\")\n        self.assertEqual(e4.json_path, \"$[1].bar.bar\")\n        self.assertEqual(e5.json_path, \"$[1].bar.baz\")\n        self.assertEqual(e6.json_path, \"$[1].foo\")\n\n        self.assertEqual(e1.schema_path, deque([\"type\"]))\n        self.assertEqual(e2.schema_path, deque([\"items\", \"type\"]))\n        self.assertEqual(\n            list(e3.schema_path), [\"items\", \"properties\", \"bar\", \"type\"],\n        )\n        self.assertEqual(\n            list(e4.schema_path),\n            [\"items\", \"properties\", \"bar\", \"properties\", \"bar\", \"required\"],\n        )\n        self.assertEqual(\n            list(e5.schema_path),\n            [\"items\", \"properties\", \"bar\", \"properties\", \"baz\", \"minItems\"],\n        )\n        self.assertEqual(\n            list(e6.schema_path), [\"items\", \"properties\", \"foo\", \"enum\"],\n        )\n\n        self.assertEqual(e1.validator, \"type\")\n        self.assertEqual(e2.validator, \"type\")\n        self.assertEqual(e3.validator, \"type\")\n        self.assertEqual(e4.validator, \"required\")\n        self.assertEqual(e5.validator, \"minItems\")\n        self.assertEqual(e6.validator, \"enum\")"
}