{
  "test_name": "test_no_id",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "Specification.OPAQUE.id_of",
      "source_code": "        def id_of(schema):\n            return schema.get(\"__test__\", self.Validator.ID_OF(schema))\n        correct_id = \"the://correct/id/\"\n        meta_schema = {\n            \"$id\": \"the://wrong/id/\",\n            \"__test__\": correct_id,\n        }\n        Original = validators.create(\n            meta_schema=meta_schema,\n            validators=self.validators,\n            type_checker=self.type_checker,\n            id_of=id_of,\n        )\n        self.assertEqual(Original.ID_OF(Original.META_SCHEMA), correct_id)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line_number": 270
    }
  ],
  "dynamic_methods": [
    {
      "function": "Specification.OPAQUE.id_of",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_validators.py",
      "line": 270,
      "caller": "test_no_id",
      "source_code": "        def id_of(schema):\n            return schema.get(\"__test__\", self.Validator.ID_OF(schema))\n"
    }
  ],
  "assertions": [
    "assert Specification.OPAQUE.id_of(thing) is None"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_no_id(self, thing):\n        \"\"\"\n        An arbitrary thing has no ID.\n        \"\"\"\n\n        assert Specification.OPAQUE.id_of(thing) is None"
}