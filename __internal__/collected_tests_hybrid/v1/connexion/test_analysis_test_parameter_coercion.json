{
  "test_name": "test_parameter_coercion",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/decorators/test_uri_parsing.py",
  "static_methods": [
    {
      "name": "Swagger2URIParser",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "uri_parser.resolve_path",
      "source_code": "    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 75
    },
    {
      "name": "uri_parser.resolve_path",
      "source_code": "    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 75
    },
    {
      "name": "uri_parser.resolve_path",
      "source_code": "    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 75
    },
    {
      "name": "uri_parser.resolve_path",
      "source_code": "    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 75
    },
    {
      "name": "uri_parser.resolve_path",
      "source_code": "    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 75
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "uri_parser.resolve_query",
      "source_code": "    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line_number": 71
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "QueryParams",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "quote_plus",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "quote_plus",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "quote_plus",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "quote_plus",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Swagger2URIParser",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "uri_parser.resolve_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 75,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 75,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 75,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 75,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 75,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_path(self, path):\n        \"\"\"Resolve cases where path parameters include lists\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "uri_parser.resolve_query",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/uri_parsing.py",
      "line": 71,
      "caller": "test_parameter_coercion",
      "source_code": "    @abc.abstractmethod\n    def resolve_query(self, query_data):\n        \"\"\"Resolve cases where query parameters are provided multiple times.\"\"\"\n\n"
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "QueryParams",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "quote_plus",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "quote_plus",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "quote_plus",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    },
    {
      "function": "quote_plus",
      "filename": "",
      "line": 0,
      "caller": "test_parameter_coercion",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert parsed_param == {'p1': 123}",
    "assert parsed_param == {'p1': ''}",
    "assert parsed_param == {'p1': 'foo'}",
    "assert parsed_param == {'p1': '1.2'}",
    "assert parsed_param == {'p1': 1}",
    "assert parsed_param == {'q1': 4}",
    "assert parsed_param == {'q1': 3}",
    "assert parsed_param == {'a1': [2]}",
    "assert parsed_param == {'a1': ['a']}",
    "assert parsed_param == {'a1': [1]}",
    "assert parsed_param == {'a1': [1]}",
    "assert parsed_param == {'a1': [4]}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_parameter_coercion():\n    params = [\n        {\"name\": \"p1\", \"in\": \"path\", \"type\": \"integer\", \"required\": True},\n        {\"name\": \"h1\", \"in\": \"header\", \"type\": \"string\", \"enum\": [\"a\", \"b\"]},\n        {\"name\": \"q1\", \"in\": \"query\", \"type\": \"integer\", \"maximum\": 3},\n        {\n            \"name\": \"a1\",\n            \"in\": \"query\",\n            \"type\": \"array\",\n            \"minItems\": 2,\n            \"maxItems\": 3,\n            \"items\": {\"type\": \"integer\", \"minimum\": 0},\n        },\n    ]\n\n    uri_parser = Swagger2URIParser(params, {})\n\n    parsed_param = uri_parser.resolve_path({\"p1\": \"123\"})\n    assert parsed_param == {\"p1\": 123}\n\n    parsed_param = uri_parser.resolve_path({\"p1\": \"\"})\n    assert parsed_param == {\"p1\": \"\"}\n\n    parsed_param = uri_parser.resolve_path({\"p1\": \"foo\"})\n    assert parsed_param == {\"p1\": \"foo\"}\n\n    parsed_param = uri_parser.resolve_path({\"p1\": \"1.2\"})\n    assert parsed_param == {\"p1\": \"1.2\"}\n\n    parsed_param = uri_parser.resolve_path({\"p1\": 1})\n    assert parsed_param == {\"p1\": 1}\n\n    parsed_param = uri_parser.resolve_query(QueryParams(\"q1=4\"))\n    assert parsed_param == {\"q1\": 4}\n\n    parsed_param = uri_parser.resolve_query(QueryParams(\"q1=3\"))\n    assert parsed_param == {\"q1\": 3}\n\n    parsed_param = uri_parser.resolve_query(QueryParams(f\"a1={quote_plus('1,2')}\"))\n    assert parsed_param == {\"a1\": [2]}  # Swagger2URIParser\n\n    parsed_param = uri_parser.resolve_query(QueryParams(f\"a1={quote_plus('1,a')}\"))\n    assert parsed_param == {\"a1\": [\"a\"]}  # Swagger2URIParser\n\n    parsed_param = uri_parser.resolve_query(QueryParams(f\"a1={quote_plus('1,-1')}\"))\n    assert parsed_param == {\"a1\": [1]}  # Swagger2URIParser\n\n    parsed_param = uri_parser.resolve_query(QueryParams(f\"a1=1\"))\n    assert parsed_param == {\"a1\": [1]}  # Swagger2URIParser\n\n    parsed_param = uri_parser.resolve_query(QueryParams(f\"a1={quote_plus('1,2,3,4')}\"))\n    assert parsed_param == {\"a1\": [4]}"
}