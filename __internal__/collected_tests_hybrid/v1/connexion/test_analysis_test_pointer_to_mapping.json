{
  "test_name": "test_pointer_to_mapping",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "Resource.opaque",
      "source_code": "    def opaque(cls, contents: D) -> Resource[D]:\n        \"\"\"\n        Create an opaque `Resource` -- i.e. one with opaque specification.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 214
    },
    {
      "name": "Registry.resolver",
      "source_code": "        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line_number": 320
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Resource.opaque",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 214,
      "caller": "test_pointer_to_mapping",
      "source_code": "    @classmethod\n    def opaque(cls, contents: D) -> Resource[D]:\n        \"\"\"\n        Create an opaque `Resource` -- i.e. one with opaque specification.\n\n        See `Specification.OPAQUE` for details.\n        \"\"\"\n        return Specification.OPAQUE.create_resource(contents=contents)\n\n"
    },
    {
      "function": "Registry.resolver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/validators.py",
      "line": 320,
      "caller": "test_pointer_to_mapping",
      "source_code": "        @property\n        def resolver(self):\n            warnings.warn(\n                (\n                    f\"Accessing {self.__class__.__name__}.resolver is \"\n                    \"deprecated as of v4.18.0, in favor of the \"\n                    \"https://github.com/python-jsonschema/referencing \"\n                    \"library, which provides more compliant referencing \"\n                    \"behavior as well as more flexible APIs for \"\n                    \"customization.\"\n                ),\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            if self._ref_resolver is None:\n                self._ref_resolver = _RefResolver.from_schema(\n                    self.schema,\n                    id_of=id_of,\n                )\n            return self._ref_resolver\n\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_pointer_to_mapping",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert resource.pointer('/foo', resolver=resolver).contents == 'baz'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_pointer_to_mapping(self):\n        resource = Resource.opaque(contents={\"foo\": \"baz\"})\n        resolver = Registry().resolver()\n        assert resource.pointer(\"/foo\", resolver=resolver).contents == \"baz\""
}