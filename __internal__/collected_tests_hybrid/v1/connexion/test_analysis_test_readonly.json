{
  "test_name": "test_readonly",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/test_flask_encoder.py",
  "static_methods": [
    {
      "name": "build_app_from_fixture",
      "source_code": "def build_app_from_fixture(\n    api_spec_folder, *, app_class, spec_file, middlewares=None, **kwargs",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/conftest.py",
      "line_number": 75
    },
    {
      "name": "app.test_client",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line_number": 273
    },
    {
      "name": "app_client.get",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().get(\n            url,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 500
    },
    {
      "name": "res.json",
      "source_code": "    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line_number": 587
    },
    {
      "name": "get_value",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line_number": 143
    },
    {
      "name": "get_value",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line_number": 143
    },
    {
      "name": "get_value",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line_number": 143
    },
    {
      "name": "app_client.get",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().get(\n            url,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 500
    },
    {
      "name": "res.json",
      "source_code": "    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line_number": 587
    },
    {
      "name": "app_client.get",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().get(\n            url,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 500
    },
    {
      "name": "res.json",
      "source_code": "    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line_number": 587
    },
    {
      "name": "app_client.get",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().get(\n            url,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 500
    },
    {
      "name": "res.json",
      "source_code": "    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line_number": 587
    },
    {
      "name": "path.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "spec.replace",
      "source_code": "    def replace(self, **kwargs: typing.Any) -> URL:\n        if \"username\" in kwargs or \"password\" in kwargs or \"hostname\" in kwargs or \"port\" in kwargs:\n            hostname = kwargs.pop(\"hostname\", None)\n            port = kwargs.pop(\"port\", self.port)\n            username = kwargs.pop(\"username\", self.username)\n            password = kwargs.pop(\"password\", self.password)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line_number": 110
    },
    {
      "name": "data.get",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n    ) -> httpx.Response:\n        redirect = self._choose_redirect_arg(follow_redirects, allow_redirects)\n        return super().get(\n            url,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            auth=auth,\n            follow_redirects=redirect,\n            timeout=timeout,\n            extensions=extensions,\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line_number": 500
    }
  ],
  "dynamic_methods": [
    {
      "function": "build_app_from_fixture",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/conftest.py",
      "line": 75,
      "caller": "test_readonly",
      "source_code": "def build_app_from_fixture(\n    api_spec_folder, *, app_class, spec_file, middlewares=None, **kwargs\n"
    },
    {
      "function": "app.test_client",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line": 273,
      "caller": "test_readonly",
      "source_code": "    def test_client(self, **kwargs):\n        \"\"\"Creates a test client for this application. The keywords arguments passed in are\n        passed to the ``StarletteClient``.\"\"\"\n        return TestClient(self, **kwargs)\n\n"
    },
    {
      "function": "app_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 500,
      "caller": "test_readonly",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "res.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line": 587,
      "caller": "test_readonly",
      "source_code": "    @property\n    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n        \"\"\"\n        return self.get_json()\n\n"
    },
    {
      "function": "get_value",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line": 143,
      "caller": "test_readonly",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")\n\n"
    },
    {
      "function": "get_value",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line": 143,
      "caller": "test_readonly",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")\n\n"
    },
    {
      "function": "get_value",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_internal/configuration.py",
      "line": 143,
      "caller": "test_readonly",
      "source_code": "    def get_value(self, key: str) -> Any:\n        \"\"\"Get a value from the configuration.\"\"\"\n        orig_key = key\n        key = _normalize_name(key)\n        try:\n            return self._dictionary[key]\n        except KeyError:\n            # disassembling triggers a more useful error message than simply\n            # \"No such key\" in the case that the key isn't in the form command.option\n            _disassemble_key(key)\n            raise ConfigurationError(f\"No such key - {orig_key}\")\n\n"
    },
    {
      "function": "app_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 500,
      "caller": "test_readonly",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "res.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line": 587,
      "caller": "test_readonly",
      "source_code": "    @property\n    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n        \"\"\"\n        return self.get_json()\n\n"
    },
    {
      "function": "app_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 500,
      "caller": "test_readonly",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "res.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line": 587,
      "caller": "test_readonly",
      "source_code": "    @property\n    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n        \"\"\"\n        return self.get_json()\n\n"
    },
    {
      "function": "app_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 500,
      "caller": "test_readonly",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    },
    {
      "function": "res.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/wrappers/response.py",
      "line": 587,
      "caller": "test_readonly",
      "source_code": "    @property\n    def json(self) -> t.Any | None:\n        \"\"\"The parsed JSON data if :attr:`mimetype` indicates JSON\n        (:mimetype:`application/json`, see :attr:`is_json`).\n\n        Calls :meth:`get_json` with default arguments.\n        \"\"\"\n        return self.get_json()\n\n"
    },
    {
      "function": "path.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_readonly",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "spec.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line": 110,
      "caller": "test_readonly",
      "source_code": "    def replace(self, **kwargs: typing.Any) -> URL:\n        if \"username\" in kwargs or \"password\" in kwargs or \"hostname\" in kwargs or \"port\" in kwargs:\n            hostname = kwargs.pop(\"hostname\", None)\n            port = kwargs.pop(\"port\", self.port)\n            username = kwargs.pop(\"username\", self.username)\n            password = kwargs.pop(\"password\", self.password)\n\n            if hostname is None:\n                netloc = self.netloc\n                _, _, hostname = netloc.rpartition(\"@\")\n\n                if hostname[-1] != \"]\":\n                    hostname = hostname.rsplit(\":\", 1)[0]\n\n            netloc = hostname\n            if port is not None:\n                netloc += f\":{port}\"\n            if username is not None:\n                userpass = username\n                if password is not None:\n                    userpass += f\":{password}\"\n                netloc = f\"{userpass}@{netloc}\"\n\n            kwargs[\"netloc\"] = netloc\n\n        components = self.components._replace(**kwargs)\n        return self.__class__(components.geturl())\n\n"
    },
    {
      "function": "data.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/testclient.py",
      "line": 500,
      "caller": "test_readonly",
      "source_code": "    def get(  # type: ignore[override]\n        self,\n        url: httpx._types.URLTypes,\n        *,\n        params: httpx._types.QueryParamTypes | None = None,\n        headers: httpx._types.HeaderTypes | None = None,\n        cookies: httpx._types.CookieTypes | None = None,\n        auth: httpx._types.AuthTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        follow_redirects: bool | None = None,\n        allow_redirects: bool | None = None,\n        timeout: httpx._types.TimeoutTypes | httpx._client.UseClientDefault = httpx._client.USE_CLIENT_DEFAULT,\n        extensions: dict[str, typing.Any] | None = None,\n"
    }
  ],
  "assertions": [
    "assert res.status_code == 200, f'Error is {res.text}'",
    "assert example in ['2000-01-23T04:56:07.000008+00:00', '2000-01-23T04:56:07.000008Z']",
    "assert example == '2000-01-23'",
    "assert example == 'a7b8869c-5f24-4ce0-a5d1-3e44c3663aa9'",
    "assert res.status_code == 200, f'Error is {res.text}'",
    "assert data == {'value': '2000-01-02T03:04:05.000006Z'}",
    "assert res.status_code == 200, f'Error is {res.text}'",
    "assert data == {'value': '2000-01-02'}",
    "assert res.status_code == 200, f'Error is {res.text}'",
    "assert data == {'value': 'e7ff66d0-3ec2-4c4e-bed0-6e4723c24c51'}",
    "assert data, f\"No data in part '{part}' of '{path}'\""
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_readonly(json_datetime_dir, spec, app_class):\n    app = build_app_from_fixture(\n        json_datetime_dir, app_class=app_class, spec_file=spec, validate_responses=True\n    )\n    app_client = app.test_client()\n\n    res = app_client.get(\"/v1.0/\" + spec.replace(\"yaml\", \"json\"))\n    assert res.status_code == 200, f\"Error is {res.text}\"\n    spec_data = res.json()\n\n    if spec == \"openapi.yaml\":\n        response_path = \"responses.200.content.application/json.schema\"\n    else:\n        response_path = \"responses.200.schema\"\n\n    def get_value(data, path):\n        for part in path.split(\".\"):\n            data = data.get(part)\n            assert data, f\"No data in part '{part}' of '{path}'\"\n        return data\n\n    example = get_value(spec_data, f\"paths./datetime.get.{response_path}.example.value\")\n    assert example in [\n        \"2000-01-23T04:56:07.000008+00:00\",  # PyYAML 5.3+\n        \"2000-01-23T04:56:07.000008Z\",\n    ]\n    example = get_value(spec_data, f\"paths./date.get.{response_path}.example.value\")\n    assert example == \"2000-01-23\"\n    example = get_value(spec_data, f\"paths./uuid.get.{response_path}.example.value\")\n    assert example == \"a7b8869c-5f24-4ce0-a5d1-3e44c3663aa9\"\n\n    res = app_client.get(\"/v1.0/datetime\")\n    assert res.status_code == 200, f\"Error is {res.text}\"\n    data = res.json()\n    assert data == {\"value\": \"2000-01-02T03:04:05.000006Z\"}\n\n    res = app_client.get(\"/v1.0/date\")\n    assert res.status_code == 200, f\"Error is {res.text}\"\n    data = res.json()\n    assert data == {\"value\": \"2000-01-02\"}\n\n    res = app_client.get(\"/v1.0/uuid\")\n    assert res.status_code == 200, f\"Error is {res.text}\"\n    data = res.json()\n    assert data == {\"value\": \"e7ff66d0-3ec2-4c4e-bed0-6e4723c24c51\"}"
}