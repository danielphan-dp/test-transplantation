{
  "test_name": "test_resolver_with_root_identified",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/tests/test_core.py",
  "static_methods": [
    {
      "name": "ID_AND_CHILDREN.create_resource",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 160
    },
    {
      "name": "Registry.resolver_with_root",
      "source_code": "    def resolver_with_root(self, resource: Resource[D]) -> Resolver[D]:\n        \"\"\"\n        Return a `Resolver` with a specific root resource.\n        \"\"\"\n        uri = resource.id() or \"\"\n        return Resolver(\n            base_uri=uri,\n            registry=self.with_resource(uri, resource),\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line_number": 581
    },
    {
      "name": "Registry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    },
    {
      "name": "resolver.lookup",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line_number": 145
    }
  ],
  "dynamic_methods": [
    {
      "function": "ID_AND_CHILDREN.create_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 160,
      "caller": "test_resolver_with_root_identified",
      "source_code": "    def create_resource(self, contents: D) -> Resource[D]:\n        \"\"\"\n        Create a resource which is interpreted using this specification.\n        \"\"\"\n        return Resource(contents=contents, specification=self)\n\n\n"
    },
    {
      "function": "Registry.resolver_with_root",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/referencing/_core.py",
      "line": 581,
      "caller": "test_resolver_with_root_identified",
      "source_code": "    def resolver_with_root(self, resource: Resource[D]) -> Resolver[D]:\n        \"\"\"\n        Return a `Resolver` with a specific root resource.\n        \"\"\"\n        uri = resource.id() or \"\"\n        return Resolver(\n            base_uri=uri,\n            registry=self.with_resource(uri, resource),\n        )\n\n\n"
    },
    {
      "function": "Registry",
      "filename": "",
      "line": 0,
      "caller": "test_resolver_with_root_identified",
      "source_code": ""
    },
    {
      "function": "resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_resolver_with_root_identified",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    },
    {
      "function": "resolver.lookup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/_internal.py",
      "line": 145,
      "caller": "test_resolver_with_root_identified",
      "source_code": "    def lookup(self, instance: t.Any) -> t.MutableMapping[str, t.Any]:\n        raise NotImplementedError\n\n"
    }
  ],
  "assertions": [
    "assert resolver.lookup('http://example.com').contents == root.contents",
    "assert resolver.lookup('#').contents == root.contents"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_resolver_with_root_identified(self):\n        root = ID_AND_CHILDREN.create_resource({\"ID\": \"http://example.com\"})\n        resolver = Registry().resolver_with_root(root)\n        assert resolver.lookup(\"http://example.com\").contents == root.contents\n        assert resolver.lookup(\"#\").contents == root.contents"
}