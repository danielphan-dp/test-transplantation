{
  "test_name": "test_unset_error",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "exceptions.ValidationError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "exceptions.ValidationError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "exceptions.ValidationError",
      "filename": "",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "exceptions.ValidationError",
      "filename": "",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unset_error",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unset_error(self):\n        error = exceptions.ValidationError(\"message\")\n        self.assertEqual(str(error), \"message\")\n\n        kwargs = {\n            \"validator\": \"type\",\n            \"validator_value\": \"string\",\n            \"instance\": 5,\n            \"schema\": {\"type\": \"string\"},\n        }\n        # Just the message should show if any of the attributes are unset\n        for attr in kwargs:\n            k = dict(kwargs)\n            del k[attr]\n            error = exceptions.ValidationError(\"message\", **k)\n            self.assertEqual(str(error), \"message\")"
}