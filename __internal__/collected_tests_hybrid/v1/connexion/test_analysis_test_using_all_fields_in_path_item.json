{
  "test_name": "test_using_all_fields_in_path_item",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/tests/api/test_bootstrap.py",
  "static_methods": [
    {
      "name": "App",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_api",
      "source_code": "    def add_api(\n        self,\n        specification: t.Union[pathlib.Path, str, dict],\n        *,\n        base_path: t.Optional[str] = None,\n        name: t.Optional[str] = None,\n        arguments: t.Optional[dict] = None,\n        auth_all_paths: t.Optional[bool] = None,\n        jsonifier: t.Optional[Jsonifier] = None,\n        pythonic_params: t.Optional[bool] = None,\n        resolver: t.Optional[t.Union[Resolver, t.Callable]] = None,\n        resolver_error: t.Optional[int] = None,\n        strict_validation: t.Optional[bool] = None,\n        swagger_ui_options: t.Optional[SwaggerUIOptions] = None,\n        uri_parser_class: t.Optional[AbstractURIParser] = None,\n        validate_responses: t.Optional[bool] = None,\n        validator_map: t.Optional[dict] = None,\n        security_map: t.Optional[dict] = None,\n        **kwargs,\n    ) -> t.Any:\n        \"\"\"\n        Register an API represented by a single OpenAPI specification on this application.\n        Multiple APIs can be registered on a single application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line_number": 122
    },
    {
      "name": "app.middleware._build_middleware_stack",
      "source_code": "    def _build_middleware_stack(self) -> t.Tuple[ASGIApp, t.Iterable[ASGIApp]]:\n        \"\"\"Apply all middlewares to the provided app.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/middleware/main.py",
      "line_number": 315
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.app.url_map.iter_rules",
      "source_code": "    def iter_rules(self, endpoint: t.Any | None = None) -> t.Iterator[Rule]:\n        \"\"\"Iterate over all rules or the rules of an endpoint.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/routing/map.py",
      "line_number": 158
    },
    {
      "name": "test_methods.update",
      "source_code": "    def update(\n        self,\n        *args: MultiDict | typing.Mapping[typing.Any, typing.Any] | list[tuple[typing.Any, typing.Any]],\n        **kwargs: typing.Any,\n    ) -> None:\n        value = MultiDict(*args, **kwargs)\n        existing_items = [(k, v) for (k, v) in self._list if k not in value.keys()]\n        self._list = existing_items + value.multi_items()\n        self._dict.update(value)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line_number": 362
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "method.lower",
      "source_code": "    def lower(self, /) -> te.Self:\n        return self.__class__(super().lower())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line_number": 251
    }
  ],
  "dynamic_methods": [
    {
      "function": "App",
      "filename": "",
      "line": 0,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": ""
    },
    {
      "function": "app.add_api",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/apps/abstract.py",
      "line": 122,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": "    def add_api(\n        self,\n        specification: t.Union[pathlib.Path, str, dict],\n        *,\n        base_path: t.Optional[str] = None,\n        name: t.Optional[str] = None,\n        arguments: t.Optional[dict] = None,\n        auth_all_paths: t.Optional[bool] = None,\n        jsonifier: t.Optional[Jsonifier] = None,\n        pythonic_params: t.Optional[bool] = None,\n        resolver: t.Optional[t.Union[Resolver, t.Callable]] = None,\n        resolver_error: t.Optional[int] = None,\n        strict_validation: t.Optional[bool] = None,\n        swagger_ui_options: t.Optional[SwaggerUIOptions] = None,\n        uri_parser_class: t.Optional[AbstractURIParser] = None,\n        validate_responses: t.Optional[bool] = None,\n        validator_map: t.Optional[dict] = None,\n        security_map: t.Optional[dict] = None,\n        **kwargs,\n"
    },
    {
      "function": "app.middleware._build_middleware_stack",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/connexion/middleware/main.py",
      "line": 315,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": "    def _build_middleware_stack(self) -> t.Tuple[ASGIApp, t.Iterable[ASGIApp]]:\n        \"\"\"Apply all middlewares to the provided app.\n\n        :return: Tuple of the outer middleware wrapping the application and a list of the wrapped\n            middlewares, including the wrapped application.\n        \"\"\"\n        # Include the wrapped application in the returned list.\n        app = self.app\n        apps = [app]\n        for middleware in reversed(self.middlewares):\n            arguments, _ = inspect_function_arguments(middleware)\n            if \"lifespan\" in arguments:\n                app = middleware(app, lifespan=self.lifespan)  # type: ignore\n            else:\n                app = middleware(app)  # type: ignore\n            apps.append(app)\n\n        # We sort the APIs by base path so that the most specific APIs are registered first.\n        # This is due to the way Starlette matches routes.\n        self.apis = utils.sort_apis_by_basepath(self.apis)\n        for app in apps:\n            if isinstance(app, SpecMiddleware):\n                for api in self.apis:\n                    app.add_api(\n                        api.specification,\n                        base_path=api.base_path,\n                        **api.kwargs,\n                    )\n\n            if isinstance(app, ExceptionMiddleware):\n                for error_handler in self.error_handlers:\n                    app.add_exception_handler(*error_handler)\n\n        return app, list(reversed(apps))\n\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": ""
    },
    {
      "function": "app.app.url_map.iter_rules",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/routing/map.py",
      "line": 158,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": "    def iter_rules(self, endpoint: t.Any | None = None) -> t.Iterator[Rule]:\n        \"\"\"Iterate over all rules or the rules of an endpoint.\n\n        :param endpoint: if provided only the rules for that endpoint\n                         are returned.\n        :return: an iterator\n        \"\"\"\n        self.update()\n        if endpoint is not None:\n            return iter(self._rules_by_endpoint[endpoint])\n        return iter(self._rules)\n\n"
    },
    {
      "function": "test_methods.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/starlette/datastructures.py",
      "line": 362,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": "    def update(\n        self,\n        *args: MultiDict | typing.Mapping[typing.Any, typing.Any] | list[tuple[typing.Any, typing.Any]],\n        **kwargs: typing.Any,\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": ""
    },
    {
      "function": "method.lower",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line": 251,
      "caller": "test_using_all_fields_in_path_item",
      "source_code": "    def lower(self, /) -> te.Self:\n        return self.__class__(super().lower())\n\n"
    }
  ],
  "assertions": [
    "assert set(test_methods) == METHODS"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_using_all_fields_in_path_item(simple_api_spec_dir):\n    \"\"\"Test that connexion will try to add an endpoint only on http methods.\n\n    test also that each http methods has its own endpoint.\n    \"\"\"\n    app = App(__name__, specification_dir=simple_api_spec_dir)\n    app.add_api(\"openapi.yaml\")\n    app.middleware._build_middleware_stack()\n\n    test_methods = set()\n    for rule in app.app.url_map.iter_rules():\n        if rule.rule != \"/v1.0/add_operation_on_http_methods_only\":\n            continue\n        test_methods.update({method.lower() for method in rule.methods})\n    assert set(test_methods) == METHODS"
}