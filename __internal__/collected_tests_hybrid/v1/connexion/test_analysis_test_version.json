{
  "test_name": "test_version",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/jsonschema/tests/test_cli.py",
  "static_methods": [
    {
      "name": "version.decode.strip",
      "source_code": "        def strip(x: str) -> str:\n            prefix = os.path.expanduser(\"~\")\n            if x.startswith(prefix):\n                x = f\"~{x[len(prefix) :]}\"\n            return x",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/testapp.py",
      "line_number": 98
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "metadata.version",
      "source_code": "    def version(self) -> str:\n        return self._spec[1]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py",
      "line_number": 154
    },
    {
      "name": "version.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    }
  ],
  "dynamic_methods": [
    {
      "function": "version.decode.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/werkzeug/testapp.py",
      "line": 98,
      "caller": "test_version",
      "source_code": "        def strip(x: str) -> str:\n            prefix = os.path.expanduser(\"~\")\n            if x.startswith(prefix):\n                x = f\"~{x[len(prefix) :]}\"\n            return x\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_version",
      "source_code": ""
    },
    {
      "function": "metadata.version",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/packaging/specifiers.py",
      "line": 154,
      "caller": "test_version",
      "source_code": "    @property\n    def version(self) -> str:\n        return self._spec[1]\n\n"
    },
    {
      "function": "version.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/connexion/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_version",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_version(self):\n        version = subprocess.check_output(\n            [sys.executable, \"-W\", \"ignore\", \"-m\", \"jsonschema\", \"--version\"],\n            stderr=subprocess.STDOUT,\n        )\n        version = version.decode(\"utf-8\").strip()\n        self.assertEqual(version, metadata.version(\"jsonschema\"))"
}