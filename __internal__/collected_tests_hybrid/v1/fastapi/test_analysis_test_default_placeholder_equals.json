{
  "test_name": "test_default_placeholder_equals",
  "test_file": "__internal__/_data/fastapi/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "Default",
      "source_code": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line_number": 197
    },
    {
      "name": "Default",
      "source_code": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line_number": 197
    }
  ],
  "dynamic_methods": [
    {
      "function": "Default",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line": 197,
      "caller": "test_default_placeholder_equals",
      "source_code": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore\n"
    },
    {
      "function": "Default",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line": 197,
      "caller": "test_default_placeholder_equals",
      "source_code": "def Default(value: DefaultType) -> DefaultType:\n    \"\"\"\n    You shouldn't use this function directly.\n\n    It's used internally to recognize when a default value has been overwritten, even\n    if the overridden default value was truthy.\n    \"\"\"\n    return DefaultPlaceholder(value)  # type: ignore\n"
    }
  ],
  "assertions": [
    "assert placeholder_1 == placeholder_2",
    "assert placeholder_1.value == placeholder_2.value"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_default_placeholder_equals():\n    placeholder_1 = Default(\"a\")\n    placeholder_2 = Default(\"a\")\n    assert placeholder_1 == placeholder_2\n    assert placeholder_1.value == placeholder_2.value"
}