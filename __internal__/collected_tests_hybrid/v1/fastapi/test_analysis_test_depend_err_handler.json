{
  "test_name": "test_depend_err_handler",
  "test_file": "__internal__/_data/fastapi/tests/test_ws_router.py",
  "static_methods": [
    {
      "name": "make_app",
      "source_code": "def make_app(app=None, **kwargs):\n    app = app or FastAPI(**kwargs)\n    app.include_router(router)\n    app.include_router(prefix_router, prefix=\"/prefix\")\n    app.include_router(native_prefix_route)\n    return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/tests/test_ws_router.py",
      "line_number": 107
    },
    {
      "name": "TestClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.websocket_connect",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "websocket.close",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.websocket_connect",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/tests/test_ws_router.py",
      "line": 107,
      "caller": "test_depend_err_handler",
      "source_code": "def make_app(app=None, **kwargs):\n    app = app or FastAPI(**kwargs)\n    app.include_router(router)\n    app.include_router(prefix_router, prefix=\"/prefix\")\n    app.include_router(native_prefix_route)\n    return app\n\n\n"
    },
    {
      "function": "TestClient",
      "filename": "",
      "line": 0,
      "caller": "test_depend_err_handler",
      "source_code": ""
    },
    {
      "function": "client.websocket_connect",
      "filename": "",
      "line": 0,
      "caller": "test_depend_err_handler",
      "source_code": ""
    },
    {
      "function": "websocket.close",
      "filename": "",
      "line": 0,
      "caller": "test_depend_err_handler",
      "source_code": ""
    },
    {
      "function": "client.websocket_connect",
      "filename": "",
      "line": 0,
      "caller": "test_depend_err_handler",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert e.value.code == 1002",
    "assert 'foo' in e.value.reason"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_depend_err_handler():\n    \"\"\"\n    Verify that it is possible to write custom WebSocket middleware to catch errors\n    \"\"\"\n\n    async def custom_handler(websocket: WebSocket, exc: CustomError) -> None:\n        await websocket.close(1002, \"foo\")\n\n    myapp = make_app(exception_handlers={CustomError: custom_handler})\n    client = TestClient(myapp)\n    with pytest.raises(WebSocketDisconnect) as e:\n        with client.websocket_connect(\"/custom_error/\"):\n            pass  # pragma: no cover\n    assert e.value.code == 1002\n    assert \"foo\" in e.value.reason"
}