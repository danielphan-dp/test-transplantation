{
  "test_name": "test_get_model_config",
  "test_file": "__internal__/_data/fastapi/tests/test_compat.py",
  "static_methods": [
    {
      "name": "Foo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_get_model_config",
      "source_code": "    def _get_model_config(model: BaseModel) -> Any:\n        return model.model_config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line_number": 182
    },
    {
      "name": "ConfigDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "needs_pydanticv2",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Foo",
      "filename": "",
      "line": 0,
      "caller": "test_get_model_config",
      "source_code": ""
    },
    {
      "function": "_get_model_config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line": 182,
      "caller": "test_get_model_config",
      "source_code": "    def _get_model_config(model: BaseModel) -> Any:\n        return model.model_config\n\n"
    },
    {
      "function": "ConfigDict",
      "filename": "",
      "line": 0,
      "caller": "test_get_model_config",
      "source_code": ""
    },
    {
      "function": "needs_pydanticv2",
      "filename": "",
      "line": 0,
      "caller": "test_get_model_config",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert config == {'from_attributes': True}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_model_config():\n    # For coverage in Pydantic v2\n    class Foo(BaseModel):\n        model_config = ConfigDict(from_attributes=True)\n\n    foo = Foo()\n    config = _get_model_config(foo)\n    assert config == {\"from_attributes\": True}"
}