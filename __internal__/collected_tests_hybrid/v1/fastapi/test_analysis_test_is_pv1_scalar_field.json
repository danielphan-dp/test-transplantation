{
  "test_name": "test_is_pv1_scalar_field",
  "test_file": "__internal__/_data/fastapi/tests/test_compat.py",
  "static_methods": [
    {
      "name": "get_model_fields",
      "source_code": "    def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return [\n            ModelField(field_info=field_info, name=name)\n            for name, field_info in model.model_fields.items()\n        ]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line_number": 283
    },
    {
      "name": "is_scalar_field",
      "source_code": "    def is_scalar_field(field: ModelField) -> bool:\n        from fastapi import params",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line_number": 235
    }
  ],
  "dynamic_methods": [
    {
      "function": "get_model_fields",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line": 283,
      "caller": "test_is_pv1_scalar_field",
      "source_code": "    def get_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n        return [\n            ModelField(field_info=field_info, name=name)\n            for name, field_info in model.model_fields.items()\n        ]\n\n"
    },
    {
      "function": "is_scalar_field",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line": 235,
      "caller": "test_is_pv1_scalar_field",
      "source_code": "    def is_scalar_field(field: ModelField) -> bool:\n        from fastapi import params\n\n        return field_annotation_is_scalar(\n            field.field_info.annotation\n        ) and not isinstance(field.field_info, params.Body)\n\n"
    }
  ],
  "assertions": [
    "assert not is_scalar_field(fields[0])"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_is_pv1_scalar_field():\n    # For coverage\n    class Model(BaseModel):\n        foo: Union[str, Dict[str, Any]]\n\n    fields = get_model_fields(Model)\n    assert not is_scalar_field(fields[0])"
}