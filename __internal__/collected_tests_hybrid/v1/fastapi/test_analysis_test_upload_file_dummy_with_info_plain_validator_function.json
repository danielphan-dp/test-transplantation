{
  "test_name": "test_upload_file_dummy_with_info_plain_validator_function",
  "test_file": "__internal__/_data/fastapi/tests/test_compat.py",
  "static_methods": [
    {
      "name": "UploadFile.__get_pydantic_core_schema__",
      "source_code": "    def __get_pydantic_core_schema__(\n        cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n    ) -> CoreSchema:\n        return with_info_plain_validator_function(cls._validate)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line_number": 170
    },
    {
      "name": "needs_pydanticv1",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "UploadFile.__get_pydantic_core_schema__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line": 170,
      "caller": "test_upload_file_dummy_with_info_plain_validator_function",
      "source_code": "    @classmethod\n    def __get_pydantic_core_schema__(\n        cls, source: Type[Any], handler: Callable[[Any], CoreSchema]\n"
    },
    {
      "function": "needs_pydanticv1",
      "filename": "",
      "line": 0,
      "caller": "test_upload_file_dummy_with_info_plain_validator_function",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert UploadFile.__get_pydantic_core_schema__(str, lambda x: None) == {}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_upload_file_dummy_with_info_plain_validator_function():\n    # For coverage\n    assert UploadFile.__get_pydantic_core_schema__(str, lambda x: None) == {}"
}