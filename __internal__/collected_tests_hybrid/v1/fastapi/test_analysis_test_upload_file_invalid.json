{
  "test_name": "test_upload_file_invalid",
  "test_file": "__internal__/_data/fastapi/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "UploadFile.validate",
      "source_code": "        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n        ) -> Tuple[Any, Union[List[Dict[str, Any]], None]]:\n            try:\n                return (\n                    self._type_adapter.validate_python(value, from_attributes=True),\n                    None,\n                )\n            except ValidationError as exc:\n                return None, _regenerate_error_with_loc(\n                    errors=exc.errors(include_url=False), loc_prefix=loc\n                )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line_number": 119
    }
  ],
  "dynamic_methods": [
    {
      "function": "UploadFile.validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/_compat.py",
      "line": 119,
      "caller": "test_upload_file_invalid",
      "source_code": "        def validate(\n            self,\n            value: Any,\n            values: Dict[str, Any] = {},  # noqa: B006\n            *,\n            loc: Tuple[Union[int, str], ...] = (),\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_upload_file_invalid():\n    with pytest.raises(ValueError):\n        UploadFile.validate(\"not a Starlette UploadFile\")"
}