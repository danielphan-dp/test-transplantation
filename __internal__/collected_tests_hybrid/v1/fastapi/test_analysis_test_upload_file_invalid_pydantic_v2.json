{
  "test_name": "test_upload_file_invalid_pydantic_v2",
  "test_file": "__internal__/_data/fastapi/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "UploadFile._validate",
      "source_code": "    def _validate(cls, __input_value: Any, _: Any) -> \"UploadFile\":\n        if not isinstance(__input_value, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(__input_value)}\")\n        return cast(UploadFile, __input_value)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line_number": 152
    }
  ],
  "dynamic_methods": [
    {
      "function": "UploadFile._validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/fastapi/fastapi/datastructures.py",
      "line": 152,
      "caller": "test_upload_file_invalid_pydantic_v2",
      "source_code": "    @classmethod\n    def _validate(cls, __input_value: Any, _: Any) -> \"UploadFile\":\n        if not isinstance(__input_value, StarletteUploadFile):\n            raise ValueError(f\"Expected UploadFile, received: {type(__input_value)}\")\n        return cast(UploadFile, __input_value)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_upload_file_invalid_pydantic_v2():\n    with pytest.raises(ValueError):\n        UploadFile._validate(\"not a Starlette UploadFile\", {})"
}