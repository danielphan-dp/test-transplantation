{
  "test_name": "test_add_template_test",
  "test_file": "__internal__/_data/flask/tests/test_templating.py",
  "static_methods": [
    {
      "name": "app.add_template_test",
      "source_code": "    def add_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n    ) -> None:\n        \"\"\"Register a custom template test.  Works exactly like the\n        :meth:`template_test` decorator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/app.py",
      "line_number": 727
    },
    {
      "name": "app.jinja_env.tests",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.jinja_env.tests.keys",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.add_template_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/app.py",
      "line": 727,
      "caller": "test_add_template_test",
      "source_code": "    @setupmethod\n    def add_template_test(\n        self, f: ft.TemplateTestCallable, name: str | None = None\n"
    },
    {
      "function": "app.jinja_env.tests",
      "filename": "",
      "line": 0,
      "caller": "test_add_template_test",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_template_test",
      "source_code": ""
    },
    {
      "function": "app.jinja_env.tests.keys",
      "filename": "",
      "line": 0,
      "caller": "test_add_template_test",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'boolean' in app.jinja_env.tests.keys()",
    "assert app.jinja_env.tests['boolean'] == boolean",
    "assert app.jinja_env.tests['boolean'](False)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_add_template_test(app):\n    def boolean(value):\n        return isinstance(value, bool)\n\n    app.add_template_test(boolean)\n    assert \"boolean\" in app.jinja_env.tests.keys()\n    assert app.jinja_env.tests[\"boolean\"] == boolean\n    assert app.jinja_env.tests[\"boolean\"](False)"
}