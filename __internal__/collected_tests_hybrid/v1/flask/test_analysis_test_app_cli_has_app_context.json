{
  "test_name": "test_app_cli_has_app_context",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "app.cli.command",
      "source_code": "def command(name: _AnyCallable) -> Command:\n    ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/click/decorators.py",
      "line_number": 137
    },
    {
      "name": "FlaskGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "runner.invoke",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n    ) -> Result:\n        \"\"\"Invokes a command in an isolated environment.  The arguments are\n        forwarded directly to the command line script, the `extra` keyword\n        arguments are passed to the :meth:`~clickpkg.Command.main` function of\n        the command.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/click/testing.py",
      "line_number": 349
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "current_app._get_current_object",
      "source_code": "            def _get_current_object() -> T:\n                try:\n                    return get_name(local)  # type: ignore[return-value]\n                except AttributeError:\n                    raise RuntimeError(unbound_message) from None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/local.py",
      "line_number": 497
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.cli.command",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/click/decorators.py",
      "line": 137,
      "caller": "test_app_cli_has_app_context",
      "source_code": "@t.overload\ndef command(name: _AnyCallable) -> Command:\n    ...\n\n\n"
    },
    {
      "function": "FlaskGroup",
      "filename": "",
      "line": 0,
      "caller": "test_app_cli_has_app_context",
      "source_code": ""
    },
    {
      "function": "runner.invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/click/testing.py",
      "line": 349,
      "caller": "test_app_cli_has_app_context",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n"
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_cli_has_app_context",
      "source_code": ""
    },
    {
      "function": "current_app._get_current_object",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/local.py",
      "line": 497,
      "caller": "test_app_cli_has_app_context",
      "source_code": "            def _get_current_object() -> T:\n                try:\n                    return get_name(local)  # type: ignore[return-value]\n                except AttributeError:\n                    raise RuntimeError(unbound_message) from None\n\n"
    }
  ],
  "assertions": [
    "assert result.return_value == (True, True)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_cli_has_app_context(app, runner):\n    def _param_cb(ctx, param, value):\n        # current_app should be available in parameter callbacks\n        return bool(current_app)\n\n    @app.cli.command()\n    @click.argument(\"value\", callback=_param_cb)\n    def check(value):\n        app = click.get_current_context().obj.load_app()\n        # the loaded app should be the same as current_app\n        same_app = current_app._get_current_object() is app\n        return same_app, value\n\n    cli = FlaskGroup(create_app=lambda: app)\n    result = runner.invoke(cli, [\"check\", \"x\"], standalone_mode=False)\n    assert result.return_value == (True, True)"
}