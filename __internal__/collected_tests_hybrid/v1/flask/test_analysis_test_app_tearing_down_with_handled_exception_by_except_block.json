{
  "test_name": "test_app_tearing_down_with_handled_exception_by_except_block",
  "test_file": "__internal__/_data/flask/tests/test_appctx.py",
  "static_methods": [
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "cleanup_stuff.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Exception",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_handled_exception_by_except_block"
    },
    {
      "function": "cleanup_stuff.append",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_handled_exception_by_except_block"
    },
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_handled_exception_by_except_block"
    },
    {
      "function": "Exception",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_handled_exception_by_except_block"
    }
  ],
  "assertions": [
    "assert cleanup_stuff == [None]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_tearing_down_with_handled_exception_by_except_block(app):\n    cleanup_stuff = []\n\n    @app.teardown_appcontext\n    def cleanup(exception):\n        cleanup_stuff.append(exception)\n\n    with app.app_context():\n        try:\n            raise Exception(\"dummy\")\n        except Exception:\n            pass\n\n    assert cleanup_stuff == [None]"
}