{
  "test_name": "test_app_tearing_down_with_unhandled_exception",
  "test_file": "__internal__/_data/flask/tests/test_appctx.py",
  "static_methods": [
    "app.route",
    "app.app_context",
    "isinstance",
    "cleanup_stuff.append",
    "ValueError",
    "len",
    "str",
    "app.app_context",
    "client.get"
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "cleanup_stuff.append",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "ValueError",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "len",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "str",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_app_tearing_down_with_unhandled_exception"
    }
  ],
  "assertions": [
    "assert len(cleanup_stuff) == 1",
    "assert isinstance(cleanup_stuff[0], ValueError)",
    "assert str(cleanup_stuff[0]) == 'dummy'"
  ],
  "mocks": [],
  "success": true
}