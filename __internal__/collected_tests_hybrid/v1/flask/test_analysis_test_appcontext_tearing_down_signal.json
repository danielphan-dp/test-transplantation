{
  "test_name": "test_appcontext_tearing_down_signal",
  "test_file": "__internal__/_data/flask/tests/test_signals.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "recorded.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_appcontext_tearing_down_signal"
    },
    {
      "function": "recorded.append",
      "filename": "",
      "line": 0,
      "caller": "test_appcontext_tearing_down_signal"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_appcontext_tearing_down_signal"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_appcontext_tearing_down_signal"
    },
    {
      "function": "len",
      "filename": "",
      "line": 0,
      "caller": "test_appcontext_tearing_down_signal"
    }
  ],
  "assertions": [
    "assert rv.status_code == 500",
    "assert len(recorded) == 1",
    "assert isinstance(recorded[0], ZeroDivisionError)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_appcontext_tearing_down_signal(app, client):\n    app.testing = False\n    recorded = []\n\n    def record_teardown(sender, exc):\n        recorded.append(exc)\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    flask.appcontext_tearing_down.connect(record_teardown, app)\n    try:\n        rv = client.get(\"/\")\n        assert rv.status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.appcontext_tearing_down.disconnect(record_teardown, app)"
}