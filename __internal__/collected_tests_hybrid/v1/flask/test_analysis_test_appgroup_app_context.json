{
  "test_name": "test_appgroup_app_context",
  "test_file": "__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "cli.command",
      "source_code": "    def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Command]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line_number": 413
    },
    {
      "name": "cli.group",
      "source_code": "    def group(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Group]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it defaults the group class to\n        :class:`AppGroup`.\n        \"\"\"\n        kwargs.setdefault(\"cls\", AppGroup)\n        return super().group(*args, **kwargs)  # type: ignore[no-any-return]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line_number": 429
    },
    {
      "name": "subgroup.command",
      "source_code": "    def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n    ) -> t.Callable[[t.Callable[..., t.Any]], click.Command]:\n        \"\"\"This works exactly like the method of the same name on a regular\n        :class:`click.Group` but it wraps callbacks in :func:`with_appcontext`\n        unless it's disabled by passing ``with_appcontext=False``.\n        \"\"\"\n        wrap_for_ctx = kwargs.pop(\"with_appcontext\", True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line_number": 413
    },
    {
      "name": "ScriptInfo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "runner.invoke",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line_number": 275
    },
    {
      "name": "runner.invoke",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line_number": 275
    },
    {
      "name": "Flask",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "cli.command",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line": 413,
      "caller": "test_appgroup_app_context",
      "source_code": "    def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n"
    },
    {
      "function": "cli.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line": 429,
      "caller": "test_appgroup_app_context",
      "source_code": "    def group(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n"
    },
    {
      "function": "subgroup.command",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/cli.py",
      "line": 413,
      "caller": "test_appgroup_app_context",
      "source_code": "    def command(  # type: ignore[override]\n        self, *args: t.Any, **kwargs: t.Any\n"
    },
    {
      "function": "ScriptInfo",
      "filename": "",
      "line": 0,
      "caller": "test_appgroup_app_context",
      "source_code": ""
    },
    {
      "function": "runner.invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line": 275,
      "caller": "test_appgroup_app_context",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n"
    },
    {
      "function": "runner.invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line": 275,
      "caller": "test_appgroup_app_context",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n"
    },
    {
      "function": "Flask",
      "filename": "",
      "line": 0,
      "caller": "test_appgroup_app_context",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert result.exit_code == 0",
    "assert result.output == 'testappgroup\\n'",
    "assert result.exit_code == 0",
    "assert result.output == 'testappgroup\\n'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_appgroup_app_context(runner):\n    @click.group(cls=AppGroup)\n    def cli():\n        pass\n\n    @cli.command()\n    def test():\n        click.echo(current_app.name)\n\n    @cli.group()\n    def subgroup():\n        pass\n\n    @subgroup.command()\n    def test2():\n        click.echo(current_app.name)\n\n    obj = ScriptInfo(create_app=lambda: Flask(\"testappgroup\"))\n\n    result = runner.invoke(cli, [\"test\"], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testappgroup\\n\"\n\n    result = runner.invoke(cli, [\"subgroup\", \"test2\"], obj=obj)\n    assert result.exit_code == 0\n    assert result.output == \"testappgroup\\n\""
}