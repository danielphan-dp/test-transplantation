{
  "test_name": "test_author_required",
  "test_file": "__internal__/_data/flask/examples/tutorial/tests/test_blog.py",
  "static_methods": [
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "auth.login",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_db",
      "source_code": "def get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/tutorial/flaskr/db.py",
      "line_number": 9
    },
    {
      "name": "db.execute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "db.commit",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "auth.login",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "get_db",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/tutorial/flaskr/db.py",
      "line": 9,
      "caller": "test_author_required"
    },
    {
      "function": "db.execute",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "db.commit",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_author_required"
    }
  ],
  "assertions": [
    "assert client.post('/1/update').status_code == 403",
    "assert client.post('/1/delete').status_code == 403",
    "assert b'href=\"/1/update\"' not in client.get('/').data"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_author_required(app, client, auth):\n    # change the post author to another user\n    with app.app_context():\n        db = get_db()\n        db.execute(\"UPDATE post SET author_id = 2 WHERE id = 1\")\n        db.commit()\n\n    auth.login()\n    # current user can't modify other user's post\n    assert client.post(\"/1/update\").status_code == 403\n    assert client.post(\"/1/delete\").status_code == 403\n    # current user doesn't see edit link\n    assert b'href=\"/1/update\"' not in client.get(\"/\").data"
}