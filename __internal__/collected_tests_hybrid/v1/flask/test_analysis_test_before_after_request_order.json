{
  "test_name": "test_before_after_request_order",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/scaffold.py",
      "line_number": 336
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line_number": 88
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sansio/scaffold.py",
      "line": 336,
      "caller": "test_before_after_request_order",
      "source_code": "    @setupmethod\n    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n        \"\"\"Decorate a view function to register it with the given URL\n        rule and options. Calls :meth:`add_url_rule`, which has more\n        details about the implementation.\n\n        .. code-block:: python\n\n            @app.route(\"/\")\n            def index():\n                return \"Hello, World!\"\n\n        See :ref:`url-route-registrations`.\n\n        The endpoint name for the route defaults to the name of the view\n        function if the ``endpoint`` parameter isn't passed.\n\n        The ``methods`` parameter defaults to ``[\"GET\"]``. ``HEAD`` and\n        ``OPTIONS`` are added automatically.\n\n        :param rule: The URL rule string.\n        :param options: Extra options passed to the\n            :class:`~werkzeug.routing.Rule` object.\n        \"\"\"\n\n        def decorator(f: T_route) -> T_route:\n            endpoint = options.pop(\"endpoint\", None)\n            self.add_url_rule(rule, endpoint, f, **options)\n            return f\n\n        return decorator\n\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line": 88,
      "caller": "test_before_after_request_order",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)\n\n"
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_before_after_request_order",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert rv.data == b'42'",
    "assert called == [1, 2, 3, 4, 5, 6]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_before_after_request_order(app, client):\n    called = []\n\n    @app.before_request\n    def before1():\n        called.append(1)\n\n    @app.before_request\n    def before2():\n        called.append(2)\n\n    @app.after_request\n    def after1(response):\n        called.append(4)\n        return response\n\n    @app.after_request\n    def after2(response):\n        called.append(3)\n        return response\n\n    @app.teardown_request\n    def finish1(exc):\n        called.append(6)\n\n    @app.teardown_request\n    def finish2(exc):\n        called.append(5)\n\n    @app.route(\"/\")\n    def index():\n        return \"42\"\n\n    rv = client.get(\"/\")\n    assert rv.data == b\"42\"\n    assert called == [1, 2, 3, 4, 5, 6]"
}