{
  "test_name": "test_blueprint_specific_error_handling",
  "test_file": "__internal__/_data/flask/tests/test_blueprints.py",
  "static_methods": [
    {
      "name": "frontend.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "frontend.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "backend.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "backend.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sideend.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.register_blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.register_blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.register_blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "frontend.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "frontend.route",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "backend.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "backend.route",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "sideend.route",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_specific_error_handling"
    }
  ],
  "assertions": [
    "assert client.get('/frontend-no').data == b'frontend says no'",
    "assert client.get('/backend-no').data == b'backend says no'",
    "assert client.get('/what-is-a-sideend').data == b'application itself says no'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_blueprint_specific_error_handling(app, client):\n    frontend = flask.Blueprint(\"frontend\", __name__)\n    backend = flask.Blueprint(\"backend\", __name__)\n    sideend = flask.Blueprint(\"sideend\", __name__)\n\n    @frontend.errorhandler(403)\n    def frontend_forbidden(e):\n        return \"frontend says no\", 403\n\n    @frontend.route(\"/frontend-no\")\n    def frontend_no():\n        flask.abort(403)\n\n    @backend.errorhandler(403)\n    def backend_forbidden(e):\n        return \"backend says no\", 403\n\n    @backend.route(\"/backend-no\")\n    def backend_no():\n        flask.abort(403)\n\n    @sideend.route(\"/what-is-a-sideend\")\n    def sideend_no():\n        flask.abort(403)\n\n    app.register_blueprint(frontend)\n    app.register_blueprint(backend)\n    app.register_blueprint(sideend)\n\n    @app.errorhandler(403)\n    def app_forbidden(e):\n        return \"application itself says no\", 403\n\n    assert client.get(\"/frontend-no\").data == b\"frontend says no\"\n    assert client.get(\"/backend-no\").data == b\"backend says no\"\n    assert client.get(\"/what-is-a-sideend\").data == b\"application itself says no\""
}