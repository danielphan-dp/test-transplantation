{
  "test_name": "test_default_error_handler",
  "test_file": "__internal__/_data/flask/tests/test_user_error_handler.py",
  "static_methods": [
    "bp.errorhandler",
    "bp.errorhandler",
    "bp.route",
    "bp.route",
    "app.errorhandler",
    "app.errorhandler",
    "app.route",
    "app.route",
    "app.register_blueprint",
    "app.test_client",
    "isinstance",
    "isinstance",
    "isinstance",
    "NotFound",
    "Forbidden",
    "isinstance",
    "isinstance",
    "isinstance",
    "Forbidden",
    "c.get",
    "c.get",
    "c.get",
    "c.get",
    "c.get"
  ],
  "dynamic_methods": [
    {
      "function": "bp.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "bp.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "bp.route",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "bp.route",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "app.test_client",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "NotFound",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "Forbidden",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "Forbidden",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_default_error_handler"
    }
  ],
  "assertions": [
    "assert c.get('/bp/undefined').data == b'bp-default'",
    "assert c.get('/bp/forbidden').data == b'bp-forbidden'",
    "assert c.get('/undefined').data == b'default'",
    "assert c.get('/forbidden').data == b'forbidden'",
    "assert c.get('/slash', follow_redirects=True).data == b'slash'",
    "assert isinstance(e, HTTPException)",
    "assert isinstance(e, NotFound)",
    "assert isinstance(e, Forbidden)",
    "assert isinstance(e, HTTPException)",
    "assert isinstance(e, NotFound)",
    "assert isinstance(e, Forbidden)"
  ],
  "mocks": [],
  "success": true
}