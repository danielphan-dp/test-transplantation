{
  "test_name": "test_empty_url_defaults",
  "test_file": "__internal__/_data/flask/tests/test_blueprints.py",
  "static_methods": [
    {
      "name": "bp.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bp.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.register_blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "bp.route",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    },
    {
      "function": "bp.route",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    },
    {
      "function": "str",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_empty_url_defaults"
    }
  ],
  "assertions": [
    "assert client.get('/').data == b'1'",
    "assert client.get('/page/2').data == b'2'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_empty_url_defaults(app, client):\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.route(\"/\", defaults={\"page\": 1})\n    @bp.route(\"/page/<int:page>\")\n    def something(page):\n        return str(page)\n\n    app.register_blueprint(bp)\n\n    assert client.get(\"/\").data == b\"1\"\n    assert client.get(\"/page/2\").data == b\"2\""
}