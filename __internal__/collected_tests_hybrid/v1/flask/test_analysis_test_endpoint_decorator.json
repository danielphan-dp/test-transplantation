{
  "test_name": "test_endpoint_decorator",
  "test_file": "__internal__/_data/flask/tests/test_blueprints.py",
  "static_methods": [
    {
      "name": "app.url_map.add",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bp.endpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.register_blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.url_map.add",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    },
    {
      "function": "bp.endpoint",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    },
    {
      "function": "Rule",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_endpoint_decorator"
    }
  ],
  "assertions": [
    "assert client.get('/foo').data == b'bar'",
    "assert client.get('/bp_prefix/bar').status_code == 404"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_endpoint_decorator(app, client):\n    from werkzeug.routing import Rule\n\n    app.url_map.add(Rule(\"/foo\", endpoint=\"bar\"))\n\n    bp = flask.Blueprint(\"bp\", __name__)\n\n    @bp.endpoint(\"bar\")\n    def foobar():\n        return flask.request.endpoint\n\n    app.register_blueprint(bp, url_prefix=\"/bp_prefix\")\n\n    assert client.get(\"/foo\").data == b\"bar\"\n    assert client.get(\"/bp_prefix/bar\").status_code == 404"
}