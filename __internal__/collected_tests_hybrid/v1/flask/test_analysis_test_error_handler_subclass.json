{
  "test_name": "test_error_handler_subclass",
  "test_file": "__internal__/_data/flask/tests/test_user_error_handler.py",
  "static_methods": [
    {
      "name": "app.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ParentException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ChildExceptionUnregistered",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ChildExceptionRegistered",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "app.test_client",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "ParentException",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "ChildExceptionUnregistered",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "ChildExceptionRegistered",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    },
    {
      "function": "c.get",
      "filename": "",
      "line": 0,
      "caller": "test_error_handler_subclass"
    }
  ],
  "assertions": [
    "assert c.get('/parent').data == b'parent'",
    "assert c.get('/child-unregistered').data == b'parent'",
    "assert c.get('/child-registered').data == b'child-registered'",
    "assert isinstance(e, ParentException)",
    "assert isinstance(e, ChildExceptionRegistered)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_error_handler_subclass(app):\n    class ParentException(Exception):\n        pass\n\n    class ChildExceptionUnregistered(ParentException):\n        pass\n\n    class ChildExceptionRegistered(ParentException):\n        pass\n\n    @app.errorhandler(ParentException)\n    def parent_exception_handler(e):\n        assert isinstance(e, ParentException)\n        return \"parent\"\n\n    @app.errorhandler(ChildExceptionRegistered)\n    def child_exception_handler(e):\n        assert isinstance(e, ChildExceptionRegistered)\n        return \"child-registered\"\n\n    @app.route(\"/parent\")\n    def parent_test():\n        raise ParentException()\n\n    @app.route(\"/child-unregistered\")\n    def unregistered_test():\n        raise ChildExceptionUnregistered()\n\n    @app.route(\"/child-registered\")\n    def registered_test():\n        raise ChildExceptionRegistered()\n\n    c = app.test_client()\n\n    assert c.get(\"/parent\").data == b\"parent\"\n    assert c.get(\"/child-unregistered\").data == b\"parent\"\n    assert c.get(\"/child-registered\").data == b\"child-registered\""
}