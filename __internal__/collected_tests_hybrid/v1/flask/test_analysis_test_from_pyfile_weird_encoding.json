{
  "test_name": "test_from_pyfile_weird_encoding",
  "test_file": "__internal__/_data/flask/tests/test_config.py",
  "static_methods": [
    {
      "name": "f.write_text",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.config.from_pyfile",
      "source_code": "    def from_pyfile(\n        self, filename: str | os.PathLike[str], silent: bool = False\n    ) -> bool:\n        \"\"\"Updates the values in the config from a Python file.  This function\n        behaves as if the file was imported as module with the\n        :meth:`from_object` function.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line_number": 187
    }
  ],
  "dynamic_methods": [
    {
      "function": "f.write_text",
      "filename": "",
      "line": 0,
      "caller": "test_from_pyfile_weird_encoding",
      "source_code": ""
    },
    {
      "function": "app.config.from_pyfile",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line": 187,
      "caller": "test_from_pyfile_weird_encoding",
      "source_code": "    def from_pyfile(\n        self, filename: str | os.PathLike[str], silent: bool = False\n"
    }
  ],
  "assertions": [
    "assert value == 'f\u00f6\u00f6'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_from_pyfile_weird_encoding(tmp_path, encoding):\n    f = tmp_path / \"my_config.py\"\n    f.write_text(f'# -*- coding: {encoding} -*-\\nTEST_VALUE = \"f\u00f6\u00f6\"\\n', encoding)\n    app = flask.Flask(__name__)\n    app.config.from_pyfile(os.fspath(f))\n    value = app.config[\"TEST_VALUE\"]\n    assert value == \"f\u00f6\u00f6\""
}