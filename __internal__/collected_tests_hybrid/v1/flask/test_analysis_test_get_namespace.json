{
  "test_name": "test_get_namespace",
  "test_file": "__internal__/_data/flask/tests/test_config.py",
  "static_methods": [
    {
      "name": "app.config.get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line_number": 323
    },
    {
      "name": "app.config.get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line_number": 323
    },
    {
      "name": "app.config.get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line_number": 323
    },
    {
      "name": "app.config.get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n    ) -> dict[str, t.Any]:\n        \"\"\"Returns a dictionary containing a subset of configuration options\n        that match the specified namespace/prefix. Example usage::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line_number": 323
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.config.get_namespace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line": 323,
      "caller": "test_get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n"
    },
    {
      "function": "app.config.get_namespace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line": 323,
      "caller": "test_get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n"
    },
    {
      "function": "app.config.get_namespace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line": 323,
      "caller": "test_get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n"
    },
    {
      "function": "app.config.get_namespace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/config.py",
      "line": 323,
      "caller": "test_get_namespace",
      "source_code": "    def get_namespace(\n        self, namespace: str, lowercase: bool = True, trim_namespace: bool = True\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_namespace",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_namespace",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_namespace",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_namespace",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 2 == len(foo_options)",
    "assert 'foo option 1' == foo_options['option_1']",
    "assert 'foo option 2' == foo_options['option_2']",
    "assert 2 == len(bar_options)",
    "assert 'bar stuff 1' == bar_options['STUFF_1']",
    "assert 'bar stuff 2' == bar_options['STUFF_2']",
    "assert 2 == len(foo_options)",
    "assert 'foo option 1' == foo_options['foo_option_1']",
    "assert 'foo option 2' == foo_options['foo_option_2']",
    "assert 2 == len(bar_options)",
    "assert 'bar stuff 1' == bar_options['BAR_STUFF_1']",
    "assert 'bar stuff 2' == bar_options['BAR_STUFF_2']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_namespace():\n    app = flask.Flask(__name__)\n    app.config[\"FOO_OPTION_1\"] = \"foo option 1\"\n    app.config[\"FOO_OPTION_2\"] = \"foo option 2\"\n    app.config[\"BAR_STUFF_1\"] = \"bar stuff 1\"\n    app.config[\"BAR_STUFF_2\"] = \"bar stuff 2\"\n    foo_options = app.config.get_namespace(\"FOO_\")\n    assert 2 == len(foo_options)\n    assert \"foo option 1\" == foo_options[\"option_1\"]\n    assert \"foo option 2\" == foo_options[\"option_2\"]\n    bar_options = app.config.get_namespace(\"BAR_\", lowercase=False)\n    assert 2 == len(bar_options)\n    assert \"bar stuff 1\" == bar_options[\"STUFF_1\"]\n    assert \"bar stuff 2\" == bar_options[\"STUFF_2\"]\n    foo_options = app.config.get_namespace(\"FOO_\", trim_namespace=False)\n    assert 2 == len(foo_options)\n    assert \"foo option 1\" == foo_options[\"foo_option_1\"]\n    assert \"foo option 2\" == foo_options[\"foo_option_2\"]\n    bar_options = app.config.get_namespace(\n        \"BAR_\", lowercase=False, trim_namespace=False\n    )\n    assert 2 == len(bar_options)\n    assert \"bar stuff 1\" == bar_options[\"BAR_STUFF_1\"]\n    assert \"bar stuff 2\" == bar_options[\"BAR_STUFF_2\"]"
}