{
  "test_name": "test_get_version",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "MockCtx",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_version",
      "source_code": "        def get_version(path_map, info_dir):\n            version = path = None\n            key = '%s/%s' % (info_dir, LEGACY_METADATA_FILENAME)\n            if key not in path_map:\n                key = '%s/PKG-INFO' % info_dir\n            if key in path_map:\n                path = path_map[key]\n                version = Metadata(path=path).version\n            return version, path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 893
    },
    {
      "name": "capsys.readouterr",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "MockCtx",
      "filename": "",
      "line": 0,
      "caller": "test_get_version",
      "source_code": ""
    },
    {
      "function": "get_version",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 893,
      "caller": "test_get_version",
      "source_code": "        def get_version(path_map, info_dir):\n            version = path = None\n            key = '%s/%s' % (info_dir, LEGACY_METADATA_FILENAME)\n            if key not in path_map:\n                key = '%s/PKG-INFO' % info_dir\n            if key in path_map:\n                path = path_map[key]\n                version = Metadata(path=path).version\n            return version, path\n\n"
    },
    {
      "function": "capsys.readouterr",
      "filename": "",
      "line": 0,
      "caller": "test_get_version",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert f'Python {platform.python_version()}' in out",
    "assert f\"Flask {importlib.metadata.version('flask')}\" in out",
    "assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_version(test_apps, capsys):\n    class MockCtx:\n        resilient_parsing = False\n        color = None\n\n        def exit(self):\n            return\n\n    ctx = MockCtx()\n    get_version(ctx, None, \"test\")\n    out, err = capsys.readouterr()\n    assert f\"Python {platform.python_version()}\" in out\n    assert f\"Flask {importlib.metadata.version('flask')}\" in out\n    assert f\"Werkzeug {importlib.metadata.version('werkzeug')}\" in out"
}