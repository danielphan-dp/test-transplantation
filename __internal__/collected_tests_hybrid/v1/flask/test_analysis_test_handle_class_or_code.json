{
  "test_name": "test_handle_class_or_code",
  "test_file": "__internal__/_data/flask/tests/test_user_error_handler.py",
  "static_methods": [
    {
      "name": "app.errorhandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.report_error",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.errorhandler",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "self.report_error",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_handle_class_or_code"
    }
  ],
  "assertions": [
    "assert client.get('/custom').data == b'wrapped Custom'",
    "assert client.get('/error').data == b'wrapped KeyError'",
    "assert client.get('/abort').data == b'direct InternalServerError'",
    "assert client.get('/raise').data == b'direct InternalServerError'",
    "assert isinstance(e, InternalServerError)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_handle_class_or_code(self, app, client, to_handle):\n        \"\"\"``InternalServerError`` and ``500`` are aliases, they should\n        have the same behavior. Both should only receive\n        ``InternalServerError``, which might wrap another error.\n        \"\"\"\n\n        @app.errorhandler(to_handle)\n        def handle_500(e):\n            assert isinstance(e, InternalServerError)\n            return self.report_error(e)\n\n        assert client.get(\"/custom\").data == b\"wrapped Custom\"\n        assert client.get(\"/error\").data == b\"wrapped KeyError\"\n        assert client.get(\"/abort\").data == b\"direct InternalServerError\"\n        assert client.get(\"/raise\").data == b\"direct InternalServerError\""
}