{
  "test_name": "test_installed_package_paths",
  "test_file": "__internal__/_data/flask/tests/test_instance_config.py",
  "static_methods": [
    {
      "name": "installed_path.mkdir",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.syspath_prepend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.mkdir",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "write_text",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "purge_module",
      "source_code": "def purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/conftest.py",
      "line_number": 156
    }
  ],
  "dynamic_methods": [
    {
      "function": "installed_path.mkdir",
      "filename": "",
      "line": 0,
      "caller": "test_installed_package_paths",
      "source_code": ""
    },
    {
      "function": "monkeypatch.syspath_prepend",
      "filename": "",
      "line": 0,
      "caller": "test_installed_package_paths",
      "source_code": ""
    },
    {
      "function": "app.mkdir",
      "filename": "",
      "line": 0,
      "caller": "test_installed_package_paths",
      "source_code": ""
    },
    {
      "function": "write_text",
      "filename": "",
      "line": 0,
      "caller": "test_installed_package_paths",
      "source_code": ""
    },
    {
      "function": "purge_module",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/conftest.py",
      "line": 156,
      "caller": "test_installed_package_paths",
      "source_code": "@pytest.fixture\ndef purge_module(request):\n    def inner(name):\n        request.addfinalizer(lambda: sys.modules.pop(name, None))\n\n    return inner\n"
    }
  ],
  "assertions": [
    "assert app.instance_path == os.fspath(modules_tmp_path / 'var' / 'installed_package-instance')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_installed_package_paths(\n    limit_loader, modules_tmp_path, modules_tmp_path_prefix, purge_module, monkeypatch\n):\n    installed_path = modules_tmp_path / \"path\"\n    installed_path.mkdir()\n    monkeypatch.syspath_prepend(installed_path)\n\n    app = installed_path / \"installed_package\"\n    app.mkdir()\n    (app / \"__init__.py\").write_text(\"import flask\\napp = flask.Flask(__name__)\\n\")\n    purge_module(\"installed_package\")\n\n    from installed_package import app\n\n    assert app.instance_path == os.fspath(\n        modules_tmp_path / \"var\" / \"installed_package-instance\"\n    )"
}