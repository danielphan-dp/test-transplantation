{
  "test_name": "test_json_as_unicode",
  "test_file": "__internal__/_data/flask/tests/test_json.py",
  "static_methods": [
    {
      "name": "app.json.dumps",
      "source_code": "    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line_number": 41
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.json.dumps",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line": 41,
      "caller": "test_json_as_unicode",
      "source_code": "    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError\n\n"
    }
  ],
  "assertions": [
    "assert rv == expected"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_json_as_unicode(test_value, expected, app, app_ctx):\n    app.json.ensure_ascii = test_value\n    rv = app.json.dumps(\"\\N{SNOWMAN}\")\n    assert rv == expected"
}