{
  "test_name": "test_json_dump_dataclass",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "make_dataclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.json.dumps",
      "source_code": "    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line_number": 41
    },
    {
      "name": "app.json.loads",
      "source_code": "    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line_number": 59
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_dataclass",
      "filename": "",
      "line": 0,
      "caller": "test_json_dump_dataclass",
      "source_code": ""
    },
    {
      "function": "app.json.dumps",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line": 41,
      "caller": "test_json_dump_dataclass",
      "source_code": "    def dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n        \"\"\"Serialize data as JSON.\n\n        :param obj: The data to serialize.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "app.json.loads",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/json/provider.py",
      "line": 59,
      "caller": "test_json_dump_dataclass",
      "source_code": "    def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n        \"\"\"Deserialize data as JSON.\n\n        :param s: Text or UTF-8 bytes.\n        :param kwargs: May be passed to the underlying JSON library.\n        \"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_json_dump_dataclass",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert value == {'name': 'Flask'}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_json_dump_dataclass(app, req_ctx):\n    from dataclasses import make_dataclass\n\n    Data = make_dataclass(\"Data\", [(\"name\", str)])\n    value = app.json.dumps(Data(\"Flask\"))\n    value = app.json.loads(value)\n    assert value == {\"name\": \"Flask\"}"
}