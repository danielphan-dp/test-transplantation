{
  "test_name": "test_methods_var_inheritance",
  "test_file": "__internal__/_data/flask/tests/test_views.py",
  "static_methods": [
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ChildView.as_view",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.open",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_methods_var_inheritance"
    },
    {
      "function": "ChildView.as_view",
      "filename": "",
      "line": 0,
      "caller": "test_methods_var_inheritance"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_methods_var_inheritance"
    },
    {
      "function": "client.open",
      "filename": "",
      "line": 0,
      "caller": "test_methods_var_inheritance"
    }
  ],
  "assertions": [
    "assert client.get('/').data == b'GET'",
    "assert client.open('/', method='PROPFIND').data == b'PROPFIND'",
    "assert ChildView.methods == {'PROPFIND', 'GET'}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_methods_var_inheritance(app, client):\n    class BaseView(flask.views.MethodView):\n        methods = [\"GET\", \"PROPFIND\"]\n\n    class ChildView(BaseView):\n        def get(self):\n            return \"GET\"\n\n        def propfind(self):\n            return \"PROPFIND\"\n\n    app.add_url_rule(\"/\", view_func=ChildView.as_view(\"index\"))\n\n    assert client.get(\"/\").data == b\"GET\"\n    assert client.open(\"/\", method=\"PROPFIND\").data == b\"PROPFIND\"\n    assert ChildView.methods == {\"PROPFIND\", \"GET\"}"
}