{
  "test_name": "test_nested_callback_order",
  "test_file": "__internal__/_data/flask/tests/test_blueprints.py",
  "static_methods": [
    "child.route",
    "child.route",
    "parent.register_blueprint",
    "app.register_blueprint",
    "dict",
    "dict",
    "dict",
    "join",
    "client.get",
    "client.get"
  ],
  "dynamic_methods": [
    {
      "function": "child.route",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "child.route",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "parent.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "app.register_blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "dict",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "dict",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "dict",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "join",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_nested_callback_order"
    }
  ],
  "assertions": [
    "assert client.get('/a').data == b'app_1, app_2, parent_1, parent_2, child_1, child_2'",
    "assert client.get('/b').data == b'child'",
    "assert flask.g.seen.pop() == 'app_1'",
    "assert flask.g.seen.pop() == 'app_2'",
    "assert flask.g.seen.pop() == 'parent_1'",
    "assert flask.g.seen.pop() == 'parent_2'",
    "assert flask.g.seen.pop() == 'child_1'",
    "assert flask.g.seen.pop() == 'child_2'"
  ],
  "mocks": [],
  "success": true
}