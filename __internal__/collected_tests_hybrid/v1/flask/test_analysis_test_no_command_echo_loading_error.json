{
  "test_name": "test_no_command_echo_loading_error",
  "test_file": "__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "runner.invoke",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CliRunner",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CliRunner",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "runner.invoke",
      "filename": "",
      "line": 0,
      "caller": "test_no_command_echo_loading_error"
    },
    {
      "function": "CliRunner",
      "filename": "",
      "line": 0,
      "caller": "test_no_command_echo_loading_error"
    },
    {
      "function": "CliRunner",
      "filename": "",
      "line": 0,
      "caller": "test_no_command_echo_loading_error"
    }
  ],
  "assertions": [
    "assert result.exit_code == 2",
    "assert 'FLASK_APP' in result.stderr",
    "assert 'Usage:' in result.stderr"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_no_command_echo_loading_error():\n    from flask.cli import cli\n\n    try:\n        runner = CliRunner(mix_stderr=False)\n    except (DeprecationWarning, TypeError):\n        # Click >= 8.2\n        runner = CliRunner()\n\n    result = runner.invoke(cli, [\"missing\"])\n    assert result.exit_code == 2\n    assert \"FLASK_APP\" in result.stderr\n    assert \"Usage:\" in result.stderr"
}