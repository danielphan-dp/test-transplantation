{
  "test_name": "test_no_setup_after_first_request",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_no_setup_after_first_request"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_no_setup_after_first_request"
    },
    {
      "function": "str",
      "filename": "",
      "line": 0,
      "caller": "test_no_setup_after_first_request"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_no_setup_after_first_request"
    }
  ],
  "assertions": [
    "assert client.get('/').data == b'Awesome'",
    "assert \"setup method 'add_url_rule'\" in str(exc_info.value)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_no_setup_after_first_request(app, client):\n    app.debug = True\n\n    @app.route(\"/\")\n    def index():\n        return \"Awesome\"\n\n    assert client.get(\"/\").data == b\"Awesome\"\n\n    with pytest.raises(AssertionError) as exc_info:\n        app.add_url_rule(\"/foo\", endpoint=\"late\")\n\n    assert \"setup method 'add_url_rule'\" in str(exc_info.value)"
}