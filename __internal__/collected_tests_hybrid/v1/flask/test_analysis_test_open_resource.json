{
  "test_name": "test_open_resource",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_helpers.py",
  "static_methods": [
    {
      "name": "app.open_resource",
      "source_code": "    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/app.py",
      "line_number": 330
    },
    {
      "name": "app.open_resource",
      "source_code": "    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n    ) -> t.IO[t.AnyStr]:\n        \"\"\"Open a resource file relative to :attr:`root_path` for reading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/app.py",
      "line_number": 330
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.read",
      "source_code": "            def read() -> t.Iterator[bytes]:\n                while True:\n                    try:\n                        data = resp.read(self.chunk_size)\n                    except OSError:\n                        break",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/middleware/http_proxy.py",
      "line_number": 209
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.open_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/app.py",
      "line": 330,
      "caller": "test_open_resource",
      "source_code": "    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n"
    },
    {
      "function": "app.open_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/app.py",
      "line": 330,
      "caller": "test_open_resource",
      "source_code": "    def open_resource(\n        self, resource: str, mode: str = \"rb\", encoding: str | None = None\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_open_resource",
      "source_code": ""
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/middleware/http_proxy.py",
      "line": 209,
      "caller": "test_open_resource",
      "source_code": "            def read() -> t.Iterator[bytes]:\n                while True:\n                    try:\n                        data = resp.read(self.chunk_size)\n                    except OSError:\n                        break\n\n                    if not data:\n                        break\n\n                    yield data\n\n"
    }
  ],
  "assertions": [
    "assert '<h1>Hello World!</h1>' in str(f.read())"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_open_resource(mode):\n    app = flask.Flask(__name__)\n\n    with app.open_resource(\"static/index.html\", mode) as f:\n        assert \"<h1>Hello World!</h1>\" in str(f.read())"
}