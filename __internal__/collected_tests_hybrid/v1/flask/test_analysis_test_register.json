{
  "test_name": "test_register",
  "test_file": "__internal__/_data/flask/examples/tutorial/tests/test_auth.py",
  "static_methods": [
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.app_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_db.execute.fetchone",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_db.execute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "get_db",
      "source_code": "def get_db():\n    \"\"\"Connect to the application's configured database. The connection\n    is unique for each request and will be reused if this is called\n    again.\n    \"\"\"\n    if \"db\" not in g:\n        g.db = sqlite3.connect(\n            current_app.config[\"DATABASE\"], detect_types=sqlite3.PARSE_DECLTYPES\n        )\n        g.db.row_factory = sqlite3.Row\n\n    return g.db",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/tutorial/flaskr/db.py",
      "line_number": 9
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "app.app_context",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "get_db.execute.fetchone",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "get_db.execute",
      "filename": "",
      "line": 0,
      "caller": "test_register"
    },
    {
      "function": "get_db",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/tutorial/flaskr/db.py",
      "line": 9,
      "caller": "test_register"
    }
  ],
  "assertions": [
    "assert client.get('/auth/register').status_code == 200",
    "assert response.headers['Location'] == '/auth/login'",
    "assert get_db().execute(\"SELECT * FROM user WHERE username = 'a'\").fetchone() is not None"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_register(client, app):\n    # test that viewing the page renders without template errors\n    assert client.get(\"/auth/register\").status_code == 200\n\n    # test that successful registration redirects to the login page\n    response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n    assert response.headers[\"Location\"] == \"/auth/login\"\n\n    # test that the user was inserted into the database\n    with app.app_context():\n        assert (\n            get_db().execute(\"SELECT * FROM user WHERE username = 'a'\").fetchone()\n            is not None\n        )"
}