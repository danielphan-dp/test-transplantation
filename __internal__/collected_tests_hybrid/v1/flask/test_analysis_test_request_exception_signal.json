{
  "test_name": "test_request_exception_signal",
  "test_file": "__internal__/_data/flask/tests/test_signals.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "recorded.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    },
    {
      "function": "recorded.append",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    },
    {
      "function": "isinstance",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    },
    {
      "function": "len",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    },
    {
      "function": "app.test_client.get",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    },
    {
      "function": "app.test_client",
      "filename": "",
      "line": 0,
      "caller": "test_request_exception_signal"
    }
  ],
  "assertions": [
    "assert app.test_client().get('/').status_code == 500",
    "assert len(recorded) == 1",
    "assert isinstance(recorded[0], ZeroDivisionError)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_request_exception_signal():\n    app = flask.Flask(__name__)\n    recorded = []\n\n    @app.route(\"/\")\n    def index():\n        raise ZeroDivisionError\n\n    def record(sender, exception):\n        recorded.append(exception)\n\n    flask.got_request_exception.connect(record, app)\n    try:\n        assert app.test_client().get(\"/\").status_code == 500\n        assert len(recorded) == 1\n        assert isinstance(recorded[0], ZeroDivisionError)\n    finally:\n        flask.got_request_exception.disconnect(record, app)"
}