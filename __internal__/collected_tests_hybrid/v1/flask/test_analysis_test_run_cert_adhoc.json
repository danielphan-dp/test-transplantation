{
  "test_name": "test_run_cert_adhoc",
  "test_file": "__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "monkeypatch.setitem",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setitem",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_command.make_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_command.make_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_command.make_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.setitem",
      "filename": "",
      "line": 0,
      "caller": "test_run_cert_adhoc"
    },
    {
      "function": "monkeypatch.setitem",
      "filename": "",
      "line": 0,
      "caller": "test_run_cert_adhoc"
    },
    {
      "function": "run_command.make_context",
      "filename": "",
      "line": 0,
      "caller": "test_run_cert_adhoc"
    },
    {
      "function": "run_command.make_context",
      "filename": "",
      "line": 0,
      "caller": "test_run_cert_adhoc"
    },
    {
      "function": "run_command.make_context",
      "filename": "",
      "line": 0,
      "caller": "test_run_cert_adhoc"
    }
  ],
  "assertions": [
    "assert ctx.params['cert'] == 'adhoc'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_run_cert_adhoc(monkeypatch):\n    monkeypatch.setitem(sys.modules, \"cryptography\", None)\n\n    # cryptography not installed\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n\n    # cryptography installed\n    monkeypatch.setitem(sys.modules, \"cryptography\", types.ModuleType(\"cryptography\"))\n    ctx = run_command.make_context(\"run\", [\"--cert\", \"adhoc\"])\n    assert ctx.params[\"cert\"] == \"adhoc\"\n\n    # no key with adhoc\n    with pytest.raises(click.BadParameter):\n        run_command.make_context(\"run\", [\"--cert\", \"adhoc\", \"--key\", __file__])"
}