{
  "test_name": "test_server_name_matching",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "nullcontext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "app.test_client",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    },
    {
      "function": "nullcontext",
      "filename": "",
      "line": 0,
      "caller": "test_server_name_matching"
    }
  ],
  "assertions": [
    "assert r.text == expect_base",
    "assert r.text == expect_abc",
    "assert r.text == expect_xyz"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_server_name_matching(\n    subdomain_matching: bool,\n    host_matching: bool,\n    expect_base: str,\n    expect_abc: str,\n    expect_xyz: str,\n) -> None:\n    app = flask.Flask(\n        __name__,\n        subdomain_matching=subdomain_matching,\n        host_matching=host_matching,\n        static_host=\"example.test\" if host_matching else None,\n    )\n    app.config[\"SERVER_NAME\"] = \"example.test\"\n\n    @app.route(\"/\", defaults={\"name\": \"default\"}, host=\"<name>\")\n    @app.route(\"/\", subdomain=\"<name>\", host=\"<name>.example.test\")\n    def index(name: str) -> str:\n        return name\n\n    client = app.test_client()\n\n    r = client.get(base_url=\"http://example.test\")\n    assert r.text == expect_base\n\n    r = client.get(base_url=\"http://abc.example.test\")\n    assert r.text == expect_abc\n\n    with pytest.warns() if subdomain_matching else nullcontext():\n        r = client.get(base_url=\"http://xyz.other.test\")\n\n    assert r.text == expect_xyz"
}