{
  "test_name": "test_session_expiration",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "parse_date",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "match.group",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "parse_date",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "str",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    },
    {
      "function": "match.group",
      "filename": "",
      "line": 0,
      "caller": "test_session_expiration"
    }
  ],
  "assertions": [
    "assert 'set-cookie' in rv.headers",
    "assert expires.year == expected.year",
    "assert expires.month == expected.month",
    "assert expires.day == expected.day",
    "assert rv.data == b'True'",
    "assert 'set-cookie' in rv.headers",
    "assert match is None"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_session_expiration(app, client):\n    permanent = True\n\n    @app.route(\"/\")\n    def index():\n        flask.session[\"test\"] = 42\n        flask.session.permanent = permanent\n        return \"\"\n\n    @app.route(\"/test\")\n    def test():\n        return str(flask.session.permanent)\n\n    rv = client.get(\"/\")\n    assert \"set-cookie\" in rv.headers\n    match = re.search(r\"(?i)\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n    expires = parse_date(match.group())\n    expected = datetime.now(timezone.utc) + app.permanent_session_lifetime\n    assert expires.year == expected.year\n    assert expires.month == expected.month\n    assert expires.day == expected.day\n\n    rv = client.get(\"/test\")\n    assert rv.data == b\"True\"\n\n    permanent = False\n    rv = client.get(\"/\")\n    assert \"set-cookie\" in rv.headers\n    match = re.search(r\"\\bexpires=([^;]+)\", rv.headers[\"set-cookie\"])\n    assert match is None"
}