{
  "test_name": "test_simple",
  "test_file": "__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "invoke",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n    ) -> Result:\n        \"\"\"Invokes a CLI command in an isolated environment. See\n        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n        full method documentation. See :ref:`testing-cli` for examples.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line_number": 275
    },
    {
      "name": "self.expect_order",
      "source_code": "    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_cli.py",
      "line_number": 463
    }
  ],
  "dynamic_methods": [
    {
      "function": "invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/testing.py",
      "line": 275,
      "caller": "test_simple",
      "source_code": "    def invoke(  # type: ignore\n        self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n"
    },
    {
      "function": "self.expect_order",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_cli.py",
      "line": 463,
      "caller": "test_simple",
      "source_code": "    def expect_order(self, order, output):\n        # skip the header and match the start of each row\n        for expect, line in zip(order, output.splitlines()[2:]):\n            # do this instead of startswith for nicer pytest output\n            assert line[: len(expect)] == expect\n\n"
    }
  ],
  "assertions": [
    "assert result.exit_code == 0"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_simple(self, invoke):\n        result = invoke([\"routes\"])\n        assert result.exit_code == 0\n        self.expect_order([\"aaa_post\", \"static\", \"yyy_get_post\"], result.output)"
}