{
  "test_name": "test_subdomain",
  "test_file": "__internal__/_data/flask/tests/test_cli.py",
  "static_methods": [
    {
      "name": "Flask",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FlaskGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "runner.invoke",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Flask",
      "filename": "",
      "line": 0,
      "caller": "test_subdomain"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_subdomain"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_subdomain"
    },
    {
      "function": "FlaskGroup",
      "filename": "",
      "line": 0,
      "caller": "test_subdomain"
    },
    {
      "function": "runner.invoke",
      "filename": "",
      "line": 0,
      "caller": "test_subdomain"
    }
  ],
  "assertions": [
    "assert result.exit_code == 0",
    "assert 'Subdomain' in result.output"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subdomain(self, runner):\n        app = Flask(__name__, static_folder=None)\n        app.add_url_rule(\"/a\", subdomain=\"a\", endpoint=\"a\")\n        app.add_url_rule(\"/b\", subdomain=\"b\", endpoint=\"b\")\n        cli = FlaskGroup(create_app=lambda: app)\n        result = runner.invoke(cli, [\"routes\"])\n        assert result.exit_code == 0\n        assert \"Subdomain\" in result.output"
}