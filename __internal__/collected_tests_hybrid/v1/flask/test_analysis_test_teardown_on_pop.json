{
  "test_name": "test_teardown_on_pop",
  "test_file": "__internal__/_data/flask/tests/test_reqctx.py",
  "static_methods": [
    {
      "name": "app.test_request_context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ctx.push",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ctx.pop",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "buffer.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.test_request_context",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_on_pop"
    },
    {
      "function": "ctx.push",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_on_pop"
    },
    {
      "function": "ctx.pop",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_on_pop"
    },
    {
      "function": "buffer.append",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_on_pop"
    }
  ],
  "assertions": [
    "assert buffer == []",
    "assert buffer == [None]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_teardown_on_pop(app):\n    buffer = []\n\n    @app.teardown_request\n    def end_of_request(exception):\n        buffer.append(exception)\n\n    ctx = app.test_request_context()\n    ctx.push()\n    assert buffer == []\n    ctx.pop()\n    assert buffer == [None]"
}