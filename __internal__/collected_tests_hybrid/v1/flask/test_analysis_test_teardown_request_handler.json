{
  "test_name": "test_teardown_request_handler",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler"
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler"
    },
    {
      "function": "len",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler"
    }
  ],
  "assertions": [
    "assert rv.status_code == 200",
    "assert b'Response' in rv.data",
    "assert len(called) == 1"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_teardown_request_handler(app, client):\n    called = []\n\n    @app.teardown_request\n    def teardown_request(exc):\n        called.append(True)\n        return \"Ignored\"\n\n    @app.route(\"/\")\n    def root():\n        return \"Response\"\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 200\n    assert b\"Response\" in rv.data\n    assert len(called) == 1"
}