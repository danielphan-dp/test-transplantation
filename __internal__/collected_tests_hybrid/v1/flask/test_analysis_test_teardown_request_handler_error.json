{
  "test_name": "test_teardown_request_handler_error",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "called.append",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TypeError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TypeError",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "called.append",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "len",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "type",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "TypeError",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "type",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    },
    {
      "function": "TypeError",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_request_handler_error"
    }
  ],
  "assertions": [
    "assert rv.status_code == 500",
    "assert b'Internal Server Error' in rv.data",
    "assert len(called) == 2",
    "assert type(exc) is ZeroDivisionError",
    "assert type(exc) is ZeroDivisionError"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_teardown_request_handler_error(app, client):\n    called = []\n    app.testing = False\n\n    @app.teardown_request\n    def teardown_request1(exc):\n        assert type(exc) is ZeroDivisionError\n        called.append(True)\n        # This raises a new error and blows away sys.exc_info(), so we can\n        # test that all teardown_requests get passed the same original\n        # exception.\n        try:\n            raise TypeError()\n        except Exception:\n            pass\n\n    @app.teardown_request\n    def teardown_request2(exc):\n        assert type(exc) is ZeroDivisionError\n        called.append(True)\n        # This raises a new error and blows away sys.exc_info(), so we can\n        # test that all teardown_requests get passed the same original\n        # exception.\n        try:\n            raise TypeError()\n        except Exception:\n            pass\n\n    @app.route(\"/\")\n    def fails():\n        raise ZeroDivisionError\n\n    rv = client.get(\"/\")\n    assert rv.status_code == 500\n    assert b\"Internal Server Error\" in rv.data\n    assert len(called) == 2"
}