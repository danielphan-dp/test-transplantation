{
  "test_name": "test_template_filter",
  "test_file": "__internal__/_data/flask/tests/test_templating.py",
  "static_methods": [
    {
      "name": "app.template_filter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.jinja_env.filters.keys",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.jinja_env.filters",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.template_filter",
      "filename": "",
      "line": 0,
      "caller": "test_template_filter"
    },
    {
      "function": "app.jinja_env.filters.keys",
      "filename": "",
      "line": 0,
      "caller": "test_template_filter"
    },
    {
      "function": "app.jinja_env.filters",
      "filename": "",
      "line": 0,
      "caller": "test_template_filter"
    }
  ],
  "assertions": [
    "assert 'my_reverse' in app.jinja_env.filters.keys()",
    "assert app.jinja_env.filters['my_reverse'] == my_reverse",
    "assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_template_filter(app):\n    @app.template_filter()\n    def my_reverse(s):\n        return s[::-1]\n\n    assert \"my_reverse\" in app.jinja_env.filters.keys()\n    assert app.jinja_env.filters[\"my_reverse\"] == my_reverse\n    assert app.jinja_env.filters[\"my_reverse\"](\"abcd\") == \"dcba\""
}