{
  "test_name": "test_test_client_context_binding",
  "test_file": "__internal__/_data/flask/tests/test_testing.py",
  "static_methods": [
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "hasattr",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_test_client_context_binding"
    },
    {
      "function": "app.route",
      "filename": "",
      "line": 0,
      "caller": "test_test_client_context_binding"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_test_client_context_binding"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_test_client_context_binding"
    },
    {
      "function": "hasattr",
      "filename": "",
      "line": 0,
      "caller": "test_test_client_context_binding"
    }
  ],
  "assertions": [
    "assert flask.g.value == 42",
    "assert resp.data == b'Hello World!'",
    "assert resp.status_code == 200",
    "assert not hasattr(flask.g, 'value')",
    "assert b'Internal Server Error' in resp.data",
    "assert resp.status_code == 500"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_test_client_context_binding(app, client):\n    app.testing = False\n\n    @app.route(\"/\")\n    def index():\n        flask.g.value = 42\n        return \"Hello World!\"\n\n    @app.route(\"/other\")\n    def other():\n        raise ZeroDivisionError\n\n    with client:\n        resp = client.get(\"/\")\n        assert flask.g.value == 42\n        assert resp.data == b\"Hello World!\"\n        assert resp.status_code == 200\n\n    with client:\n        resp = client.get(\"/other\")\n        assert not hasattr(flask.g, \"value\")\n        assert b\"Internal Server Error\" in resp.data\n        assert resp.status_code == 500\n        flask.g.value = 23\n\n    with pytest.raises(RuntimeError):\n        flask.g.value"
}