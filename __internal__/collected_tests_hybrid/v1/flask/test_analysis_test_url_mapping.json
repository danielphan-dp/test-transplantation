{
  "test_name": "test_url_mapping",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_url_rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.head",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.delete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.open",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "rv.data.decode",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.head",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.delete",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.open",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "sorted",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "sorted",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "rv.data.decode",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    }
  ],
  "assertions": [
    "assert client.get('/').data == b'GET'",
    "assert rv.status_code == 405",
    "assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']",
    "assert rv.status_code == 200",
    "assert not rv.data",
    "assert client.post('/more').data == b'POST'",
    "assert client.get('/more').data == b'GET'",
    "assert rv.status_code == 405",
    "assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']",
    "assert rv.status_code == 200",
    "assert random_uuid4 in rv.data.decode('utf-8')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_url_mapping(app, client):\n    random_uuid4 = \"7eb41166-9ebf-4d26-b771-ea3f54f8b383\"\n\n    def index():\n        return flask.request.method\n\n    def more():\n        return flask.request.method\n\n    def options():\n        return random_uuid4\n\n    app.add_url_rule(\"/\", \"index\", index)\n    app.add_url_rule(\"/more\", \"more\", more, methods=[\"GET\", \"POST\"])\n\n    # Issue 1288: Test that automatic options are not added\n    #             when non-uppercase 'options' in methods\n    app.add_url_rule(\"/options\", \"options\", options, methods=[\"options\"])\n\n    assert client.get(\"/\").data == b\"GET\"\n    rv = client.post(\"/\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\"]\n    rv = client.head(\"/\")\n    assert rv.status_code == 200\n    assert not rv.data  # head truncates\n    assert client.post(\"/more\").data == b\"POST\"\n    assert client.get(\"/more\").data == b\"GET\"\n    rv = client.delete(\"/more\")\n    assert rv.status_code == 405\n    assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"OPTIONS\", \"POST\"]\n    rv = client.open(\"/options\", method=\"OPTIONS\")\n    assert rv.status_code == 200\n    assert random_uuid4 in rv.data.decode(\"utf-8\")"
}