{
  "test_name": "test_url_mapping",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    "app.add_url_rule",
    "app.add_url_rule",
    "app.add_url_rule",
    "client.post",
    "client.head",
    "client.delete",
    "client.open",
    "sorted",
    "sorted",
    "rv.data.decode",
    "client.get",
    "client.post",
    "client.get"
  ],
  "dynamic_methods": [
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "app.add_url_rule",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.head",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.delete",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.open",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "sorted",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "sorted",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "rv.data.decode",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.post",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    },
    {
      "function": "client.get",
      "filename": "",
      "line": 0,
      "caller": "test_url_mapping"
    }
  ],
  "assertions": [
    "assert client.get('/').data == b'GET'",
    "assert rv.status_code == 405",
    "assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']",
    "assert rv.status_code == 200",
    "assert not rv.data",
    "assert client.post('/more').data == b'POST'",
    "assert client.get('/more').data == b'GET'",
    "assert rv.status_code == 405",
    "assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']",
    "assert rv.status_code == 200",
    "assert random_uuid4 in rv.data.decode('utf-8')"
  ],
  "mocks": [],
  "success": true
}