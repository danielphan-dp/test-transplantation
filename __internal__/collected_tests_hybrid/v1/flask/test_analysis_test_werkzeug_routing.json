{
  "test_name": "test_werkzeug_routing",
  "test_file": "__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.url_map.add",
      "source_code": "def add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/javascript/js_example/views.py",
      "line_number": 15
    },
    {
      "name": "Submount",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line_number": 88
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line_number": 88
    },
    {
      "name": "Rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.url_map.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/examples/javascript/js_example/views.py",
      "line": 15,
      "caller": "test_werkzeug_routing",
      "source_code": "@app.route(\"/add\", methods=[\"POST\"])\ndef add():\n    a = request.form.get(\"a\", 0, type=float)\n    b = request.form.get(\"b\", 0, type=float)\n    return jsonify(result=a + b)\n"
    },
    {
      "function": "Submount",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line": 88,
      "caller": "test_werkzeug_routing",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)\n\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/src/flask/sessions.py",
      "line": 88,
      "caller": "test_werkzeug_routing",
      "source_code": "    def get(self, key: str, default: t.Any = None) -> t.Any:\n        self.accessed = True\n        return super().get(key, default)\n\n"
    },
    {
      "function": "Rule",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    },
    {
      "function": "Rule",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert client.get('/foo/').data == b'index'",
    "assert client.get('/foo/bar').data == b'bar'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_werkzeug_routing(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    def bar():\n        return \"bar\"\n\n    def index():\n        return \"index\"\n\n    app.view_functions[\"bar\"] = bar\n    app.view_functions[\"index\"] = index\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\""
}