{
  "test_name": "test_werkzeug_routing",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/tests/test_basic.py",
  "static_methods": [
    {
      "name": "app.url_map.add",
      "source_code": "    def add(self, key: str, value: t.Any, /, **kwargs: t.Any) -> None:\n        \"\"\"Add a new header tuple to the list.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line_number": 341
    },
    {
      "name": "Submount",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``GET``.\"\"\"\n        kw[\"method\"] = \"GET\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1159
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``GET``.\"\"\"\n        kw[\"method\"] = \"GET\"\n        return self.open(*args, **kw)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line_number": 1159
    },
    {
      "name": "Rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Rule",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.url_map.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/datastructures/headers.py",
      "line": 341,
      "caller": "test_werkzeug_routing",
      "source_code": "    def add(self, key: str, value: t.Any, /, **kwargs: t.Any) -> None:\n        \"\"\"Add a new header tuple to the list.\n\n        Keyword arguments can specify additional parameters for the header\n        value, with underscores converted to dashes::\n\n        >>> d = Headers()\n        >>> d.add('Content-Type', 'text/plain')\n        >>> d.add('Content-Disposition', 'attachment', filename='foo.png')\n\n        The keyword argument dumping uses :func:`dump_options_header`\n        behind the scenes.\n\n        .. versionchanged:: 0.4.1\n            keyword arguments were added for :mod:`wsgiref` compatibility.\n        \"\"\"\n        if kwargs:\n            value = _options_header_vkw(value, kwargs)\n\n        value_str = _str_header_value(value)\n        self._list.append((key, value_str))\n\n"
    },
    {
      "function": "Submount",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1159,
      "caller": "test_werkzeug_routing",
      "source_code": "    def get(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``GET``.\"\"\"\n        kw[\"method\"] = \"GET\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/flask/venv/lib/python3.9/site-packages/werkzeug/test.py",
      "line": 1159,
      "caller": "test_werkzeug_routing",
      "source_code": "    def get(self, *args: t.Any, **kw: t.Any) -> TestResponse:\n        \"\"\"Call :meth:`open` with ``method`` set to ``GET``.\"\"\"\n        kw[\"method\"] = \"GET\"\n        return self.open(*args, **kw)\n\n"
    },
    {
      "function": "Rule",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    },
    {
      "function": "Rule",
      "filename": "",
      "line": 0,
      "caller": "test_werkzeug_routing",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert client.get('/foo/').data == b'index'",
    "assert client.get('/foo/bar').data == b'bar'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_werkzeug_routing(app, client):\n    from werkzeug.routing import Rule\n    from werkzeug.routing import Submount\n\n    app.url_map.add(\n        Submount(\"/foo\", [Rule(\"/bar\", endpoint=\"bar\"), Rule(\"/\", endpoint=\"index\")])\n    )\n\n    def bar():\n        return \"bar\"\n\n    def index():\n        return \"index\"\n\n    app.view_functions[\"bar\"] = bar\n    app.view_functions[\"index\"] = index\n\n    assert client.get(\"/foo/\").data == b\"index\"\n    assert client.get(\"/foo/bar\").data == b\"bar\""
}