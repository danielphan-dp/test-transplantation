{
  "test_name": "test_instrument",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_statsd.py",
  "static_methods": [
    {
      "name": "Statsd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.error_log.addHandler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MockSocket",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "logger.info",
      "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 287
    },
    {
      "name": "logger.sock.reset",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 1467
    },
    {
      "name": "logger.info",
      "source_code": "    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 287
    },
    {
      "name": "logger.sock.reset",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 1467
    },
    {
      "name": "logger.debug",
      "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
      "line_number": 906
    },
    {
      "name": "logger.sock.reset",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 1467
    },
    {
      "name": "logger.critical",
      "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line_number": 267
    },
    {
      "name": "logger.sock.reset",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 1467
    },
    {
      "name": "logger.access",
      "source_code": "    def access(self, resp, req, environ, request_time):\n        \"\"\" See http://httpd.apache.org/docs/2.0/logs.html#combined\n        for format details\n        \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line_number": 344
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sio.getvalue",
      "source_code": "        def getvalue(self):\n            return self.builder.build()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line_number": 66
    },
    {
      "name": "sio.getvalue",
      "source_code": "        def getvalue(self):\n            return self.builder.build()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line_number": 66
    },
    {
      "name": "sio.getvalue",
      "source_code": "        def getvalue(self):\n            return self.builder.build()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line_number": 66
    },
    {
      "name": "SimpleNamespace",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "timedelta",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Statsd",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    },
    {
      "function": "logger.error_log.addHandler",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    },
    {
      "function": "MockSocket",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    },
    {
      "function": "logger.info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 287,
      "caller": "test_instrument",
      "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
    },
    {
      "function": "logger.sock.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 1467,
      "caller": "test_instrument",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
    },
    {
      "function": "logger.info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 287,
      "caller": "test_instrument",
      "source_code": "    @cached_property\n    def info(self):\n        pathname = os.path.join(self.dirname, self.filename)\n        with ZipFile(pathname, 'r') as zf:\n            result = self.get_wheel_metadata(zf)\n        return result\n\n"
    },
    {
      "function": "logger.sock.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 1467,
      "caller": "test_instrument",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
    },
    {
      "function": "logger.debug",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/package_index.py",
      "line": 906,
      "caller": "test_instrument",
      "source_code": "    def debug(self, msg, *args):\n        log.debug(msg, *args)\n\n"
    },
    {
      "function": "logger.sock.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 1467,
      "caller": "test_instrument",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
    },
    {
      "function": "logger.critical",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line": 267,
      "caller": "test_instrument",
      "source_code": "    def critical(self, msg, *args, **kwargs):\n        self.error_log.critical(msg, *args, **kwargs)\n\n"
    },
    {
      "function": "logger.sock.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 1467,
      "caller": "test_instrument",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
    },
    {
      "function": "logger.access",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/glogging.py",
      "line": 344,
      "caller": "test_instrument",
      "source_code": "    def access(self, resp, req, environ, request_time):\n        \"\"\" See http://httpd.apache.org/docs/2.0/logs.html#combined\n        for format details\n        \"\"\"\n\n        if not (self.cfg.accesslog or self.cfg.logconfig or\n           self.cfg.logconfig_dict or self.cfg.logconfig_json or\n           (self.cfg.syslog and not self.cfg.disable_redirect_access_to_syslog)):\n            return\n\n        # wrap atoms:\n        # - make sure atoms will be test case insensitively\n        # - if atom doesn't exist replace it by '-'\n        safe_atoms = self.atoms_wrapper_class(\n            self.atoms(resp, req, environ, request_time)\n        )\n\n        try:\n            self.access_log.info(self.cfg.access_log_format, safe_atoms)\n        except Exception:\n            self.error(traceback.format_exc())\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    },
    {
      "function": "sio.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line": 66,
      "caller": "test_instrument",
      "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
    },
    {
      "function": "sio.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line": 66,
      "caller": "test_instrument",
      "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
    },
    {
      "function": "sio.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line": 66,
      "caller": "test_instrument",
      "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
    },
    {
      "function": "SimpleNamespace",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    },
    {
      "function": "timedelta",
      "filename": "",
      "line": 0,
      "caller": "test_instrument",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert logger.sock.msgs[0] == b'gunicorn.test:666|g'",
    "assert sio.getvalue() == 'Blah\\n'",
    "assert logger.sock.msgs[0] == b'gunicorn.test:666|g'",
    "assert sio.getvalue() == 'Blah\\n'",
    "assert logger.sock.msgs[0] == b'gunicorn.debug:667|g'",
    "assert sio.getvalue() == 'Blah\\n'",
    "assert logger.sock.msgs[0] == b'gunicorn.log.critical:1|c|@1.0'",
    "assert logger.sock.msgs[0] == b'gunicorn.request.duration:7000.0|ms'",
    "assert logger.sock.msgs[1] == b'gunicorn.requests:1|c|@1.0'",
    "assert logger.sock.msgs[2] == b'gunicorn.request.status.200:1|c|@1.0'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_instrument():\n    logger = Statsd(Config())\n    # Capture logged messages\n    sio = io.StringIO()\n    logger.error_log.addHandler(logging.StreamHandler(sio))\n    logger.sock = MockSocket(False)\n\n    # Regular message\n    logger.info(\"Blah\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"gunicorn.test:666|g\"\n    assert sio.getvalue() == \"Blah\\n\"\n    logger.sock.reset()\n\n    # Only metrics, no logging\n    logger.info(\"\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.test\", \"value\": 666})\n    assert logger.sock.msgs[0] == b\"gunicorn.test:666|g\"\n    assert sio.getvalue() == \"Blah\\n\"  # log is unchanged\n    logger.sock.reset()\n\n    # Debug logging also supports metrics\n    logger.debug(\"\", extra={\"mtype\": \"gauge\", \"metric\": \"gunicorn.debug\", \"value\": 667})\n    assert logger.sock.msgs[0] == b\"gunicorn.debug:667|g\"\n    assert sio.getvalue() == \"Blah\\n\"  # log is unchanged\n    logger.sock.reset()\n\n    logger.critical(\"Boom\")\n    assert logger.sock.msgs[0] == b\"gunicorn.log.critical:1|c|@1.0\"\n    logger.sock.reset()\n\n    logger.access(SimpleNamespace(status=\"200 OK\"), None, {}, timedelta(seconds=7))\n    assert logger.sock.msgs[0] == b\"gunicorn.request.duration:7000.0|ms\"\n    assert logger.sock.msgs[1] == b\"gunicorn.requests:1|c|@1.0\"\n    assert logger.sock.msgs[2] == b\"gunicorn.request.status.200:1|c|@1.0\""
}