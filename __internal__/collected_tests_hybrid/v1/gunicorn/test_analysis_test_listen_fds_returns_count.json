{
  "test_name": "test_listen_fds_returns_count",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_systemd.py",
  "static_methods": [
    {
      "name": "mock.patch.dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "check_environ",
      "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 217
    },
    {
      "name": "mock.patch.dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "check_environ",
      "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 217
    },
    {
      "name": "systemd.listen_fds",
      "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
      "line_number": 11
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch.dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_listen_fds_returns_count",
      "source_code": ""
    },
    {
      "function": "check_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 217,
      "caller": "test_listen_fds_returns_count",
      "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
    },
    {
      "function": "mock.patch.dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_listen_fds_returns_count",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_listen_fds_returns_count",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_listen_fds_returns_count",
      "source_code": ""
    },
    {
      "function": "check_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 217,
      "caller": "test_listen_fds_returns_count",
      "source_code": "def check_environ ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    global _environ_checked\n    if _environ_checked:\n        return\n\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n    _environ_checked = 1\n\n\n"
    },
    {
      "function": "systemd.listen_fds",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/systemd.py",
      "line": 11,
      "caller": "test_listen_fds_returns_count",
      "source_code": "def listen_fds(unset_environment=True):\n    \"\"\"\n    Get the number of sockets inherited from systemd socket activation.\n\n    :param unset_environment: clear systemd environment variables unless False\n    :type unset_environment: bool\n    :return: the number of sockets to inherit from systemd socket activation\n    :rtype: int\n\n    Returns zero immediately if $LISTEN_PID is not set to the current pid.\n    Otherwise, returns the number of systemd activation sockets specified by\n    $LISTEN_FDS.\n\n    When $LISTEN_PID matches the current pid, unsets the environment variables\n    unless the ``unset_environment`` flag is ``False``.\n\n    .. note::\n        Unlike the sd_listen_fds C function, this implementation does not set\n        the FD_CLOEXEC flag because the gunicorn arbiter never needs to do this.\n\n    .. seealso::\n        `<https://www.freedesktop.org/software/systemd/man/sd_listen_fds.html>`_\n\n    \"\"\"\n    fds = int(os.environ.get('LISTEN_FDS', 0))\n    listen_pid = int(os.environ.get('LISTEN_PID', 0))\n\n    if listen_pid != os.getpid():\n        return 0\n\n    if unset_environment:\n        os.environ.pop('LISTEN_PID', None)\n        os.environ.pop('LISTEN_FDS', None)\n\n    return fds\n\n\n"
    }
  ],
  "assertions": [
    "assert systemd.listen_fds(unset) == 5, 'should return the correct count of fds'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_listen_fds_returns_count(unset):\n    with mock.patch.dict(os.environ):\n        os.environ['LISTEN_FDS'] = str(5)\n        os.environ['LISTEN_PID'] = str(os.getpid())\n        with check_environ(unset):\n            assert systemd.listen_fds(unset) == 5, \\\n                \"should return the correct count of fds\""
}