{
  "test_name": "test_socket_unreader_chunk",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/tests/test_http.py",
  "static_methods": [
    {
      "name": "t.FakeSocket",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SocketUnreader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock_unreader.chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line_number": 16
    },
    {
      "name": "sock_unreader.chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line_number": 16
    },
    {
      "name": "sock_unreader.chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line_number": 16
    },
    {
      "name": "sock_unreader.chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line_number": 16
    },
    {
      "name": "sock_unreader.chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line_number": 16
    }
  ],
  "dynamic_methods": [
    {
      "function": "t.FakeSocket",
      "filename": "",
      "line": 0,
      "caller": "test_socket_unreader_chunk",
      "source_code": ""
    },
    {
      "function": "SocketUnreader",
      "filename": "",
      "line": 0,
      "caller": "test_socket_unreader_chunk",
      "source_code": ""
    },
    {
      "function": "sock_unreader.chunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line": 16,
      "caller": "test_socket_unreader_chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "sock_unreader.chunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line": 16,
      "caller": "test_socket_unreader_chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "sock_unreader.chunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line": 16,
      "caller": "test_socket_unreader_chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "sock_unreader.chunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line": 16,
      "caller": "test_socket_unreader_chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "sock_unreader.chunk",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/gunicorn/http/unreader.py",
      "line": 16,
      "caller": "test_socket_unreader_chunk",
      "source_code": "    def chunk(self):\n        raise NotImplementedError()\n\n"
    }
  ],
  "assertions": [
    "assert sock_unreader.chunk() == b'Lorem'",
    "assert sock_unreader.chunk() == b' ipsu'",
    "assert sock_unreader.chunk() == b'm dol'",
    "assert sock_unreader.chunk() == b'or'",
    "assert sock_unreader.chunk() == b''"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_socket_unreader_chunk():\n    fake_sock = t.FakeSocket(io.BytesIO(b'Lorem ipsum dolor'))\n    sock_unreader = SocketUnreader(fake_sock, max_chunk=5)\n\n    assert sock_unreader.chunk() == b'Lorem'\n    assert sock_unreader.chunk() == b' ipsu'\n    assert sock_unreader.chunk() == b'm dol'\n    assert sock_unreader.chunk() == b'or'\n    assert sock_unreader.chunk() == b''"
}