{
  "test_name": "test_wrap_shouldnt_raise_on_missing_closed_attr",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "AnsiToWin32",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/gunicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "AnsiToWin32",
      "filename": "",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_wrap_shouldnt_raise_on_missing_closed_attr",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('colorama.ansitowin32.os.name', 'nt')",
    "patch('colorama.ansitowin32.winapi_test', lambda : True)"
  ],
  "success": false,
  "test_source_code": "def test_wrap_shouldnt_raise_on_missing_closed_attr(self):\n        with \\\n            patch(\"colorama.ansitowin32.os.name\", \"nt\"), \\\n            patch(\"colorama.ansitowin32.winapi_test\", lambda: True):\n                converter = AnsiToWin32(object())\n        self.assertTrue(converter.strip)\n        self.assertFalse(converter.convert)"
}