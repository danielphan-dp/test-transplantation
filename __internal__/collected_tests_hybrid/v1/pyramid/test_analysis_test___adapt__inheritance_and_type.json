{
  "test_name": "test___adapt__inheritance_and_type",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IDerivedAdapt",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "IDerived2Adapt",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "IDerivedAdapt",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "IDerived2Adapt",
      "filename": "",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test___adapt__inheritance_and_type",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test___adapt__inheritance_and_type(self):\n        from zope.interface import Interface\n        from zope.interface import interfacemethod\n\n        class IRoot(Interface):\n            \"\"\"Root\"\"\"\n\n        class IWithAdapt(IRoot):\n            @interfacemethod\n            def __adapt__(self, obj):\n                return 42\n\n        class IOther(IRoot):\n            \"\"\"Second branch\"\"\"\n\n        class IUnrelated(Interface):\n            \"\"\"Unrelated\"\"\"\n\n        class IDerivedAdapt(IUnrelated, IWithAdapt, IOther):\n            \"\"\"Inherits an adapt\"\"\"\n            # Order of \"inheritance\" matters here.\n\n        class IDerived2Adapt(IDerivedAdapt):\n            \"\"\"Overrides an inherited custom adapt.\"\"\"\n            @interfacemethod\n            def __adapt__(self, obj):\n                return 24\n\n        self.assertEqual(42, IDerivedAdapt(object()))\n        for iface in IRoot, IWithAdapt, IOther, IUnrelated, IDerivedAdapt:\n            self.assertEqual(__name__, iface.__module__)\n\n        for iface in IRoot, IOther, IUnrelated:\n            self.assertEqual(type(IRoot), type(Interface))\n\n        # But things that implemented __adapt__ got a new type\n        self.assertNotEqual(type(Interface), type(IWithAdapt))\n        self.assertEqual(type(IWithAdapt), type(IDerivedAdapt))\n        self.assertIsInstance(IWithAdapt, type(Interface))\n\n        self.assertEqual(24, IDerived2Adapt(object()))\n        self.assertNotEqual(type(IDerived2Adapt), type(IDerivedAdapt))\n        self.assertIsInstance(IDerived2Adapt, type(IDerivedAdapt))"
}