{
  "test_name": "test___call___implicit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_tweens.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "tweens.add_implicit",
      "source_code": "    def add_implicit(self, name, factory, under=None, over=None):\n        self.sorter.add(name, factory, after=under, before=over)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/tweens.py",
      "line_number": 177
    },
    {
      "name": "tweens.add_implicit",
      "source_code": "    def add_implicit(self, name, factory, under=None, over=None):\n        self.sorter.add(name, factory, after=under, before=over)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/tweens.py",
      "line_number": 177
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tweens",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test___call___implicit",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "tweens.add_implicit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/tweens.py",
      "line": 177,
      "caller": "test___call___implicit",
      "source_code": "    def add_implicit(self, name, factory, under=None, over=None):\n        self.sorter.add(name, factory, after=under, before=over)\n\n"
    },
    {
      "function": "tweens.add_implicit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/tweens.py",
      "line": 177,
      "caller": "test___call___implicit",
      "source_code": "    def add_implicit(self, name, factory, under=None, over=None):\n        self.sorter.add(name, factory, after=under, before=over)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___call___implicit",
      "source_code": ""
    },
    {
      "function": "tweens",
      "filename": "",
      "line": 0,
      "caller": "test___call___implicit",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test___call___implicit(self):\n        tweens = self._makeOne()\n\n        def factory1(handler, registry):\n            return handler\n\n        def factory2(handler, registry):\n            return '123'\n\n        tweens.add_implicit('name2', factory2)\n        tweens.add_implicit('name1', factory1)\n        self.assertEqual(tweens(None, None), '123')"
}