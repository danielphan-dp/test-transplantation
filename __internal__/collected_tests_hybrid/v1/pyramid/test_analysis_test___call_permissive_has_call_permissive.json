{
  "test_name": "test___call_permissive_has_call_permissive",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mv.__call_permissive__",
      "source_code": "    def __call_permissive__(context, request):\n        \"\"\"Guaranteed-permissive version of __call__\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 759
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": ""
    },
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": ""
    },
    {
      "function": "mv.__call_permissive__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 759,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": "    def __call_permissive__(context, request):\n        \"\"\"Guaranteed-permissive version of __call__\"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test___call_permissive_has_call_permissive",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test___call_permissive_has_call_permissive(self):\n        mv = self._makeOne()\n        context = DummyContext()\n        request = DummyRequest()\n        request.view_name = ''\n        expected_response = DummyResponse()\n\n        def view(context, request):\n            \"\"\" \"\"\"\n\n        def permissive(context, request):\n            return expected_response\n\n        view.__call_permissive__ = permissive\n        mv.views = [(100, view, None)]\n        response = mv.__call_permissive__(context, request)\n        self.assertEqual(response, expected_response)"
}