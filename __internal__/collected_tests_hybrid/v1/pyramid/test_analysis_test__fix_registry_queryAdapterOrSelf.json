{
  "test_name": "test__fix_registry_queryAdapterOrSelf",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
  "static_methods": [
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "Foo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Bar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRegistry",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config._fix_registry",
      "source_code": "    def _fix_registry(self):\n        \"\"\"Fix up a ZCA component registry that is not a\n        pyramid.registry.Registry by adding analogues of ``has_listeners``,\n        ``notify``, ``queryAdapterOrSelf``, and ``registerSelfAdapter``\n        through monkey-patching.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 452
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "reg.queryAdapterOrSelf",
      "source_code": "    def queryAdapterOrSelf(self, object, interface, default=None):\n        # queryAdapter analogue which returns the object if it implements\n        # the interface, otherwise it will return an adaptation to the\n        # interface\n        if not interface.providedBy(object):\n            return self.queryAdapter(object, interface, default=default)\n        return object",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/registry.py",
      "line_number": 87
    },
    {
      "name": "reg.queryAdapterOrSelf",
      "source_code": "    def queryAdapterOrSelf(self, object, interface, default=None):\n        # queryAdapter analogue which returns the object if it implements\n        # the interface, otherwise it will return an adaptation to the\n        # interface\n        if not interface.providedBy(object):\n            return self.queryAdapter(object, interface, default=default)\n        return object",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/registry.py",
      "line_number": 87
    }
  ],
  "dynamic_methods": [
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "Foo",
      "filename": "",
      "line": 0,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": ""
    },
    {
      "function": "Bar",
      "filename": "",
      "line": 0,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": ""
    },
    {
      "function": "DummyRegistry",
      "filename": "",
      "line": 0,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config._fix_registry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 452,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": "    def _fix_registry(self):\n        \"\"\"Fix up a ZCA component registry that is not a\n        pyramid.registry.Registry by adding analogues of ``has_listeners``,\n        ``notify``, ``queryAdapterOrSelf``, and ``registerSelfAdapter``\n        through monkey-patching.\"\"\"\n\n        _registry = self.registry\n\n        if not hasattr(_registry, 'notify'):\n\n            def notify(*events):\n                [_ for _ in _registry.subscribers(events, None)]\n\n            _registry.notify = notify\n\n        if not hasattr(_registry, 'has_listeners'):\n            _registry.has_listeners = True\n\n        if not hasattr(_registry, 'queryAdapterOrSelf'):\n\n            def queryAdapterOrSelf(object, interface, default=None):\n                if not interface.providedBy(object):\n                    return _registry.queryAdapter(\n                        object, interface, default=default\n                    )\n                return object\n\n            _registry.queryAdapterOrSelf = queryAdapterOrSelf\n\n        if not hasattr(_registry, 'registerSelfAdapter'):\n\n            def registerSelfAdapter(\n                required=None, provided=None, name='', info='', event=True\n            ):\n                return _registry.registerAdapter(\n                    lambda x: x,\n                    required=required,\n                    provided=provided,\n                    name=name,\n                    info=info,\n                    event=event,\n                )\n\n            _registry.registerSelfAdapter = registerSelfAdapter\n\n        if not hasattr(_registry, '_lock'):\n            _registry._lock = threading.Lock()\n\n        if not hasattr(_registry, '_clear_view_lookup_cache'):\n\n            def _clear_view_lookup_cache():\n                _registry._view_lookup_cache = {}\n\n            _registry._clear_view_lookup_cache = _clear_view_lookup_cache\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": ""
    },
    {
      "function": "reg.queryAdapterOrSelf",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/registry.py",
      "line": 87,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": "    def queryAdapterOrSelf(self, object, interface, default=None):\n        # queryAdapter analogue which returns the object if it implements\n        # the interface, otherwise it will return an adaptation to the\n        # interface\n        if not interface.providedBy(object):\n            return self.queryAdapter(object, interface, default=default)\n        return object\n\n"
    },
    {
      "function": "reg.queryAdapterOrSelf",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/registry.py",
      "line": 87,
      "caller": "test__fix_registry_queryAdapterOrSelf",
      "source_code": "    def queryAdapterOrSelf(self, object, interface, default=None):\n        # queryAdapter analogue which returns the object if it implements\n        # the interface, otherwise it will return an adaptation to the\n        # interface\n        if not interface.providedBy(object):\n            return self.queryAdapter(object, interface, default=default)\n        return object\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test__fix_registry_queryAdapterOrSelf(self):\n        from zope.interface import Interface, implementer\n\n        class IFoo(Interface):\n            pass\n\n        @implementer(IFoo)\n        class Foo:\n            pass\n\n        class Bar:\n            pass\n\n        adaptation = ()\n        foo = Foo()\n        bar = Bar()\n        reg = DummyRegistry(adaptation)\n        config = self._makeOne(reg)\n        config._fix_registry()\n        self.assertTrue(reg.queryAdapterOrSelf(foo, IFoo) is foo)\n        self.assertTrue(reg.queryAdapterOrSelf(bar, IFoo) is adaptation)"
}