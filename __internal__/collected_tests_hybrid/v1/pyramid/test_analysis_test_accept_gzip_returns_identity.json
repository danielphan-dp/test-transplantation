{
  "test_name": "test_accept_gzip_returns_identity",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
  "static_methods": [
    {
      "name": "self._getResponse",
      "source_code": "    def _getResponse(self, *args, **kwargs):\n        from pyramid.request import Request",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line_number": 260
    },
    {
      "name": "self.assertNotIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotIn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_assertBody",
      "source_code": "def _assertBody(body, filename):\n    if defaultlocale is None:  # pragma: no cover\n        # If system locale does not have an encoding then default to utf-8\n        filename = filename.encode('utf-8')\n    # strip both \\n and \\r for windows\n    body = body.replace(b'\\r', b'')\n    body = body.replace(b'\\n', b'')\n    data = read_(filename)\n    data = data.replace(b'\\r', b'')\n    data = data.replace(b'\\n', b'')\n    assert body == data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line_number": 1017
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getResponse",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line": 260,
      "caller": "test_accept_gzip_returns_identity",
      "source_code": "    def _getResponse(self, *args, **kwargs):\n        from pyramid.request import Request\n\n        req = Request.blank(*args, **kwargs)\n        return req.get_response(self.app)\n\n"
    },
    {
      "function": "self.assertNotIn",
      "filename": "",
      "line": 0,
      "caller": "test_accept_gzip_returns_identity",
      "source_code": ""
    },
    {
      "function": "self.assertNotIn",
      "filename": "",
      "line": 0,
      "caller": "test_accept_gzip_returns_identity",
      "source_code": ""
    },
    {
      "function": "_assertBody",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line": 1017,
      "caller": "test_accept_gzip_returns_identity",
      "source_code": "def _assertBody(body, filename):\n    if defaultlocale is None:  # pragma: no cover\n        # If system locale does not have an encoding then default to utf-8\n        filename = filename.encode('utf-8')\n    # strip both \\n and \\r for windows\n    body = body.replace(b'\\r', b'')\n    body = body.replace(b'\\n', b'')\n    data = read_(filename)\n    data = data.replace(b'\\r', b'')\n    data = data.replace(b'\\n', b'')\n    assert body == data\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_accept_gzip_returns_identity(self):\n        res = self._getResponse(\n            '/static/index.html', headers={'Accept-Encoding': 'gzip'}\n        )\n        self.assertNotIn('Vary', res.headers)\n        self.assertNotIn('Content-Encoding', res.headers)\n        _assertBody(res.body, os.path.join(here, 'fixtures/static/index.html'))"
}