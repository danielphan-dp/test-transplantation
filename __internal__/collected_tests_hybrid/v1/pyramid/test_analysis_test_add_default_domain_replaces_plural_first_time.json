{
  "test_name": "test_add_default_domain_replaces_plural_first_time",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_i18n.py",
  "static_methods": [
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.plural",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    },
    {
      "function": "inst.plural",
      "filename": "",
      "line": 0,
      "caller": "test_add_default_domain_replaces_plural_first_time",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_default_domain_replaces_plural_first_time(self):\n        # Create three empty message catalogs in the default domain\n        inst = self._getTargetClass()(None, domain='messages')\n        inst2 = self._getTargetClass()(None, domain='messages')\n        inst3 = self._getTargetClass()(None, domain='messages')\n        inst._catalog = {}\n        inst2._catalog = {}\n        inst3._catalog = {}\n\n        # The default plural scheme is the germanic one\n        self.assertEqual(inst.plural(0), 1)\n        self.assertEqual(inst.plural(1), 0)\n        self.assertEqual(inst.plural(2), 1)\n\n        # inst2 represents a message file that declares french plurals\n        inst2.plural = lambda n: n > 1\n        inst.add(inst2)\n        # that plural rule should now apply to inst\n        self.assertEqual(inst.plural(0), 0)\n        self.assertEqual(inst.plural(1), 0)\n        self.assertEqual(inst.plural(2), 1)\n\n        # We load a second message file with different plural rules\n        inst3.plural = lambda n: n > 0\n        inst.add(inst3)\n        # It doesn't override the previously loaded rule\n        self.assertEqual(inst.plural(0), 0)\n        self.assertEqual(inst.plural(1), 0)\n        self.assertEqual(inst.plural(2), 1)"
}