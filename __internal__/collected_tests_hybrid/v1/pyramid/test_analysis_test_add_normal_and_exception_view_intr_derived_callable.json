{
  "test_name": "test_add_normal_and_exception_view_intr_derived_callable",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyIntrospector",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.set_default_csrf_options",
      "source_code": "    def set_default_csrf_options(\n        self,\n        require_csrf=True,\n        token='csrf_token',\n        header='X-CSRF-Token',\n        safe_methods=('GET', 'HEAD', 'OPTIONS', 'TRACE'),\n        check_origin=True,\n        allow_no_origin=False,\n        callback=None,\n    ):\n        \"\"\"\n        Set the default CSRF options used by subsequent view registrations.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 258
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "DummySession",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Exception",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "derived_view",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "derived_view",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyIntrospector",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "config.set_default_csrf_options",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 258,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": "    @action_method\n    def set_default_csrf_options(\n        self,\n        require_csrf=True,\n        token='csrf_token',\n        header='X-CSRF-Token',\n        safe_methods=('GET', 'HEAD', 'OPTIONS', 'TRACE'),\n        check_origin=True,\n        allow_no_origin=False,\n        callback=None,\n"
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "DummySession",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "Exception",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "derived_view",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    },
    {
      "function": "derived_view",
      "filename": "",
      "line": 0,
      "caller": "test_add_normal_and_exception_view_intr_derived_callable",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_normal_and_exception_view_intr_derived_callable(self):\n        from pyramid.exceptions import BadCSRFToken\n        from pyramid.renderers import null_renderer\n\n        config = self._makeOne(autocommit=True)\n        introspector = DummyIntrospector()\n        config.introspector = introspector\n        view = lambda r: 'OK'\n        config.set_default_csrf_options(require_csrf=True)\n        config.add_view(view, context=Exception, renderer=null_renderer)\n        view_intr = introspector.introspectables[-1]\n        self.assertTrue(view_intr.type_name, 'view')\n        self.assertEqual(view_intr['callable'], view)\n        derived_view = view_intr['derived_callable']\n\n        request = self._makeRequest(config)\n        request.method = 'POST'\n        request.scheme = 'http'\n        request.POST = {}\n        request.headers = {}\n        request.session = DummySession({'csrf_token': 'foo'})\n        self.assertRaises(BadCSRFToken, lambda: derived_view(None, request))\n        request.exception = Exception()\n        self.assertEqual(derived_view(None, request), 'OK')"
}