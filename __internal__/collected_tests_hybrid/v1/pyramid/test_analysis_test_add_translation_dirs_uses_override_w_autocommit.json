{
  "test_name": "test_add_translation_dirs_uses_override_w_autocommit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_i18n.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.override_asset",
      "source_code": "    def override_asset(self, to_override, override_with, _override=None):\n        \"\"\"Add a :app:`Pyramid` asset override to the current\n        configuration state.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/assets.py",
      "line_number": 319
    },
    {
      "name": "config.add_translation_dirs",
      "source_code": "    def add_translation_dirs(self, *specs, **kw):\n        \"\"\"Add one or more :term:`translation directory` paths to the\n        current configuration state.  The ``specs`` argument is a\n        sequence that may contain absolute directory paths\n        (e.g. ``/usr/share/locale``) or :term:`asset specification`\n        names naming a directory path (e.g. ``some.package:locale``)\n        or a combination of the two.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/i18n.py",
      "line_number": 47
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_add_translation_dirs_uses_override_w_autocommit",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.override_asset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/assets.py",
      "line": 319,
      "caller": "test_add_translation_dirs_uses_override_w_autocommit",
      "source_code": "    @action_method\n    def override_asset(self, to_override, override_with, _override=None):\n        \"\"\"Add a :app:`Pyramid` asset override to the current\n        configuration state.\n\n        ``to_override`` is an :term:`asset specification` to the\n        asset being overridden.\n\n        ``override_with`` is an :term:`asset specification` to the\n        asset that is performing the override. This may also be an absolute\n        path.\n\n        See :ref:`assets_chapter` for more\n        information about asset overrides.\"\"\"\n        if to_override == override_with:\n            raise ConfigurationError(\n                'You cannot override an asset with itself'\n            )\n\n        package = to_override\n        path = ''\n        if ':' in to_override:\n            package, path = to_override.split(':', 1)\n\n        # *_isdir = override is package or directory\n        overridden_isdir = path == '' or path.endswith('/')\n\n        if os.path.isabs(override_with):\n            override_source = FSAssetSource(override_with)\n            if not os.path.exists(override_with):\n                raise ConfigurationError(\n                    'Cannot override asset with an absolute path that does '\n                    'not exist'\n                )\n            override_isdir = os.path.isdir(override_with)\n            override_package = None\n            override_prefix = override_with\n        else:\n            override_package = override_with\n            override_prefix = ''\n            if ':' in override_with:\n                override_package, override_prefix = override_with.split(':', 1)\n\n            __import__(override_package)\n            to_package = sys.modules[override_package]\n            override_source = PackageAssetSource(to_package, override_prefix)\n\n            override_isdir = override_prefix == '' or override_with.endswith(\n                '/'\n            )\n\n        if overridden_isdir and (not override_isdir):\n            raise ConfigurationError(\n                'A directory cannot be overridden with a file (put a '\n                'slash at the end of override_with if necessary)'\n            )\n\n        if (not overridden_isdir) and override_isdir:\n            raise ConfigurationError(\n                'A file cannot be overridden with a directory (put a '\n                'slash at the end of to_override if necessary)'\n            )\n\n        override = _override or self._override  # test jig\n\n        def register():\n            __import__(package)\n            from_package = sys.modules[package]\n            override(from_package, path, override_source)\n\n        intr = self.introspectable(\n            'asset overrides',\n            (package, override_package, path, override_prefix),\n            f'{to_override} -> {override_with}',\n            'asset override',\n        )\n        intr['to_override'] = to_override\n        intr['override_with'] = override_with\n        self.action(\n            None, register, introspectables=(intr,), order=PHASE1_CONFIG\n        )\n\n"
    },
    {
      "function": "config.add_translation_dirs",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/i18n.py",
      "line": 47,
      "caller": "test_add_translation_dirs_uses_override_w_autocommit",
      "source_code": "    @action_method\n    def add_translation_dirs(self, *specs, **kw):\n        \"\"\"Add one or more :term:`translation directory` paths to the\n        current configuration state.  The ``specs`` argument is a\n        sequence that may contain absolute directory paths\n        (e.g. ``/usr/share/locale``) or :term:`asset specification`\n        names naming a directory path (e.g. ``some.package:locale``)\n        or a combination of the two.\n\n        Example:\n\n        .. code-block:: python\n\n           config.add_translation_dirs('/usr/share/locale',\n                                       'some.package:locale')\n\n        The translation directories are defined as a list in which\n        translations defined later have precedence over translations defined\n        earlier.\n\n        By default, consecutive calls to ``add_translation_dirs`` will add\n        directories to the start of the list. This means later calls to\n        ``add_translation_dirs`` will have their translations trumped by\n        earlier calls. If you explicitly need this call to trump an earlier\n        call then you may set ``override`` to ``True``.\n\n        If multiple specs are provided in a single call to\n        ``add_translation_dirs``, the directories will be inserted in the\n        order they're provided (earlier items are trumped by later items).\n\n        .. versionchanged:: 1.8\n\n           The ``override`` parameter was added to allow a later call\n           to ``add_translation_dirs`` to override an earlier call, inserting\n           folders at the beginning of the translation directory list.\n\n        \"\"\"\n        introspectables = []\n        override = kw.pop('override', False)\n        if kw:\n            raise TypeError('invalid keyword arguments: %s', sorted(kw.keys()))\n\n        def register():\n            directories = []\n            resolver = AssetResolver(self.package_name)\n\n            # defer spec resolution until register to allow for asset\n            # overrides to take place in an earlier config phase\n            for spec in specs:\n                # the trailing slash helps match asset overrides for folders\n                if not spec.endswith('/'):\n                    spec += '/'\n                asset = resolver.resolve(spec)\n                directory = asset.abspath()\n                if not asset.isdir():\n                    raise ConfigurationError(\n                        '\"%s\" is not a directory' % directory\n                    )\n                intr = self.introspectable(\n                    'translation directories',\n                    directory,\n                    spec,\n                    'translation directory',\n                )\n                intr['directory'] = directory\n                intr['spec'] = spec\n                introspectables.append(intr)\n                directories.append(directory)\n\n            tdirs = self.registry.queryUtility(ITranslationDirectories)\n            if tdirs is None:\n                tdirs = []\n                self.registry.registerUtility(tdirs, ITranslationDirectories)\n            if override:\n                tdirs.extend(directories)\n            else:\n                for directory in reversed(directories):\n                    tdirs.insert(0, directory)\n\n        self.action(None, register, introspectables=introspectables)\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_add_translation_dirs_uses_override_w_autocommit",
      "source_code": ""
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_add_translation_dirs_uses_override_w_autocommit",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_add_translation_dirs_uses_override_w_autocommit(self):\n        from pyramid.interfaces import ITranslationDirectories\n\n        config = self._makeOne(autocommit=True)\n        config.override_asset(\n            'tests.pkgs.localeapp:locale/', 'tests.pkgs.localeapp:locale2/'\n        )\n        config.add_translation_dirs('tests.pkgs.localeapp:locale')\n        self.assertEqual(\n            config.registry.getUtility(ITranslationDirectories), [locale2]\n        )"
}