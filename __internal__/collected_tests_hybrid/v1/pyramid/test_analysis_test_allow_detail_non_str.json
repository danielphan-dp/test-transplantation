{
  "test_name": "test_allow_detail_non_str",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_httpexceptions.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "exc.__str__",
      "source_code": "    def __str__(self):\n        result = \"{0.scheme}://{0.path}\".format(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/plaster/uri.py",
      "line_number": 47
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_allow_detail_non_str",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_allow_detail_non_str",
      "source_code": ""
    },
    {
      "function": "exc.__str__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/plaster/uri.py",
      "line": 47,
      "caller": "test_allow_detail_non_str",
      "source_code": "    def __str__(self):\n        result = \"{0.scheme}://{0.path}\".format(self)\n\n        if self.options:\n            result += \"?\" + parse.urlencode(self.options)\n\n        if self.fragment:\n            result += \"#\" + self.fragment\n\n        return result\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_allow_detail_non_str(self):\n        exc = self._makeOne(detail={'error': 'This is a test'})\n        self.assertIsInstance(exc.__str__(), str)"
}