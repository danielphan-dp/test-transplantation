{
  "test_name": "test_call_no_view_registered_debug_notfound_false",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "self._makeEnviron",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 24
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._registerTraverserFactory",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n    ):\n        from pyramid.interfaces import ITraverser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 50
    },
    {
      "name": "self._registerLogger",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 23
    },
    {
      "name": "self._registerSettings",
      "source_code": "    def _registerSettings(self, **kw):\n        settings = {\n            'debug_authorization': False,\n            'debug_notfound': False,\n            'debug_routematch': False,\n        }\n        settings.update(kw)\n        self.registry.settings = settings",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 41
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyStartResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "exc_raised",
      "source_code": "def exc_raised(exc, func, *arg, **kw):\n    try:\n        func(*arg, **kw)\n    except exc as e:\n        return e\n    else:\n        raise AssertionError('%s not raised' % exc)  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 1756
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 24,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    },
    {
      "function": "self._registerTraverserFactory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 50,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n"
    },
    {
      "function": "self._registerLogger",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 23,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger\n\n        logger = DummyLogger()\n        self.config.registry.registerUtility(logger, IDebugLogger)\n        return logger\n\n"
    },
    {
      "function": "self._registerSettings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 41,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "    def _registerSettings(self, **kw):\n        settings = {\n            'debug_authorization': False,\n            'debug_notfound': False,\n            'debug_routematch': False,\n        }\n        settings.update(kw)\n        self.registry.settings = settings\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyStartResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    },
    {
      "function": "exc_raised",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 1756,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": "def exc_raised(exc, func, *arg, **kw):\n    try:\n        func(*arg, **kw)\n    except exc as e:\n        return e\n    else:\n        raise AssertionError('%s not raised' % exc)  # pragma: no cover\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_call_no_view_registered_debug_notfound_false",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_no_view_registered_debug_notfound_false(self):\n        from pyramid.httpexceptions import HTTPNotFound\n\n        environ = self._makeEnviron()\n        context = DummyContext()\n        self._registerTraverserFactory(context)\n        logger = self._registerLogger()\n        self._registerSettings(debug_notfound=False)\n        router = self._makeOne()\n        start_response = DummyStartResponse()\n        why = exc_raised(HTTPNotFound, router, environ, start_response)\n        self.assertTrue('/' in why.args[0], why)\n        self.assertFalse('debug_notfound' in why.args[0])\n        self.assertEqual(len(logger.messages), 0)"
}