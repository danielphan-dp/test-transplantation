{
  "test_name": "test_call_route_matches_and_has_factory",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "self._registerLogger",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 23
    },
    {
      "name": "self._registerSettings",
      "source_code": "    def _registerSettings(self, **kw):\n        settings = {\n            'debug_authorization': False,\n            'debug_notfound': False,\n            'debug_routematch': False,\n        }\n        settings.update(kw)\n        self.registry.settings = settings",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 41
    },
    {
      "name": "self._registerRouteRequest",
      "source_code": "    def _registerRouteRequest(self, name):\n        from pyramid.interfaces import IRouteRequest\n        from pyramid.request import route_request_iface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 16
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._connectRoute",
      "source_code": "    def _connectRoute(self, name, path, factory=None):\n        from pyramid.interfaces import IRoutesMapper\n        from pyramid.urldispatch import RoutesMapper",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 24
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._registerTraverserFactory",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n    ):\n        from pyramid.interfaces import ITraverser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 50
    },
    {
      "name": "DummyResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeEnviron",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 24
    },
    {
      "name": "self._registerView",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 16
    },
    {
      "name": "self._registerRootFactory",
      "source_code": "    def _registerRootFactory(self, val):\n        rootfactory = DummyRootFactory(val)\n        from pyramid.interfaces import IRootFactory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 111
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._mockFinishRequest",
      "source_code": "    def _mockFinishRequest(self, router):\n        \"\"\"\n        Mock :meth:`pyramid.router.Router.finish_request` to be a no-op.  This\n        prevents :prop:`pyramid.request.Request.context` from being removed, so\n        we can write assertions against it.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line_number": 127
    },
    {
      "name": "DummyStartResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "router",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyPredicate",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "logger.messages.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._registerLogger",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 23,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerLogger(self):\n        from pyramid.interfaces import IDebugLogger\n\n        logger = DummyLogger()\n        self.config.registry.registerUtility(logger, IDebugLogger)\n        return logger\n\n"
    },
    {
      "function": "self._registerSettings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 41,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerSettings(self, **kw):\n        settings = {\n            'debug_authorization': False,\n            'debug_notfound': False,\n            'debug_routematch': False,\n        }\n        settings.update(kw)\n        self.registry.settings = settings\n\n"
    },
    {
      "function": "self._registerRouteRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 16,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerRouteRequest(self, name):\n        from pyramid.interfaces import IRouteRequest\n        from pyramid.request import route_request_iface\n\n        iface = route_request_iface(name)\n        self.registry.registerUtility(iface, IRouteRequest, name=name)\n        return iface\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self._connectRoute",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 24,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _connectRoute(self, name, path, factory=None):\n        from pyramid.interfaces import IRoutesMapper\n        from pyramid.urldispatch import RoutesMapper\n\n        mapper = self.registry.queryUtility(IRoutesMapper)\n        if mapper is None:\n            mapper = RoutesMapper()\n            self.registry.registerUtility(mapper, IRoutesMapper)\n        return mapper.connect(name, path, factory)\n\n"
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self._registerTraverserFactory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 50,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerTraverserFactory(\n        self,\n        context,\n        view_name='',\n        subpath=None,\n        traversed=None,\n        virtual_root=None,\n        virtual_root_path=None,\n        raise_error=None,\n        **kw,\n"
    },
    {
      "function": "DummyResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "DummyView",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self._makeEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 24,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _makeEnviron(self, **extras):\n        environ = {\n            'wsgi.url_scheme': 'http',\n            'wsgi.version': (1, 0),\n            'SERVER_NAME': 'localhost',\n            'SERVER_PORT': '8080',\n            'REQUEST_METHOD': 'GET',\n            'PATH_INFO': '/',\n        }\n        environ.update(extras)\n        return environ\n\n"
    },
    {
      "function": "self._registerView",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 16,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerView(self, reg, app, name):\n        from pyramid.interfaces import IViewClassifier\n\n        for_ = (IViewClassifier, IRequest, IContext)\n        from pyramid.interfaces import IView\n\n        reg.registerAdapter(app, for_, IView, name)\n\n"
    },
    {
      "function": "self._registerRootFactory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 111,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _registerRootFactory(self, val):\n        rootfactory = DummyRootFactory(val)\n        from pyramid.interfaces import IRootFactory\n\n        self.registry.registerUtility(rootfactory, IRootFactory)\n        return rootfactory\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._mockFinishRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
      "line": 127,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": "    def _mockFinishRequest(self, router):\n        \"\"\"\n        Mock :meth:`pyramid.router.Router.finish_request` to be a no-op.  This\n        prevents :prop:`pyramid.request.Request.context` from being removed, so\n        we can write assertions against it.\n\n        \"\"\"\n\n        def mock_finish_request(request):\n            pass\n\n        router.finish_request = mock_finish_request\n\n"
    },
    {
      "function": "DummyStartResponse",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "router",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "DummyPredicate",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    },
    {
      "function": "logger.messages.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_call_route_matches_and_has_factory",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_route_matches_and_has_factory(self):\n        from pyramid.interfaces import IViewClassifier\n\n        logger = self._registerLogger()\n        self._registerSettings(debug_routematch=True)\n        self._registerRouteRequest('foo')\n        root = object()\n\n        def factory(request):\n            return root\n\n        route = self._connectRoute('foo', 'archives/:action/:article', factory)\n        route.predicates = [DummyPredicate()]\n        context = DummyContext()\n        self._registerTraverserFactory(context)\n        response = DummyResponse()\n        response.app_iter = ['Hello world']\n        view = DummyView(response)\n        environ = self._makeEnviron(PATH_INFO='/archives/action1/article1')\n        self._registerView(view, '', IViewClassifier, None, None)\n        self._registerRootFactory(context)\n        router = self._makeOne()\n        self._mockFinishRequest(router)\n        start_response = DummyStartResponse()\n        result = router(environ, start_response)\n        self.assertEqual(result, ['Hello world'])\n        self.assertEqual(start_response.headers, ())\n        self.assertEqual(start_response.status, '200 OK')\n        request = view.request\n        self.assertEqual(request.view_name, '')\n        self.assertEqual(request.subpath, [])\n        self.assertEqual(request.context, context)\n        self.assertEqual(request.root, root)\n        matchdict = {'action': 'action1', 'article': 'article1'}\n        self.assertEqual(request.matchdict, matchdict)\n        self.assertEqual(request.matched_route.name, 'foo')\n        self.assertEqual(len(logger.messages), 1)\n        self.assertTrue(\n            logger.messages[0].startswith(\n                \"route matched for url http://localhost:8080\"\n                \"/archives/action1/article1; \"\n                \"route_name: 'foo', \"\n                \"path_info: \"\n            )\n        )\n        self.assertTrue(\"predicates: 'predicate'\" in logger.messages[0])"
}