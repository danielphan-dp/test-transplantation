{
  "test_name": "test_call_with_pathinfo_KeyError",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._getEnviron",
      "source_code": "    def _getEnviron(self, **kw):\n        environ = {}\n        environ.update(kw)\n        return environ",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 115
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "policy",
      "source_code": "        def policy(translations, msg, domain, context):\n            return msg\n        inst = self._makeOne('ignoreme', policy)\n        result = inst(tstring)\n        self.assertEqual(result, 'default')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/tests/test__init__.py",
      "line_number": 276
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._getEnviron",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 115,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": "    def _getEnviron(self, **kw):\n        environ = {}\n        environ.update(kw)\n        return environ\n\n"
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "policy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/tests/test__init__.py",
      "line": 276,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": "        def policy(translations, msg, domain, context):\n            return msg\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_call_with_pathinfo_KeyError",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_call_with_pathinfo_KeyError(self):\n        policy = self._makeOne(None)\n        environ = self._getEnviron()\n        request = DummyRequest(environ, toraise=KeyError)\n        result = policy(request)\n        self.assertEqual(result['context'], None)\n        self.assertEqual(result['view_name'], '')\n        self.assertEqual(result['subpath'], ())\n        self.assertEqual(result['traversed'], ())\n        self.assertEqual(result['root'], policy.root)\n        self.assertEqual(result['virtual_root'], policy.root)\n        self.assertEqual(result['virtual_root_path'], ())"
}