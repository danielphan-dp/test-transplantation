{
  "test_name": "test_callable_acl",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_authorization.py",
  "static_methods": [
    {
      "name": "ACLHelper",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "fn.__get__",
      "source_code": "    def __get__(self, obj, tp):\n        result = self._resolve()\n        setattr(obj, self.name, result)  # Invokes __set__.\n        try:\n            # This is a bit ugly, but it avoids running this again by\n            # removing this descriptor.\n            delattr(obj.__class__, self.name)\n        except AttributeError:\n            pass\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 96
    },
    {
      "name": "helper.permits",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 60
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ACLHelper",
      "filename": "",
      "line": 0,
      "caller": "test_callable_acl",
      "source_code": ""
    },
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_callable_acl",
      "source_code": ""
    },
    {
      "function": "fn.__get__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 96,
      "caller": "test_callable_acl",
      "source_code": "    def __get__(self, obj, tp):\n        result = self._resolve()\n        setattr(obj, self.name, result)  # Invokes __set__.\n        try:\n            # This is a bit ugly, but it avoids running this again by\n            # removing this descriptor.\n            delattr(obj.__class__, self.name)\n        except AttributeError:\n            pass\n        return result\n\n\n"
    },
    {
      "function": "helper.permits",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 60,
      "caller": "test_callable_acl",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_callable_acl",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_callable_acl(self):\n        from pyramid.authorization import ACLHelper, Allow\n\n        helper = ACLHelper()\n        context = DummyContext()\n        fn = lambda self: [(Allow, 'bob', 'read')]\n        context.__acl__ = fn.__get__(context, context.__class__)\n        result = helper.permits(context, ['bob'], 'read')\n        self.assertTrue(result)"
}