{
  "test_name": "test_changed_empty_required",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "self._makeRegistry",
      "source_code": "    def _makeRegistry(self, depth):",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 1377
    },
    {
      "name": "Derived",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "alb.changed",
      "source_code": "    def changed(self, originally_changed):\n        \"\"\"\n        We, or something we depend on, have changed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 484
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_changed_empty_required",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "self._makeRegistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 1377,
      "caller": "test_changed_empty_required",
      "source_code": "    def _makeRegistry(self, depth):\n\n        class WithGeneration:\n            _generation = 1\n\n        class Registry:\n            def __init__(self, depth):\n                self.ro = [WithGeneration() for i in range(depth)]\n\n        return Registry(depth)\n\n"
    },
    {
      "function": "Derived",
      "filename": "",
      "line": 0,
      "caller": "test_changed_empty_required",
      "source_code": ""
    },
    {
      "function": "alb.changed",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 484,
      "caller": "test_changed_empty_required",
      "source_code": "    def changed(self, originally_changed):\n        \"\"\"\n        We, or something we depend on, have changed.\n\n        By the time this is called, the things we depend on,\n        such as our bases, should themselves be stable.\n        \"\"\"\n        self._v_attrs = None\n\n        implied = self._implied\n        implied.clear()\n\n        ancestors = self._calculate_sro()\n        self.__sro__ = tuple(ancestors)\n        self.__iro__ = tuple([ancestor for ancestor in ancestors\n                              if isinstance(ancestor, InterfaceClass)\n                              ])\n\n        for ancestor in ancestors:\n            # We directly imply our ancestors:\n            implied[ancestor] = ()\n\n        # Now, advise our dependents of change\n        # (being careful not to create the WeakKeyDictionary if not needed):\n        for dependent in tuple(\n            self._dependents.keys() if self._dependents else ()\n        ):\n            dependent.changed(originally_changed)\n\n        # Just in case something called get() at some point\n        # during that process and we have a cycle of some sort\n        # make sure we didn't cache incomplete results.\n        self._v_attrs = None\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_changed_empty_required(self):\n        # ALB.changed expects to call a mixed in changed.\n\n        class Mixin:\n            def changed(self, *other):\n                pass\n\n        class Derived(self._getTargetClass(), Mixin):\n            pass\n\n        registry = self._makeRegistry()\n        alb = Derived(registry)\n        alb.changed(alb)"
}