{
  "test_name": "test_classImplements",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_odd_declarations.py",
  "static_methods": [
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "classImplements",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 595
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "classImplements",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 595
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "i.getName",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line_number": 834
    },
    {
      "name": "i.getName",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line_number": 834
    },
    {
      "name": "implementedBy",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 165
    },
    {
      "name": "implementedBy",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 165
    }
  ],
  "dynamic_methods": [
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_classImplements",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_classImplements",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "classImplements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 595,
      "caller": "test_classImplements",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.\n\n        The arguments after the class are one or more interfaces or\n        interface specifications (`IDeclaration` objects).\n\n        The interfaces given (including the interfaces in the\n        specifications) are added to any interfaces previously\n        declared.\n\n        Consider the following example::\n\n          class C(A, B):\n             ...\n\n          classImplements(C, I1, I2)\n\n\n        Instances of ``C`` provide ``I1``, ``I2``, and whatever interfaces\n        instances of ``A`` and ``B`` provide. This is equivalent to::\n\n            @implementer(I1, I2)\n            class C(A, B):\n                pass\n\n        .. seealso:: `zope.interface.classImplements`\n        .. seealso:: `zope.interface.implementer`\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_classImplements",
      "source_code": ""
    },
    {
      "function": "classImplements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 595,
      "caller": "test_classImplements",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.\n\n        The arguments after the class are one or more interfaces or\n        interface specifications (`IDeclaration` objects).\n\n        The interfaces given (including the interfaces in the\n        specifications) are added to any interfaces previously\n        declared.\n\n        Consider the following example::\n\n          class C(A, B):\n             ...\n\n          classImplements(C, I1, I2)\n\n\n        Instances of ``C`` provide ``I1``, ``I2``, and whatever interfaces\n        instances of ``A`` and ``B`` provide. This is equivalent to::\n\n            @implementer(I1, I2)\n            class C(A, B):\n                pass\n\n        .. seealso:: `zope.interface.classImplements`\n        .. seealso:: `zope.interface.implementer`\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_classImplements",
      "source_code": ""
    },
    {
      "function": "i.getName",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line": 834,
      "caller": "test_classImplements",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several \n        different expressions might match at a particular location.\n\n        Example::\n            integer = Word(nums)\n            ssn_expr = Regex(r\"\\d\\d\\d-\\d\\d-\\d\\d\\d\\d\")\n            house_number_expr = Suppress('#') + Word(nums, alphanums)\n            user_data = (Group(house_number_expr)(\"house_number\") \n                        | Group(ssn_expr)(\"ssn\")\n                        | Group(integer)(\"age\"))\n            user_info = OneOrMore(user_data)\n            \n            result = user_info.parseString(\"22 111-22-3333 #221B\")\n            for item in result:\n                print(item.getName(), ':', item[0])\n        prints::\n            age : 22\n            ssn : 111-22-3333\n            house_number : 221B\n        \"\"\"\n        if self.__name:\n            return self.__name\n        elif self.__parent:\n            par = self.__parent()\n            if par:\n                return par.__lookup(self)\n            else:\n                return None\n        elif (len(self) == 1 and\n               len(self.__tokdict) == 1 and\n               next(iter(self.__tokdict.values()))[0][1] in (0,-1)):\n            return next(iter(self.__tokdict.keys()))\n        else:\n            return None\n\n"
    },
    {
      "function": "i.getName",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line": 834,
      "caller": "test_classImplements",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several \n        different expressions might match at a particular location.\n\n        Example::\n            integer = Word(nums)\n            ssn_expr = Regex(r\"\\d\\d\\d-\\d\\d-\\d\\d\\d\\d\")\n            house_number_expr = Suppress('#') + Word(nums, alphanums)\n            user_data = (Group(house_number_expr)(\"house_number\") \n                        | Group(ssn_expr)(\"ssn\")\n                        | Group(integer)(\"age\"))\n            user_info = OneOrMore(user_data)\n            \n            result = user_info.parseString(\"22 111-22-3333 #221B\")\n            for item in result:\n                print(item.getName(), ':', item[0])\n        prints::\n            age : 22\n            ssn : 111-22-3333\n            house_number : 221B\n        \"\"\"\n        if self.__name:\n            return self.__name\n        elif self.__parent:\n            par = self.__parent()\n            if par:\n                return par.__lookup(self)\n            else:\n                return None\n        elif (len(self) == 1 and\n               len(self.__tokdict) == 1 and\n               next(iter(self.__tokdict.values()))[0][1] in (0,-1)):\n            return next(iter(self.__tokdict.keys()))\n        else:\n            return None\n\n"
    },
    {
      "function": "implementedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 165,
      "caller": "test_classImplements",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.\n\n        Raise TypeError if argument is neither a class nor a callable.\n        \"\"\"\n        spec = implementedBy(cls)\n        return self in spec._implied\n\n"
    },
    {
      "function": "implementedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 165,
      "caller": "test_classImplements",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.\n\n        Raise TypeError if argument is neither a class nor a callable.\n        \"\"\"\n        spec = implementedBy(cls)\n        return self in spec._implied\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_classImplements(self):\n\n        @implementer(I3)\n        class A(Odd):\n            pass\n\n        @implementer(I4)\n        class B(Odd):\n            pass\n\n        class C(A, B):\n            pass\n\n        classImplements(C, I1, I2)\n        self.assertEqual([i.getName() for i in implementedBy(C)],\n                         ['I1', 'I2', 'I3', 'I4'])\n\n        classImplements(C, I5)\n        self.assertEqual([i.getName() for i in implementedBy(C)],\n                         ['I1', 'I2', 'I5', 'I3', 'I4'])"
}