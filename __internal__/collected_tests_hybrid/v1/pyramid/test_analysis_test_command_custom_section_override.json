{
  "test_name": "test_command_custom_section_override",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pshell.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "dummy.Dummy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dummy.DummyShell",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "command.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_command_custom_section_override",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "dummy.Dummy",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    },
    {
      "function": "dummy.DummyShell",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    },
    {
      "function": "command.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_command_custom_section_override",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_command_custom_section_override",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_command_custom_section_override(self):\n        command = self._makeOne()\n        dummy_ = dummy.Dummy()\n        self.loader.settings = {\n            'pshell': {\n                'app': dummy_,\n                'root': dummy_,\n                'registry': dummy_,\n                'request': dummy_,\n            }\n        }\n        shell = dummy.DummyShell()\n        command.run(shell)\n        self.assertEqual(self.bootstrap.a[0], '/foo/bar/myapp.ini#myapp')\n        self.assertEqual(\n            shell.env,\n            {\n                'app': dummy_,\n                'root': dummy_,\n                'registry': dummy_,\n                'request': dummy_,\n                'root_factory': self.bootstrap.root_factory,\n            },\n        )\n        self.assertTrue(self.bootstrap.closer.called)\n        self.assertTrue(shell.help)"
}