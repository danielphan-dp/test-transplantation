{
  "test_name": "test_command_errors_with_unknown_shell",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pshell.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "dummy.DummyShell",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeEntryPoints",
      "source_code": "    def _makeEntryPoints(self, command, shells):\n        entry_points = [\n            DummyEntryPoint(name, value) for name, value in shells.items()\n        ]\n        command.importlib_metadata = DummyImportlibMetadata(entry_points)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pshell.py",
      "line_number": 53
    },
    {
      "name": "command.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "out_calls.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "dummy.DummyShell",
      "filename": "",
      "line": 0,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": ""
    },
    {
      "function": "self._makeEntryPoints",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pshell.py",
      "line": 53,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": "    def _makeEntryPoints(self, command, shells):\n        entry_points = [\n            DummyEntryPoint(name, value) for name, value in shells.items()\n        ]\n        command.importlib_metadata = DummyImportlibMetadata(entry_points)\n\n"
    },
    {
      "function": "command.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": ""
    },
    {
      "function": "out_calls.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_command_errors_with_unknown_shell",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_command_errors_with_unknown_shell(self):\n        command = self._makeOne()\n        out_calls = []\n\n        def out(msg):\n            out_calls.append(msg)\n\n        command.out = out\n\n        shell = dummy.DummyShell()\n\n        self._makeEntryPoints(command, {})\n\n        command.default_runner = shell\n        command.args.python_shell = 'unknown_python_shell'\n        result = command.run()\n        self.assertEqual(result, 1)\n        self.assertEqual(\n            out_calls, ['could not find a shell named \"unknown_python_shell\"']\n        )\n        self.assertEqual(self.bootstrap.a[0], '/foo/bar/myapp.ini#myapp')\n        self.assertTrue(self.bootstrap.closer.called)"
}