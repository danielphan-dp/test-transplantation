{
  "test_name": "test_config_file_finds_open_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripts/test_pserve.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.loader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "inst.pserve_file_config",
      "source_code": "    def pserve_file_config(self, loader, global_conf=None):\n        settings = loader.get_settings('pserve', global_conf)\n        config_path = self.get_config_path(loader)\n        here = os.path.dirname(config_path)\n        watch_files = aslist(settings.get('watch_files', ''), flatten=False)\n        self.ignore_files = set(\n            aslist(settings.get('ignore_files', ''), flatten=False)\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripts/pserve.py",
      "line_number": 151
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_config_file_finds_open_url",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.loader",
      "filename": "",
      "line": 0,
      "caller": "test_config_file_finds_open_url",
      "source_code": ""
    },
    {
      "function": "inst.pserve_file_config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripts/pserve.py",
      "line": 151,
      "caller": "test_config_file_finds_open_url",
      "source_code": "    def pserve_file_config(self, loader, global_conf=None):\n        settings = loader.get_settings('pserve', global_conf)\n        config_path = self.get_config_path(loader)\n        here = os.path.dirname(config_path)\n        watch_files = aslist(settings.get('watch_files', ''), flatten=False)\n        self.ignore_files = set(\n            aslist(settings.get('ignore_files', ''), flatten=False)\n        )\n\n        # track file paths relative to the ini file\n        resolver = AssetResolver(package=None)\n        for file in watch_files:\n            if ':' in file:\n                file = resolver.resolve(file).abspath()\n            elif not os.path.isabs(file):\n                file = os.path.join(here, file)\n            self.watch_files.add(os.path.abspath(file))\n\n        # attempt to determine the url of the server\n        open_url = settings.get('open_url')\n        if open_url:\n            self.open_url = open_url\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_config_file_finds_open_url",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_config_file_finds_open_url",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_config_file_finds_open_url(self):\n        inst = self._makeOne('development.ini')\n        loader = self.loader('/base/path.ini')\n        loader.settings = {'pserve': {'open_url': 'http://127.0.0.1:8080/'}}\n        inst.pserve_file_config(loader, global_conf={'a': '1'})\n        self.assertEqual(loader.calls[0]['defaults'], {'a': '1'})\n        self.assertEqual(inst.open_url, 'http://127.0.0.1:8080/')"
}