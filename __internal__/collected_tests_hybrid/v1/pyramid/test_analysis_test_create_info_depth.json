{
  "test_name": "test_create_info_depth",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
  "static_methods": [
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "make",
      "source_code": "    def make(self, specification, options=None):\n        \"\"\"\n        Make a script.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/scripts.py",
      "line_number": 409
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "target",
      "source_code": "    def target(self):\n        return self._get_arg_or_default(self._IX_TARGET, self._NOT_GIVEN)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/exceptions.py",
      "line_number": 68
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_create_info_depth",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "make",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/scripts.py",
      "line": 409,
      "caller": "test_create_info_depth",
      "source_code": "    def make(self, specification, options=None):\n        \"\"\"\n        Make a script.\n\n        :param specification: The specification, which is either a valid export\n                              entry specification (to make a script from a\n                              callable) or a filename (to make a script by\n                              copying from a source location).\n        :param options: A dictionary of options controlling script generation.\n        :return: A list of all absolute pathnames written to.\n        \"\"\"\n        filenames = []\n        entry = get_export_entry(specification)\n        if entry is None:\n            self._copy_script(specification, filenames)\n        else:\n            self._make_script(entry, filenames, options=options)\n        return filenames\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_create_info_depth",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_create_info_depth",
      "source_code": ""
    },
    {
      "function": "target",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/exceptions.py",
      "line": 68,
      "caller": "test_create_info_depth",
      "source_code": "    @property\n    def target(self):\n        return self._get_arg_or_default(self._IX_TARGET, self._NOT_GIVEN)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_create_info_depth(self):\n        target = self._getTargetClass()\n\n        def make():\n            return target(_depth=1)\n\n        decorator = make()\n        info = decorator._info\n        self.assertEqual(info[2], 'test_create_info_depth')\n        self.assertEqual(info[3], 'decorator = make()')"
}