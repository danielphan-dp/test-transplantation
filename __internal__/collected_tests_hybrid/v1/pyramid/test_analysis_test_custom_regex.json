{
  "test_name": "test_custom_regex",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_urldispatch.py",
  "static_methods": [
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "matcher",
      "source_code": "    def matcher(path):\n        m = match(path)\n        if m is None:\n            return None\n        d = {}\n        for k, v in m.groupdict().items():\n            if k == remainder:\n                d[k] = split_path_info(v)\n            else:\n                d[k] = v\n        return d",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/urldispatch.py",
      "line_number": 185
    },
    {
      "name": "matcher",
      "source_code": "    def matcher(path):\n        m = match(path)\n        if m is None:\n            return None\n        d = {}\n        for k, v in m.groupdict().items():\n            if k == remainder:\n                d[k] = split_path_info(v)\n            else:\n                d[k] = v\n        return d",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/urldispatch.py",
      "line_number": 185
    },
    {
      "name": "generator",
      "source_code": "        def generator(value):\n            for match in (\n                cls.media_range_n_accept_params_compiled_re.finditer(value)\n            ):\n                groups = match.groups()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/acceptparse.py",
      "line_number": 380
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_custom_regex",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_custom_regex",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_custom_regex",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_custom_regex",
      "source_code": ""
    },
    {
      "function": "matcher",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/urldispatch.py",
      "line": 185,
      "caller": "test_custom_regex",
      "source_code": "    def matcher(path):\n        m = match(path)\n        if m is None:\n            return None\n        d = {}\n        for k, v in m.groupdict().items():\n            if k == remainder:\n                d[k] = split_path_info(v)\n            else:\n                d[k] = v\n        return d\n\n"
    },
    {
      "function": "matcher",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/urldispatch.py",
      "line": 185,
      "caller": "test_custom_regex",
      "source_code": "    def matcher(path):\n        m = match(path)\n        if m is None:\n            return None\n        d = {}\n        for k, v in m.groupdict().items():\n            if k == remainder:\n                d[k] = split_path_info(v)\n            else:\n                d[k] = v\n        return d\n\n"
    },
    {
      "function": "generator",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/acceptparse.py",
      "line": 380,
      "caller": "test_custom_regex",
      "source_code": "        def generator(value):\n            for match in (\n                cls.media_range_n_accept_params_compiled_re.finditer(value)\n            ):\n                groups = match.groups()\n\n                type_subtype = groups[0]\n\n                media_type_params = cls._parse_media_type_params(\n                    media_type_params_segment=groups[1],\n                )\n\n                media_range = cls._form_media_range(\n                    type_subtype=type_subtype,\n                    media_type_params=media_type_params,\n                )\n\n                # qvalue (groups[2]) and extension_params (groups[3]) are both\n                # None if neither qvalue or extension parameters are found in\n                # the match.\n\n                qvalue = groups[2]\n                qvalue = float(qvalue) if qvalue else 1.0\n\n                extension_params = groups[3]\n                if extension_params:\n                    extension_params = cls.accept_ext_compiled_re.findall(\n                        extension_params,\n                    )\n                    for index, (token_key, token_value) in enumerate(\n                        extension_params\n                    ):\n                        if token_value:\n                            if (\n                                token_value.startswith('\"') and\n                                token_value.endswith('\"')\n                            ):\n                                token_value = cls._process_quoted_string_token(\n                                    token=token_value,\n                                )\n                                extension_params[index] = (\n                                    token_key, token_value,\n                                )\n                        else:\n                            extension_params[index] = token_key\n                else:\n                    extension_params = []\n\n                yield (\n                    media_range, qvalue, media_type_params, extension_params,\n                )\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_custom_regex(self):\n        matcher, generator = self._callFUT(\n            'foo/{baz}/biz/{buz:[^/\\\\.]+}.{bar}'\n        )\n        self.assertEqual(\n            matcher('/foo/baz/biz/buz.bar'),\n            {'baz': 'baz', 'buz': 'buz', 'bar': 'bar'},\n        )\n        self.assertEqual(matcher('foo/baz/biz/buz/bar'), None)\n        self.assertEqual(\n            generator({'baz': 1, 'buz': 2, 'bar': 'html'}), '/foo/1/biz/2.html'\n        )"
}