{
  "test_name": "test_dgettext",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_i18n.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "t.dgettext",
      "source_code": "    def dgettext(self, domain, message):\n        \"\"\"Like ``gettext()``, but look the message up in the specified\n        domain.\n        \"\"\"\n        return self._domains.get(domain, self).gettext(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line_number": 332
    },
    {
      "name": "t.dgettext",
      "source_code": "    def dgettext(self, domain, message):\n        \"\"\"Like ``gettext()``, but look the message up in the specified\n        domain.\n        \"\"\"\n        return self._domains.get(domain, self).gettext(message)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line_number": 332
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_dgettext",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dgettext",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_dgettext",
      "source_code": ""
    },
    {
      "function": "t.dgettext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line": 332,
      "caller": "test_dgettext",
      "source_code": "    def dgettext(self, domain, message):\n        \"\"\"Like ``gettext()``, but look the message up in the specified\n        domain.\n        \"\"\"\n        return self._domains.get(domain, self).gettext(message)\n\n"
    },
    {
      "function": "t.dgettext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/i18n.py",
      "line": 332,
      "caller": "test_dgettext",
      "source_code": "    def dgettext(self, domain, message):\n        \"\"\"Like ``gettext()``, but look the message up in the specified\n        domain.\n        \"\"\"\n        return self._domains.get(domain, self).gettext(message)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dgettext(self):\n        t = self._makeOne()\n        self.assertEqual(t.dgettext('messages', 'foo'), 'Voh')\n        self.assertEqual(t.dgettext('messages1', 'foo'), 'VohD')"
}