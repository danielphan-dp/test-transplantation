{
  "test_name": "test_end",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
  "static_methods": [
    {
      "name": "Configurator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyThreadLocalManager",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.end",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 289
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Configurator",
      "filename": "",
      "line": 0,
      "caller": "test_end",
      "source_code": ""
    },
    {
      "function": "DummyThreadLocalManager",
      "filename": "",
      "line": 0,
      "caller": "test_end",
      "source_code": ""
    },
    {
      "function": "config.end",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 289,
      "caller": "test_end",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_end",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_end",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_end(self):\n        from pyramid.config import Configurator\n\n        config = Configurator()\n        manager = DummyThreadLocalManager()\n        pushed = manager.pushed\n        config.manager = manager\n        config.end()\n        self.assertEqual(manager.pushed, pushed)\n        self.assertEqual(manager.popped, True)"
}