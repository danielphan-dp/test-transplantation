{
  "test_name": "test_flattened_multiple_bases",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
  "static_methods": [
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "decl.flattened",
      "source_code": "    def flattened():\n        \"\"\"Return an iterator of all included and extended interfaces",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 427
    }
  ],
  "dynamic_methods": [
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_flattened_multiple_bases",
      "source_code": ""
    },
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_flattened_multiple_bases",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_flattened_multiple_bases",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_flattened_multiple_bases",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_flattened_multiple_bases",
      "source_code": ""
    },
    {
      "function": "decl.flattened",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 427,
      "caller": "test_flattened_multiple_bases",
      "source_code": "    def flattened():\n        \"\"\"Return an iterator of all included and extended interfaces\n\n        An iterator is returned for all interfaces either included in\n        or extended by interfaces included in the specifications\n        without duplicates. The interfaces are in \"interface\n        resolution order\". The interface resolution order is such that\n        base interfaces are listed after interfaces that extend them\n        and, otherwise, interfaces are included in the order that they\n        were defined in the specification.\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_flattened_multiple_bases(self):\n        from zope.interface.interface import Interface\n        from zope.interface.interface import InterfaceClass\n        IFoo = InterfaceClass('IFoo')\n        IBar = InterfaceClass('IBar')\n        decl = self._makeOne(IFoo, IBar)\n        self.assertEqual(list(decl.flattened()), [IFoo, IBar, Interface])"
}