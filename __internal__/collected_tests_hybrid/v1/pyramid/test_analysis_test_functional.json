{
  "test_name": "test_functional",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
  "static_methods": [
    {
      "name": "self._makeConfigurator",
      "source_code": "    def _makeConfigurator(self, *arg, **kw):\n        from pyramid.config import Configurator",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
      "line_number": 1391
    },
    {
      "name": "config.add_directive",
      "source_code": "    def add_directive(self, name, directive, action_wrap=True):\n        \"\"\"\n        Add a directive method to the configurator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 670
    },
    {
      "name": "config.add_auto_route",
      "source_code": "        def add_auto_route(config, name, view):\n            def register():\n                config.add_view(route_name=name, view=view)\n                config.add_route(name, '/' + name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
      "line_number": 703
    },
    {
      "name": "config.commit",
      "source_code": "    def commit(self):\n        \"\"\"\n        Commit recorded changes, turn off recording, return\n        changes.\n        \"\"\"\n        assert self.record\n        result = self.files_written, self.dirs_created\n        self._init_record()\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 639
    },
    {
      "name": "config.registry.getUtility",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line_number": 300
    },
    {
      "name": "mapper.get_routes",
      "source_code": "    def get_routes():\n        \"\"\"Return a sequence of Route objects registered in the mapper.\n        Static routes will not be returned in this sequence.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 990
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.action",
      "source_code": "    def action(\n        self,\n        discriminator,\n        callable=None,\n        args=(),\n        kw=None,\n        order=0,\n        introspectables=(),\n        **extra,\n    ):\n        \"\"\"Register an action which will be executed when\n        :meth:`pyramid.config.Configurator.commit` is called (or executed\n        immediately if ``autocommit`` is ``True``).",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line_number": 30
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "config.add_route",
      "source_code": "    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n    ):\n        \"\"\"Add a :term:`route configuration` to the current configuration\n        state.  Arguments to ``add_route`` are divided into *predicate*\n        and *non-predicate* types.  :term:`Route predicate` arguments\n        narrow the circumstances in which a route will match a\n        request; non-predicate arguments are informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line_number": 22
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeConfigurator",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
      "line": 1391,
      "caller": "test_functional",
      "source_code": "    def _makeConfigurator(self, *arg, **kw):\n        from pyramid.config import Configurator\n\n        config = Configurator(*arg, **kw)\n        return config\n\n"
    },
    {
      "function": "config.add_directive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 670,
      "caller": "test_functional",
      "source_code": "    def add_directive(self, name, directive, action_wrap=True):\n        \"\"\"\n        Add a directive method to the configurator.\n\n        .. warning:: This method is typically only used by :app:`Pyramid`\n           framework extension authors, not by :app:`Pyramid` application\n           developers.\n\n        Framework extenders can add directive methods to a configurator by\n        instructing their users to call ``config.add_directive('somename',\n        'some.callable')``.  This will make ``some.callable`` accessible as\n        ``config.somename``.  ``some.callable`` should be a function which\n        accepts ``config`` as a first argument, and arbitrary positional and\n        keyword arguments following.  It should use config.action as\n        necessary to perform actions.  Directive methods can then be invoked\n        like 'built-in' directives such as ``add_view``, ``add_route``, etc.\n\n        The ``action_wrap`` argument should be ``True`` for directives which\n        perform ``config.action`` with potentially conflicting\n        discriminators.  ``action_wrap`` will cause the directive to be\n        wrapped in a decorator which provides more accurate conflict\n        cause information.\n\n        ``add_directive`` does not participate in conflict detection, and\n        later calls to ``add_directive`` will override earlier calls.\n        \"\"\"\n        name = get_callable_name(name)\n        c = self.maybe_dotted(directive)\n        if not hasattr(self.registry, '_directives'):\n            self.registry._directives = {}\n        self.registry._directives[name] = (c, action_wrap)\n\n"
    },
    {
      "function": "config.add_auto_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
      "line": 703,
      "caller": "test_functional",
      "source_code": "        def add_auto_route(config, name, view):\n            def register():\n                config.add_view(route_name=name, view=view)\n                config.add_route(name, '/' + name)\n\n            config.action(('auto route', name), register, order=-30)\n\n"
    },
    {
      "function": "config.commit",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 639,
      "caller": "test_functional",
      "source_code": "    def commit(self):\n        \"\"\"\n        Commit recorded changes, turn off recording, return\n        changes.\n        \"\"\"\n        assert self.record\n        result = self.files_written, self.dirs_created\n        self._init_record()\n        return result\n\n"
    },
    {
      "function": "config.registry.getUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/registry.py",
      "line": 300,
      "caller": "test_functional",
      "source_code": "    def getUtility(self, provided, name=''):\n        utility = self.utilities.lookup((), provided, name)\n        if utility is None:\n            raise ComponentLookupError(provided, name)\n        return utility\n\n"
    },
    {
      "function": "mapper.get_routes",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 990,
      "caller": "test_functional",
      "source_code": "    def get_routes():\n        \"\"\"Return a sequence of Route objects registered in the mapper.\n        Static routes will not be returned in this sequence.\"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_functional",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_functional",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_functional",
      "source_code": ""
    },
    {
      "function": "config.action",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line": 30,
      "caller": "test_functional",
      "source_code": "    def action(\n        self,\n        discriminator,\n        callable=None,\n        args=(),\n        kw=None,\n        order=0,\n        introspectables=(),\n        **extra,\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_functional",
      "source_code": ""
    },
    {
      "function": "config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_functional",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "config.add_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line": 22,
      "caller": "test_functional",
      "source_code": "    @action_method\n    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_functional(self):\n        def add_auto_route(config, name, view):\n            def register():\n                config.add_view(route_name=name, view=view)\n                config.add_route(name, '/' + name)\n\n            config.action(('auto route', name), register, order=-30)\n\n        config = self._makeConfigurator()\n        config.add_directive('add_auto_route', add_auto_route)\n\n        def my_view(request):  # pragma: no cover\n            return request.response\n\n        config.add_auto_route('foo', my_view)\n        config.commit()\n        from pyramid.interfaces import IRoutesMapper\n\n        mapper = config.registry.getUtility(IRoutesMapper)\n        routes = mapper.get_routes()\n        route = routes[0]\n        self.assertEqual(len(routes), 1)\n        self.assertEqual(route.name, 'foo')\n        self.assertEqual(route.path, '/foo')"
}