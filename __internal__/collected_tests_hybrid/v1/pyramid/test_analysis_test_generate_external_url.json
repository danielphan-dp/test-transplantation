{
  "test_name": "test_generate_external_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_url.py",
  "static_methods": [
    {
      "name": "self.config.add_route",
      "source_code": "    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n    ):\n        \"\"\"Add a :term:`route configuration` to the current configuration\n        state.  Arguments to ``add_route`` are divided into *predicate*\n        and *non-predicate* types.  :term:`Route predicate` arguments\n        narrow the circumstances in which a route will match a\n        request; non-predicate arguments are informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line_number": 22
    },
    {
      "name": "self._makeRequest",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line_number": 1298
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.route_url",
      "source_code": "def route_url(route_name, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line_number": 783
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.config.add_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/routes.py",
      "line": 22,
      "caller": "test_generate_external_url",
      "source_code": "    @action_method\n    def add_route(\n        self,\n        name,\n        pattern=None,\n        factory=None,\n        for_=None,\n        header=None,\n        xhr=None,\n        accept=None,\n        path_info=None,\n        request_method=None,\n        request_param=None,\n        traverse=None,\n        custom_predicates=(),\n        use_global_views=False,\n        path=None,\n        pregenerator=None,\n        static=False,\n        inherit_slash=None,\n        **predicates,\n"
    },
    {
      "function": "self._makeRequest",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_traversal.py",
      "line": 1298,
      "caller": "test_generate_external_url",
      "source_code": "def _makeRequest(environ=None):\n    from pyramid.registry import Registry\n\n    request = DummyRequest()\n    request.registry = Registry()\n    return request\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_generate_external_url",
      "source_code": ""
    },
    {
      "function": "request.route_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/url.py",
      "line": 783,
      "caller": "test_generate_external_url",
      "source_code": "def route_url(route_name, request, *elements, **kw):\n    \"\"\"\n    This is a backwards compatibility function.  Its result is the same as\n    calling::\n\n        request.route_url(route_name, *elements, **kw)\n\n    See :meth:`pyramid.request.Request.route_url` for more information.\n    \"\"\"\n    return request.route_url(route_name, *elements, **kw)\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_generate_external_url(self):\n        self.config.add_route('acme', 'https://acme.org/path/{foo}')\n        request = self._makeRequest()\n        request.registry = self.config.registry\n        self.assertEqual(\n            request.route_url('acme', foo='bar'), 'https://acme.org/path/bar'\n        )"
}