{
  "test_name": "test_get_string",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_assets.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "_assertBody",
      "source_code": "def _assertBody(body, filename):\n    if defaultlocale is None:  # pragma: no cover\n        # If system locale does not have an encoding then default to utf-8\n        filename = filename.encode('utf-8')\n    # strip both \\n and \\r for windows\n    body = body.replace(b'\\r', b'')\n    body = body.replace(b'\\n', b'')\n    data = read_(filename)\n    data = data.replace(b'\\r', b'')\n    data = data.replace(b'\\n', b'')\n    assert body == data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line_number": 1017
    },
    {
      "name": "source.get_string",
      "source_code": "    def get_string(self, resource_name):\n        for source, path in self.filtered_sources(resource_name):\n            result = source.get_string(path)\n            if result is not None:\n                return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/assets.py",
      "line_number": 137
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_get_string",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "_assertBody",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line": 1017,
      "caller": "test_get_string",
      "source_code": "def _assertBody(body, filename):\n    if defaultlocale is None:  # pragma: no cover\n        # If system locale does not have an encoding then default to utf-8\n        filename = filename.encode('utf-8')\n    # strip both \\n and \\r for windows\n    body = body.replace(b'\\r', b'')\n    body = body.replace(b'\\n', b'')\n    data = read_(filename)\n    data = data.replace(b'\\r', b'')\n    data = data.replace(b'\\n', b'')\n    assert body == data\n\n\n"
    },
    {
      "function": "source.get_string",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/assets.py",
      "line": 137,
      "caller": "test_get_string",
      "source_code": "    def get_string(self, resource_name):\n        for source, path in self.filtered_sources(resource_name):\n            result = source.get_string(path)\n            if result is not None:\n                return result\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_string(self):\n        source = self._makeOne('')\n        _assertBody(\n            source.get_string('test_assets.py'),\n            os.path.join(here, 'test_assets.py'),\n        )"
}