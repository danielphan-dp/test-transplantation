{
  "test_name": "test_get_views_no_self_accepts",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mv.get_views",
      "source_code": "    def get_views(self, request):\n        if self.accepts and hasattr(request, 'accept'):\n            views = []\n            for offer, _ in request.accept.acceptable_offers(self.accepts):\n                views.extend(self.media_views[offer])\n            views.extend(self.views)\n            return views\n        return self.views",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 120
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_get_views_no_self_accepts",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_get_views_no_self_accepts",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_get_views_no_self_accepts",
      "source_code": ""
    },
    {
      "function": "mv.get_views",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 120,
      "caller": "test_get_views_no_self_accepts",
      "source_code": "    def get_views(self, request):\n        if self.accepts and hasattr(request, 'accept'):\n            views = []\n            for offer, _ in request.accept.acceptable_offers(self.accepts):\n                views.extend(self.media_views[offer])\n            views.extend(self.views)\n            return views\n        return self.views\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_views_no_self_accepts(self):\n        request = DummyRequest()\n        request.accept = True\n        mv = self._makeOne()\n        mv.accepts = []\n        mv.views = [(99, lambda *arg: None)]\n        self.assertEqual(mv.get_views(request), mv.views)"
}