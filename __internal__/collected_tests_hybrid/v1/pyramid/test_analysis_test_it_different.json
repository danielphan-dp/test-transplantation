{
  "test_name": "test_it_different",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_views.py",
  "static_methods": [
    {
      "name": "DummyView1",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView2",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyView1",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "DummyView2",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_it_different",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_different",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_different(self):\n        class DummyView1:\n            \"\"\"1\"\"\"\n\n            __name__ = '1'\n            __module__ = '1'\n\n            def __call__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __call_permissive__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __predicated__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __permitted__(self, context, request):\n                \"\"\" \"\"\"\n\n        class DummyView2:\n            \"\"\"2\"\"\"\n\n            __name__ = '2'\n            __module__ = '2'\n\n            def __call__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __call_permissive__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __predicated__(self, context, request):\n                \"\"\" \"\"\"\n\n            def __permitted__(self, context, request):\n                \"\"\" \"\"\"\n\n        view1 = DummyView1()\n        view2 = DummyView2()\n        result = self._callFUT(view2, view1)\n        self.assertEqual(result, view1)\n        self.assertTrue(view1.__original_view__ is view2)\n        self.assertTrue(view1.__doc__ is view2.__doc__)\n        self.assertTrue(view1.__module__ is view2.__module__)\n        self.assertTrue(view1.__name__ is view2.__name__)\n        self.assertTrue(\n            getattr(view1.__call_permissive__, '__func__')\n            is getattr(view2.__call_permissive__, '__func__')\n        )\n        self.assertTrue(\n            getattr(view1.__permitted__, '__func__')\n            is getattr(view2.__permitted__, '__func__')\n        )\n        self.assertTrue(\n            getattr(view1.__predicated__, '__func__')\n            is getattr(view2.__predicated__, '__func__')\n        )"
}