{
  "test_name": "test_it_with_actions_grouped_by_order",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
  "static_methods": [
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_it_with_actions_grouped_by_order",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_with_actions_grouped_by_order",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_with_actions_grouped_by_order",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_with_actions_grouped_by_order",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_it_with_actions_grouped_by_order",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_with_actions_grouped_by_order(self):\n        from . import dummyfactory as f\n\n        result = self._callFUT(\n            [\n                (None, f),  # X\n                (1, f, (1,), {}, (), 'third', 10),  # X\n                (1, f, (2,), {}, ('x',), 'fourth', 10),\n                (1, f, (3,), {}, ('y',), 'fifth', 10),\n                (2, f, (1,), {}, (), 'sixth', 10),  # X\n                (3, f, (1,), {}, (), 'seventh', 10),  # X\n                (5, f, (4,), {}, ('y',), 'eighth', 99999),  # X\n                (4, f, (3,), {}, (), 'first', 5),  # X\n                (4, f, (5,), {}, ('y',), 'second', 5),\n            ]\n        )\n        result = list(result)\n        self.assertEqual(len(result), 6)\n        # resolved actions should be grouped by (order, i)\n        self.assertEqual(\n            result,\n            [\n                {\n                    'info': None,\n                    'args': (),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': None,\n                    'includepath': (),\n                    'order': 0,\n                },\n                {\n                    'info': 'first',\n                    'args': (3,),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': 4,\n                    'includepath': (),\n                    'order': 5,\n                },\n                {\n                    'info': 'third',\n                    'args': (1,),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': 1,\n                    'includepath': (),\n                    'order': 10,\n                },\n                {\n                    'info': 'sixth',\n                    'args': (1,),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': 2,\n                    'includepath': (),\n                    'order': 10,\n                },\n                {\n                    'info': 'seventh',\n                    'args': (1,),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': 3,\n                    'includepath': (),\n                    'order': 10,\n                },\n                {\n                    'info': 'eighth',\n                    'args': (4,),\n                    'callable': f,\n                    'introspectables': (),\n                    'kw': {},\n                    'discriminator': 5,\n                    'includepath': ('y',),\n                    'order': 99999,\n                },\n            ],\n        )"
}