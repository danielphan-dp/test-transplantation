{
  "test_name": "test_it_with_extensions",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_scripting.py",
  "static_methods": [
    {
      "name": "DummyExtensions",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InstancePropertyHelper.make_property",
      "source_code": "    def make_property(cls, callable, name=None, reify=False):\n        \"\"\"Convert a callable into one suitable for adding to the\n        instance. This will return a 2-tuple containing the computed\n        (name, property) pair.\n        \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line_number": 104
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeRegistry",
      "source_code": "    def _makeRegistry(self, depth):",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 1377
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "closer",
      "source_code": "    def closer():\n        ctx.end()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripting.py",
      "line_number": 28
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyExtensions",
      "filename": "",
      "line": 0,
      "caller": "test_it_with_extensions",
      "source_code": ""
    },
    {
      "function": "InstancePropertyHelper.make_property",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/util.py",
      "line": 104,
      "caller": "test_it_with_extensions",
      "source_code": "    @classmethod\n    def make_property(cls, callable, name=None, reify=False):\n        \"\"\"Convert a callable into one suitable for adding to the\n        instance. This will return a 2-tuple containing the computed\n        (name, property) pair.\n        \"\"\"\n\n        if name is None:\n            if not hasattr(callable, '__name__'):\n                raise ValueError(\n                    'missing __name__, must specify \"name\" for property'\n                )\n            name = callable.__name__\n        name = get_callable_name(name)\n        is_data_descriptor = inspect.isdatadescriptor(callable)\n        if reify and is_data_descriptor:\n            raise ValueError('cannot reify a data descriptor')\n        if is_data_descriptor:\n            fn = callable\n        else:\n            wrapped = lambda this: callable(this)\n            wrapped.__name__ = name\n            wrapped.__doc__ = callable.__doc__\n\n            if reify:\n                import pyramid.decorator  # avoid circular import\n\n                fn = pyramid.decorator.reify(wrapped)\n            else:\n                fn = SettableProperty(wrapped)\n\n        return name, fn\n\n"
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_it_with_extensions",
      "source_code": ""
    },
    {
      "function": "self._makeRegistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 1377,
      "caller": "test_it_with_extensions",
      "source_code": "    def _makeRegistry(self, depth):\n\n        class WithGeneration:\n            _generation = 1\n\n        class Registry:\n            def __init__(self, depth):\n                self.ro = [WithGeneration() for i in range(depth)]\n\n        return Registry(depth)\n\n"
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_it_with_extensions",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_it_with_extensions",
      "source_code": ""
    },
    {
      "function": "closer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/scripting.py",
      "line": 28,
      "caller": "test_it_with_extensions",
      "source_code": "    def closer():\n        ctx.end()\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_it_with_extensions(self):\n        from pyramid.util import InstancePropertyHelper\n\n        exts = DummyExtensions()\n        ext_method = lambda r: 'bar'\n        name, fn = InstancePropertyHelper.make_property(ext_method, 'foo')\n        exts.descriptors[name] = fn\n        request = DummyRequest({})\n        registry = request.registry = self._makeRegistry([exts, DummyFactory])\n        info = self._callFUT(request=request, registry=registry)\n        self.assertEqual(request.foo, 'bar')\n        closer = info['closer']\n        closer()"
}