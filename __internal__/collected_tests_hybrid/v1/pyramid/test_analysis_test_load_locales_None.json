{
  "test_name": "test_load_locales_None",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_i18n.py",
  "static_methods": [
    {
      "name": "self._getTargetClass",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 116
    },
    {
      "name": "klass.load",
      "source_code": "    def load(self, config_uri):\n        config_uri = parse_uri(config_uri)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/plaster/loaders.py",
      "line_number": 219
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._getTargetClass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 116,
      "caller": "test_load_locales_None",
      "source_code": "    def _getTargetClass(self):\n        from zope.interface.interface import Element\n        return Element\n\n"
    },
    {
      "function": "klass.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/plaster/loaders.py",
      "line": 219,
      "caller": "test_load_locales_None",
      "source_code": "    def load(self, config_uri):\n        config_uri = parse_uri(config_uri)\n\n        return self.factory(config_uri)\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_load_locales_None",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_load_locales_None(self):\n        import gettext\n\n        klass = self._getTargetClass()\n        result = klass.load(localedir, None, domain=None)\n        self.assertEqual(result.__class__, gettext.NullTranslations)"
}