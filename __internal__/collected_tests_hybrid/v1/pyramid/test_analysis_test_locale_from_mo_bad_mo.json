{
  "test_name": "test_locale_from_mo_bad_mo",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_i18n.py",
  "static_methods": [
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "result.translate",
      "source_code": "    def translate(msgid, domain=None, mapping=None, context=None,\n                 target_language=None, default=None):",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/__init__.py",
      "line_number": 185
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_locale_from_mo_bad_mo",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_locale_from_mo_bad_mo",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_locale_from_mo_bad_mo",
      "source_code": ""
    },
    {
      "function": "result.translate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/translationstring/__init__.py",
      "line": 185,
      "caller": "test_locale_from_mo_bad_mo",
      "source_code": "    def translate(msgid, domain=None, mapping=None, context=None,\n                 target_language=None, default=None):\n\n        # NB: note that both TranslationString._init__ and\n        # TranslationString.interpolate are careful to never lose the\n        # *identity* of an empty but non-``None`` ``default`` value we\n        # provide to them.  For example, neither of those functions\n        # are permitted to run an empty but non-``None`` ``default``\n        # through ``unicode`` and throw the original default value\n        # away afterwards.\n\n        # This has a dubious cause: for Chameleon API reasons we must\n        # ensure that, after translation, if ( (translated == msgid)\n        # and (not default) and (default is not None) ) that we return\n        # the ``default`` value provided to us *unmodified*, because\n        # Chameleon uses it as a sentinel (it compares the return\n        # value of this function by identity to what it passed in as\n        # ``default``; this marker is a\n        # chameleon.core.i18n.StringMarker instance, a subclass of str\n        # that == '').  This is, of course, totally absurd, because\n        # Chameleon *also* wants us to use ``default`` as the input to\n        # a translation string in some cases, and maintaining the\n        # identity of this object through translation operations isn't\n        # a contract it spells out in its docs.\n\n        # Chameleon's use of ``default`` to represent both a sentinel\n        # and input to a translation string is a Chameleon i18n\n        # extensibility design bug.  Until we overhaul its hook point\n        # for translation extensibility, we need to appease it by\n        # preserving ``default`` in the aforementioned case.  So we\n        # spray these indignant comments all over this module. ;-)\n\n        if not isinstance(msgid, string_types):\n            if msgid is not None:\n                msgid = text_type(msgid)\n            return msgid\n\n        tstring = msgid\n\n        if not hasattr(tstring, 'interpolate'):\n            tstring = TranslationString(msgid, domain, default, mapping, context)\n        if translator is None:\n            result = tstring.interpolate()\n        else:\n            result = translator(tstring)\n\n        return result\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_locale_from_mo_bad_mo(self):\n        from pyramid.i18n import Localizer\n\n        localedirs = [localedir]\n        locale_name = 'be'\n        result = self._callFUT(locale_name, localedirs)\n        self.assertEqual(result.__class__, Localizer)\n        self.assertEqual(result.translate('Approve', 'deformsite'), 'Approve')"
}