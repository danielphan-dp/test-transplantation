{
  "test_name": "test_maybe_dotted_string_success",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.maybe_dotted",
      "source_code": "    def maybe_dotted(value):\n        \"\"\"Resolve the :term:`dotted Python name` ``dotted`` to a\n        global Python object.  If ``dotted`` is not a string, return\n        it without attempting to do any name resolution.  If\n        ``dotted`` is a relative dotted name (e.g. ``.foo.bar``,\n        consider it relative to the ``package``.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 1472
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_maybe_dotted_string_success",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.maybe_dotted",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 1472,
      "caller": "test_maybe_dotted_string_success",
      "source_code": "    def maybe_dotted(value):\n        \"\"\"Resolve the :term:`dotted Python name` ``dotted`` to a\n        global Python object.  If ``dotted`` is not a string, return\n        it without attempting to do any name resolution.  If\n        ``dotted`` is a relative dotted name (e.g. ``.foo.bar``,\n        consider it relative to the ``package``.\"\"\"\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_maybe_dotted_string_success",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_maybe_dotted_string_success(self):\n        import tests.test_config\n\n        config = self._makeOne()\n        result = config.maybe_dotted('tests.test_config')\n        self.assertEqual(result, tests.test_config)"
}