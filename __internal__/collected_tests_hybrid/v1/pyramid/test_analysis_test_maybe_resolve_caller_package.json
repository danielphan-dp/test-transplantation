{
  "test_name": "test_maybe_resolve_caller_package",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_path.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "typ.maybe_resolve",
      "source_code": "    def maybe_resolve(self, dotted):\n        \"\"\"\n        This method behaves just like\n        :meth:`~pyramid.path.DottedNameResolver.resolve`, except if the\n        ``dotted`` value passed is not a string, it is simply returned.  For\n        example:",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/path.py",
      "line_number": 311
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_maybe_resolve_caller_package",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_maybe_resolve_caller_package",
      "source_code": ""
    },
    {
      "function": "typ.maybe_resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/path.py",
      "line": 311,
      "caller": "test_maybe_resolve_caller_package",
      "source_code": "    def maybe_resolve(self, dotted):\n        \"\"\"\n        This method behaves just like\n        :meth:`~pyramid.path.DottedNameResolver.resolve`, except if the\n        ``dotted`` value passed is not a string, it is simply returned.  For\n        example:\n\n        .. code-block:: python\n\n           import xml\n           r = DottedNameResolver()\n           v = r.maybe_resolve(xml)\n           # v is the xml module; no exception raised\n        \"\"\"\n        if isinstance(dotted, str):\n            package = self.package\n            if package is CALLER_PACKAGE:\n                package = caller_package()\n            return self._resolve(dotted, package)\n        return dotted\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_maybe_resolve_caller_package(self):\n        from pyramid.path import CALLER_PACKAGE\n\n        typ = self._makeOne(CALLER_PACKAGE)\n        self.assertEqual(\n            typ.maybe_resolve('.test_path.TestDottedNameResolver'),\n            self.__class__,\n        )"
}