{
  "test_name": "test_multiple_invalid",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_verify.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "classImplements",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 595
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "classImplements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 595,
      "caller": "test_multiple_invalid",
      "source_code": "    def classImplements(class_, *interfaces):\n        \"\"\"\n        Declare additional interfaces implemented for instances of a class.\n\n        The arguments after the class are one or more interfaces or\n        interface specifications (`IDeclaration` objects).\n\n        The interfaces given (including the interfaces in the\n        specifications) are added to any interfaces previously\n        declared.\n\n        Consider the following example::\n\n          class C(A, B):\n             ...\n\n          classImplements(C, I1, I2)\n\n\n        Instances of ``C`` provide ``I1``, ``I2``, and whatever interfaces\n        instances of ``A`` and ``B`` provide. This is equivalent to::\n\n            @implementer(I1, I2)\n            class C(A, B):\n                pass\n\n        .. seealso:: `zope.interface.classImplements`\n        .. seealso:: `zope.interface.implementer`\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_multiple_invalid",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_multiple_invalid",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_multiple_invalid",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_multiple_invalid(self):\n        from zope.interface import Interface\n        from zope.interface import classImplements\n        from zope.interface.exceptions import BrokenImplementation\n        from zope.interface.exceptions import DoesNotImplement\n        from zope.interface.exceptions import MultipleInvalid\n\n        class ISeveralMethods(Interface):\n            def meth1(arg1):\n                \"Method 1\"\n            def meth2(arg1):\n                \"Method 2\"\n\n        class SeveralMethods:\n            pass\n\n        with self.assertRaises(MultipleInvalid) as exc:\n            self._callFUT(ISeveralMethods, SeveralMethods)\n\n        ex = exc.exception\n        self.assertEqual(3, len(ex.exceptions))\n        self.assertIsInstance(ex.exceptions[0], DoesNotImplement)\n        self.assertIsInstance(ex.exceptions[1], BrokenImplementation)\n        self.assertIsInstance(ex.exceptions[2], BrokenImplementation)\n\n        # If everything else is correct, only the single error is raised\n        # without the wrapper.\n        classImplements(SeveralMethods, ISeveralMethods)\n        SeveralMethods.meth1 = lambda self, arg1: \"Hi\"\n\n        with self.assertRaises(BrokenImplementation):\n            self._callFUT(ISeveralMethods, SeveralMethods)"
}