{
  "test_name": "test_namesAndDescriptions_derived",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Attribute",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IDerived.namesAndDescriptions",
      "source_code": "    def namesAndDescriptions(\n        self, all=False  # pylint:disable=redefined-builtin\n    ):\n        \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n        if not all:\n            return self.__attrs.items()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 861
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "IDerived.namesAndDescriptions",
      "source_code": "    def namesAndDescriptions(\n        self, all=False  # pylint:disable=redefined-builtin\n    ):\n        \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n        if not all:\n            return self.__attrs.items()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 861
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "Attribute",
      "filename": "",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "IDerived.namesAndDescriptions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 861,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": "    def namesAndDescriptions(\n        self, all=False  # pylint:disable=redefined-builtin\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    },
    {
      "function": "IDerived.namesAndDescriptions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 861,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": "    def namesAndDescriptions(\n        self, all=False  # pylint:disable=redefined-builtin\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_namesAndDescriptions_derived",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_namesAndDescriptions_derived(self):\n        from zope.interface import Attribute\n        from zope.interface import Interface\n        from zope.interface.interface import Method\n\n        class IBase(Interface):\n            attr = Attribute('My attr')\n\n            def method():\n                \"My method\"\n\n        class IDerived(IBase):\n            attr2 = Attribute('My attr2')\n\n            def method():\n                \"My method, overridden\"\n\n            def method2():\n                \"My method2\"\n\n        name_values = sorted(IDerived.namesAndDescriptions())\n\n        self.assertEqual(len(name_values), 3)\n        self.assertEqual(name_values[0][0], 'attr2')\n        self.assertIsInstance(name_values[0][1], Attribute)\n        self.assertEqual(name_values[0][1].__name__, 'attr2')\n        self.assertEqual(name_values[0][1].__doc__, 'My attr2')\n        self.assertEqual(name_values[1][0], 'method')\n        self.assertIsInstance(name_values[1][1], Method)\n        self.assertEqual(name_values[1][1].__name__, 'method')\n        self.assertEqual(name_values[1][1].__doc__, 'My method, overridden')\n        self.assertEqual(name_values[2][0], 'method2')\n        self.assertIsInstance(name_values[2][1], Method)\n        self.assertEqual(name_values[2][1].__name__, 'method2')\n        self.assertEqual(name_values[2][1].__doc__, 'My method2')\n\n        name_values = sorted(IDerived.namesAndDescriptions(all=True))\n\n        self.assertEqual(len(name_values), 4)\n        self.assertEqual(name_values[0][0], 'attr')\n        self.assertIsInstance(name_values[0][1], Attribute)\n        self.assertEqual(name_values[0][1].__name__, 'attr')\n        self.assertEqual(name_values[0][1].__doc__, 'My attr')\n        self.assertEqual(name_values[1][0], 'attr2')\n        self.assertIsInstance(name_values[1][1], Attribute)\n        self.assertEqual(name_values[1][1].__name__, 'attr2')\n        self.assertEqual(name_values[1][1].__doc__, 'My attr2')\n        self.assertEqual(name_values[2][0], 'method')\n        self.assertIsInstance(name_values[2][1], Method)\n        self.assertEqual(name_values[2][1].__name__, 'method')\n        self.assertEqual(name_values[2][1].__doc__, 'My method, overridden')\n        self.assertEqual(name_values[3][0], 'method2')\n        self.assertIsInstance(name_values[3][1], Method)\n        self.assertEqual(name_values[3][1].__name__, 'method2')\n        self.assertEqual(name_values[3][1].__doc__, 'My method2')"
}