{
  "test_name": "test_new_csrf_token",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_session.py",
  "static_methods": [
    {
      "name": "testing.DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "session.new_csrf_token",
      "source_code": "def new_csrf_token(request):\n    \"\"\"Generate a new CSRF token for the request passed and persist it in an\n    implementation defined manner. This calls the equivalent method in the\n    chosen CSRF protection implementation.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/csrf.py",
      "line_number": 177
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "testing.DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_new_csrf_token",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_new_csrf_token",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "session.new_csrf_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/csrf.py",
      "line": 177,
      "caller": "test_new_csrf_token",
      "source_code": "def new_csrf_token(request):\n    \"\"\"Generate a new CSRF token for the request passed and persist it in an\n    implementation defined manner. This calls the equivalent method in the\n    chosen CSRF protection implementation.\n\n    .. versionadded :: 1.9\n\n    \"\"\"\n    registry = request.registry\n    csrf = registry.getUtility(ICSRFStoragePolicy)\n    return csrf.new_csrf_token(request)\n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_new_csrf_token",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_new_csrf_token(self):\n        request = testing.DummyRequest()\n        session = self._makeOne(request)\n        token = session.new_csrf_token()\n        self.assertEqual(token, session['_csrft_'])"
}