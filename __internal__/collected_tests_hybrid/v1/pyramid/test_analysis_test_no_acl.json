{
  "test_name": "test_no_acl",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_authorization.py",
  "static_methods": [
    {
      "name": "DummyContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ACLHelper",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "helper.permits",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 60
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "DummyContext",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "ACLHelper",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "helper.permits",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 60,
      "caller": "test_no_acl",
      "source_code": "    def permits(self, request, context, permission):\n        return self.permissive\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_no_acl",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_no_acl(self):\n        from pyramid.authorization import ACLHelper\n\n        context = DummyContext()\n        helper = ACLHelper()\n        result = helper.permits(context, ['foo'], 'permission')\n        self.assertEqual(result, False)\n        self.assertEqual(result.ace, '<default deny>')\n        self.assertEqual(\n            result.acl, '<No ACL found on any object in resource lineage>'\n        )\n        self.assertEqual(result.permission, 'permission')\n        self.assertEqual(result.principals, ['foo'])\n        self.assertEqual(result.context, context)"
}