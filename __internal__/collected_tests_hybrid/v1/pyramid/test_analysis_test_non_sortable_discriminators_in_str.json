{
  "test_name": "test_non_sortable_discriminators_in_str",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "OrderedDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "OrderedDict",
      "filename": "",
      "line": 0,
      "caller": "test_non_sortable_discriminators_in_str",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_non_sortable_discriminators_in_str",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_non_sortable_discriminators_in_str",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_non_sortable_discriminators_in_str",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_non_sortable_discriminators_in_str(self):\n        conflicts = OrderedDict()\n        conflicts['a'] = ('1', '2', '3')\n        conflicts[None] = ('4', '5', '6')\n        exc = self._makeOne(conflicts)\n        self.assertEqual(\n            str(exc),\n            \"\"\"\\\nConflicting configuration actions\n  For: a\n    1\n    2\n    3\n  For: None\n    4\n    5\n    6\"\"\",\n        )"
}