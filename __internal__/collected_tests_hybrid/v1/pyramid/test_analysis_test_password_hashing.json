{
  "test_name": "test_password_hashing",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki/src/tests/tests/test_models.py",
  "static_methods": [
    {
      "name": "hash_password",
      "source_code": "def hash_password(pw):\n    hashed_pw = bcrypt.hashpw(pw.encode('utf-8'), bcrypt.gensalt())\n    # return unicode instead of bytes because databases handle it better\n    return hashed_pw.decode('utf-8')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki/src/tests/tutorial/security.py",
      "line_number": 10
    },
    {
      "name": "check_password",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line_number": 21
    },
    {
      "name": "check_password",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line_number": 21
    },
    {
      "name": "check_password",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line_number": 21
    }
  ],
  "dynamic_methods": [
    {
      "function": "hash_password",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki/src/tests/tutorial/security.py",
      "line": 10,
      "caller": "test_password_hashing",
      "source_code": "def hash_password(pw):\n    hashed_pw = bcrypt.hashpw(pw.encode('utf-8'), bcrypt.gensalt())\n    # return unicode instead of bytes because databases handle it better\n    return hashed_pw.decode('utf-8')\n\n"
    },
    {
      "function": "check_password",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line": 21,
      "caller": "test_password_hashing",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False\n\n"
    },
    {
      "function": "check_password",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line": 21,
      "caller": "test_password_hashing",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False\n\n"
    },
    {
      "function": "check_password",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/docs/tutorials/wiki2/src/tests/tutorial/models/user.py",
      "line": 21,
      "caller": "test_password_hashing",
      "source_code": "    def check_password(self, pw):\n        if self.password_hash is not None:\n            expected_hash = self.password_hash.encode('utf8')\n            return bcrypt.checkpw(pw.encode('utf8'), expected_hash)\n        return False\n\n"
    }
  ],
  "assertions": [
    "assert check_password(hashed_password, password)",
    "assert not check_password(hashed_password, 'attackerpassword')",
    "assert not check_password(None, password)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_password_hashing():\n    from tutorial.security import hash_password, check_password\n\n    password = 'secretpassword'\n    hashed_password = hash_password(password)\n    assert check_password(hashed_password, password)\n    assert not check_password(hashed_password, 'attackerpassword')\n    assert not check_password(None, password)"
}