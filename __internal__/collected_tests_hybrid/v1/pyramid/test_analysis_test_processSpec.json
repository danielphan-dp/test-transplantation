{
  "test_name": "test_processSpec",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_actions.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "c.processSpec",
      "source_code": "    def processSpec(self, spec):\n        \"\"\"Check whether a callable needs to be processed.  The ``spec``\n        refers to a unique identifier for the callable.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line_number": 164
    },
    {
      "name": "c.processSpec",
      "source_code": "    def processSpec(self, spec):\n        \"\"\"Check whether a callable needs to be processed.  The ``spec``\n        refers to a unique identifier for the callable.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line_number": 164
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_processSpec",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_processSpec",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_processSpec",
      "source_code": ""
    },
    {
      "function": "c.processSpec",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line": 164,
      "caller": "test_processSpec",
      "source_code": "    def processSpec(self, spec):\n        \"\"\"Check whether a callable needs to be processed.  The ``spec``\n        refers to a unique identifier for the callable.\n\n        Return True if processing is needed and False otherwise. If\n        the callable needs to be processed, it will be marked as\n        processed, assuming that the caller will process the callable if\n        it needs to be processed.\n        \"\"\"\n        if spec in self._seen_files:\n            return False\n        self._seen_files.add(spec)\n        return True\n\n"
    },
    {
      "function": "c.processSpec",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/actions.py",
      "line": 164,
      "caller": "test_processSpec",
      "source_code": "    def processSpec(self, spec):\n        \"\"\"Check whether a callable needs to be processed.  The ``spec``\n        refers to a unique identifier for the callable.\n\n        Return True if processing is needed and False otherwise. If\n        the callable needs to be processed, it will be marked as\n        processed, assuming that the caller will process the callable if\n        it needs to be processed.\n        \"\"\"\n        if spec in self._seen_files:\n            return False\n        self._seen_files.add(spec)\n        return True\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_processSpec(self):\n        c = self._makeOne()\n        self.assertTrue(c.processSpec('spec'))\n        self.assertFalse(c.processSpec('spec'))"
}