{
  "test_name": "test_proxy_equality",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_declarations.py",
  "static_methods": [
    {
      "name": "implementedBy",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 165
    },
    {
      "name": "implementedBy",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 165
    },
    {
      "name": "Proxy",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertNotEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NotImplementedError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "implementedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 165,
      "caller": "test_proxy_equality",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.\n\n        Raise TypeError if argument is neither a class nor a callable.\n        \"\"\"\n        spec = implementedBy(cls)\n        return self in spec._implied\n\n"
    },
    {
      "function": "implementedBy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 165,
      "caller": "test_proxy_equality",
      "source_code": "    def implementedBy(self, cls):\n        \"\"\"Test whether the specification is implemented by a class or factory.\n\n        Raise TypeError if argument is neither a class nor a callable.\n        \"\"\"\n        spec = implementedBy(cls)\n        return self in spec._implied\n\n"
    },
    {
      "function": "Proxy",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "self.assertNotEqual",
      "filename": "",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    },
    {
      "function": "NotImplementedError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_proxy_equality",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_proxy_equality(self):\n        # https://github.com/zopefoundation/zope.interface/issues/55\n        from zope.interface.declarations import implementedBy\n\n        class Proxy:\n            def __init__(self, wrapped):\n                self._wrapped = wrapped\n\n            def __getattr__(self, name):\n                raise NotImplementedError()\n\n            def __eq__(self, other):\n                return self._wrapped == other\n\n            def __ne__(self, other):\n                return self._wrapped != other\n\n        class A:\n            pass\n\n        class B:\n            pass\n\n        implementedByA = implementedBy(A)\n        implementedByB = implementedBy(B)\n        proxy = Proxy(implementedByA)\n\n        # The order of arguments to the operators matters,\n        # test both\n        self.assertEqual(\n            implementedByA,\n            implementedByA\n        )\n        self.assertNotEqual(implementedByA, implementedByB)\n        self.assertNotEqual(implementedByB, implementedByA)\n\n        self.assertEqual(proxy, implementedByA)\n        self.assertEqual(implementedByA, proxy)\n        self.assertEqual(proxy, implementedByA)\n        self.assertEqual(implementedByA, proxy)\n\n        self.assertNotEqual(proxy, implementedByB)\n        self.assertNotEqual(implementedByB, proxy)"
}