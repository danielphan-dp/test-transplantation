{
  "test_name": "test_queryMultiAdaptor_factory_miss",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InterfaceClass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "implementer",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 630
    },
    {
      "name": "Foo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeRegistry",
      "source_code": "    def _makeRegistry(self, depth):",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 1377
    },
    {
      "name": "self._makeSubregistry",
      "source_code": "    def _makeSubregistry(self, *provided):",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 1544
    },
    {
      "name": "registry.ro.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "alb.queryMultiAdapter",
      "source_code": "    def queryMultiAdapter(objects, provided, name='', default=None):\n        \"\"\"Adapt a sequence of objects to a named, provided, interface\n        \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 857
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_called_with.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    }
  ],
  "dynamic_methods": [
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "InterfaceClass",
      "filename": "",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "implementer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 630,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def implementer(*interfaces):\n        \"\"\"\n        Create a decorator for declaring interfaces implemented by a\n        factory.\n\n        A callable is returned that makes an implements declaration on\n        objects passed to it.\n\n        .. seealso:: :meth:`classImplements`\n        \"\"\"\n\n"
    },
    {
      "function": "Foo",
      "filename": "",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "self._makeRegistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 1377,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def _makeRegistry(self, depth):\n\n        class WithGeneration:\n            _generation = 1\n\n        class Registry:\n            def __init__(self, depth):\n                self.ro = [WithGeneration() for i in range(depth)]\n\n        return Registry(depth)\n\n"
    },
    {
      "function": "self._makeSubregistry",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 1544,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def _makeSubregistry(self, *provided):\n\n        class Subregistry:\n            def __init__(self):\n                self._adapters = []\n                self._subscribers = []\n\n        return Subregistry()\n\n"
    },
    {
      "function": "registry.ro.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "alb.queryMultiAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 857,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def queryMultiAdapter(objects, provided, name='', default=None):\n        \"\"\"Adapt a sequence of objects to a named, provided, interface\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": ""
    },
    {
      "function": "_called_with.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_queryMultiAdaptor_factory_miss",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_queryMultiAdaptor_factory_miss(self):\n        from zope.interface.declarations import implementer\n        from zope.interface.interface import InterfaceClass\n        IFoo = InterfaceClass('IFoo')\n        IBar = InterfaceClass('IBar', (IFoo,))\n\n        @implementer(IFoo)\n        class Foo:\n            pass\n\n        foo = Foo()\n        registry = self._makeRegistry(IFoo, IBar)\n        subr = self._makeSubregistry()\n        _called_with = []\n\n        def _factory(context):\n            _called_with.append(context)\n\n        subr._adapters = [  # utilities, single adapters\n            {},\n            {IFoo: {IBar: {'': _factory}}},\n        ]\n        registry.ro.append(subr)\n        alb = self._makeOne(registry)\n        alb.lookup = alb._uncached_lookup  # provided by derived\n        subr._v_lookup = alb\n        _default = object()\n        result = alb.queryMultiAdapter((foo,), IBar, default=_default)\n        self.assertIs(result, _default)\n        self.assertEqual(_called_with, [foo])"
}