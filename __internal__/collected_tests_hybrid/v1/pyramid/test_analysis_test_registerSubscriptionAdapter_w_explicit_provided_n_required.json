{
  "test_name": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NotImplementedError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "comp.registerSubscriptionAdapter",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1341
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "NotImplementedError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "comp.registerSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1341,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": "    def registerSubscriptionAdapter(factory, required=None, provides=None,\n                                    name='', info=''):\n        \"\"\"Register a subscriber factory\n\n        :param factory:\n            The object used to compute the adapter\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory implements\n            a single interface, then this argument is optional and\n            the factory-implemented interface will be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        A `IRegistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registerSubscriptionAdapter_w_explicit_provided_n_required",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registerSubscriptionAdapter_w_explicit_provided_n_required(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.interfaces import Registered\n        from zope.interface.registry import SubscriptionRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IBar')\n        _blank = ''\n        _info = 'info'\n\n        def _factory(context):\n            raise NotImplementedError()\n\n        comp = self._makeOne()\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            comp.registerSubscriptionAdapter(_factory, (ibar,), ifoo,\n                                             info=_info)\n        reg = comp.adapters._subscribers[1][ibar][ifoo][_blank]\n        self.assertEqual(len(reg), 1)\n        self.assertIs(reg[0], _factory)\n        self.assertEqual(comp._subscription_registrations,\n                         [((ibar,), ifoo, _blank, _factory, _info)])\n        self.assertEqual(len(_events), 1)\n        args, kw = _events[0]\n        event, = args\n        self.assertEqual(kw, {})\n        self.assertIsInstance(event, Registered)\n        self.assertIsInstance(event.object, SubscriptionRegistration)\n        self.assertIs(event.object.registry, comp)\n        self.assertIs(event.object.provided, ifoo)\n        self.assertEqual(event.object.required, (ibar,))\n        self.assertEqual(event.object.name, _blank)\n        self.assertIs(event.object.info, _info)\n        self.assertIs(event.object.factory, _factory)"
}