{
  "test_name": "test_registerUtility_wo_provided",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Foo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "directlyProvides",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n    ):  # pylint:disable=redefined-builtin\n        \"\"\"\n        Declare interfaces declared directly for an object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 684
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIs",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsNone",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "Foo",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "directlyProvides",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 684,
      "caller": "test_registerUtility_wo_provided",
      "source_code": "    def directlyProvides(\n        object, *interfaces,\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registerUtility_wo_provided",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_registerUtility_wo_provided",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIs",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "self.assertIsNone",
      "filename": "",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    },
    {
      "function": "comp.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_registerUtility_wo_provided",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registerUtility_wo_provided",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registerUtility_wo_provided(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.declarations import directlyProvides\n        from zope.interface.interfaces import Registered\n        from zope.interface.registry import UtilityRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        class Foo:\n            pass\n\n        ifoo = IFoo('IFoo')\n        _info = 'info'\n        _name = 'name'\n        _to_reg = Foo()\n        directlyProvides(_to_reg, ifoo)\n        comp = self._makeOne()\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            comp.registerUtility(_to_reg, None, _name, _info)\n        self.assertEqual(len(_events), 1)\n        args, kw = _events[0]\n        event, = args\n        self.assertEqual(kw, {})\n        self.assertIsInstance(event, Registered)\n        self.assertIsInstance(event.object, UtilityRegistration)\n        self.assertIs(event.object.registry, comp)\n        self.assertIs(event.object.provided, ifoo)\n        self.assertIs(event.object.name, _name)\n        self.assertIs(event.object.component, _to_reg)\n        self.assertIs(event.object.info, _info)\n        self.assertIsNone(event.object.factory)"
}