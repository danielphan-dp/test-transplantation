{
  "test_name": "test_registeredHandlers_non_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "comp.registerHandler",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1432
    },
    {
      "name": "comp.registerHandler",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1432
    },
    {
      "name": "sorted",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertIsInstance",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NotImplementedError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "NotImplementedError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "comp.registeredHandlers",
      "source_code": "    def registeredHandlers():\n        \"\"\"Return an iterable of `IHandlerRegistration` instances.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1503
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "comp.registerHandler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1432,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.\n\n        A handler is a subscriber that doesn't compute an adapter\n        but performs some function when called.\n\n        :param handler:\n            The object used to handle some event represented by\n            the objects passed to it.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param name:\n            The handler name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named handlers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n\n        A `IRegistered` event is generated with an `IHandlerRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "comp.registerHandler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1432,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": "    def registerHandler(handler, required=None, name='', info=''):\n        \"\"\"Register a handler.\n\n        A handler is a subscriber that doesn't compute an adapter\n        but performs some function when called.\n\n        :param handler:\n            The object used to handle some event represented by\n            the objects passed to it.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param name:\n            The handler name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named handlers is added.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n\n        A `IRegistered` event is generated with an `IHandlerRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "sorted",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertIsInstance",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "NotImplementedError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "NotImplementedError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    },
    {
      "function": "comp.registeredHandlers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1503,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": "    def registeredHandlers():\n        \"\"\"Return an iterable of `IHandlerRegistration` instances.\n\n        These registrations describe the current handler registrations\n        in the object.\n        \"\"\"\n\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_registeredHandlers_non_empty",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registeredHandlers_non_empty(self):\n        from zope.interface.declarations import InterfaceClass\n        from zope.interface.registry import HandlerRegistration\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n\n        def _factory1(context):\n            raise NotImplementedError()\n\n        def _factory2(context):\n            raise NotImplementedError()\n\n        comp = self._makeOne()\n        comp.registerHandler(_factory1, (ifoo,))\n        comp.registerHandler(_factory2, (ifoo,))\n\n        def _factory_name(x):\n            return x.factory.__code__.co_name\n\n        subscribers = sorted(comp.registeredHandlers(), key=_factory_name)\n        self.assertEqual(len(subscribers), 2)\n        self.assertIsInstance(subscribers[0], HandlerRegistration)\n        self.assertEqual(subscribers[0].required, (ifoo,))\n        self.assertEqual(subscribers[0].name, '')\n        self.assertEqual(subscribers[0].factory, _factory1)\n        self.assertEqual(subscribers[0].info, '')\n        self.assertIsInstance(subscribers[1], HandlerRegistration)\n        self.assertEqual(subscribers[1].required, (ifoo,))\n        self.assertEqual(subscribers[1].name, '')\n        self.assertEqual(subscribers[1].factory, _factory2)\n        self.assertEqual(subscribers[1].info, '')"
}