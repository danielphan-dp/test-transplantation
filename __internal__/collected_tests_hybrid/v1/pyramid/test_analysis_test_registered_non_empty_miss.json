{
  "test_name": "test_registered_non_empty_miss",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "_makeInterfaces",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 24
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "registry.register",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line_number": 107
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.registered",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 835
    }
  ],
  "dynamic_methods": [
    {
      "function": "_makeInterfaces",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 24,
      "caller": "test_registered_non_empty_miss",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface\n\n    class IB0(Interface):\n        pass\n\n    class IB1(IB0):\n        pass\n\n    class IB2(IB0):\n        pass\n\n    class IB3(IB2, IB1):\n        pass\n\n    class IB4(IB1, IB2):\n        pass\n\n    class IF0(Interface):\n        pass\n\n    class IF1(IF0):\n        pass\n\n    class IR0(Interface):\n        pass\n\n    class IR1(IR0):\n        pass\n\n    return IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1\n\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_registered_non_empty_miss",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "registry.register",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/distlib/index.py",
      "line": 107,
      "caller": "test_registered_non_empty_miss",
      "source_code": "    def register(self, metadata):  # pragma: no cover\n        \"\"\"\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        \"\"\"\n        self.check_credentials()\n        metadata.validate()\n        d = metadata.todict()\n        d[':action'] = 'verify'\n        request = self.encode_request(d.items(), [])\n        response = self.send_request(request)\n        d[':action'] = 'submit'\n        request = self.encode_request(d.items(), [])\n        return self.send_request(request)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_registered_non_empty_miss",
      "source_code": ""
    },
    {
      "function": "registry.registered",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 835,
      "caller": "test_registered_non_empty_miss",
      "source_code": "    def registered(required, provided, name=''):\n        \"\"\"Return the component registered for the given interfaces and name\n\n        name must be text.\n\n        Unlike the lookup method, this methods won't retrieve\n        components registered for more specific required interfaces or\n        less specific provided interfaces.\n\n        If no component was registered exactly for the given\n        interfaces and name, then None is returned.\n\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_registered_non_empty_miss(self):\n        (\n            IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1,\n        ) = _makeInterfaces()  # pylint:disable=unused-variable\n        registry = self._makeOne()\n        registry.register([IB1], None, '', 'A1')\n        self.assertEqual(registry.registered([IB2], None, ''), None)"
}