{
  "test_name": "test_request_context_with_statement",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_router.py",
  "static_methods": [
    {
      "name": "router.request_context",
      "source_code": "    def request_context(environ):\n        \"\"\"\n        Create a new request context from a WSGI environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 830
    },
    {
      "name": "registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "Request.blank.get_response",
      "source_code": "    def get_response(self, app):\n        return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line_number": 720
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "result.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "router.request_context",
      "source_code": "    def request_context(environ):\n        \"\"\"\n        Create a new request context from a WSGI environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line_number": 830
    },
    {
      "name": "result.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "get_current_request",
      "source_code": "def get_current_request():\n    \"\"\"\n    Return the currently active request or ``None`` if no request\n    is currently active.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line_number": 42
    },
    {
      "name": "Request.blank",
      "source_code": "    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line_number": 1330
    },
    {
      "name": "get_current_request",
      "source_code": "def get_current_request():\n    \"\"\"\n    Return the currently active request or ``None`` if no request\n    is currently active.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line_number": 42
    }
  ],
  "dynamic_methods": [
    {
      "function": "router.request_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 830,
      "caller": "test_request_context_with_statement",
      "source_code": "    def request_context(environ):\n        \"\"\"\n        Create a new request context from a WSGI environ.\n\n        The request context is used to push/pop the threadlocals required\n        when processing the request. It also contains an initialized\n        :class:`pyramid.interfaces.IRequest` instance using the registered\n        :class:`pyramid.interfaces.IRequestFactory`. The context may be\n        used as a context manager to control the threadlocal lifecycle:\n\n        .. code-block:: python\n\n            with router.request_context(environ) as request:\n                ...\n\n        Alternatively, the context may be used without the ``with`` statement\n        by manually invoking its ``begin()`` and ``end()`` methods.\n\n        .. code-block:: python\n\n            ctx = router.request_context(environ)\n            request = ctx.begin()\n            try:\n                ...\n            finally:\n                ctx.end()\n\n        \"\"\"\n\n"
    },
    {
      "function": "registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_request_context_with_statement",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_request_context_with_statement",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "Request.blank.get_response",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line": 720,
      "caller": "test_request_context_with_statement",
      "source_code": "    def get_response(self, app):\n        return app\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_request_context_with_statement",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_request_context_with_statement",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_request_context_with_statement",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_request_context_with_statement",
      "source_code": ""
    },
    {
      "function": "result.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_request_context_with_statement",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_request_context_with_statement",
      "source_code": ""
    },
    {
      "function": "router.request_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/interfaces.py",
      "line": 830,
      "caller": "test_request_context_with_statement",
      "source_code": "    def request_context(environ):\n        \"\"\"\n        Create a new request context from a WSGI environ.\n\n        The request context is used to push/pop the threadlocals required\n        when processing the request. It also contains an initialized\n        :class:`pyramid.interfaces.IRequest` instance using the registered\n        :class:`pyramid.interfaces.IRequestFactory`. The context may be\n        used as a context manager to control the threadlocal lifecycle:\n\n        .. code-block:: python\n\n            with router.request_context(environ) as request:\n                ...\n\n        Alternatively, the context may be used without the ``with`` statement\n        by manually invoking its ``begin()`` and ``end()`` methods.\n\n        .. code-block:: python\n\n            ctx = router.request_context(environ)\n            request = ctx.begin()\n            try:\n                ...\n            finally:\n                ctx.end()\n\n        \"\"\"\n\n"
    },
    {
      "function": "result.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_request_context_with_statement",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "get_current_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line": 42,
      "caller": "test_request_context_with_statement",
      "source_code": "def get_current_request():\n    \"\"\"\n    Return the currently active request or ``None`` if no request\n    is currently active.\n\n    This function should be used *extremely sparingly*, usually only\n    in unit testing code.  It's almost always usually a mistake to use\n    ``get_current_request`` outside a testing context because its\n    usage makes it possible to write code that can be neither easily\n    tested nor scripted.\n\n    \"\"\"\n    return manager.get()['request']\n\n\n"
    },
    {
      "function": "Request.blank",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line": 1330,
      "caller": "test_request_context_with_statement",
      "source_code": "    @classmethod\n    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.\n\n        The path will become path_info, with any query string split\n        off and used.\n\n        All necessary keys will be added to the environ, but the\n        values you pass in will take precedence.  If you pass in\n        base_url then wsgi.url_scheme, HTTP_HOST, and SCRIPT_NAME will\n        be filled in from that value.\n\n        Any extra keyword will be passed to ``__init__``.\n        \"\"\"\n        env = environ_from_url(path)\n        if base_url:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(base_url)\n            if query or fragment:\n                raise ValueError(\n                    \"base_url (%r) cannot have a query or fragment\"\n                    % base_url)\n            if scheme:\n                env['wsgi.url_scheme'] = scheme\n            if netloc:\n                if ':' not in netloc:\n                    if scheme == 'http':\n                        netloc += ':80'\n                    elif scheme == 'https':\n                        netloc += ':443'\n                    else:\n                        raise ValueError(\n                            \"Unknown scheme: %r\" % scheme)\n                host, port = netloc.split(':', 1)\n                env['SERVER_PORT'] = port\n                env['SERVER_NAME'] = host\n                env['HTTP_HOST'] = netloc\n            if path:\n                env['SCRIPT_NAME'] = url_unquote(path)\n        if environ:\n            env.update(environ)\n        content_type = kw.get('content_type', env.get('CONTENT_TYPE'))\n        if headers and 'Content-Type' in headers:\n            content_type = headers['Content-Type']\n        if content_type is not None:\n            kw['content_type'] = content_type\n        environ_add_POST(env, POST, content_type=content_type)\n        obj = cls(env, **kw)\n        if headers is not None:\n            obj.headers.update(headers)\n        return obj\n\n"
    },
    {
      "function": "get_current_request",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/threadlocal.py",
      "line": 42,
      "caller": "test_request_context_with_statement",
      "source_code": "def get_current_request():\n    \"\"\"\n    Return the currently active request or ``None`` if no request\n    is currently active.\n\n    This function should be used *extremely sparingly*, usually only\n    in unit testing code.  It's almost always usually a mistake to use\n    ``get_current_request`` outside a testing context because its\n    usage makes it possible to write code that can be neither easily\n    tested nor scripted.\n\n    \"\"\"\n    return manager.get()['request']\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_request_context_with_statement(self):\n        from pyramid.interfaces import IExecutionPolicy\n        from pyramid.request import Request\n        from pyramid.response import Response\n        from pyramid.threadlocal import get_current_request\n\n        registry = self.config.registry\n        result = []\n\n        def dummy_policy(environ, router):\n            with router.request_context(environ):\n                result.append(get_current_request())\n            result.append(get_current_request())\n            return Response(status=200, body=b'foo')\n\n        registry.registerUtility(dummy_policy, IExecutionPolicy)\n        router = self._makeOne()\n        resp = Request.blank('/test_path').get_response(router)\n        self.assertEqual(resp.status_code, 200)\n        self.assertEqual(resp.body, b'foo')\n        self.assertEqual(result[0].path_info, '/test_path')\n        self.assertEqual(result[1], None)"
}