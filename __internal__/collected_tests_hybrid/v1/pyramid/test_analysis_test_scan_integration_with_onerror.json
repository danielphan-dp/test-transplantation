{
  "test_name": "test_scan_integration_with_onerror",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_init.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_scan_integration_with_onerror",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_scan_integration_with_onerror",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_scan_integration_with_onerror(self):\n        # fancy sys.path manipulation here to appease \"setup.py test\" which\n        # fails miserably when it can't import something in the package\n        import sys\n\n        try:\n            here = os.path.dirname(__file__)\n            path = os.path.join(here, 'path')\n            sys.path.append(path)\n            config = self._makeOne(autocommit=True)\n\n            class FooException(Exception):\n                pass\n\n            def onerror(name):\n                raise FooException\n\n            self.assertRaises(\n                FooException, config.scan, 'scanerror', onerror=onerror\n            )\n        finally:\n            sys.path.remove(path)"
}