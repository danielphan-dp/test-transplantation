{
  "test_name": "test_secured_view_failed_on_explicit_exception_view",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._registerSecurityPolicy",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 30
    },
    {
      "name": "self.config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self.config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self.config.make_wsgi_app",
      "source_code": "    def make_wsgi_app(self):\n        \"\"\"Commits any pending configuration statements, sends a\n        :class:`pyramid.events.ApplicationCreated` event to all listeners,\n        adds this configuration's registry to\n        :attr:`pyramid.config.global_registries`, and returns a\n        :app:`Pyramid` WSGI application representing the committed\n        configuration state.\"\"\"\n        self.commit()\n        app = Router(self.registry)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 884
    },
    {
      "name": "Request.blank",
      "source_code": "    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line_number": 1330
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.get_response",
      "source_code": "    def get_response(self, app):\n        return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line_number": 720
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": ""
    },
    {
      "function": "self._registerSecurityPolicy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 30,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy\n\n        policy = DummySecurityPolicy(permissive)\n        self.config.registry.registerUtility(policy, ISecurityPolicy)\n        return policy\n\n"
    },
    {
      "function": "self.config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self.config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self.config.make_wsgi_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 884,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    def make_wsgi_app(self):\n        \"\"\"Commits any pending configuration statements, sends a\n        :class:`pyramid.events.ApplicationCreated` event to all listeners,\n        adds this configuration's registry to\n        :attr:`pyramid.config.global_registries`, and returns a\n        :app:`Pyramid` WSGI application representing the committed\n        configuration state.\"\"\"\n        self.commit()\n        app = Router(self.registry)\n\n        # Allow tools like \"pshell development.ini\" to find the 'last'\n        # registry configured.\n        global_registries.add(self.registry)\n\n        # Push the registry onto the stack in case any code that depends on\n        # the registry threadlocal APIs used in listeners subscribed to the\n        # IApplicationCreated event.\n        self.begin()\n        try:\n            self.registry.notify(ApplicationCreated(app))\n        finally:\n            self.end()\n\n        return app\n\n\n"
    },
    {
      "function": "Request.blank",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line": 1330,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    @classmethod\n    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.\n\n        The path will become path_info, with any query string split\n        off and used.\n\n        All necessary keys will be added to the environ, but the\n        values you pass in will take precedence.  If you pass in\n        base_url then wsgi.url_scheme, HTTP_HOST, and SCRIPT_NAME will\n        be filled in from that value.\n\n        Any extra keyword will be passed to ``__init__``.\n        \"\"\"\n        env = environ_from_url(path)\n        if base_url:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(base_url)\n            if query or fragment:\n                raise ValueError(\n                    \"base_url (%r) cannot have a query or fragment\"\n                    % base_url)\n            if scheme:\n                env['wsgi.url_scheme'] = scheme\n            if netloc:\n                if ':' not in netloc:\n                    if scheme == 'http':\n                        netloc += ':80'\n                    elif scheme == 'https':\n                        netloc += ':443'\n                    else:\n                        raise ValueError(\n                            \"Unknown scheme: %r\" % scheme)\n                host, port = netloc.split(':', 1)\n                env['SERVER_PORT'] = port\n                env['SERVER_NAME'] = host\n                env['HTTP_HOST'] = netloc\n            if path:\n                env['SCRIPT_NAME'] = url_unquote(path)\n        if environ:\n            env.update(environ)\n        content_type = kw.get('content_type', env.get('CONTENT_TYPE'))\n        if headers and 'Content-Type' in headers:\n            content_type = headers['Content-Type']\n        if content_type is not None:\n            kw['content_type'] = content_type\n        environ_add_POST(env, POST, content_type=content_type)\n        obj = cls(env, **kw)\n        if headers is not None:\n            obj.headers.update(headers)\n        return obj\n\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": ""
    },
    {
      "function": "request.get_response",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line": 720,
      "caller": "test_secured_view_failed_on_explicit_exception_view",
      "source_code": "    def get_response(self, app):\n        return app\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_secured_view_failed_on_explicit_exception_view(self):\n        from pyramid.httpexceptions import HTTPForbidden\n        from pyramid.request import Request\n        from pyramid.security import NO_PERMISSION_REQUIRED\n\n        def view(request):\n            raise ValueError\n\n        def excview(request):  # pragma: no cover\n            pass\n\n        self._registerSecurityPolicy(False)\n        self.config.add_view(\n            view, name='foo', permission=NO_PERMISSION_REQUIRED\n        )\n        self.config.add_view(\n            excview, context=ValueError, renderer='string', permission='view'\n        )\n        app = self.config.make_wsgi_app()\n        request = Request.blank('/foo', base_url='http://example.com')\n        request.method = 'POST'\n        with self.assertRaises(HTTPForbidden):\n            request.get_response(app)"
}