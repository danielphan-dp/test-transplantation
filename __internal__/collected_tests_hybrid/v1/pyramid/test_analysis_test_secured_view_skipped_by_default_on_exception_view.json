{
  "test_name": "test_secured_view_skipped_by_default_on_exception_view",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
  "static_methods": [
    {
      "name": "self._registerSecurityPolicy",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line_number": 30
    },
    {
      "name": "self.config.add_settings",
      "source_code": "    def add_settings(self, settings=None, **kw):\n        \"\"\"Augment the :term:`deployment settings` with one or more\n        key/value pairs.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/settings.py",
      "line_number": 14
    },
    {
      "name": "self.config.set_default_permission",
      "source_code": "    def set_default_permission(self, permission):\n        \"\"\"\n        Set the default permission to be used by all subsequent\n        :term:`view configuration` registrations.  ``permission``\n        should be a :term:`permission` string to be used as the\n        default permission.  An example of a permission\n        string:``'view'``.  Adding a default permission makes it\n        unnecessary to protect each view configuration with an\n        explicit permission, unless your application policy requires\n        some exception for a particular view.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 180
    },
    {
      "name": "self.config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self.config.add_view",
      "source_code": "    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n    ):\n        \"\"\"Add a :term:`view configuration` to the current\n        configuration state.  Arguments to ``add_view`` are broken\n        down below into *predicate* arguments and *non-predicate*\n        arguments.  Predicate arguments narrow the circumstances in\n        which the view callable will be invoked when a request is\n        presented to :app:`Pyramid`; non-predicate arguments are\n        informational.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line_number": 241
    },
    {
      "name": "self.config.make_wsgi_app",
      "source_code": "    def make_wsgi_app(self):\n        \"\"\"Commits any pending configuration statements, sends a\n        :class:`pyramid.events.ApplicationCreated` event to all listeners,\n        adds this configuration's registry to\n        :attr:`pyramid.config.global_registries`, and returns a\n        :app:`Pyramid` WSGI application representing the committed\n        configuration state.\"\"\"\n        self.commit()\n        app = Router(self.registry)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line_number": 884
    },
    {
      "name": "Request.blank",
      "source_code": "    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line_number": 1330
    },
    {
      "name": "request.get_response",
      "source_code": "    def get_response(self, app):\n        return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line_number": 720
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._registerSecurityPolicy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_viewderivers.py",
      "line": 30,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    def _registerSecurityPolicy(self, permissive):\n        from pyramid.interfaces import ISecurityPolicy\n\n        policy = DummySecurityPolicy(permissive)\n        self.config.registry.registerUtility(policy, ISecurityPolicy)\n        return policy\n\n"
    },
    {
      "function": "self.config.add_settings",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/settings.py",
      "line": 14,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    def add_settings(self, settings=None, **kw):\n        \"\"\"Augment the :term:`deployment settings` with one or more\n        key/value pairs.\n\n        You may pass a dictionary::\n\n           config.add_settings({'external_uri':'http://example.com'})\n\n        Or a set of key/value pairs::\n\n           config.add_settings(external_uri='http://example.com')\n\n        This function is useful when you need to test code that accesses the\n        :attr:`pyramid.registry.Registry.settings` API (or the\n        :meth:`pyramid.config.Configurator.get_settings` API) and\n        which uses values from that API.\n        \"\"\"\n        if settings is None:\n            settings = {}\n        utility = self.registry.settings\n        if utility is None:\n            utility = self._set_settings(settings)\n        utility.update(settings)\n        utility.update(kw)\n\n"
    },
    {
      "function": "self.config.set_default_permission",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 180,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    @action_method\n    def set_default_permission(self, permission):\n        \"\"\"\n        Set the default permission to be used by all subsequent\n        :term:`view configuration` registrations.  ``permission``\n        should be a :term:`permission` string to be used as the\n        default permission.  An example of a permission\n        string:``'view'``.  Adding a default permission makes it\n        unnecessary to protect each view configuration with an\n        explicit permission, unless your application policy requires\n        some exception for a particular view.\n\n        If a default permission is *not* set, views represented by\n        view configuration registrations which do not explicitly\n        declare a permission will be executable by entirely anonymous\n        users (any authorization policy is ignored).\n\n        Later calls to this method override will conflict with earlier calls;\n        there can be only one default permission active at a time within an\n        application.\n\n        .. warning::\n\n          If a default permission is in effect, view configurations meant to\n          create a truly anonymously accessible view (even :term:`exception\n          view` views) *must* use the value of the permission importable as\n          :data:`pyramid.security.NO_PERMISSION_REQUIRED`.  When this string\n          is used as the ``permission`` for a view configuration, the default\n          permission is ignored, and the view is registered, making it\n          available to all callers regardless of their credentials.\n\n        .. seealso::\n\n            See also :ref:`setting_a_default_permission`.\n\n        .. note::\n\n           Using the ``default_permission`` argument to the\n           :class:`pyramid.config.Configurator` constructor can be used to\n           achieve the same purpose.\n        \"\"\"\n\n        def register():\n            self.registry.registerUtility(permission, IDefaultPermission)\n\n        intr = self.introspectable(\n            'default permission', None, permission, 'default permission'\n        )\n        intr['value'] = permission\n        perm_intr = self.introspectable(\n            'permissions', permission, permission, 'permission'\n        )\n        perm_intr['value'] = permission\n        # default permission used during view registration (phase 3)\n        self.action(\n            IDefaultPermission,\n            register,\n            order=PHASE1_CONFIG,\n            introspectables=(intr, perm_intr),\n        )\n\n"
    },
    {
      "function": "self.config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self.config.add_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/views.py",
      "line": 241,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    @viewdefaults\n    @action_method\n    def add_view(\n        self,\n        view=None,\n        name=\"\",\n        for_=None,\n        permission=None,\n        request_type=None,\n        route_name=None,\n        request_method=None,\n        request_param=None,\n        containment=None,\n        attr=None,\n        renderer=None,\n        wrapper=None,\n        xhr=None,\n        accept=None,\n        header=None,\n        path_info=None,\n        custom_predicates=(),\n        context=None,\n        decorator=None,\n        mapper=None,\n        http_cache=None,\n        match_param=None,\n        require_csrf=None,\n        exception_only=False,\n        **view_options,\n"
    },
    {
      "function": "self.config.make_wsgi_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/__init__.py",
      "line": 884,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    def make_wsgi_app(self):\n        \"\"\"Commits any pending configuration statements, sends a\n        :class:`pyramid.events.ApplicationCreated` event to all listeners,\n        adds this configuration's registry to\n        :attr:`pyramid.config.global_registries`, and returns a\n        :app:`Pyramid` WSGI application representing the committed\n        configuration state.\"\"\"\n        self.commit()\n        app = Router(self.registry)\n\n        # Allow tools like \"pshell development.ini\" to find the 'last'\n        # registry configured.\n        global_registries.add(self.registry)\n\n        # Push the registry onto the stack in case any code that depends on\n        # the registry threadlocal APIs used in listeners subscribed to the\n        # IApplicationCreated event.\n        self.begin()\n        try:\n            self.registry.notify(ApplicationCreated(app))\n        finally:\n            self.end()\n\n        return app\n\n\n"
    },
    {
      "function": "Request.blank",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/request.py",
      "line": 1330,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    @classmethod\n    def blank(cls, path, environ=None, base_url=None,\n              headers=None, POST=None, **kw):\n        \"\"\"\n        Create a blank request environ (and Request wrapper) with the\n        given path (path should be urlencoded), and any keys from\n        environ.\n\n        The path will become path_info, with any query string split\n        off and used.\n\n        All necessary keys will be added to the environ, but the\n        values you pass in will take precedence.  If you pass in\n        base_url then wsgi.url_scheme, HTTP_HOST, and SCRIPT_NAME will\n        be filled in from that value.\n\n        Any extra keyword will be passed to ``__init__``.\n        \"\"\"\n        env = environ_from_url(path)\n        if base_url:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(base_url)\n            if query or fragment:\n                raise ValueError(\n                    \"base_url (%r) cannot have a query or fragment\"\n                    % base_url)\n            if scheme:\n                env['wsgi.url_scheme'] = scheme\n            if netloc:\n                if ':' not in netloc:\n                    if scheme == 'http':\n                        netloc += ':80'\n                    elif scheme == 'https':\n                        netloc += ':443'\n                    else:\n                        raise ValueError(\n                            \"Unknown scheme: %r\" % scheme)\n                host, port = netloc.split(':', 1)\n                env['SERVER_PORT'] = port\n                env['SERVER_NAME'] = host\n                env['HTTP_HOST'] = netloc\n            if path:\n                env['SCRIPT_NAME'] = url_unquote(path)\n        if environ:\n            env.update(environ)\n        content_type = kw.get('content_type', env.get('CONTENT_TYPE'))\n        if headers and 'Content-Type' in headers:\n            content_type = headers['Content-Type']\n        if content_type is not None:\n            kw['content_type'] = content_type\n        environ_add_POST(env, POST, content_type=content_type)\n        obj = cls(env, **kw)\n        if headers is not None:\n            obj.headers.update(headers)\n        return obj\n\n"
    },
    {
      "function": "request.get_response",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line": 720,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": "    def get_response(self, app):\n        return app\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_secured_view_skipped_by_default_on_exception_view",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_secured_view_skipped_by_default_on_exception_view(self):\n        from pyramid.request import Request\n        from pyramid.security import NO_PERMISSION_REQUIRED\n\n        def view(request):\n            raise ValueError\n\n        def excview(request):\n            return 'hello'\n\n        self._registerSecurityPolicy(False)\n        self.config.add_settings({'debug_authorization': True})\n        self.config.set_default_permission('view')\n        self.config.add_view(\n            view, name='foo', permission=NO_PERMISSION_REQUIRED\n        )\n        self.config.add_view(excview, context=ValueError, renderer='string')\n        app = self.config.make_wsgi_app()\n        request = Request.blank('/foo', base_url='http://example.com')\n        request.method = 'POST'\n        response = request.get_response(app)\n        self.assertTrue(b'hello' in response.body)"
}