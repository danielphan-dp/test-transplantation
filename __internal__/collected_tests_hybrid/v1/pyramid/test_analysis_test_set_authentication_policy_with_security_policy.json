{
  "test_name": "test_set_authentication_policy_with_security_policy",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_security.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "config.registry.registerUtility",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1189
    },
    {
      "name": "config.set_authentication_policy",
      "source_code": "    def set_authentication_policy(self, policy):\n        \"\"\"\n        .. deprecated:: 2.0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 59
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": ""
    },
    {
      "function": "config.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "config.registry.registerUtility",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1189,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": "    def registerUtility(component=None, provided=None, name='',\n                        info='', factory=None):\n        \"\"\"Register a utility\n\n        :param factory:\n           Factory for the component to be registered.\n\n        :param component:\n           The registered component\n\n        :param provided:\n           This is the interface provided by the utility.  If the\n           component provides a single interface, then this\n           argument is optional and the component-implemented\n           interface will be used.\n\n        :param name:\n           The utility name.\n\n        :param info:\n           An object that can be converted to a string to provide\n           information about the registration.\n\n        Only one of *component* and *factory* can be used.\n\n        A `IRegistered` event is generated with an `IUtilityRegistration`.\n        \"\"\"\n\n"
    },
    {
      "function": "config.set_authentication_policy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 59,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": "    @action_method\n    def set_authentication_policy(self, policy):\n        \"\"\"\n        .. deprecated:: 2.0\n\n            Authentication policies have been replaced by security policies.\n            See :ref:`upgrading_auth_20` for more information.\n\n        Override the :app:`Pyramid` :term:`authentication policy` in the\n        current configuration.  The ``policy`` argument must be an instance\n        of an authentication policy or a :term:`dotted Python name`\n        that points at an instance of an authentication policy.\n\n        .. note::\n\n           Using the ``authentication_policy`` argument to the\n           :class:`pyramid.config.Configurator` constructor can be used to\n           achieve the same purpose.\n\n        \"\"\"\n        warnings.warn(\n            'Authentication and authorization policies have been deprecated '\n            'in favor of security policies.  See \"Upgrading '\n            'Authentication/Authorization\" in \"What\\'s New in Pyramid 2.0\" '\n            'of the documentation for more information.',\n            DeprecationWarning,\n            stacklevel=3,\n        )\n\n        def register():\n            self.registry.registerUtility(policy, IAuthenticationPolicy)\n            if self.registry.queryUtility(IAuthorizationPolicy) is None:\n                raise ConfigurationError(\n                    'Cannot configure an authentication policy without '\n                    'also configuring an authorization policy '\n                    '(use the set_authorization_policy method)'\n                )\n            if self.registry.queryUtility(ISecurityPolicy) is not None:\n                raise ConfigurationError(\n                    'Cannot configure an authentication and authorization'\n                    'policy with a configured security policy.'\n                )\n            security_policy = LegacySecurityPolicy()\n            self.registry.registerUtility(security_policy, ISecurityPolicy)\n\n        policy = self.maybe_dotted(policy)\n        intr = self.introspectable(\n            'authentication policy',\n            None,\n            self.object_description(policy),\n            'authentication policy',\n        )\n        intr['policy'] = policy\n        # authentication policy used by view config (phase 3)\n        self.action(\n            IAuthenticationPolicy,\n            register,\n            order=PHASE2_CONFIG,\n            introspectables=(intr,),\n        )\n\n"
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_set_authentication_policy_with_security_policy",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_set_authentication_policy_with_security_policy(self):\n        from pyramid.interfaces import IAuthorizationPolicy, ISecurityPolicy\n\n        config = self._makeOne()\n        security_policy = object()\n        authn_policy = object()\n        authz_policy = object()\n        config.registry.registerUtility(security_policy, ISecurityPolicy)\n        config.registry.registerUtility(authz_policy, IAuthorizationPolicy)\n        config.set_authentication_policy(authn_policy)\n        self.assertRaises(ConfigurationError, config.commit)"
}