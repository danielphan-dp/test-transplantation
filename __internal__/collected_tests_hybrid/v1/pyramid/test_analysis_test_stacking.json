{
  "test_name": "test_stacking",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "DummyVenusian",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyVenusian",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "decorator1",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "decorator2",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call_venusian",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 1286
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call_venusian",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line_number": 1286
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_stacking",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "DummyVenusian",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "DummyVenusian",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_stacking",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "decorator1",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "decorator2",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "call_venusian",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 1286,
      "caller": "test_stacking",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "call_venusian",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_view.py",
      "line": 1286,
      "caller": "test_stacking",
      "source_code": "def call_venusian(venusian, context=None):\n    if context is None:\n        context = DummyVenusianContext()\n    for wrapped, callback, category, depth in venusian.attachments:\n        callback(context, None, None)\n    return context.config\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_stacking",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_stacking(self):\n        decorator1 = self._makeOne(name='1')\n        venusian1 = DummyVenusian()\n        decorator1.venusian = venusian1\n        venusian2 = DummyVenusian()\n        decorator2 = self._makeOne(name='2')\n        decorator2.venusian = venusian2\n\n        def foo():  # pragma: no cover\n            pass\n\n        wrapped1 = decorator1(foo)\n        wrapped2 = decorator2(wrapped1)\n        self.assertTrue(wrapped1 is foo)\n        self.assertTrue(wrapped2 is foo)\n        config1 = call_venusian(venusian1)\n        self.assertEqual(len(config1.settings), 1)\n        self.assertEqual(config1.settings[0]['name'], '1')\n        config2 = call_venusian(venusian2)\n        self.assertEqual(len(config2.settings), 1)\n        self.assertEqual(config2.settings[0]['name'], '2')"
}