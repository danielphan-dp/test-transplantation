{
  "test_name": "test_subpath_path_info_and_script_name_have_utf8",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
  "static_methods": [
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytes_",
      "source_code": "def bytes_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, text_type):\n        return s.encode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 31
    }
  ],
  "dynamic_methods": [
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": ""
    },
    {
      "function": "bytes_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 31,
      "caller": "test_subpath_path_info_and_script_name_have_utf8",
      "source_code": "def bytes_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, text_type):\n        return s.encode(encoding, errors)\n    return s\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subpath_path_info_and_script_name_have_utf8(self):\n        encoded = text_(b'La Pe\\xc3\\xb1a')\n        decoded = text_(bytes_(encoded), 'utf-8')\n        request = DummyRequest(\n            {'PATH_INFO': '/' + encoded, 'SCRIPT_NAME': '/' + encoded}\n        )\n        request.subpath = (decoded,)\n        response = self._callFUT(request, 'app')\n        self.assertTrue(request.copied)\n        self.assertEqual(response, 'app')\n        self.assertEqual(request.environ['SCRIPT_NAME'], '/' + encoded)\n        self.assertEqual(request.environ['PATH_INFO'], '/' + encoded)"
}