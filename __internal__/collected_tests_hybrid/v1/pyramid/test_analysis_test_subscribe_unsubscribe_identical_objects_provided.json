{
  "test_name": "test_subscribe_unsubscribe_identical_objects_provided",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "_makeInterfaces",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 24
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "registry.subscribe",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 907
    },
    {
      "name": "registry.subscribe",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 907
    },
    {
      "name": "self._getMappingType",
      "source_code": "    def _getMappingType(self):\n        return dict",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 151
    },
    {
      "name": "self._getLeafSequenceType",
      "source_code": "    def _getLeafSequenceType(self):\n        return tuple",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 160
    },
    {
      "name": "self._getProvidedType",
      "source_code": "    def _getProvidedType(self):\n        return dict",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 154
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.unsubscribe",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 393
    },
    {
      "name": "registry.unsubscribe",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 393
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "PT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "PT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MT",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "L",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_makeInterfaces",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 24,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface\n\n    class IB0(Interface):\n        pass\n\n    class IB1(IB0):\n        pass\n\n    class IB2(IB0):\n        pass\n\n    class IB3(IB2, IB1):\n        pass\n\n    class IB4(IB1, IB2):\n        pass\n\n    class IF0(Interface):\n        pass\n\n    class IF1(IF0):\n        pass\n\n    class IR0(Interface):\n        pass\n\n    class IR1(IR0):\n        pass\n\n    return IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1\n\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "registry.subscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 907,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions\n\n        If `existing=True` (default),\n        call on all existing ones, as well.\n        \"\"\"\n        if callback in self.callbacks:\n            return\n        self.callbacks.append(callback)\n        if not existing:\n            return\n        for dist in self:\n            callback(dist)\n\n"
    },
    {
      "function": "registry.subscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 907,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions\n\n        If `existing=True` (default),\n        call on all existing ones, as well.\n        \"\"\"\n        if callback in self.callbacks:\n            return\n        self.callbacks.append(callback)\n        if not existing:\n            return\n        for dist in self:\n            callback(dist)\n\n"
    },
    {
      "function": "self._getMappingType",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 151,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def _getMappingType(self):\n        return dict\n\n"
    },
    {
      "function": "self._getLeafSequenceType",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 160,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def _getLeafSequenceType(self):\n        return tuple\n\n"
    },
    {
      "function": "self._getProvidedType",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 154,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def _getProvidedType(self):\n        return dict\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "registry.unsubscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 393,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n\n\n"
    },
    {
      "function": "registry.unsubscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 393,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": "    def unsubscribe(self, dependent):\n        try:\n            n = self._dependents[dependent]\n        except TypeError:\n            raise KeyError(dependent)\n        n -= 1\n        if not n:\n            del self.dependents[dependent]\n        else:\n            assert n > 0\n            self.dependents[dependent] = n\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "PT",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "PT",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "MT",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    },
    {
      "function": "L",
      "filename": "",
      "line": 0,
      "caller": "test_subscribe_unsubscribe_identical_objects_provided",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscribe_unsubscribe_identical_objects_provided(self):\n        # https://github.com/zopefoundation/zope.interface/issues/227\n        (\n            IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1,\n        ) = _makeInterfaces()  # pylint:disable=unused-variable\n        registry = self._makeOne()\n        first = object()\n        registry.subscribe([IB1], IR0, first)\n        registry.subscribe([IB1], IR0, first)\n\n        MT = self._getMappingType()\n        L = self._getLeafSequenceType()\n        PT = self._getProvidedType()\n        self.assertEqual(registry._subscribers[1], MT({\n            IB1: MT({\n                IR0: MT({'': L((first, first))}),\n            })\n        }))\n        self.assertEqual(registry._provided, PT({\n            IR0: 2\n        }))\n\n        registry.unsubscribe([IB1], IR0, first)\n        registry.unsubscribe([IB1], IR0, first)\n        self.assertEqual(len(registry._subscribers), 0)\n        self.assertEqual(registry._provided, PT())"
}