{
  "test_name": "test_subscribed_non_empty_hit",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "_makeInterfaces",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line_number": 24
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "registry.subscribe",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 907
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "registry.subscribed",
      "source_code": "    def subscribed(required, provided, subscriber):\n        \"\"\"\n        Check whether the object *subscriber* is registered directly\n        with this object via a previous call to\n        ``subscribe(required, provided, subscriber)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 909
    }
  ],
  "dynamic_methods": [
    {
      "function": "_makeInterfaces",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
      "line": 24,
      "caller": "test_subscribed_non_empty_hit",
      "source_code": "def _makeInterfaces():\n    from zope.interface import Interface\n\n    class IB0(Interface):\n        pass\n\n    class IB1(IB0):\n        pass\n\n    class IB2(IB0):\n        pass\n\n    class IB3(IB2, IB1):\n        pass\n\n    class IB4(IB1, IB2):\n        pass\n\n    class IF0(Interface):\n        pass\n\n    class IF1(IF0):\n        pass\n\n    class IR0(Interface):\n        pass\n\n    class IR1(IR0):\n        pass\n\n    return IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1\n\n\n"
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_subscribed_non_empty_hit",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "registry.subscribe",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 907,
      "caller": "test_subscribed_non_empty_hit",
      "source_code": "    def subscribe(self, callback, existing=True):\n        \"\"\"Invoke `callback` for all distributions\n\n        If `existing=True` (default),\n        call on all existing ones, as well.\n        \"\"\"\n        if callback in self.callbacks:\n            return\n        self.callbacks.append(callback)\n        if not existing:\n            return\n        for dist in self:\n            callback(dist)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscribed_non_empty_hit",
      "source_code": ""
    },
    {
      "function": "registry.subscribed",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 909,
      "caller": "test_subscribed_non_empty_hit",
      "source_code": "    def subscribed(required, provided, subscriber):\n        \"\"\"\n        Check whether the object *subscriber* is registered directly\n        with this object via a previous call to\n        ``subscribe(required, provided, subscriber)``.\n\n        If the *subscriber*, or one equal to it, has been subscribed,\n        for the given *required* sequence and *provided* interface,\n        return that object. (This does not guarantee whether the *subscriber*\n        itself is returned, or an object equal to it.)\n\n        If it has not, return ``None``.\n\n        Unlike :meth:`subscriptions`, this method won't retrieve\n        components registered for more specific required interfaces or\n        less specific provided interfaces.\n\n        .. versionadded:: 5.3.0\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscribed_non_empty_hit(self):\n        (\n            IB0, IB1, IB2, IB3, IB4, IF0, IF1, IR0, IR1,\n        ) = _makeInterfaces()  # pylint:disable=unused-variable\n        registry = self._makeOne()\n        registry.subscribe([IB0], IF0, 'A1')\n        self.assertEqual(registry.subscribed([IB0], IF0, 'A1'), 'A1')"
}