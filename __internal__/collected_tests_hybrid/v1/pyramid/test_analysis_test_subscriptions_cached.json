{
  "test_name": "test_subscriptions_cached",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_adapter.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "lb.subscriptions",
      "source_code": "    def subscriptions(required, provided):\n        \"\"\"\n        Get a sequence of subscribers.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 929
    },
    {
      "name": "lb.subscriptions",
      "source_code": "    def subscriptions(required, provided):\n        \"\"\"\n        Get a sequence of subscribers.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 929
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_called_with.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "tuple",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tuple",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_subscriptions_cached",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "lb.subscriptions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 929,
      "caller": "test_subscriptions_cached",
      "source_code": "    def subscriptions(required, provided):\n        \"\"\"\n        Get a sequence of subscribers.\n\n        Subscribers for a sequence of *required* interfaces, and a *provided*\n        interface are returned. This takes into account subscribers\n        registered with this object, as well as those registered with\n        base adapter registries in the resolution order, and interfaces that\n        extend *provided*.\n\n        .. versionchanged:: 5.1.1\n           Correct the method signature to remove the ``name`` parameter.\n           Subscribers have no names.\n        \"\"\"\n\n"
    },
    {
      "function": "lb.subscriptions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 929,
      "caller": "test_subscriptions_cached",
      "source_code": "    def subscriptions(required, provided):\n        \"\"\"\n        Get a sequence of subscribers.\n\n        Subscribers for a sequence of *required* interfaces, and a *provided*\n        interface are returned. This takes into account subscribers\n        registered with this object, as well as those registered with\n        base adapter registries in the resolution order, and interfaces that\n        extend *provided*.\n\n        .. versionchanged:: 5.1.1\n           Correct the method signature to remove the ``name`` parameter.\n           Subscribers have no names.\n        \"\"\"\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "_called_with.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_subscriptions_cached",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "tuple",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    },
    {
      "function": "tuple",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_subscriptions_cached",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_subscriptions_cached(self):\n        _called_with = []\n        _results = [object(), object(), object()]\n\n        def _subscriptions(self, required, provided):\n            _called_with.append((required, provided))\n            return tuple(_results)\n\n        lb = self._makeOne(uc_subscriptions=_subscriptions)\n        found = lb.subscriptions('A', 'B')\n        found = lb.subscriptions('A', 'B')\n        self.assertEqual(found, tuple(_results))\n        self.assertEqual(_called_with, [(('A',), 'B')])"
}