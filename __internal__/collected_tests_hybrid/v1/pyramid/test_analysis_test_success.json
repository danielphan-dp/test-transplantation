{
  "test_name": "test_success",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_csrf.py",
  "static_methods": [
    {
      "name": "self.config.set_csrf_storage_policy",
      "source_code": "    def set_csrf_storage_policy(self, policy):\n        \"\"\"\n        Set the :term:`CSRF storage policy` used by subsequent view\n        registrations.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line_number": 352
    },
    {
      "name": "testing.DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyCSRF",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.config.set_csrf_storage_policy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/security.py",
      "line": 352,
      "caller": "test_success",
      "source_code": "    @action_method\n    def set_csrf_storage_policy(self, policy):\n        \"\"\"\n        Set the :term:`CSRF storage policy` used by subsequent view\n        registrations.\n\n        ``policy`` is a class that implements the\n        :meth:`pyramid.interfaces.ICSRFStoragePolicy` interface and defines\n        how to generate and persist CSRF tokens.\n\n        \"\"\"\n\n        def register():\n            self.registry.registerUtility(policy, ICSRFStoragePolicy)\n\n        intr = self.introspectable(\n            'csrf storage policy', None, policy, 'csrf storage policy'\n        )\n        intr['policy'] = policy\n        self.action(ICSRFStoragePolicy, register, introspectables=(intr,))\n\n\n"
    },
    {
      "function": "testing.DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_success",
      "source_code": ""
    },
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_success",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_success",
      "source_code": ""
    },
    {
      "function": "DummyCSRF",
      "filename": "",
      "line": 0,
      "caller": "test_success",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_success(self):\n        self.config.set_csrf_storage_policy(DummyCSRF())\n        request = testing.DummyRequest()\n\n        csrf_token = self._callFUT(request)\n\n        self.assertEqual(csrf_token, 'e5e9e30a08b34ff9842ff7d2b958c14b')"
}