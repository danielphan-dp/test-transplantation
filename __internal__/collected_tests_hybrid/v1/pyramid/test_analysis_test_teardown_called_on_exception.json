{
  "test_name": "test_teardown_called_on_exception",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_testing.py",
  "static_methods": [
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TestException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_called_on_exception",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_called_on_exception",
      "source_code": ""
    },
    {
      "function": "TestException",
      "filename": "",
      "line": 0,
      "caller": "test_teardown_called_on_exception",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_teardown_called_on_exception(self):\n        class TestException(Exception):\n            pass\n\n        def inner(config):\n            self._log = []\n            raise TestException('oops')\n\n        self.assertRaises(TestException, self._callFUT, inner)\n        self.assertEqual(self._log[0][0], 'tearDown')"
}