{
  "test_name": "test_testing_add_renderer",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_testing.py",
  "static_methods": [
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.testing_add_renderer",
      "source_code": "    def testing_add_renderer(self, path, renderer=None):\n        \"\"\"Unit/integration testing helper: register a renderer at\n        ``path`` (usually a relative filename ala ``templates/foo.pt``\n        or an asset specification) and return the renderer object.\n        If the ``renderer`` argument is None, a 'dummy' renderer will\n        be used.  This function is useful when testing code that calls\n        the :func:`pyramid.renderers.render` function or\n        :func:`pyramid.renderers.render_to_response` function or\n        any other ``render_*`` or ``get_*`` API of the\n        :mod:`pyramid.renderers` module.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/testing.py",
      "line_number": 136
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "render_to_response",
      "source_code": "def render_to_response(\n    renderer_name, value, request=None, package=None, response=None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/renderers.py",
      "line_number": 72
    },
    {
      "name": "renderer.assert_",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 116
    },
    {
      "name": "renderer.assert_",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 116
    },
    {
      "name": "renderer.assert_",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line_number": 116
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_testing_add_renderer",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.testing_add_renderer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/testing.py",
      "line": 136,
      "caller": "test_testing_add_renderer",
      "source_code": "    def testing_add_renderer(self, path, renderer=None):\n        \"\"\"Unit/integration testing helper: register a renderer at\n        ``path`` (usually a relative filename ala ``templates/foo.pt``\n        or an asset specification) and return the renderer object.\n        If the ``renderer`` argument is None, a 'dummy' renderer will\n        be used.  This function is useful when testing code that calls\n        the :func:`pyramid.renderers.render` function or\n        :func:`pyramid.renderers.render_to_response` function or\n        any other ``render_*`` or ``get_*`` API of the\n        :mod:`pyramid.renderers` module.\n\n        Note that calling this method for with a ``path`` argument\n        representing a renderer factory type (e.g. for ``foo.pt``\n        usually implies the ``chameleon_zpt`` renderer factory)\n        clobbers any existing renderer factory registered for that\n        type.\n\n        .. note:: This method is also available under the alias\n           ``testing_add_template`` (an older name for it).\n\n        \"\"\"\n        from pyramid.testing import DummyRendererFactory\n\n        helper = RendererHelper(name=path, registry=self.registry)\n        factory = self.registry.queryUtility(\n            IRendererFactory, name=helper.type\n        )\n        if not isinstance(factory, DummyRendererFactory):\n            factory = DummyRendererFactory(helper.type, factory)\n            self.registry.registerUtility(\n                factory, IRendererFactory, name=helper.type\n            )\n\n        from pyramid.testing import DummyTemplateRenderer\n\n        if renderer is None:\n            renderer = DummyTemplateRenderer()\n        factory.add(path, renderer)\n        return renderer\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_testing_add_renderer",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_testing_add_renderer",
      "source_code": ""
    },
    {
      "function": "render_to_response",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/renderers.py",
      "line": 72,
      "caller": "test_testing_add_renderer",
      "source_code": "def render_to_response(\n    renderer_name, value, request=None, package=None, response=None\n"
    },
    {
      "function": "renderer.assert_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 116,
      "caller": "test_testing_add_renderer",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )\n\n            if myval != v:\n                raise AssertionError(\n                    '\\nasserted value for %s: %r\\nactual value: %r'\n                    % (k, v, myval)\n                )\n        return True\n\n\n"
    },
    {
      "function": "renderer.assert_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 116,
      "caller": "test_testing_add_renderer",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )\n\n            if myval != v:\n                raise AssertionError(\n                    '\\nasserted value for %s: %r\\nactual value: %r'\n                    % (k, v, myval)\n                )\n        return True\n\n\n"
    },
    {
      "function": "renderer.assert_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/testing.py",
      "line": 116,
      "caller": "test_testing_add_renderer",
      "source_code": "    def assert_(self, **kw):\n        \"\"\"Accept an arbitrary set of assertion key/value pairs.  For\n        each assertion key/value pair assert that the renderer\n        (eg. :func:`pyramid.renderers.render_to_response`)\n        received the key with a value that equals the asserted\n        value. If the renderer did not receive the key at all, or the\n        value received by the renderer doesn't match the assertion\n        value, raise an :exc:`AssertionError`.\"\"\"\n        for k, v in kw.items():\n            myval = self._received.get(k, _marker)\n            if myval is _marker:\n                myval = self._implementation._received.get(k, _marker)\n                if myval is _marker:\n                    raise AssertionError(\n                        'A value for key \"%s\" was not passed to the renderer'\n                        % k\n                    )\n\n            if myval != v:\n                raise AssertionError(\n                    '\\nasserted value for %s: %r\\nactual value: %r'\n                    % (k, v, myval)\n                )\n        return True\n\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_testing_add_renderer",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_testing_add_renderer(self):\n        config = self._makeOne(autocommit=True)\n        renderer = config.testing_add_renderer('templates/foo.pt')\n        from pyramid.testing import DummyTemplateRenderer\n\n        self.assertTrue(isinstance(renderer, DummyTemplateRenderer))\n        from pyramid.renderers import render_to_response\n\n        # must provide request to pass in registry (this is a functest)\n        request = DummyRequest()\n        request.registry = config.registry\n        render_to_response(\n            'templates/foo.pt', {'foo': 1, 'bar': 2}, request=request\n        )\n        renderer.assert_(foo=1)\n        renderer.assert_(bar=2)\n        renderer.assert_(request=request)"
}