{
  "test_name": "test_testing_resources",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_config/test_testing.py",
  "static_methods": [
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "config.testing_resources",
      "source_code": "    def testing_resources(self, resources):\n        \"\"\"Unit/integration testing helper: registers a dictionary of\n        :term:`resource` objects that can be resolved via the\n        :func:`pyramid.traversal.find_resource` API.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/testing.py",
      "line_number": 69
    },
    {
      "name": "config.registry.getAdapter",
      "source_code": "    def getAdapter(\n        object, interface, name=''\n    ):  # pylint:disable=redefined-builtin\n        \"\"\"Look for a named adapter to an interface for an object",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1020
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "adapter",
      "source_code": "        def adapter(ob):\n            return object()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line_number": 314
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "adapter",
      "source_code": "        def adapter(ob):\n            return object()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line_number": 314
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyRequest",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.begin",
      "source_code": "    def begin(self) -> None:\n        self.statistics.clear()\n        self.statistics[\"start_time\"] = time.monotonic()\n        self.statistics[\"attempt_number\"] = 1\n        self.statistics[\"idle_for\"] = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/__init__.py",
      "line_number": 338
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.end",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 289
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "text_",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line_number": 26
    },
    {
      "name": "find_resource",
      "source_code": "def find_resource(resource, path):\n    \"\"\"Given a resource object and a string or tuple representing a path\n    (such as the return value of :func:`pyramid.traversal.resource_path` or\n    :func:`pyramid.traversal.resource_path_tuple`), return a resource in this\n    application's resource tree at the specified path.  The resource passed\n    in *must* be :term:`location`-aware.  If the path cannot be resolved (if\n    the respective node in the resource tree does not exist), a\n    :exc:`KeyError` will be raised.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/traversal.py",
      "line_number": 35
    }
  ],
  "dynamic_methods": [
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_testing_resources",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "config.testing_resources",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/config/testing.py",
      "line": 69,
      "caller": "test_testing_resources",
      "source_code": "    def testing_resources(self, resources):\n        \"\"\"Unit/integration testing helper: registers a dictionary of\n        :term:`resource` objects that can be resolved via the\n        :func:`pyramid.traversal.find_resource` API.\n\n        The :func:`pyramid.traversal.find_resource` API is called with\n        a path as one of its arguments.  If the dictionary you\n        register when calling this method contains that path as a\n        string key (e.g. ``/foo/bar`` or ``foo/bar``), the\n        corresponding value will be returned to ``find_resource`` (and\n        thus to your code) when\n        :func:`pyramid.traversal.find_resource` is called with an\n        equivalent path string or tuple.\n        \"\"\"\n\n        class DummyTraverserFactory:\n            def __init__(self, context):\n                self.context = context\n\n            def __call__(self, request):\n                path = request.path_info\n                ob = resources[path]\n                traversed = split_path_info(path)\n                return {\n                    'context': ob,\n                    'view_name': '',\n                    'subpath': (),\n                    'traversed': traversed,\n                    'virtual_root': ob,\n                    'virtual_root_path': (),\n                    'root': ob,\n                }\n\n        self.registry.registerAdapter(\n            DummyTraverserFactory, (Interface,), ITraverser\n        )\n        return resources\n\n"
    },
    {
      "function": "config.registry.getAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1020,
      "caller": "test_testing_resources",
      "source_code": "    def getAdapter(\n        object, interface, name=''\n"
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "adapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line": 314,
      "caller": "test_testing_resources",
      "source_code": "        def adapter(ob):\n            return object()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "adapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_request.py",
      "line": 314,
      "caller": "test_testing_resources",
      "source_code": "        def adapter(ob):\n            return object()\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "DummyRequest",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "config.begin",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/__init__.py",
      "line": 338,
      "caller": "test_testing_resources",
      "source_code": "    def begin(self) -> None:\n        self.statistics.clear()\n        self.statistics[\"start_time\"] = time.monotonic()\n        self.statistics[\"attempt_number\"] = 1\n        self.statistics[\"idle_for\"] = 0\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_testing_resources",
      "source_code": ""
    },
    {
      "function": "config.end",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 289,
      "caller": "test_testing_resources",
      "source_code": "    def end(self, arg=None):\n        return self._start + len(self._text)\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_testing_resources",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "text_",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/webob/compat.py",
      "line": 26,
      "caller": "test_testing_resources",
      "source_code": "def text_(s, encoding='latin-1', errors='strict'):\n    if isinstance(s, bytes):\n        return s.decode(encoding, errors)\n    return s\n\n"
    },
    {
      "function": "find_resource",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/src/pyramid/traversal.py",
      "line": 35,
      "caller": "test_testing_resources",
      "source_code": "def find_resource(resource, path):\n    \"\"\"Given a resource object and a string or tuple representing a path\n    (such as the return value of :func:`pyramid.traversal.resource_path` or\n    :func:`pyramid.traversal.resource_path_tuple`), return a resource in this\n    application's resource tree at the specified path.  The resource passed\n    in *must* be :term:`location`-aware.  If the path cannot be resolved (if\n    the respective node in the resource tree does not exist), a\n    :exc:`KeyError` will be raised.\n\n    This function is the logical inverse of\n    :func:`pyramid.traversal.resource_path` and\n    :func:`pyramid.traversal.resource_path_tuple`; it can resolve any\n    path string or tuple generated by either of those functions.\n\n    Rules for passing a *string* as the ``path`` argument: if the\n    first character in the path string is the ``/``\n    character, the path is considered absolute and the resource tree\n    traversal will start at the root resource.  If the first character\n    of the path string is *not* the ``/`` character, the path is\n    considered relative and resource tree traversal will begin at the resource\n    object supplied to the function as the ``resource`` argument.  If an\n    empty string is passed as ``path``, the ``resource`` passed in will\n    be returned.  Resource path strings must be escaped in the following\n    manner: each path segment must be UTF-8 encoded and escaped via Python's\n    :mod:`urllib.quote`. For example, ``/path/to%20the/La%20Pe%C3%B1a``\n    (absolute) or ``to%20the/La%20Pe%C3%B1a`` (relative).  The\n    :func:`pyramid.traversal.resource_path` function generates strings\n    which follow these rules (albeit only absolute ones). The text may not\n    have any non-ASCII characters in it.\n\n    Rules for passing a *tuple* as the ``path`` argument: if the first\n    element in the path tuple is the empty string (for example ``('',\n    'a', 'b', 'c')``, the path is considered absolute and the resource tree\n    traversal will start at the resource tree root object.  If the first\n    element in the path tuple is not the empty string (for example\n    ``('a', 'b', 'c')``), the path is considered relative and resource tree\n    traversal will begin at the resource object supplied to the function\n    as the ``resource`` argument.  If an empty sequence is passed as\n    ``path``, the ``resource`` passed in itself will be returned.  No\n    URL-quoting of individual path segments within the tuple is required\n    (each segment may be any string representing a resource name).  Resource\n    path tuples generated by :func:`pyramid.traversal.resource_path_tuple` can\n    always be resolved by ``find_resource``.\n    \"\"\"\n    if isinstance(path, str):\n        path = ascii_(path)\n    D = traverse(resource, path)\n    view_name = D['view_name']\n    context = D['context']\n    if view_name:\n        raise KeyError(f'{context!r} has no subelement {view_name}')\n    return context\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_testing_resources(self):\n        from pyramid.interfaces import ITraverser\n        from pyramid.traversal import find_resource\n\n        ob1 = object()\n        ob2 = object()\n        resources = {'/ob1': ob1, '/ob2': ob2}\n        config = self._makeOne(autocommit=True)\n        config.testing_resources(resources)\n        adapter = config.registry.getAdapter(None, ITraverser)\n        request = DummyRequest()\n        request.path_info = '/ob1'\n        result = adapter(request)\n        self.assertEqual(result['context'], ob1)\n        self.assertEqual(result['view_name'], '')\n        self.assertEqual(result['subpath'], ())\n        self.assertEqual(result['traversed'], (text_('ob1'),))\n        self.assertEqual(result['virtual_root'], ob1)\n        self.assertEqual(result['virtual_root_path'], ())\n        request = DummyRequest()\n        request.path_info = '/ob2'\n        result = adapter(request)\n        self.assertEqual(result['context'], ob2)\n        self.assertEqual(result['view_name'], '')\n        self.assertEqual(result['subpath'], ())\n        self.assertEqual(result['traversed'], (text_('ob2'),))\n        self.assertEqual(result['virtual_root'], ob2)\n        self.assertEqual(result['virtual_root_path'], ())\n        request = DummyRequest()\n        request.path_info = '/ob3'\n        self.assertRaises(KeyError, adapter, request)\n        try:\n            config.begin()\n            self.assertEqual(find_resource(None, '/ob1'), ob1)\n        finally:\n            config.end()"
}