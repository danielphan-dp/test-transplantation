{
  "test_name": "test_unicode_in_url_404",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
  "static_methods": [
    {
      "name": "decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "self._makeConfig",
      "source_code": "    def _makeConfig(self):\n        from pyramid.config import Configurator",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line_number": 645
    },
    {
      "name": "self._makeTestApp",
      "source_code": "    def _makeTestApp(self, config):\n        app = config.make_wsgi_app()\n        return TestApp(app)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line_number": 833
    },
    {
      "name": "testapp.get",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 14
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_unicode_in_url_404",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "self._makeConfig",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line": 645,
      "caller": "test_unicode_in_url_404",
      "source_code": "    def _makeConfig(self):\n        from pyramid.config import Configurator\n\n        config = Configurator()\n        return config\n\n"
    },
    {
      "function": "self._makeTestApp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/tests/test_integration.py",
      "line": 833,
      "caller": "test_unicode_in_url_404",
      "source_code": "    def _makeTestApp(self, config):\n        app = config.make_wsgi_app()\n        return TestApp(app)\n\n"
    },
    {
      "function": "testapp.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 14,
      "caller": "test_unicode_in_url_404",
      "source_code": "    def get(self, key):\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_unicode_in_url_404",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unicode_in_url_404(self):\n        request_path = '/avalia%C3%A7%C3%A3o_participante'\n        request_path_unicode = b'/avalia\\xc3\\xa7\\xc3\\xa3o_participante'.decode(\n            'utf-8'\n        )\n\n        config = self._makeConfig()\n        testapp = self._makeTestApp(config)\n\n        res = testapp.get(request_path, status=404)\n\n        # Pyramid default 404 handler outputs:\n        # '404 Not Found\\n\\nThe resource could not be found.\\n\\n\\n'\n        # '/avalia\\xe7\\xe3o_participante\\n\\n'\n        self.assertTrue(request_path_unicode in res.text)"
}