{
  "test_name": "test_unregisterSubscriptionAdapter_miss",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
  "static_methods": [
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "IFoo",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._makeOne",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line_number": 120
    },
    {
      "name": "self._wrapEvents",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line_number": 31
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "comp.unregisterSubscriptionAdapter",
      "source_code": "    def unregisterSubscriptionAdapter(factory=None, required=None,\n                                      provides=None, name=''):\n        \"\"\"Unregister a subscriber factory.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line_number": 1379
    }
  ],
  "dynamic_methods": [
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": ""
    },
    {
      "function": "IFoo",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": ""
    },
    {
      "function": "self._makeOne",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
      "line": 120,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": "    def _makeOne(self, name=None):\n        if name is None:\n            name = self.DEFAULT_NAME\n        return self._getTargetClass()(name)\n\n"
    },
    {
      "function": "self._wrapEvents",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_registry.py",
      "line": 31,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": "    def _wrapEvents(self):\n        from zope.interface import registry\n        _events = []\n\n        def _notify(*args, **kw):\n            _events.append((args, kw))\n\n        _monkey = _Monkey(registry, notify=_notify)\n        return _monkey, _events\n\n"
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": ""
    },
    {
      "function": "comp.unregisterSubscriptionAdapter",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interfaces.py",
      "line": 1379,
      "caller": "test_unregisterSubscriptionAdapter_miss",
      "source_code": "    def unregisterSubscriptionAdapter(factory=None, required=None,\n                                      provides=None, name=''):\n        \"\"\"Unregister a subscriber factory.\n\n        :returns:\n            A boolean is returned indicating whether the registry was\n            changed.  If the given component is None and there is no\n            component registered, or if the given component is not\n            None and is not registered, then the function returns\n            False, otherwise it returns True.\n\n        :param factory:\n            This is the object used to compute the adapter. The\n            factory can be None, in which case any factories\n            registered to implement the given provided interface\n            for the given required specifications with the given\n            name are unregistered.\n\n        :param required:\n            This is a sequence of specifications for objects to be\n            adapted.  If omitted, then the value of the factory's\n            ``__component_adapts__`` attribute will be used.  The\n            ``__component_adapts__`` attribute is\n            normally set using the adapter\n            decorator.  If the factory doesn't have a\n            ``__component_adapts__`` adapts attribute, then this\n            argument is required.\n\n        :param provided:\n            This is the interface provided by the adapter and\n            implemented by the factory.  If the factory is not\n            None implements a single interface, then this argument\n            is optional and the factory-implemented interface will\n            be used.\n\n        :param name:\n            The adapter name.\n\n            Currently, only the empty string is accepted.  Other\n            strings will be accepted in the future when support for\n            named subscribers is added.\n\n        An `IUnregistered` event is generated with an\n        `ISubscriptionAdapterRegistration`.\n        \"\"\"\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_unregisterSubscriptionAdapter_miss(self):\n        from zope.interface.declarations import InterfaceClass\n\n        class IFoo(InterfaceClass):\n            pass\n\n        ifoo = IFoo('IFoo')\n        ibar = IFoo('IBar')\n\n        class _Factory:\n            pass\n\n        comp = self._makeOne()\n        _monkey, _events = self._wrapEvents()\n        with _monkey:\n            unreg = comp.unregisterSubscriptionAdapter(_Factory, (ibar,), ifoo)\n        self.assertFalse(unreg)\n        self.assertFalse(_events)"
}