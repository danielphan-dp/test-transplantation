{
  "test_name": "test_w_non_method",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_interface.py",
  "static_methods": [
    {
      "name": "self._callFUT",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line_number": 22
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "method.getSignatureInfo",
      "source_code": "    def getSignatureInfo(self):\n        return {'positional': self.positional,\n                'required': self.required,\n                'optional': self.optional,\n                'varargs': self.varargs,\n                'kwargs': self.kwargs,\n                }",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 1068
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "method.getName",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line_number": 834
    },
    {
      "name": "method.getDoc",
      "source_code": "    def getDoc(self):\n        \"\"\" Returns the documentation for the object. \"\"\"\n        return self.__doc__",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 93
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "method.getTaggedValueTags",
      "source_code": "    def getTaggedValueTags(self):\n        \"\"\" Returns a collection of all tags. \"\"\"\n        return self.__tagged_values.keys() if self.__tagged_values else ()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line_number": 116
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._callFUT",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/tests/test_document.py",
      "line": 22,
      "caller": "test_w_non_method",
      "source_code": "    def _callFUT(self, iface):\n        from zope.interface.document import asStructuredText\n        return asStructuredText(iface)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "method.getSignatureInfo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 1068,
      "caller": "test_w_non_method",
      "source_code": "    def getSignatureInfo(self):\n        return {'positional': self.positional,\n                'required': self.required,\n                'optional': self.optional,\n                'varargs': self.varargs,\n                'kwargs': self.kwargs,\n                }\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "method.getName",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/setuptools/_vendor/pyparsing.py",
      "line": 834,
      "caller": "test_w_non_method",
      "source_code": "    def getName(self):\n        r\"\"\"\n        Returns the results name for this token expression. Useful when several \n        different expressions might match at a particular location.\n\n        Example::\n            integer = Word(nums)\n            ssn_expr = Regex(r\"\\d\\d\\d-\\d\\d-\\d\\d\\d\\d\")\n            house_number_expr = Suppress('#') + Word(nums, alphanums)\n            user_data = (Group(house_number_expr)(\"house_number\") \n                        | Group(ssn_expr)(\"ssn\")\n                        | Group(integer)(\"age\"))\n            user_info = OneOrMore(user_data)\n            \n            result = user_info.parseString(\"22 111-22-3333 #221B\")\n            for item in result:\n                print(item.getName(), ':', item[0])\n        prints::\n            age : 22\n            ssn : 111-22-3333\n            house_number : 221B\n        \"\"\"\n        if self.__name:\n            return self.__name\n        elif self.__parent:\n            par = self.__parent()\n            if par:\n                return par.__lookup(self)\n            else:\n                return None\n        elif (len(self) == 1 and\n               len(self.__tokdict) == 1 and\n               next(iter(self.__tokdict.values()))[0][1] in (0,-1)):\n            return next(iter(self.__tokdict.keys()))\n        else:\n            return None\n\n"
    },
    {
      "function": "method.getDoc",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 93,
      "caller": "test_w_non_method",
      "source_code": "    def getDoc(self):\n        \"\"\" Returns the documentation for the object. \"\"\"\n        return self.__doc__\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_w_non_method",
      "source_code": ""
    },
    {
      "function": "method.getTaggedValueTags",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/pyramid/venv/lib/python3.9/site-packages/zope/interface/interface.py",
      "line": 116,
      "caller": "test_w_non_method",
      "source_code": "    def getTaggedValueTags(self):\n        \"\"\" Returns a collection of all tags. \"\"\"\n        return self.__tagged_values.keys() if self.__tagged_values else ()\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_w_non_method(self):\n\n        def foo():\n            \"DOCSTRING\"\n\n        method = self._callFUT(foo)\n        self.assertEqual(method.getName(), 'foo')\n        self.assertEqual(method.getDoc(), 'DOCSTRING')\n        self.assertEqual(method.interface, None)\n        self.assertEqual(list(method.getTaggedValueTags()), [])\n        info = method.getSignatureInfo()\n        self.assertEqual(list(info['positional']), [])\n        self.assertEqual(list(info['required']), [])\n        self.assertEqual(info['optional'], {})\n        self.assertEqual(info['varargs'], None)\n        self.assertEqual(info['kwargs'], None)"
}