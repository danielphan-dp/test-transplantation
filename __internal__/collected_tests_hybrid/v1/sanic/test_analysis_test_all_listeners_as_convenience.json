{
  "test_name": "test_all_listeners_as_convenience",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
  "static_methods": [
    {
      "name": "start_stop_app",
      "source_code": "def start_stop_app(random_name_app, **run_kwargs):\n    @random_name_app.after_server_start\n    async def shutdown(app):\n        await asyncio.sleep(1.1)\n        app.stop()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line_number": 41
    },
    {
      "name": "create_listener",
      "source_code": "def create_listener(listener_name, in_list):\n    async def _listener(app, loop):\n        print(f\"DEBUG MESSAGE FOR PYTEST for {listener_name}\")\n        in_list.insert(0, app.name + listener_name)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line_number": 25
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "method",
      "source_code": "        def method(*args, **kw):\n            root = os.path.abspath(self.cwd)\n            caller = BuildBackendCaller(root, self.env, self.backend_name)\n            pid = None\n            try:\n                pid = self.pool.submit(os.getpid).result(TIMEOUT)\n                return self.pool.submit(caller, name, *args, **kw).result(TIMEOUT)\n            except futures.TimeoutError:\n                self.pool.shutdown(wait=False)  # doesn't stop already running processes\n                self._kill(pid)\n                pytest.xfail(f\"Backend did not respond before timeout ({TIMEOUT} s)\")\n            except (futures.process.BrokenProcessPool, MemoryError, OSError):\n                if IS_PYPY:\n                    pytest.xfail(\"PyPy frequently fails tests with ProcessPoolExector\")\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
      "line_number": 51
    },
    {
      "name": "output.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    }
  ],
  "dynamic_methods": [
    {
      "function": "start_stop_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line": 41,
      "caller": "test_all_listeners_as_convenience",
      "source_code": "def start_stop_app(random_name_app, **run_kwargs):\n    @random_name_app.after_server_start\n    async def shutdown(app):\n        await asyncio.sleep(1.1)\n        app.stop()\n\n    try:\n        random_name_app.run(\n            HOST, get_port(), single_process=True, **run_kwargs\n        )\n    except KeyboardInterrupt:\n        pass\n\n\n"
    },
    {
      "function": "create_listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
      "line": 25,
      "caller": "test_all_listeners_as_convenience",
      "source_code": "def create_listener(listener_name, in_list):\n    async def _listener(app, loop):\n        print(f\"DEBUG MESSAGE FOR PYTEST for {listener_name}\")\n        in_list.insert(0, app.name + listener_name)\n\n    return _listener\n\n\n"
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_all_listeners_as_convenience",
      "source_code": ""
    },
    {
      "function": "method",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_meta.py",
      "line": 51,
      "caller": "test_all_listeners_as_convenience",
      "source_code": "        def method(*args, **kw):\n            root = os.path.abspath(self.cwd)\n            caller = BuildBackendCaller(root, self.env, self.backend_name)\n            pid = None\n            try:\n                pid = self.pool.submit(os.getpid).result(TIMEOUT)\n                return self.pool.submit(caller, name, *args, **kw).result(TIMEOUT)\n            except futures.TimeoutError:\n                self.pool.shutdown(wait=False)  # doesn't stop already running processes\n                self._kill(pid)\n                pytest.xfail(f\"Backend did not respond before timeout ({TIMEOUT} s)\")\n            except (futures.process.BrokenProcessPool, MemoryError, OSError):\n                if IS_PYPY:\n                    pytest.xfail(\"PyPy frequently fails tests with ProcessPoolExector\")\n                raise\n\n"
    },
    {
      "function": "output.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_all_listeners_as_convenience",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    }
  ],
  "assertions": [
    "assert app.name + listener_name == output.pop()"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_all_listeners_as_convenience(app):\n    output = []\n    for listener_name in AVAILABLE_LISTENERS:\n        listener = create_listener(listener_name, output)\n        method = getattr(app, listener_name)\n        method(listener)\n    start_stop_app(app)\n    for listener_name in AVAILABLE_LISTENERS:\n        assert app.name + listener_name == output.pop()"
}