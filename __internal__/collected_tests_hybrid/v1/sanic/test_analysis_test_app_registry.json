{
  "test_name": "test_app_registry",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Sanic.unregister_app",
      "source_code": "    def unregister_app(cls, app: Sanic) -> None:\n        \"\"\"Unregister a Sanic instance from the class registry.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 2149
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_app_registry",
      "source_code": ""
    },
    {
      "function": "Sanic.unregister_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 2149,
      "caller": "test_app_registry",
      "source_code": "    @classmethod\n    def unregister_app(cls, app: Sanic) -> None:\n        \"\"\"Unregister a Sanic instance from the class registry.\n\n        This method removes a previously registered Sanic application instance\n        from the class registry. This can be useful for cleanup purposes,\n        especially in testing or when an app instance is no longer needed. But,\n        it is typically used internally and should not be needed in most cases.\n\n        Args:\n            app (Sanic): The Sanic instance to be unregistered.\n\n        Raises:\n            SanicException: If the app is not an instance of Sanic.\n\n        Examples:\n            ```python\n            Sanic.unregister_app(my_app)\n            ```\n        \"\"\"\n        if not isinstance(app, cls):\n            raise SanicException(\"Registered app must be an instance of Sanic\")\n\n        name = app.name\n        if name in cls._app_registry:\n            del cls._app_registry[name]\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_registry",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_registry",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_registry",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(Sanic._app_registry) == 0",
    "assert len(Sanic._app_registry) == 1",
    "assert Sanic._app_registry['test'] is instance",
    "assert len(Sanic._app_registry) == 0"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_registry():\n    assert len(Sanic._app_registry) == 0\n    instance = Sanic(\"test\")\n    assert len(Sanic._app_registry) == 1\n    assert Sanic._app_registry[\"test\"] is instance\n    Sanic.unregister_app(instance)\n    assert len(Sanic._app_registry) == 0"
}