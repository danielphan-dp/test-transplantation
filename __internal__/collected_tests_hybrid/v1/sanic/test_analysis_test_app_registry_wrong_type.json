{
  "test_name": "test_app_registry_wrong_type",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "Sanic.register_app",
      "source_code": "    def register_app(cls, app: Sanic) -> None:\n        \"\"\"Register a Sanic instance with the class registry.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 2119
    }
  ],
  "dynamic_methods": [
    {
      "function": "Sanic.register_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 2119,
      "caller": "test_app_registry_wrong_type",
      "source_code": "    @classmethod\n    def register_app(cls, app: Sanic) -> None:\n        \"\"\"Register a Sanic instance with the class registry.\n\n        This method adds a Sanic application instance to the class registry,\n        which is used for tracking all instances of the application. It is\n        usually used internally, but can be used to register an application\n        that may have otherwise been created outside of the class registry.\n\n        Args:\n            app (Sanic): The Sanic instance to be registered.\n\n        Raises:\n            SanicException: If the app is not an instance of Sanic or if the\n                name of the app is already in use (unless in test mode).\n\n        Examples:\n            ```python\n            Sanic.register_app(my_app)\n            ```\n        \"\"\"\n        if not isinstance(app, cls):\n            raise SanicException(\"Registered app must be an instance of Sanic\")\n\n        name = app.name\n        if name in cls._app_registry and not cls.test_mode:\n            raise SanicException(f'Sanic app name \"{name}\" already in use.')\n\n        cls._app_registry[name] = app\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_registry_wrong_type():\n    with pytest.raises(\n        SanicException, match=\"Registered app must be an instance of Sanic\"\n    ):\n        Sanic.register_app(1)"
}