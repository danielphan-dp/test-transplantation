{
  "test_name": "test_asyncio_server_start_serving",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "app.create_server",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line_number": 147
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "srv.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "srv.is_serving",
      "source_code": "    def is_serving(self) -> bool:\n        \"\"\"\n        See :meth:`asyncio.Server.is_serving`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/legacy/server.py",
      "line_number": 822
    },
    {
      "name": "srv.startup",
      "source_code": "    def startup(self):\n        \"\"\"Trigger \"startup\" operations on the app\"\"\"\n        return self.app._startup()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line_number": 34
    },
    {
      "name": "srv.start_serving",
      "source_code": "    def start_serving(self):\n        \"\"\"Start serving requests\"\"\"\n        return self._serve(self.server.start_serving)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line_number": 73
    },
    {
      "name": "srv.is_serving",
      "source_code": "    def is_serving(self) -> bool:\n        \"\"\"\n        See :meth:`asyncio.Server.is_serving`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/legacy/server.py",
      "line_number": 822
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.create_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line": 147,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.\n\n        Returns:\n            Worker: The Worker instance\n        \"\"\"\n        server_number = next(self._server_count)\n        return self.manage(\n            f\"{WorkerProcess.SERVER_LABEL}-{server_number}\",\n            self._serve,\n            self._server_settings,\n            transient=True,\n            restartable=True,\n            ident=f\"{WorkerProcess.SERVER_IDENTIFIER}{server_number:2}\",\n        )\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_asyncio_server_start_serving",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_asyncio_server_start_serving",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_asyncio_server_start_serving",
      "source_code": ""
    },
    {
      "function": "srv.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_asyncio_server_start_serving",
      "source_code": ""
    },
    {
      "function": "srv.is_serving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/legacy/server.py",
      "line": 822,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def is_serving(self) -> bool:\n        \"\"\"\n        See :meth:`asyncio.Server.is_serving`.\n\n        \"\"\"\n        return self.server.is_serving()\n\n"
    },
    {
      "function": "srv.startup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line": 34,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def startup(self):\n        \"\"\"Trigger \"startup\" operations on the app\"\"\"\n        return self.app._startup()\n\n"
    },
    {
      "function": "srv.start_serving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line": 73,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def start_serving(self):\n        \"\"\"Start serving requests\"\"\"\n        return self._serve(self.server.start_serving)\n\n"
    },
    {
      "function": "srv.is_serving",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/legacy/server.py",
      "line": 822,
      "caller": "test_asyncio_server_start_serving",
      "source_code": "    def is_serving(self) -> bool:\n        \"\"\"\n        See :meth:`asyncio.Server.is_serving`.\n\n        \"\"\"\n        return self.server.is_serving()\n\n"
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_asyncio_server_start_serving",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert srv.is_serving() is False",
    "assert srv.is_serving() is True"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_asyncio_server_start_serving(app: Sanic):\n    loop = asyncio.get_event_loop()\n    asyncio_srv_coro = app.create_server(\n        port=43124,\n        return_asyncio_server=True,\n        asyncio_server_kwargs=dict(start_serving=False),\n    )\n    srv = loop.run_until_complete(asyncio_srv_coro)\n    assert srv.is_serving() is False\n    loop.run_until_complete(srv.startup())\n    loop.run_until_complete(srv.start_serving())\n    assert srv.is_serving() is True\n    wait_close = srv.close()\n    loop.run_until_complete(wait_close)"
}