{
  "test_name": "test_bad_process",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_worker_serve.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "publisher.send.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "worker_serve",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line_number": 24
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "worker_serve",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line_number": 24
    },
    {
      "name": "args",
      "source_code": "        def args(self):\n            return ParamSpecArgs(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1711
    },
    {
      "name": "args",
      "source_code": "        def args(self):\n            return ParamSpecArgs(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1711
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_bad_process",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_bad_process",
      "source_code": ""
    },
    {
      "function": "publisher.send.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_bad_process",
      "source_code": ""
    },
    {
      "function": "worker_serve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line": 24,
      "caller": "test_bad_process",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_bad_process",
      "source_code": ""
    },
    {
      "function": "worker_serve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line": 24,
      "caller": "test_bad_process",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,\n"
    },
    {
      "function": "args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1711,
      "caller": "test_bad_process",
      "source_code": "        @property\n        def args(self):\n            return ParamSpecArgs(self)\n\n"
    },
    {
      "function": "args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1711,
      "caller": "test_bad_process",
      "source_code": "        @property\n        def args(self):\n            return ParamSpecArgs(self)\n\n"
    }
  ],
  "assertions": [
    "assert ('sanic.error', logging.ERROR, message) in caplog.record_tuples"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_bad_process(mock_app: Mock, caplog):\n    environ[\"SANIC_WORKER_NAME\"] = (\n        f\"{Worker.WORKER_PREFIX}-{WorkerProcess.SERVER_LABEL}-FOO\"\n    )\n\n    message = \"No restart publisher found in worker process\"\n    with pytest.raises(RuntimeError, match=message):\n        worker_serve(**args(mock_app))\n\n    message = \"No worker state found in worker process\"\n    publisher = Mock()\n    with caplog.at_level(logging.ERROR):\n        worker_serve(**args(mock_app, monitor_publisher=publisher))\n\n    assert (\"sanic.error\", logging.ERROR, message) in caplog.record_tuples\n    publisher.send.assert_called_once_with(\"__TERMINATE_EARLY__\")\n\n    del environ[\"SANIC_WORKER_NAME\"]"
}