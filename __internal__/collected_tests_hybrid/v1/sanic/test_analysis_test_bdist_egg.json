{
  "test_name": "test_bdist_egg",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_bdist_egg.py",
  "static_methods": [
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "dist.parse_command_line",
      "source_code": "    def parse_command_line(self):\n        \"\"\"Parse the setup script's command line, taken from the\n        'script_args' instance attribute (which defaults to 'sys.argv[1:]'\n        -- see 'setup()' in core.py).  This list is first processed for\n        \"global options\" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the 'user_options' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that 'options'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn't\n        execute commands (currently, this only happens if user asks for\n        help).\n        \"\"\"\n        #\n        # We now have enough information to show the Macintosh dialog\n        # that allows the user to interactively specify the \"command line\".\n        #\n        toplevel_options = self._get_toplevel_options()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 428
    },
    {
      "name": "dist.run_commands",
      "source_code": "    def run_commands(self):\n        \"\"\"Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        \"\"\"\n        for cmd in self.commands:\n            self.run_command(cmd)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 948
    }
  ],
  "dynamic_methods": [
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_bdist_egg",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_bdist_egg",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bdist_egg",
      "source_code": ""
    },
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_bdist_egg",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "dist.parse_command_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 428,
      "caller": "test_bdist_egg",
      "source_code": "    def parse_command_line(self):\n        \"\"\"Parse the setup script's command line, taken from the\n        'script_args' instance attribute (which defaults to 'sys.argv[1:]'\n        -- see 'setup()' in core.py).  This list is first processed for\n        \"global options\" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the 'user_options' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that 'options'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn't\n        execute commands (currently, this only happens if user asks for\n        help).\n        \"\"\"\n        #\n        # We now have enough information to show the Macintosh dialog\n        # that allows the user to interactively specify the \"command line\".\n        #\n        toplevel_options = self._get_toplevel_options()\n\n        # We have to parse the command line a bit at a time -- global\n        # options, then the first command, then its options, and so on --\n        # because each command will be handled by a different class, and\n        # the options that are valid for a particular class aren't known\n        # until we have loaded the command class, which doesn't happen\n        # until we know what the command is.\n\n        self.commands = []\n        parser = FancyGetopt(toplevel_options + self.display_options)\n        parser.set_negative_aliases(self.negative_opt)\n        parser.set_aliases({'licence': 'license'})\n        args = parser.getopt(args=self.script_args, object=self)\n        option_order = parser.get_option_order()\n        logging.getLogger().setLevel(logging.WARN - 10 * self.verbose)\n\n        # for display options we return immediately\n        if self.handle_display_options(option_order):\n            return\n        while args:\n            args = self._parse_command_opts(parser, args)\n            if args is None:  # user asked for help (and got it)\n                return\n\n        # Handle the cases of --help as a \"global\" option, ie.\n        # \"setup.py --help\" and \"setup.py --help command ...\".  For the\n        # former, we show global options (--verbose, --dry-run, etc.)\n        # and display-only options (--name, --version, etc.); for the\n        # latter, we omit the display-only options and show help for\n        # each command listed on the command line.\n        if self.help:\n            self._show_help(\n                parser, display_options=len(self.commands) == 0, commands=self.commands\n            )\n            return\n\n        # Oops, no commands found -- an end-user error\n        if not self.commands:\n            raise DistutilsArgError(\"no commands supplied\")\n\n        # All is well: return true\n        return True\n\n"
    },
    {
      "function": "dist.run_commands",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 948,
      "caller": "test_bdist_egg",
      "source_code": "    def run_commands(self):\n        \"\"\"Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        \"\"\"\n        for cmd in self.commands:\n            self.run_command(cmd)\n\n"
    }
  ],
  "assertions": [
    "assert re.match('foo-0.0.0-py[23].\\\\d+.egg$', content)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_bdist_egg(self):\n        dist = Distribution(\n            dict(\n                script_name='setup.py',\n                script_args=['bdist_egg'],\n                name='foo',\n                py_modules=['hi'],\n            )\n        )\n        os.makedirs(os.path.join('build', 'src'))\n        with contexts.quiet():\n            dist.parse_command_line()\n            dist.run_commands()\n\n        # let's see if we got our egg link at the right place\n        [content] = os.listdir('dist')\n        assert re.match(r'foo-0.0.0-py[23].\\d+.egg$', content)"
}