{
  "test_name": "test_blueprint_copy_returns_blueprint_with_the_name_of_original_blueprint",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_blueprints.py",
  "static_methods": [
    {
      "name": "Blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bp.copy",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 162
    }
  ],
  "dynamic_methods": [
    {
      "function": "Blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_blueprint_copy_returns_blueprint_with_the_name_of_original_blueprint",
      "source_code": ""
    },
    {
      "function": "bp.copy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 162,
      "caller": "test_blueprint_copy_returns_blueprint_with_the_name_of_original_blueprint",
      "source_code": "    def copy(self):\n        \"\"\"Return a copy of itself.\"\"\"\n        return MultiDict(self.items())\n\n\n"
    }
  ],
  "assertions": [
    "assert bp.name == actual.copied_from"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_blueprint_copy_returns_blueprint_with_the_name_of_original_blueprint(\n    app: Sanic,\n):\n    # arrange\n    bp = Blueprint(\"bp\")\n\n    # act\n    actual = bp.copy(\"new_bp_name\")\n\n    # assert\n    assert bp.name == actual.copied_from"
}