{
  "test_name": "test_both_license_and_license_files_defined",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
  "static_methods": [
    {
      "name": "self.base_pyproject",
      "source_code": "    def base_pyproject(self, tmp_path, additional_text):\n        pyproject = _pep621_example_project(tmp_path, \"README\")\n        text = pyproject.read_text(encoding=\"utf-8\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 257
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "license.write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "pyprojecttoml.apply_configuration",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line_number": 64
    },
    {
      "name": "makedist",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line_number": 33
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.base_pyproject",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 257,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "    def base_pyproject(self, tmp_path, additional_text):\n        pyproject = _pep621_example_project(tmp_path, \"README\")\n        text = pyproject.read_text(encoding=\"utf-8\")\n\n        # Sanity-check\n        assert 'license = {file = \"LICENSE.txt\"}' in text\n        assert \"[tool.setuptools]\" not in text\n\n        text = f\"{text}\\n{additional_text}\\n\"\n        pyproject.write_text(text, encoding=\"utf-8\")\n        return pyproject\n\n"
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "license.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "pyprojecttoml.apply_configuration",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/config/pyprojecttoml.py",
      "line": 64,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "def apply_configuration(\n    dist: Distribution,\n    filepath: StrPath,\n    ignore_option_errors: bool = False,\n"
    },
    {
      "function": "makedist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/config/test_apply_pyprojecttoml.py",
      "line": 33,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": "def makedist(path, **attrs):\n    return Distribution({\"src_root\": path, **attrs})\n\n\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_both_license_and_license_files_defined",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert set(dist.metadata.license_files) == {'_FILE.rst', '_FILE.txt'}",
    "assert dist.metadata.license == 'LicenseRef-Proprietary\\n'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_both_license_and_license_files_defined(self, tmp_path):\n        setuptools_config = '[tool.setuptools]\\nlicense-files = [\"_FILE*\"]'\n        pyproject = self.base_pyproject(tmp_path, setuptools_config)\n\n        (tmp_path / \"_FILE.txt\").touch()\n        (tmp_path / \"_FILE.rst\").touch()\n\n        # Would normally match the `license_files` patterns, but we want to exclude it\n        # by being explicit. On the other hand, contents should be added to `license`\n        license = tmp_path / \"LICENSE.txt\"\n        license.write_text(\"LicenseRef-Proprietary\\n\", encoding=\"utf-8\")\n\n        dist = pyprojecttoml.apply_configuration(makedist(tmp_path), pyproject)\n        assert set(dist.metadata.license_files) == {\"_FILE.rst\", \"_FILE.txt\"}\n        assert dist.metadata.license == \"LicenseRef-Proprietary\\n\""
}