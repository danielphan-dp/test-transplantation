{
  "test_name": "test_build",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_scripts.py",
  "static_methods": [
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "self.write_sample_scripts",
      "source_code": "    def write_sample_scripts(dir):\n        spec = {\n            'script1.py': textwrap.dedent(\"\"\"\n                #! /usr/bin/env python2.3\n                # bogus script w/ Python sh-bang\n                pass\n                \"\"\").lstrip(),\n            'script2.py': textwrap.dedent(\"\"\"\n                #!/usr/bin/python\n                # bogus script w/ Python sh-bang\n                pass\n                \"\"\").lstrip(),\n            'shell.sh': textwrap.dedent(\"\"\"\n                #!/bin/sh\n                # bogus shell script w/ sh-bang\n                exit 0\n                \"\"\").lstrip(),\n        }\n        jaraco.path.build(spec, dir)\n        return list(spec)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_scripts.py",
      "line_number": 50
    },
    {
      "name": "self.get_build_scripts_cmd",
      "source_code": "    def get_build_scripts_cmd(self, target, scripts):\n        import sys",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_scripts.py",
      "line_number": 39
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_build",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_build",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "self.write_sample_scripts",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_scripts.py",
      "line": 50,
      "caller": "test_build",
      "source_code": "    @staticmethod\n    def write_sample_scripts(dir):\n        spec = {\n            'script1.py': textwrap.dedent(\"\"\"\n                #! /usr/bin/env python2.3\n                # bogus script w/ Python sh-bang\n                pass\n                \"\"\").lstrip(),\n            'script2.py': textwrap.dedent(\"\"\"\n                #!/usr/bin/python\n                # bogus script w/ Python sh-bang\n                pass\n                \"\"\").lstrip(),\n            'shell.sh': textwrap.dedent(\"\"\"\n                #!/bin/sh\n                # bogus shell script w/ sh-bang\n                exit 0\n                \"\"\").lstrip(),\n        }\n        jaraco.path.build(spec, dir)\n        return list(spec)\n\n"
    },
    {
      "function": "self.get_build_scripts_cmd",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_scripts.py",
      "line": 39,
      "caller": "test_build",
      "source_code": "    def get_build_scripts_cmd(self, target, scripts):\n        import sys\n\n        dist = Distribution()\n        dist.scripts = scripts\n        dist.command_obj[\"build\"] = support.DummyCommand(\n            build_scripts=target, force=True, executable=sys.executable\n        )\n        return build_scripts(dist)\n\n"
    }
  ],
  "assertions": [
    "assert name in built"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_build(self):\n        source = self.mkdtemp()\n        target = self.mkdtemp()\n        expected = self.write_sample_scripts(source)\n\n        cmd = self.get_build_scripts_cmd(\n            target, [os.path.join(source, fn) for fn in expected]\n        )\n        cmd.finalize_options()\n        cmd.run()\n\n        built = os.listdir(target)\n        for name in expected:\n            assert name in built"
}