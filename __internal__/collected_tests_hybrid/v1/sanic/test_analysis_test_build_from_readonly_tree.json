{
  "test_name": "test_build_from_readonly_tree",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_bdist_wheel.py",
  "static_methods": [
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.chdir",
      "source_code": "def chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 424
    },
    {
      "name": "bdist_wheel_cmd.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "tmp_path.joinpath",
      "source_code": "    def joinpath(self, *other):\n        next = posixpath.join(self.at, *other)\n        return self._next(self.root.resolve_dir(next))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line_number": 488
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bdist_wheel_cmd",
      "source_code": "def bdist_wheel_cmd(**kwargs):\n    \"\"\"Run command in the same process so that it is easier to collect coverage\"\"\"\n    dist_obj = (\n        run_setup(\"setup.py\", stop_after=\"init\")\n        if os.path.exists(\"setup.py\")\n        else Distribution({\"script_name\": \"%%build_meta%%\"})\n    )\n    dist_obj.parse_config_files()\n    cmd = bdist_wheel(dist_obj)\n    for attr, value in kwargs.items():\n        setattr(cmd, attr, value)\n    cmd.finalize_options()\n    return cmd",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_bdist_wheel.py",
      "line_number": 202
    }
  ],
  "dynamic_methods": [
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_from_readonly_tree",
      "source_code": ""
    },
    {
      "function": "monkeypatch.chdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 424,
      "caller": "test_build_from_readonly_tree",
      "source_code": "@contextlib.contextmanager\ndef chdir(d):\n    cwd = os.getcwd()\n    try:\n        os.chdir(d)\n        yield\n    finally:\n        os.chdir(cwd)\n\n\n"
    },
    {
      "function": "bdist_wheel_cmd.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_build_from_readonly_tree",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "tmp_path.joinpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line": 488,
      "caller": "test_build_from_readonly_tree",
      "source_code": "    def joinpath(self, *other):\n        next = posixpath.join(self.at, *other)\n        return self._next(self.root.resolve_dir(next))\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_from_readonly_tree",
      "source_code": ""
    },
    {
      "function": "bdist_wheel_cmd",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_bdist_wheel.py",
      "line": 202,
      "caller": "test_build_from_readonly_tree",
      "source_code": "def bdist_wheel_cmd(**kwargs):\n    \"\"\"Run command in the same process so that it is easier to collect coverage\"\"\"\n    dist_obj = (\n        run_setup(\"setup.py\", stop_after=\"init\")\n        if os.path.exists(\"setup.py\")\n        else Distribution({\"script_name\": \"%%build_meta%%\"})\n    )\n    dist_obj.parse_config_files()\n    cmd = bdist_wheel(dist_obj)\n    for attr, value in kwargs.items():\n        setattr(cmd, attr, value)\n    cmd.finalize_options()\n    return cmd\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_build_from_readonly_tree(dummy_dist, monkeypatch, tmp_path):\n    basedir = str(tmp_path.joinpath(\"dummy\"))\n    shutil.copytree(str(dummy_dist), basedir)\n    monkeypatch.chdir(basedir)\n\n    # Make the tree read-only\n    for root, _dirs, files in os.walk(basedir):\n        for fname in files:\n            os.chmod(os.path.join(root, fname), stat.S_IREAD)\n\n    bdist_wheel_cmd().run()"
}