{
  "test_name": "test_build_libraries_reproducible",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_build_clib.py",
  "static_methods": [
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "build_clib",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_build_libraries_reproducible",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_build_libraries_reproducible",
      "source_code": ""
    },
    {
      "function": "build_clib",
      "filename": "",
      "line": 0,
      "caller": "test_build_libraries_reproducible",
      "source_code": ""
    },
    {
      "function": "mock.MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_build_libraries_reproducible",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_build_libraries_reproducible",
      "source_code": ""
    },
    {
      "function": "mock.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_build_libraries_reproducible",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [
    "assert computed_call_args == mock_newer.call_args[0]"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_build_libraries_reproducible(self, mock_newer):\n        dist = Distribution()\n        cmd = build_clib(dist)\n\n        # with that out of the way, let's see if the crude dependency\n        # system works\n        cmd.compiler = mock.MagicMock(spec=cmd.compiler)\n        mock_newer.return_value = ([], [])\n\n        original_sources = ['a-example.c', 'example.c']\n        sources = original_sources\n\n        obj_deps = {'': ('global.h',), 'example.c': ('example.h',)}\n        libs = [('example', {'sources': sources, 'obj_deps': obj_deps})]\n\n        cmd.build_libraries(libs)\n        computed_call_args = mock_newer.call_args[0]\n\n        while sources == original_sources:\n            sources = random.sample(original_sources, len(original_sources))\n        libs = [('example', {'sources': sources, 'obj_deps': obj_deps})]\n\n        cmd.build_libraries(libs)\n        assert computed_call_args == mock_newer.call_args[0]"
}