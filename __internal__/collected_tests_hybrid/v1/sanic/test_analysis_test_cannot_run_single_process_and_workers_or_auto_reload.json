{
  "test_name": "test_cannot_run_single_process_and_workers_or_auto_reload",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "app.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_cannot_run_single_process_and_workers_or_auto_reload",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_cannot_run_single_process_and_workers_or_auto_reload(\n    app: Sanic, extra, port\n):\n    message = (\n        \"Single process cannot be run with multiple workers or auto-reload\"\n    )\n    with pytest.raises(RuntimeError, match=message):\n        app.run(single_process=True, port=port, **extra)"
}