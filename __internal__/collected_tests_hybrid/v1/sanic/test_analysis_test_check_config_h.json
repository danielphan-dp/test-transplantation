{
  "test_name": "test_check_config_h",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_cygwinccompiler.py",
  "static_methods": [
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line_number": 280
    },
    {
      "name": "check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line_number": 280
    },
    {
      "name": "check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line_number": 280
    },
    {
      "name": "check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line_number": 280
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_check_config_h",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_check_config_h",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "check_config_h",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line": 280,
      "caller": "test_check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where 'status' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn't look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    'details' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude \"OK\": either 'sys.version' contains\n    the string \"GCC\" (implying that this Python was built with GCC), or the\n    installed \"pyconfig.h\" contains the string \"__GNUC__\".\n    \"\"\"\n\n    # XXX since this function also checks sys.version, it's not strictly a\n    # \"pyconfig.h\" check -- should probably be renamed...\n\n    from distutils import sysconfig\n\n    # if sys.version contains GCC then python was compiled with GCC, and the\n    # pyconfig.h file should be OK\n    if \"GCC\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'GCC'\"\n\n    # Clang would also work\n    if \"Clang\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'Clang'\"\n\n    # let's see if __GNUC__ is mentioned in python.h\n    fn = sysconfig.get_config_h_filename()\n    try:\n        config_h = pathlib.Path(fn).read_text(encoding='utf-8')\n    except OSError as exc:\n        return (CONFIG_H_UNCERTAIN, f\"couldn't read '{fn}': {exc.strerror}\")\n    else:\n        substring = '__GNUC__'\n        if substring in config_h:\n            code = CONFIG_H_OK\n            mention_inflected = 'mentions'\n        else:\n            code = CONFIG_H_NOTOK\n            mention_inflected = 'does not mention'\n        return code, f\"{fn!r} {mention_inflected} {substring!r}\"\n\n\n"
    },
    {
      "function": "check_config_h",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line": 280,
      "caller": "test_check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where 'status' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn't look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    'details' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude \"OK\": either 'sys.version' contains\n    the string \"GCC\" (implying that this Python was built with GCC), or the\n    installed \"pyconfig.h\" contains the string \"__GNUC__\".\n    \"\"\"\n\n    # XXX since this function also checks sys.version, it's not strictly a\n    # \"pyconfig.h\" check -- should probably be renamed...\n\n    from distutils import sysconfig\n\n    # if sys.version contains GCC then python was compiled with GCC, and the\n    # pyconfig.h file should be OK\n    if \"GCC\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'GCC'\"\n\n    # Clang would also work\n    if \"Clang\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'Clang'\"\n\n    # let's see if __GNUC__ is mentioned in python.h\n    fn = sysconfig.get_config_h_filename()\n    try:\n        config_h = pathlib.Path(fn).read_text(encoding='utf-8')\n    except OSError as exc:\n        return (CONFIG_H_UNCERTAIN, f\"couldn't read '{fn}': {exc.strerror}\")\n    else:\n        substring = '__GNUC__'\n        if substring in config_h:\n            code = CONFIG_H_OK\n            mention_inflected = 'mentions'\n        else:\n            code = CONFIG_H_NOTOK\n            mention_inflected = 'does not mention'\n        return code, f\"{fn!r} {mention_inflected} {substring!r}\"\n\n\n"
    },
    {
      "function": "check_config_h",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line": 280,
      "caller": "test_check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where 'status' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn't look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    'details' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude \"OK\": either 'sys.version' contains\n    the string \"GCC\" (implying that this Python was built with GCC), or the\n    installed \"pyconfig.h\" contains the string \"__GNUC__\".\n    \"\"\"\n\n    # XXX since this function also checks sys.version, it's not strictly a\n    # \"pyconfig.h\" check -- should probably be renamed...\n\n    from distutils import sysconfig\n\n    # if sys.version contains GCC then python was compiled with GCC, and the\n    # pyconfig.h file should be OK\n    if \"GCC\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'GCC'\"\n\n    # Clang would also work\n    if \"Clang\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'Clang'\"\n\n    # let's see if __GNUC__ is mentioned in python.h\n    fn = sysconfig.get_config_h_filename()\n    try:\n        config_h = pathlib.Path(fn).read_text(encoding='utf-8')\n    except OSError as exc:\n        return (CONFIG_H_UNCERTAIN, f\"couldn't read '{fn}': {exc.strerror}\")\n    else:\n        substring = '__GNUC__'\n        if substring in config_h:\n            code = CONFIG_H_OK\n            mention_inflected = 'mentions'\n        else:\n            code = CONFIG_H_NOTOK\n            mention_inflected = 'does not mention'\n        return code, f\"{fn!r} {mention_inflected} {substring!r}\"\n\n\n"
    },
    {
      "function": "check_config_h",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cygwinccompiler.py",
      "line": 280,
      "caller": "test_check_config_h",
      "source_code": "def check_config_h():\n    \"\"\"Check if the current Python installation appears amenable to building\n    extensions with GCC.\n\n    Returns a tuple (status, details), where 'status' is one of the following\n    constants:\n\n    - CONFIG_H_OK: all is well, go ahead and compile\n    - CONFIG_H_NOTOK: doesn't look good\n    - CONFIG_H_UNCERTAIN: not sure -- unable to read pyconfig.h\n\n    'details' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude \"OK\": either 'sys.version' contains\n    the string \"GCC\" (implying that this Python was built with GCC), or the\n    installed \"pyconfig.h\" contains the string \"__GNUC__\".\n    \"\"\"\n\n    # XXX since this function also checks sys.version, it's not strictly a\n    # \"pyconfig.h\" check -- should probably be renamed...\n\n    from distutils import sysconfig\n\n    # if sys.version contains GCC then python was compiled with GCC, and the\n    # pyconfig.h file should be OK\n    if \"GCC\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'GCC'\"\n\n    # Clang would also work\n    if \"Clang\" in sys.version:\n        return CONFIG_H_OK, \"sys.version mentions 'Clang'\"\n\n    # let's see if __GNUC__ is mentioned in python.h\n    fn = sysconfig.get_config_h_filename()\n    try:\n        config_h = pathlib.Path(fn).read_text(encoding='utf-8')\n    except OSError as exc:\n        return (CONFIG_H_UNCERTAIN, f\"couldn't read '{fn}': {exc.strerror}\")\n    else:\n        substring = '__GNUC__'\n        if substring in config_h:\n            code = CONFIG_H_OK\n            mention_inflected = 'mentions'\n        else:\n            code = CONFIG_H_NOTOK\n            mention_inflected = 'does not mention'\n        return code, f\"{fn!r} {mention_inflected} {substring!r}\"\n\n\n"
    }
  ],
  "assertions": [
    "assert check_config_h()[0] == CONFIG_H_OK",
    "assert check_config_h()[0] == CONFIG_H_UNCERTAIN",
    "assert check_config_h()[0] == CONFIG_H_NOTOK",
    "assert check_config_h()[0] == CONFIG_H_OK"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_check_config_h(self):\n        # check_config_h looks for \"GCC\" in sys.version first\n        # returns CONFIG_H_OK if found\n        sys.version = (\n            '2.6.1 (r261:67515, Dec  6 2008, 16:42:21) \\n[GCC '\n            '4.0.1 (Apple Computer, Inc. build 5370)]'\n        )\n\n        assert check_config_h()[0] == CONFIG_H_OK\n\n        # then it tries to see if it can find \"__GNUC__\" in pyconfig.h\n        sys.version = 'something without the *CC word'\n\n        # if the file doesn't exist it returns  CONFIG_H_UNCERTAIN\n        assert check_config_h()[0] == CONFIG_H_UNCERTAIN\n\n        # if it exists but does not contain __GNUC__, it returns CONFIG_H_NOTOK\n        self.write_file(self.python_h, 'xxx')\n        assert check_config_h()[0] == CONFIG_H_NOTOK\n\n        # and CONFIG_H_OK if __GNUC__ is found\n        self.write_file(self.python_h, 'xxx __GNUC__ xxx')\n        assert check_config_h()[0] == CONFIG_H_OK"
}