{
  "test_name": "test_check_environ",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_util.py",
  "static_methods": [
    {
      "name": "util.check_environ.cache_clear",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "check_environ",
      "source_code": "def check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 165
    },
    {
      "name": "get_platform",
      "source_code": "def get_platform():\n    if os.name != 'nt':\n        return get_host_platform()\n    cross_compilation_target = os.environ.get('VSCMD_ARG_TGT_ARCH')\n    if cross_compilation_target not in _TARGET_TO_PLAT:\n        return get_host_platform()\n    return _TARGET_TO_PLAT[cross_compilation_target]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1926
    }
  ],
  "dynamic_methods": [
    {
      "function": "util.check_environ.cache_clear",
      "filename": "",
      "line": 0,
      "caller": "test_check_environ",
      "source_code": ""
    },
    {
      "function": "check_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 165,
      "caller": "test_check_environ",
      "source_code": "@functools.lru_cache\ndef check_environ():\n    \"\"\"Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    \"\"\"\n    if os.name == 'posix' and 'HOME' not in os.environ:\n        try:\n            import pwd\n\n            os.environ['HOME'] = pwd.getpwuid(os.getuid())[5]\n        except (ImportError, KeyError):\n            # bpo-10496: if the current user identifier doesn't exist in the\n            # password database, do nothing\n            pass\n\n    if 'PLAT' not in os.environ:\n        os.environ['PLAT'] = get_platform()\n\n\n"
    },
    {
      "function": "get_platform",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1926,
      "caller": "test_check_environ",
      "source_code": "def get_platform():\n    if os.name != 'nt':\n        return get_host_platform()\n    cross_compilation_target = os.environ.get('VSCMD_ARG_TGT_ARCH')\n    if cross_compilation_target not in _TARGET_TO_PLAT:\n        return get_host_platform()\n    return _TARGET_TO_PLAT[cross_compilation_target]\n"
    }
  ],
  "assertions": [
    "assert os.environ['PLAT'] == get_platform()"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_check_environ(self):\n        util.check_environ.cache_clear()\n        os.environ.pop('HOME', None)\n\n        check_environ()\n\n        assert os.environ['PLAT'] == get_platform()"
}