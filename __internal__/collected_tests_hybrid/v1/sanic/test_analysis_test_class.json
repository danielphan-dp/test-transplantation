{
  "test_name": "test_class",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
  "static_methods": [
    {
      "name": "path.Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jaraco.path.build",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 363
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TextFile",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file.readlines",
      "source_code": "    def readlines(self, __hint: int = 1) -> List[str]:\n        return []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 35
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "test_input",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line_number": 54
    },
    {
      "name": "in_file.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    }
  ],
  "dynamic_methods": [
    {
      "function": "path.Path",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "jaraco.path.build",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 363,
      "caller": "test_class",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}\n\n        libkey = list(filter(lambda o: o in paths, ('purelib', 'platlib')))[0]\n        if libkey == 'platlib':\n            is_pure = 'false'\n            default_pyver = [IMPVER]\n            default_abi = [ABI]\n            default_arch = [ARCH]\n        else:\n            is_pure = 'true'\n            default_pyver = [PYVER]\n            default_abi = ['none']\n            default_arch = ['any']\n\n        self.pyver = tags.get('pyver', default_pyver)\n        self.abi = tags.get('abi', default_abi)\n        self.arch = tags.get('arch', default_arch)\n\n        libdir = paths[libkey]\n\n        name_ver = '%s-%s' % (self.name, self.version)\n        data_dir = '%s.data' % name_ver\n        info_dir = '%s.dist-info' % name_ver\n\n        archive_paths = []\n\n        # First, stuff which is not in site-packages\n        for key in ('data', 'headers', 'scripts'):\n            if key not in paths:\n                continue\n            path = paths[key]\n            if os.path.isdir(path):\n                for root, dirs, files in os.walk(path):\n                    for fn in files:\n                        p = fsdecode(os.path.join(root, fn))\n                        rp = os.path.relpath(p, path)\n                        ap = to_posix(os.path.join(data_dir, key, rp))\n                        archive_paths.append((ap, p))\n                        if key == 'scripts' and not p.endswith('.exe'):\n                            with open(p, 'rb') as f:\n                                data = f.read()\n                            data = self.process_shebang(data)\n                            with open(p, 'wb') as f:\n                                f.write(data)\n\n        # Now, stuff which is in site-packages, other than the\n        # distinfo stuff.\n        path = libdir\n        distinfo = None\n        for root, dirs, files in os.walk(path):\n            if root == path:\n                # At the top level only, save distinfo for later\n                # and skip it for now\n                for i, dn in enumerate(dirs):\n                    dn = fsdecode(dn)\n                    if dn.endswith('.dist-info'):\n                        distinfo = os.path.join(root, dn)\n                        del dirs[i]\n                        break\n                assert distinfo, '.dist-info directory expected, not found'\n\n            for fn in files:\n                # comment out next suite to leave .pyc files in\n                if fsdecode(fn).endswith(('.pyc', '.pyo')):\n                    continue\n                p = os.path.join(root, fn)\n                rp = to_posix(os.path.relpath(p, path))\n                archive_paths.append((rp, p))\n\n        # Now distinfo. Assumed to be flat, i.e. os.listdir is enough.\n        files = os.listdir(distinfo)\n        for fn in files:\n            if fn not in ('RECORD', 'INSTALLER', 'SHARED', 'WHEEL'):\n                p = fsdecode(os.path.join(distinfo, fn))\n                ap = to_posix(os.path.join(info_dir, fn))\n                archive_paths.append((ap, p))\n\n        wheel_metadata = [\n            'Wheel-Version: %d.%d' % (wheel_version or self.wheel_version),\n            'Generator: distlib %s' % __version__,\n            'Root-Is-Purelib: %s' % is_pure,\n        ]\n        for pyver, abi, arch in self.tags:\n            wheel_metadata.append('Tag: %s-%s-%s' % (pyver, abi, arch))\n        p = os.path.join(distinfo, 'WHEEL')\n        with open(p, 'w') as f:\n            f.write('\\n'.join(wheel_metadata))\n        ap = to_posix(os.path.join(info_dir, 'WHEEL'))\n        archive_paths.append((ap, p))\n\n        # sort the entries by archive path. Not needed by any spec, but it\n        # keeps the archive listing and RECORD tidier than they would otherwise\n        # be. Use the number of path segments to keep directory entries together,\n        # and keep the dist-info stuff at the end.\n        def sorter(t):\n            ap = t[0]\n            n = ap.count('/')\n            if '.dist-info' in ap:\n                n += 10000\n            return (n, ap)\n        archive_paths = sorted(archive_paths, key=sorter)\n\n        # Now, at last, RECORD.\n        # Paths in here are archive paths - nothing else makes sense.\n        self.write_records((distinfo, info_dir), libdir, archive_paths)\n        # Now, ready to build the zip file\n        pathname = os.path.join(self.dirname, self.filename)\n        self.build_zip(pathname, archive_paths)\n        return pathname\n\n"
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "TextFile",
      "filename": "",
      "line": 0,
      "caller": "test_class",
      "source_code": ""
    },
    {
      "function": "file.readlines",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 35,
      "caller": "test_class",
      "source_code": "    def readlines(self, __hint: int = 1) -> List[str]:\n        return []\n\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_class",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "test_input",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_text_file.py",
      "line": 54,
      "caller": "test_class",
      "source_code": "        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n"
    },
    {
      "function": "in_file.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_class",
      "source_code": "    def close(self):\n        pass\n\n\n"
    }
  ],
  "assertions": [
    "assert result == expected_result"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_class(self):\n        # old tests moved from text_file.__main__\n        # so they are really called by the buildbots\n\n        # result 1: no fancy options\n        result1 = [\n            '# test file\\n',\n            '\\n',\n            'line 3 \\\\\\n',\n            '# intervening comment\\n',\n            '  continues on next line\\n',\n        ]\n\n        # result 2: just strip comments\n        result2 = [\"\\n\", \"line 3 \\\\\\n\", \"  continues on next line\\n\"]\n\n        # result 3: just strip blank lines\n        result3 = [\n            \"# test file\\n\",\n            \"line 3 \\\\\\n\",\n            \"# intervening comment\\n\",\n            \"  continues on next line\\n\",\n        ]\n\n        # result 4: default, strip comments, blank lines,\n        # and trailing whitespace\n        result4 = [\"line 3 \\\\\", \"  continues on next line\"]\n\n        # result 5: strip comments and blanks, plus join lines (but don't\n        # \"collapse\" joined lines\n        result5 = [\"line 3   continues on next line\"]\n\n        # result 6: strip comments and blanks, plus join lines (and\n        # \"collapse\" joined lines\n        result6 = [\"line 3 continues on next line\"]\n\n        def test_input(count, description, file, expected_result):\n            result = file.readlines()\n            assert result == expected_result\n\n        tmp_path = path.Path(self.mkdtemp())\n        filename = tmp_path / 'test.txt'\n        jaraco.path.build({filename.name: TEST_DATA}, tmp_path)\n\n        in_file = TextFile(\n            filename,\n            strip_comments=False,\n            skip_blanks=False,\n            lstrip_ws=False,\n            rstrip_ws=False,\n        )\n        try:\n            test_input(1, \"no processing\", in_file, result1)\n        finally:\n            in_file.close()\n\n        in_file = TextFile(\n            filename,\n            strip_comments=True,\n            skip_blanks=False,\n            lstrip_ws=False,\n            rstrip_ws=False,\n        )\n        try:\n            test_input(2, \"strip comments\", in_file, result2)\n        finally:\n            in_file.close()\n\n        in_file = TextFile(\n            filename,\n            strip_comments=False,\n            skip_blanks=True,\n            lstrip_ws=False,\n            rstrip_ws=False,\n        )\n        try:\n            test_input(3, \"strip blanks\", in_file, result3)\n        finally:\n            in_file.close()\n\n        in_file = TextFile(filename)\n        try:\n            test_input(4, \"default processing\", in_file, result4)\n        finally:\n            in_file.close()\n\n        in_file = TextFile(\n            filename,\n            strip_comments=True,\n            skip_blanks=True,\n            join_lines=True,\n            rstrip_ws=True,\n        )\n        try:\n            test_input(5, \"join lines without collapsing\", in_file, result5)\n        finally:\n            in_file.close()\n\n        in_file = TextFile(\n            filename,\n            strip_comments=True,\n            skip_blanks=True,\n            join_lines=True,\n            rstrip_ws=True,\n            collapse_join=True,\n        )\n        try:\n            test_input(6, \"join lines with collapsing\", in_file, result6)\n        finally:\n            in_file.close()"
}