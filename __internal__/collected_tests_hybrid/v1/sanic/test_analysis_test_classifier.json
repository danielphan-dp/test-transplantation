{
  "test_name": "test_classifier",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dist.py",
  "static_methods": [
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.format_metadata",
      "source_code": "    def format_metadata(self, dist):\n        sio = io.StringIO()\n        dist.metadata.write_pkg_file(sio)\n        return sio.getvalue()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dist.py",
      "line_number": 265
    },
    {
      "name": "dist.get_classifiers",
      "source_code": "    def get_classifiers(self):\n        return self.classifiers or []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line_number": 1242
    }
  ],
  "dynamic_methods": [
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_classifier",
      "source_code": ""
    },
    {
      "function": "self.format_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dist.py",
      "line": 265,
      "caller": "test_classifier",
      "source_code": "    def format_metadata(self, dist):\n        sio = io.StringIO()\n        dist.metadata.write_pkg_file(sio)\n        return sio.getvalue()\n\n"
    },
    {
      "function": "dist.get_classifiers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dist.py",
      "line": 1242,
      "caller": "test_classifier",
      "source_code": "    def get_classifiers(self):\n        return self.classifiers or []\n\n"
    }
  ],
  "assertions": [
    "assert dist.get_classifiers() == ['Programming Language :: Python :: 3']",
    "assert 'Metadata-Version: 1.1' in meta"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_classifier(self):\n        attrs = {\n            'name': 'Boa',\n            'version': '3.0',\n            'classifiers': ['Programming Language :: Python :: 3'],\n        }\n        dist = Distribution(attrs)\n        assert dist.get_classifiers() == ['Programming Language :: Python :: 3']\n        meta = self.format_metadata(dist)\n        assert 'Metadata-Version: 1.1' in meta"
}