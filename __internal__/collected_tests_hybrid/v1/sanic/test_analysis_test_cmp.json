{
  "test_name": "test_cmp",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_version.py",
  "static_methods": [
    {
      "name": "LooseVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 335
    },
    {
      "name": "LooseVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 335
    },
    {
      "name": "LooseVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 335
    },
    {
      "name": "LooseVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "LooseVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "LooseVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "LooseVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "LooseVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 335,
      "caller": "test_cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            return 0\n        if self.version < other.version:\n            return -1\n        if self.version > other.version:\n            return 1\n\n\n"
    },
    {
      "function": "LooseVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 335,
      "caller": "test_cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            return 0\n        if self.version < other.version:\n            return -1\n        if self.version > other.version:\n            return 1\n\n\n"
    },
    {
      "function": "LooseVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 335,
      "caller": "test_cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            other = LooseVersion(other)\n        elif not isinstance(other, LooseVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            return 0\n        if self.version < other.version:\n            return -1\n        if self.version > other.version:\n            return 1\n\n\n"
    },
    {
      "function": "LooseVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp",
      "source_code": ""
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cmp",
      "source_code": ""
    },
    {
      "function": "LooseVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp",
      "source_code": ""
    },
    {
      "function": "LooseVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp",
      "source_code": ""
    },
    {
      "function": "LooseVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'",
    "assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'",
    "assert res is NotImplemented, f'cmp({v1}, {v2}) should be NotImplemented, got {res}'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cmp(self):\n        versions = (\n            ('1.5.1', '1.5.2b2', -1),\n            ('161', '3.10a', 1),\n            ('8.02', '8.02', 0),\n            ('3.4j', '1996.07.12', -1),\n            ('3.2.pl0', '3.1.1.6', 1),\n            ('2g6', '11g', -1),\n            ('0.960923', '2.2beta29', -1),\n            ('1.13++', '5.5.kw', -1),\n        )\n\n        for v1, v2, wanted in versions:\n            res = LooseVersion(v1)._cmp(LooseVersion(v2))\n            assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'\n            res = LooseVersion(v1)._cmp(v2)\n            assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'\n            res = LooseVersion(v1)._cmp(object())\n            assert (\n                res is NotImplemented\n            ), f'cmp({v1}, {v2}) should be NotImplemented, got {res}'"
}