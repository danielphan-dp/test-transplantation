{
  "test_name": "test_cmp_strict",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_version.py",
  "static_methods": [
    {
      "name": "StrictVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 181
    },
    {
      "name": "StrictVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 181
    },
    {
      "name": "StrictVersion._cmp",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line_number": 181
    },
    {
      "name": "object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "StrictVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StrictVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StrictVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StrictVersion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "StrictVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 181,
      "caller": "test_cmp_strict",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            # versions match; pre-release drives the comparison\n            return self._cmp_prerelease(other)\n\n        return -1 if self.version < other.version else 1\n\n"
    },
    {
      "function": "StrictVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 181,
      "caller": "test_cmp_strict",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            # versions match; pre-release drives the comparison\n            return self._cmp_prerelease(other)\n\n        return -1 if self.version < other.version else 1\n\n"
    },
    {
      "function": "StrictVersion._cmp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/version.py",
      "line": 181,
      "caller": "test_cmp_strict",
      "source_code": "    def _cmp(self, other):\n        if isinstance(other, str):\n            with suppress_known_deprecation():\n                other = StrictVersion(other)\n        elif not isinstance(other, StrictVersion):\n            return NotImplemented\n\n        if self.version == other.version:\n            # versions match; pre-release drives the comparison\n            return self._cmp_prerelease(other)\n\n        return -1 if self.version < other.version else 1\n\n"
    },
    {
      "function": "object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    },
    {
      "function": "StrictVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    },
    {
      "function": "StrictVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    },
    {
      "function": "StrictVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    },
    {
      "function": "StrictVersion",
      "filename": "",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cmp_strict",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'",
    "assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'",
    "assert res is NotImplemented, f'cmp({v1}, {v2}) should be NotImplemented, got {res}'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cmp_strict(self):\n        versions = (\n            ('1.5.1', '1.5.2b2', -1),\n            ('161', '3.10a', ValueError),\n            ('8.02', '8.02', 0),\n            ('3.4j', '1996.07.12', ValueError),\n            ('3.2.pl0', '3.1.1.6', ValueError),\n            ('2g6', '11g', ValueError),\n            ('0.9', '2.2', -1),\n            ('1.2.1', '1.2', 1),\n            ('1.1', '1.2.2', -1),\n            ('1.2', '1.1', 1),\n            ('1.2.1', '1.2.2', -1),\n            ('1.2.2', '1.2', 1),\n            ('1.2', '1.2.2', -1),\n            ('0.4.0', '0.4', 0),\n            ('1.13++', '5.5.kw', ValueError),\n        )\n\n        for v1, v2, wanted in versions:\n            try:\n                res = StrictVersion(v1)._cmp(StrictVersion(v2))\n            except ValueError:\n                if wanted is ValueError:\n                    continue\n                else:\n                    raise AssertionError(f\"cmp({v1}, {v2}) shouldn't raise ValueError\")\n            assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'\n            res = StrictVersion(v1)._cmp(v2)\n            assert res == wanted, f'cmp({v1}, {v2}) should be {wanted}, got {res}'\n            res = StrictVersion(v1)._cmp(object())\n            assert (\n                res is NotImplemented\n            ), f'cmp({v1}, {v2}) should be NotImplemented, got {res}'"
}