{
  "test_name": "test_combine_namespaces_nested",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
  "static_methods": [
    {
      "name": "stack.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "contexts.save_paths",
      "source_code": "def save_paths():\n    \"\"\"Make sure ``sys.path``, ``sys.meta_path`` and ``sys.path_hooks`` are preserved\"\"\"\n    prev = sys.path[:], sys.meta_path[:], sys.path_hooks[:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 126
    },
    {
      "name": "contexts.save_sys_modules",
      "source_code": "def save_sys_modules():\n    \"\"\"Make sure initial ``sys.modules`` is preserved\"\"\"\n    prev_modules = sys.modules",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 137
    },
    {
      "name": "jaraco.path.DirectoryStack",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stack.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "jaraco.path.build",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 363
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_TopLevelFinder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "contexts.save_paths",
      "source_code": "def save_paths():\n    \"\"\"Make sure ``sys.path``, ``sys.meta_path`` and ``sys.path_hooks`` are preserved\"\"\"\n    prev = sys.path[:], sys.meta_path[:], sys.path_hooks[:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 126
    },
    {
      "name": "contexts.save_sys_modules",
      "source_code": "def save_sys_modules():\n    \"\"\"Make sure initial ``sys.modules`` is preserved\"\"\"\n    prev_modules = sys.modules",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 137
    },
    {
      "name": "self.install_finder",
      "source_code": "    def install_finder(self, finder):\n        loc = {}\n        exec(finder, loc, loc)\n        loc[\"install\"]()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
      "line_number": 448
    },
    {
      "name": "import_module",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "import_module",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "resolve",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line_number": 121
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "resolve",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line_number": 121
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "uuid4",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Path.resolve",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line_number": 121
    },
    {
      "name": "Path.resolve",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line_number": 121
    },
    {
      "name": "finder.get_implementation",
      "source_code": "    def get_implementation(self) -> Iterator[tuple[str, bytes]]:\n        finder, name, mapping, namespaces_ = self.template_vars()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/editable_wheel.py",
      "line_number": 530
    },
    {
      "name": "k.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "stack.context",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "contexts.save_paths",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 126,
      "caller": "test_combine_namespaces_nested",
      "source_code": "@contextlib.contextmanager\ndef save_paths():\n    \"\"\"Make sure ``sys.path``, ``sys.meta_path`` and ``sys.path_hooks`` are preserved\"\"\"\n    prev = sys.path[:], sys.meta_path[:], sys.path_hooks[:]\n\n    try:\n        yield\n    finally:\n        sys.path, sys.meta_path, sys.path_hooks = prev\n\n\n"
    },
    {
      "function": "contexts.save_sys_modules",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 137,
      "caller": "test_combine_namespaces_nested",
      "source_code": "@contextlib.contextmanager\ndef save_sys_modules():\n    \"\"\"Make sure initial ``sys.modules`` is preserved\"\"\"\n    prev_modules = sys.modules\n\n    try:\n        sys.modules = sys.modules.copy()\n        yield\n    finally:\n        sys.modules = prev_modules\n"
    },
    {
      "function": "jaraco.path.DirectoryStack",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "stack.context",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "jaraco.path.build",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 363,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}\n\n        libkey = list(filter(lambda o: o in paths, ('purelib', 'platlib')))[0]\n        if libkey == 'platlib':\n            is_pure = 'false'\n            default_pyver = [IMPVER]\n            default_abi = [ABI]\n            default_arch = [ARCH]\n        else:\n            is_pure = 'true'\n            default_pyver = [PYVER]\n            default_abi = ['none']\n            default_arch = ['any']\n\n        self.pyver = tags.get('pyver', default_pyver)\n        self.abi = tags.get('abi', default_abi)\n        self.arch = tags.get('arch', default_arch)\n\n        libdir = paths[libkey]\n\n        name_ver = '%s-%s' % (self.name, self.version)\n        data_dir = '%s.data' % name_ver\n        info_dir = '%s.dist-info' % name_ver\n\n        archive_paths = []\n\n        # First, stuff which is not in site-packages\n        for key in ('data', 'headers', 'scripts'):\n            if key not in paths:\n                continue\n            path = paths[key]\n            if os.path.isdir(path):\n                for root, dirs, files in os.walk(path):\n                    for fn in files:\n                        p = fsdecode(os.path.join(root, fn))\n                        rp = os.path.relpath(p, path)\n                        ap = to_posix(os.path.join(data_dir, key, rp))\n                        archive_paths.append((ap, p))\n                        if key == 'scripts' and not p.endswith('.exe'):\n                            with open(p, 'rb') as f:\n                                data = f.read()\n                            data = self.process_shebang(data)\n                            with open(p, 'wb') as f:\n                                f.write(data)\n\n        # Now, stuff which is in site-packages, other than the\n        # distinfo stuff.\n        path = libdir\n        distinfo = None\n        for root, dirs, files in os.walk(path):\n            if root == path:\n                # At the top level only, save distinfo for later\n                # and skip it for now\n                for i, dn in enumerate(dirs):\n                    dn = fsdecode(dn)\n                    if dn.endswith('.dist-info'):\n                        distinfo = os.path.join(root, dn)\n                        del dirs[i]\n                        break\n                assert distinfo, '.dist-info directory expected, not found'\n\n            for fn in files:\n                # comment out next suite to leave .pyc files in\n                if fsdecode(fn).endswith(('.pyc', '.pyo')):\n                    continue\n                p = os.path.join(root, fn)\n                rp = to_posix(os.path.relpath(p, path))\n                archive_paths.append((rp, p))\n\n        # Now distinfo. Assumed to be flat, i.e. os.listdir is enough.\n        files = os.listdir(distinfo)\n        for fn in files:\n            if fn not in ('RECORD', 'INSTALLER', 'SHARED', 'WHEEL'):\n                p = fsdecode(os.path.join(distinfo, fn))\n                ap = to_posix(os.path.join(info_dir, fn))\n                archive_paths.append((ap, p))\n\n        wheel_metadata = [\n            'Wheel-Version: %d.%d' % (wheel_version or self.wheel_version),\n            'Generator: distlib %s' % __version__,\n            'Root-Is-Purelib: %s' % is_pure,\n        ]\n        for pyver, abi, arch in self.tags:\n            wheel_metadata.append('Tag: %s-%s-%s' % (pyver, abi, arch))\n        p = os.path.join(distinfo, 'WHEEL')\n        with open(p, 'w') as f:\n            f.write('\\n'.join(wheel_metadata))\n        ap = to_posix(os.path.join(info_dir, 'WHEEL'))\n        archive_paths.append((ap, p))\n\n        # sort the entries by archive path. Not needed by any spec, but it\n        # keeps the archive listing and RECORD tidier than they would otherwise\n        # be. Use the number of path segments to keep directory entries together,\n        # and keep the dist-info stuff at the end.\n        def sorter(t):\n            ap = t[0]\n            n = ap.count('/')\n            if '.dist-info' in ap:\n                n += 10000\n            return (n, ap)\n        archive_paths = sorted(archive_paths, key=sorter)\n\n        # Now, at last, RECORD.\n        # Paths in here are archive paths - nothing else makes sense.\n        self.write_records((distinfo, info_dir), libdir, archive_paths)\n        # Now, ready to build the zip file\n        pathname = os.path.join(self.dirname, self.filename)\n        self.build_zip(pathname, archive_paths)\n        return pathname\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "_TopLevelFinder",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "contexts.save_paths",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 126,
      "caller": "test_combine_namespaces_nested",
      "source_code": "@contextlib.contextmanager\ndef save_paths():\n    \"\"\"Make sure ``sys.path``, ``sys.meta_path`` and ``sys.path_hooks`` are preserved\"\"\"\n    prev = sys.path[:], sys.meta_path[:], sys.path_hooks[:]\n\n    try:\n        yield\n    finally:\n        sys.path, sys.meta_path, sys.path_hooks = prev\n\n\n"
    },
    {
      "function": "contexts.save_sys_modules",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 137,
      "caller": "test_combine_namespaces_nested",
      "source_code": "@contextlib.contextmanager\ndef save_sys_modules():\n    \"\"\"Make sure initial ``sys.modules`` is preserved\"\"\"\n    prev_modules = sys.modules\n\n    try:\n        sys.modules = sys.modules.copy()\n        yield\n    finally:\n        sys.modules = prev_modules\n"
    },
    {
      "function": "self.install_finder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
      "line": 448,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def install_finder(self, finder):\n        loc = {}\n        exec(finder, loc, loc)\n        loc[\"install\"]()\n\n"
    },
    {
      "function": "import_module",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "import_module",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line": 121,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.\n\n        This returns a representation of the final resolution state, with one\n        guarenteed attribute ``mapping`` that contains resolved candidates as\n        values. The keys are their respective identifiers.\n\n        :param requirements: A collection of constraints.\n        :param kwargs: Additional keyword arguments that subclasses may accept.\n\n        :raises: ``self.base_exception`` or its subclass.\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line": 121,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.\n\n        This returns a representation of the final resolution state, with one\n        guarenteed attribute ``mapping`` that contains resolved candidates as\n        values. The keys are their respective identifiers.\n\n        :param requirements: A collection of constraints.\n        :param kwargs: Additional keyword arguments that subclasses may accept.\n\n        :raises: ``self.base_exception`` or its subclass.\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "uuid4",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "Path.resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line": 121,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.\n\n        This returns a representation of the final resolution state, with one\n        guarenteed attribute ``mapping`` that contains resolved candidates as\n        values. The keys are their respective identifiers.\n\n        :param requirements: A collection of constraints.\n        :param kwargs: Additional keyword arguments that subclasses may accept.\n\n        :raises: ``self.base_exception`` or its subclass.\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
      "function": "Path.resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line": 121,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.\n\n        This returns a representation of the final resolution state, with one\n        guarenteed attribute ``mapping`` that contains resolved candidates as\n        values. The keys are their respective identifiers.\n\n        :param requirements: A collection of constraints.\n        :param kwargs: Additional keyword arguments that subclasses may accept.\n\n        :raises: ``self.base_exception`` or its subclass.\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
      "function": "finder.get_implementation",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/editable_wheel.py",
      "line": 530,
      "caller": "test_combine_namespaces_nested",
      "source_code": "    def get_implementation(self) -> Iterator[tuple[str, bytes]]:\n        finder, name, mapping, namespaces_ = self.template_vars()\n\n        content = bytes(_finder_template(name, mapping, namespaces_), \"utf-8\")\n        yield (f\"{finder}.py\", content)\n\n        content = _encode_pth(f\"import {finder}; {finder}.install()\")\n        yield (f\"__editable__.{self.name}.pth\", content)\n\n"
    },
    {
      "function": "k.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_combine_namespaces_nested",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(Path(mod1.__file__).resolve()) == expected",
    "assert str(Path(mod2.__file__).resolve()) == expected",
    "assert mod1.a == 13",
    "assert mod2.b == 37"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_combine_namespaces_nested(self, tmp_path):\n        \"\"\"\n        Users may attempt to combine namespace packages in a nested way via\n        ``package_dir`` as shown in pypa/setuptools#4248.\n        \"\"\"\n\n        files = {\n            \"src\": {\"my_package\": {\"my_module.py\": \"a = 13\"}},\n            \"src2\": {\"my_package2\": {\"my_module2.py\": \"b = 37\"}},\n        }\n\n        stack = jaraco.path.DirectoryStack()\n        with stack.context(tmp_path):\n            jaraco.path.build(files)\n            attrs = {\n                \"script_name\": \"%PEP 517%\",\n                \"package_dir\": {\n                    \"different_name\": \"src/my_package\",\n                    \"different_name.subpkg\": \"src2/my_package2\",\n                },\n                \"packages\": [\"different_name\", \"different_name.subpkg\"],\n            }\n            dist = Distribution(attrs)\n            finder = _TopLevelFinder(dist, str(uuid4()))\n            code = next(v for k, v in finder.get_implementation() if k.endswith(\".py\"))\n\n        with contexts.save_paths(), contexts.save_sys_modules():\n            for mod in attrs[\"packages\"]:\n                sys.modules.pop(mod, None)\n\n            self.install_finder(code)\n            mod1 = import_module(\"different_name.my_module\")\n            mod2 = import_module(\"different_name.subpkg.my_module2\")\n\n            expected = str((tmp_path / \"src/my_package/my_module.py\").resolve())\n            assert str(Path(mod1.__file__).resolve()) == expected\n\n            expected = str((tmp_path / \"src2/my_package2/my_module2.py\").resolve())\n            assert str(Path(mod2.__file__).resolve()) == expected\n\n            assert mod1.a == 13\n            assert mod2.b == 37"
}