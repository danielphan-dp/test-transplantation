{
  "test_name": "test_concurrent_safe",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_msvccompiler.py",
  "static_methods": [
    {
      "name": "_msvccompiler.MSVCCompiler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "all",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "CheckThread",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "thread.start",
      "source_code": "    def start(self):\n        self.update(self.min)\n        return self",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1304
    },
    {
      "name": "thread.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_msvccompiler.MSVCCompiler",
      "filename": "",
      "line": 0,
      "caller": "test_concurrent_safe",
      "source_code": ""
    },
    {
      "function": "all",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_concurrent_safe",
      "source_code": ""
    },
    {
      "function": "CheckThread",
      "filename": "",
      "line": 0,
      "caller": "test_concurrent_safe",
      "source_code": ""
    },
    {
      "function": "thread.start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1304,
      "caller": "test_concurrent_safe",
      "source_code": "    def start(self):\n        self.update(self.min)\n        return self\n\n"
    },
    {
      "function": "thread.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_concurrent_safe",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_concurrent_safe",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert all(threads)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_concurrent_safe(self):\n        \"\"\"\n        Concurrent calls to spawn should have consistent results.\n        \"\"\"\n        compiler = _msvccompiler.MSVCCompiler()\n        compiler._paths = \"expected\"\n        inner_cmd = 'import os; assert os.environ[\"PATH\"] == \"expected\"'\n        command = [sys.executable, '-c', inner_cmd]\n\n        threads = [\n            CheckThread(target=compiler.spawn, args=[command]) for n in range(100)\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n        assert all(threads)"
}