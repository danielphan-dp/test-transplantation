{
  "test_name": "test_config_app",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_worker_serve.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "mock_app.update_config.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "worker_serve",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line_number": 24
    },
    {
      "name": "args",
      "source_code": "        def args(self):\n            return ParamSpecArgs(self)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line_number": 1711
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_config_app",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "mock_app.update_config.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_app",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_config_app",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "worker_serve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/serve.py",
      "line": 24,
      "caller": "test_config_app",
      "source_code": "def worker_serve(\n    host,\n    port,\n    app_name: str,\n    monitor_publisher: Optional[Connection],\n    app_loader: AppLoader,\n    worker_state: Optional[Dict[str, Any]] = None,\n    server_info: Optional[Dict[str, List[ApplicationServerInfo]]] = None,\n    ssl: Optional[\n        Union[SSLContext, Dict[str, Union[str, os.PathLike]]]\n    ] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n    config=None,\n    passthru: Optional[Dict[str, Any]] = None,\n"
    },
    {
      "function": "args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/typing_extensions.py",
      "line": 1711,
      "caller": "test_config_app",
      "source_code": "        @property\n        def args(self):\n            return ParamSpecArgs(self)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('sanic.worker.serve._serve_http_1')"
  ],
  "success": true,
  "test_source_code": "def test_config_app(mock_app: Mock):\n    with patch(\"sanic.worker.serve._serve_http_1\"):\n        worker_serve(**args(mock_app, config={\"FOO\": \"BAR\"}))\n    mock_app.update_config.assert_called_once_with({\"FOO\": \"BAR\"})"
}