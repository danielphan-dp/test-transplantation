{
  "test_name": "test_config_set_methods",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_config.py",
  "static_methods": [
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "post_set.assert_has_calls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "post_set.assert_has_calls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "post_set.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "app.config.update_config",
      "source_code": "    def update_config(self, config: Union[bytes, str, dict, Any]) -> None:\n        \"\"\"Update the application configuration.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 1961
    },
    {
      "name": "post_set.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_config_set_methods",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_config_set_methods",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_config_set_methods",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_config_set_methods",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "post_set.assert_has_calls",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_config_set_methods",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "post_set.assert_has_calls",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "post_set.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_config_set_methods",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "app.config.update_config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 1961,
      "caller": "test_config_set_methods",
      "source_code": "    def update_config(self, config: Union[bytes, str, dict, Any]) -> None:\n        \"\"\"Update the application configuration.\n\n        This method is used to update the application configuration. It can\n        accept a configuration object, a dictionary, or a path to a file that\n        contains a configuration object or dictionary.\n\n        See [Configuration](/en/guide/deployment/configuration) for details.\n\n        Args:\n            config (Union[bytes, str, dict, Any]): The configuration object,\n                dictionary, or path to a configuration file.\n        \"\"\"\n\n        self.config.update_config(config)\n\n"
    },
    {
      "function": "post_set.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_config_set_methods",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_config_set_methods(app: Sanic, monkeypatch: MonkeyPatch):\n    post_set = Mock()\n    monkeypatch.setattr(Config, \"_post_set\", post_set)\n\n    app.config.FOO = 1\n    post_set.assert_called_once_with(\"FOO\", 1)\n    post_set.reset_mock()\n\n    app.config[\"FOO\"] = 2\n    post_set.assert_called_once_with(\"FOO\", 2)\n    post_set.reset_mock()\n\n    app.config.update({\"FOO\": 3})\n    post_set.assert_called_once_with(\"FOO\", 3)\n    post_set.reset_mock()\n\n    app.config.update([(\"FOO\", 4)])\n    post_set.assert_called_once_with(\"FOO\", 4)\n    post_set.reset_mock()\n\n    app.config.update(FOO=5)\n    post_set.assert_called_once_with(\"FOO\", 5)\n    post_set.reset_mock()\n\n    app.config.update({\"FOO\": 6}, {\"BAR\": 7})\n    post_set.assert_has_calls(\n        calls=[\n            call(\"FOO\", 6),\n            call(\"BAR\", 7),\n        ]\n    )\n    post_set.reset_mock()\n\n    app.config.update({\"FOO\": 8}, BAR=9)\n    post_set.assert_has_calls(\n        calls=[\n            call(\"FOO\", 8),\n            call(\"BAR\", 9),\n        ],\n        any_order=True,\n    )\n    post_set.reset_mock()\n\n    app.config.update_config({\"FOO\": 10})\n    post_set.assert_called_once_with(\"FOO\", 10)"
}