{
  "test_name": "test_copy_tree_verbosity",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
  "static_methods": [
    {
      "name": "mkpath",
      "source_code": "def mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 48
    },
    {
      "name": "copy_tree",
      "source_code": "    def copy_tree(\n        self,\n        infile: StrPath,\n        outfile: str,\n        # override: Using actual booleans\n        preserve_mode: bool = True,  # type: ignore[override]\n        preserve_times: bool = True,  # type: ignore[override]\n        preserve_symlinks: bool = False,  # type: ignore[override]\n        level: object = 1,\n    ) -> list[str]:\n        assert preserve_mode\n        assert preserve_times\n        assert not preserve_symlinks\n        exclude = self.get_exclusions()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/install_lib.py",
      "line_number": 94
    },
    {
      "name": "remove_tree",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 215
    },
    {
      "name": "mkpath",
      "source_code": "def mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 48
    },
    {
      "name": "jaraco.path.build",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line_number": 363
    },
    {
      "name": "copy_tree",
      "source_code": "    def copy_tree(\n        self,\n        infile: StrPath,\n        outfile: str,\n        # override: Using actual booleans\n        preserve_mode: bool = True,  # type: ignore[override]\n        preserve_times: bool = True,  # type: ignore[override]\n        preserve_symlinks: bool = False,  # type: ignore[override]\n        level: object = 1,\n    ) -> list[str]:\n        assert preserve_mode\n        assert preserve_times\n        assert not preserve_symlinks\n        exclude = self.get_exclusions()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/install_lib.py",
      "line_number": 94
    },
    {
      "name": "remove_tree",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 215
    },
    {
      "name": "remove_tree",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line_number": 215
    },
    {
      "name": "path.Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "mkpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 48,
      "caller": "test_copy_tree_verbosity",
      "source_code": "@functools.singledispatch\n@wrapper\ndef mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, log the directory created.\n    \"\"\"\n    if verbose and not name.is_dir():\n        log.info(\"creating %s\", name)\n\n    try:\n        dry_run or name.mkdir(mode=mode, parents=True, exist_ok=True)\n    except OSError as exc:\n        raise DistutilsFileError(f\"could not create '{name}': {exc.args[-1]}\")\n\n\n"
    },
    {
      "function": "copy_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/install_lib.py",
      "line": 94,
      "caller": "test_copy_tree_verbosity",
      "source_code": "    def copy_tree(\n        self,\n        infile: StrPath,\n        outfile: str,\n        # override: Using actual booleans\n        preserve_mode: bool = True,  # type: ignore[override]\n        preserve_times: bool = True,  # type: ignore[override]\n        preserve_symlinks: bool = False,  # type: ignore[override]\n        level: object = 1,\n"
    },
    {
      "function": "remove_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 215,
      "caller": "test_copy_tree_verbosity",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    \"\"\"\n    if verbose >= 1:\n        log.info(\"removing '%s' (and everything under it)\", directory)\n    if dry_run:\n        return\n    cmdtuples = []\n    _build_cmdtuple(directory, cmdtuples)\n    for cmd in cmdtuples:\n        try:\n            cmd[0](cmd[1])\n            # Clear the cache\n            SkipRepeatAbsolutePaths.clear()\n        except OSError as exc:\n            log.warning(\"error removing %s: %s\", directory, exc)\n\n\n"
    },
    {
      "function": "mkpath",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 48,
      "caller": "test_copy_tree_verbosity",
      "source_code": "@functools.singledispatch\n@wrapper\ndef mkpath(name: pathlib.Path, mode=0o777, verbose=True, dry_run=False) -> None:\n    \"\"\"Create a directory and any missing ancestor directories.\n\n    If the directory already exists (or if 'name' is the empty string, which\n    means the current directory, which of course exists), then do nothing.\n    Raise DistutilsFileError if unable to create some directory along the way\n    (eg. some sub-path exists, but is a file rather than a directory).\n    If 'verbose' is true, log the directory created.\n    \"\"\"\n    if verbose and not name.is_dir():\n        log.info(\"creating %s\", name)\n\n    try:\n        dry_run or name.mkdir(mode=mode, parents=True, exist_ok=True)\n    except OSError as exc:\n        raise DistutilsFileError(f\"could not create '{name}': {exc.args[-1]}\")\n\n\n"
    },
    {
      "function": "jaraco.path.build",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/wheel.py",
      "line": 363,
      "caller": "test_copy_tree_verbosity",
      "source_code": "    def build(self, paths, tags=None, wheel_version=None):\n        \"\"\"\n        Build a wheel from files in specified paths, and use any specified tags\n        when determining the name of the wheel.\n        \"\"\"\n        if tags is None:\n            tags = {}\n\n        libkey = list(filter(lambda o: o in paths, ('purelib', 'platlib')))[0]\n        if libkey == 'platlib':\n            is_pure = 'false'\n            default_pyver = [IMPVER]\n            default_abi = [ABI]\n            default_arch = [ARCH]\n        else:\n            is_pure = 'true'\n            default_pyver = [PYVER]\n            default_abi = ['none']\n            default_arch = ['any']\n\n        self.pyver = tags.get('pyver', default_pyver)\n        self.abi = tags.get('abi', default_abi)\n        self.arch = tags.get('arch', default_arch)\n\n        libdir = paths[libkey]\n\n        name_ver = '%s-%s' % (self.name, self.version)\n        data_dir = '%s.data' % name_ver\n        info_dir = '%s.dist-info' % name_ver\n\n        archive_paths = []\n\n        # First, stuff which is not in site-packages\n        for key in ('data', 'headers', 'scripts'):\n            if key not in paths:\n                continue\n            path = paths[key]\n            if os.path.isdir(path):\n                for root, dirs, files in os.walk(path):\n                    for fn in files:\n                        p = fsdecode(os.path.join(root, fn))\n                        rp = os.path.relpath(p, path)\n                        ap = to_posix(os.path.join(data_dir, key, rp))\n                        archive_paths.append((ap, p))\n                        if key == 'scripts' and not p.endswith('.exe'):\n                            with open(p, 'rb') as f:\n                                data = f.read()\n                            data = self.process_shebang(data)\n                            with open(p, 'wb') as f:\n                                f.write(data)\n\n        # Now, stuff which is in site-packages, other than the\n        # distinfo stuff.\n        path = libdir\n        distinfo = None\n        for root, dirs, files in os.walk(path):\n            if root == path:\n                # At the top level only, save distinfo for later\n                # and skip it for now\n                for i, dn in enumerate(dirs):\n                    dn = fsdecode(dn)\n                    if dn.endswith('.dist-info'):\n                        distinfo = os.path.join(root, dn)\n                        del dirs[i]\n                        break\n                assert distinfo, '.dist-info directory expected, not found'\n\n            for fn in files:\n                # comment out next suite to leave .pyc files in\n                if fsdecode(fn).endswith(('.pyc', '.pyo')):\n                    continue\n                p = os.path.join(root, fn)\n                rp = to_posix(os.path.relpath(p, path))\n                archive_paths.append((rp, p))\n\n        # Now distinfo. Assumed to be flat, i.e. os.listdir is enough.\n        files = os.listdir(distinfo)\n        for fn in files:\n            if fn not in ('RECORD', 'INSTALLER', 'SHARED', 'WHEEL'):\n                p = fsdecode(os.path.join(distinfo, fn))\n                ap = to_posix(os.path.join(info_dir, fn))\n                archive_paths.append((ap, p))\n\n        wheel_metadata = [\n            'Wheel-Version: %d.%d' % (wheel_version or self.wheel_version),\n            'Generator: distlib %s' % __version__,\n            'Root-Is-Purelib: %s' % is_pure,\n        ]\n        for pyver, abi, arch in self.tags:\n            wheel_metadata.append('Tag: %s-%s-%s' % (pyver, abi, arch))\n        p = os.path.join(distinfo, 'WHEEL')\n        with open(p, 'w') as f:\n            f.write('\\n'.join(wheel_metadata))\n        ap = to_posix(os.path.join(info_dir, 'WHEEL'))\n        archive_paths.append((ap, p))\n\n        # sort the entries by archive path. Not needed by any spec, but it\n        # keeps the archive listing and RECORD tidier than they would otherwise\n        # be. Use the number of path segments to keep directory entries together,\n        # and keep the dist-info stuff at the end.\n        def sorter(t):\n            ap = t[0]\n            n = ap.count('/')\n            if '.dist-info' in ap:\n                n += 10000\n            return (n, ap)\n        archive_paths = sorted(archive_paths, key=sorter)\n\n        # Now, at last, RECORD.\n        # Paths in here are archive paths - nothing else makes sense.\n        self.write_records((distinfo, info_dir), libdir, archive_paths)\n        # Now, ready to build the zip file\n        pathname = os.path.join(self.dirname, self.filename)\n        self.build_zip(pathname, archive_paths)\n        return pathname\n\n"
    },
    {
      "function": "copy_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/install_lib.py",
      "line": 94,
      "caller": "test_copy_tree_verbosity",
      "source_code": "    def copy_tree(\n        self,\n        infile: StrPath,\n        outfile: str,\n        # override: Using actual booleans\n        preserve_mode: bool = True,  # type: ignore[override]\n        preserve_times: bool = True,  # type: ignore[override]\n        preserve_symlinks: bool = False,  # type: ignore[override]\n        level: object = 1,\n"
    },
    {
      "function": "remove_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 215,
      "caller": "test_copy_tree_verbosity",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    \"\"\"\n    if verbose >= 1:\n        log.info(\"removing '%s' (and everything under it)\", directory)\n    if dry_run:\n        return\n    cmdtuples = []\n    _build_cmdtuple(directory, cmdtuples)\n    for cmd in cmdtuples:\n        try:\n            cmd[0](cmd[1])\n            # Clear the cache\n            SkipRepeatAbsolutePaths.clear()\n        except OSError as exc:\n            log.warning(\"error removing %s: %s\", directory, exc)\n\n\n"
    },
    {
      "function": "remove_tree",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/dir_util.py",
      "line": 215,
      "caller": "test_copy_tree_verbosity",
      "source_code": "def remove_tree(directory, verbose=True, dry_run=False):\n    \"\"\"Recursively remove an entire directory tree.\n\n    Any errors are ignored (apart from being reported to stdout if 'verbose'\n    is true).\n    \"\"\"\n    if verbose >= 1:\n        log.info(\"removing '%s' (and everything under it)\", directory)\n    if dry_run:\n        return\n    cmdtuples = []\n    _build_cmdtuple(directory, cmdtuples)\n    for cmd in cmdtuples:\n        try:\n            cmd[0](cmd[1])\n            # Clear the cache\n            SkipRepeatAbsolutePaths.clear()\n        except OSError as exc:\n            log.warning(\"error removing %s: %s\", directory, exc)\n\n\n"
    },
    {
      "function": "path.Path",
      "filename": "",
      "line": 0,
      "caller": "test_copy_tree_verbosity",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert caplog.messages == []",
    "assert caplog.messages == wanted"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_copy_tree_verbosity(self, caplog):\n        mkpath(self.target, verbose=False)\n\n        copy_tree(self.target, self.target2, verbose=False)\n        assert caplog.messages == []\n\n        remove_tree(self.root_target, verbose=False)\n\n        mkpath(self.target, verbose=False)\n        a_file = path.Path(self.target) / 'ok.txt'\n        jaraco.path.build({'ok.txt': 'some content'}, self.target)\n\n        wanted = [f'copying {a_file} -> {self.target2}']\n        copy_tree(self.target, self.target2, verbose=True)\n        assert caplog.messages == wanted\n\n        remove_tree(self.root_target, verbose=False)\n        remove_tree(self.target2, verbose=False)"
}