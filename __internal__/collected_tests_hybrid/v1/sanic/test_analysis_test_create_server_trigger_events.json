{
  "test_name": "test_create_server_trigger_events",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_events.py",
  "static_methods": [
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "KeyboardInterrupt",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "app.listener",
      "source_code": "    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n    ) -> ListenerType[Sanic]: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line_number": 36
    },
    {
      "name": "closing",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sock.bind",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.create_server",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line_number": 147
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "server.startup",
      "source_code": "    def startup(self):\n        \"\"\"Trigger \"startup\" operations on the app\"\"\"\n        return self.app._startup()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line_number": 34
    },
    {
      "name": "server.after_start",
      "source_code": "def after_start(app, loop):\n    log.info(\"OH OH OH OH OHHHHHHHH\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line_number": 108
    },
    {
      "name": "loop.run_forever",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "server.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "server.before_stop",
      "source_code": "def before_stop(app, loop):\n    log.info(\"SERVER STOPPING\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line_number": 113
    },
    {
      "name": "connection.close_if_idle",
      "source_code": "    def close_if_idle(self):\n        # Called by Sanic Server when shutting down\n        # If we've upgraded to websocket, shut it down\n        if self.websocket is not None:\n            if self.websocket.ws_proto.state in (CLOSING, CLOSED):\n                return True\n            elif self.websocket.loop is not None:\n                self.websocket.loop.create_task(self.websocket.close(1001))\n            else:\n                self.websocket.end_connection(1001)\n        else:\n            return super().close_if_idle()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/protocols/websocket_protocol.py",
      "line_number": 90
    },
    {
      "name": "server.after_stop",
      "source_code": "def after_stop(app, loop):\n    log.info(\"TRIED EVERYTHING\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line_number": 118
    }
  ],
  "dynamic_methods": [
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "KeyboardInterrupt",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "app.listener",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/listeners.py",
      "line": 36,
      "caller": "test_create_server_trigger_events",
      "source_code": "    @overload\n    def listener(\n        self,\n        listener_or_event: ListenerType[Sanic],\n        event_or_none: str,\n        apply: bool = ...,\n        *,\n        priority: int = 0,\n"
    },
    {
      "function": "closing",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "sock.bind",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "app.create_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line": 147,
      "caller": "test_create_server_trigger_events",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.\n\n        Returns:\n            Worker: The Worker instance\n        \"\"\"\n        server_number = next(self._server_count)\n        return self.manage(\n            f\"{WorkerProcess.SERVER_LABEL}-{server_number}\",\n            self._serve,\n            self._server_settings,\n            transient=True,\n            restartable=True,\n            ident=f\"{WorkerProcess.SERVER_IDENTIFIER}{server_number:2}\",\n        )\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "server.startup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/async_server.py",
      "line": 34,
      "caller": "test_create_server_trigger_events",
      "source_code": "    def startup(self):\n        \"\"\"Trigger \"startup\" operations on the app\"\"\"\n        return self.app._startup()\n\n"
    },
    {
      "function": "server.after_start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line": 108,
      "caller": "test_create_server_trigger_events",
      "source_code": "@app.after_server_start\ndef after_start(app, loop):\n    log.info(\"OH OH OH OH OHHHHHHHH\")\n\n\n"
    },
    {
      "function": "loop.run_forever",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "server.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_create_server_trigger_events",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_create_server_trigger_events",
      "source_code": ""
    },
    {
      "function": "loop.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_create_server_trigger_events",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "server.before_stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line": 113,
      "caller": "test_create_server_trigger_events",
      "source_code": "@app.before_server_stop\ndef before_stop(app, loop):\n    log.info(\"SERVER STOPPING\")\n\n\n"
    },
    {
      "function": "connection.close_if_idle",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/protocols/websocket_protocol.py",
      "line": 90,
      "caller": "test_create_server_trigger_events",
      "source_code": "    def close_if_idle(self):\n        # Called by Sanic Server when shutting down\n        # If we've upgraded to websocket, shut it down\n        if self.websocket is not None:\n            if self.websocket.ws_proto.state in (CLOSING, CLOSED):\n                return True\n            elif self.websocket.loop is not None:\n                self.websocket.loop.create_task(self.websocket.close(1001))\n            else:\n                self.websocket.end_connection(1001)\n        else:\n            return super().close_if_idle()\n\n"
    },
    {
      "function": "server.after_stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/examples/try_everything.py",
      "line": 118,
      "caller": "test_create_server_trigger_events",
      "source_code": "@app.after_server_stop\ndef after_stop(app, loop):\n    log.info(\"TRIED EVERYTHING\")\n\n\n"
    }
  ],
  "assertions": [
    "assert flag1 and flag2 and flag3"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_create_server_trigger_events(app):\n    \"\"\"Test if create_server can trigger server events\"\"\"\n\n    def stop_on_alarm(signum, frame):\n        raise KeyboardInterrupt(\"...\")\n\n    flag1 = False\n    flag2 = False\n    flag3 = False\n\n    async def stop(app, loop):\n        nonlocal flag1\n        flag1 = True\n\n    async def before_stop(app, loop):\n        nonlocal flag2\n        flag2 = True\n\n    async def after_stop(app, loop):\n        nonlocal flag3\n        flag3 = True\n\n    app.listener(\"after_server_start\")(stop)\n    app.listener(\"before_server_stop\")(before_stop)\n    app.listener(\"after_server_stop\")(after_stop)\n\n    loop = asyncio.get_event_loop()\n\n    # Use random port for tests\n\n    signal.signal(signal.SIGALRM, stop_on_alarm)\n    signal.alarm(1)\n    with closing(socket()) as sock:\n        sock.bind((\"127.0.0.1\", 0))\n\n        serv_coro = app.create_server(\n            return_asyncio_server=True, sock=sock, debug=True\n        )\n        serv_task = asyncio.ensure_future(serv_coro, loop=loop)\n        server = loop.run_until_complete(serv_task)\n        loop.run_until_complete(server.startup())\n        loop.run_until_complete(server.after_start())\n        try:\n            loop.run_forever()\n        except KeyboardInterrupt:\n            loop.stop()\n        finally:\n            # Run the on_stop function if provided\n            loop.run_until_complete(server.before_stop())\n\n            # Wait for server to close\n            close_task = server.close()\n            loop.run_until_complete(close_task)\n\n            # Complete all tasks on the loop\n            for connection in server.connections:\n                connection.close_if_idle()\n            loop.run_until_complete(server.after_stop())\n        assert flag1 and flag2 and flag3"
}