{
  "test_name": "test_dist_fetch_build_egg",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
  "static_methods": [
    {
      "name": "tmpdir.join.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tmpdir.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "dist_dir.join.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sdist_with_index",
      "source_code": "    def sdist_with_index(distname, version):\n        dist_dir = index.mkdir(distname)\n        dist_sdist = '%s-%s.tar.gz' % (distname, version)\n        make_nspkg_sdist(str(dist_dir.join(dist_sdist)), distname, version)\n        with dist_dir.join('index.html').open('w') as fp:\n            fp.write(\n                DALS(\n                    \"\"\"\n                <!DOCTYPE html><html><body>\n                <a href=\"{dist_sdist}\" rel=\"internal\">{dist_sdist}</a><br/>\n                </body></html>\n                \"\"\"\n                ).format(dist_sdist=dist_sdist)\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
      "line_number": 25
    },
    {
      "name": "sdist_with_index",
      "source_code": "    def sdist_with_index(distname, version):\n        dist_dir = index.mkdir(distname)\n        dist_sdist = '%s-%s.tar.gz' % (distname, version)\n        make_nspkg_sdist(str(dist_dir.join(dist_sdist)), distname, version)\n        with dist_dir.join('index.html').open('w') as fp:\n            fp.write(\n                DALS(\n                    \"\"\"\n                <!DOCTYPE html><html><body>\n                <a href=\"{dist_sdist}\" rel=\"internal\">{dist_sdist}</a><br/>\n                </body></html>\n                \"\"\"\n                ).format(dist_sdist=dist_sdist)\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
      "line_number": 25
    },
    {
      "name": "split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "index.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "make_nspkg_sdist",
      "source_code": "def make_nspkg_sdist(dist_path, distname, version):\n    \"\"\"\n    Make an sdist tarball with distname and version which also contains one\n    package with the same name as distname.  The top-level package is\n    designated a namespace package).\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1118
    },
    {
      "name": "tmpdir.join.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "fp.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "tmpdir.as_cwd",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dist.parse_config_files",
      "source_code": "    def parse_config_files(\n        self,\n        filenames: Iterable[StrPath] | None = None,\n        ignore_option_errors: bool = False,\n    ) -> None:\n        \"\"\"Parses configuration files from various levels\n        and loads configuration.\n        \"\"\"\n        inifiles, tomlfiles = self._get_project_config_files(filenames)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/dist.py",
      "line_number": 632
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist_dir.join.open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "fp.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "DALS.format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dist.fetch_build_egg",
      "source_code": "def fetch_build_egg(dist, req):\n    \"\"\"Fetch an egg needed for building.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/installer.py",
      "line_number": 29
    },
    {
      "name": "dist_dir.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "DALS.format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tmpdir.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "dist_dir.join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    }
  ],
  "dynamic_methods": [
    {
      "function": "tmpdir.join.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "tmpdir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "dist_dir.join.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "sdist_with_index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
      "line": 25,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def sdist_with_index(distname, version):\n        dist_dir = index.mkdir(distname)\n        dist_sdist = '%s-%s.tar.gz' % (distname, version)\n        make_nspkg_sdist(str(dist_dir.join(dist_sdist)), distname, version)\n        with dist_dir.join('index.html').open('w') as fp:\n            fp.write(\n                DALS(\n                    \"\"\"\n                <!DOCTYPE html><html><body>\n                <a href=\"{dist_sdist}\" rel=\"internal\">{dist_sdist}</a><br/>\n                </body></html>\n                \"\"\"\n                ).format(dist_sdist=dist_sdist)\n            )\n\n"
    },
    {
      "function": "sdist_with_index",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_dist.py",
      "line": 25,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def sdist_with_index(distname, version):\n        dist_dir = index.mkdir(distname)\n        dist_sdist = '%s-%s.tar.gz' % (distname, version)\n        make_nspkg_sdist(str(dist_dir.join(dist_sdist)), distname, version)\n        with dist_dir.join('index.html').open('w') as fp:\n            fp.write(\n                DALS(\n                    \"\"\"\n                <!DOCTYPE html><html><body>\n                <a href=\"{dist_sdist}\" rel=\"internal\">{dist_sdist}</a><br/>\n                </body></html>\n                \"\"\"\n                ).format(dist_sdist=dist_sdist)\n            )\n\n"
    },
    {
      "function": "split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "index.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "make_nspkg_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1118,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "def make_nspkg_sdist(dist_path, distname, version):\n    \"\"\"\n    Make an sdist tarball with distname and version which also contains one\n    package with the same name as distname.  The top-level package is\n    designated a namespace package).\n    \"\"\"\n\n    parts = distname.split('.')\n    nspackage = parts[0]\n\n    packages = ['.'.join(parts[:idx]) for idx in range(1, len(parts) + 1)]\n\n    setup_py = DALS(\n        \"\"\"\\\n        import setuptools\n        setuptools.setup(\n            name=%r,\n            version=%r,\n            packages=%r,\n            namespace_packages=[%r]\n        )\n    \"\"\"\n        % (distname, version, packages, nspackage)\n    )\n\n    init = \"__import__('pkg_resources').declare_namespace(__name__)\"\n\n    files = [('setup.py', setup_py), (os.path.join(nspackage, '__init__.py'), init)]\n    for package in packages[1:]:\n        filename = os.path.join(*(package.split('.') + ['__init__.py']))\n        files.append((filename, ''))\n\n    make_sdist(dist_path, files)\n\n\n"
    },
    {
      "function": "tmpdir.join.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "fp.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "tmpdir.as_cwd",
      "filename": "",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "dist.parse_config_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/dist.py",
      "line": 632,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def parse_config_files(\n        self,\n        filenames: Iterable[StrPath] | None = None,\n        ignore_option_errors: bool = False,\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "dist_dir.join.open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "fp.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "DALS.format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "dist.fetch_build_egg",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/installer.py",
      "line": 29,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "def fetch_build_egg(dist, req):\n    \"\"\"Fetch an egg needed for building.\n\n    Use pip/wheel to fetch/build a wheel.\"\"\"\n    _DeprecatedInstaller.emit()\n    _warn_wheel_not_available(dist)\n    return _fetch_build_egg_no_warn(dist, req)\n\n\n"
    },
    {
      "function": "dist_dir.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "DALS.format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_dist_fetch_build_egg",
      "source_code": ""
    },
    {
      "function": "tmpdir.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "dist_dir.join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_dist_fetch_build_egg",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    }
  ],
  "assertions": [
    "assert [dist.key for dist in resolved_dists if dist] == reqs"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_dist_fetch_build_egg(tmpdir):\n    \"\"\"\n    Check multiple calls to `Distribution.fetch_build_egg` work as expected.\n    \"\"\"\n    index = tmpdir.mkdir('index')\n    index_url = urllib.parse.urljoin('file://', urllib.request.pathname2url(str(index)))\n\n    def sdist_with_index(distname, version):\n        dist_dir = index.mkdir(distname)\n        dist_sdist = '%s-%s.tar.gz' % (distname, version)\n        make_nspkg_sdist(str(dist_dir.join(dist_sdist)), distname, version)\n        with dist_dir.join('index.html').open('w') as fp:\n            fp.write(\n                DALS(\n                    \"\"\"\n                <!DOCTYPE html><html><body>\n                <a href=\"{dist_sdist}\" rel=\"internal\">{dist_sdist}</a><br/>\n                </body></html>\n                \"\"\"\n                ).format(dist_sdist=dist_sdist)\n            )\n\n    sdist_with_index('barbazquux', '3.2.0')\n    sdist_with_index('barbazquux-runner', '2.11.1')\n    with tmpdir.join('setup.cfg').open('w') as fp:\n        fp.write(\n            DALS(\n                \"\"\"\n            [easy_install]\n            index_url = {index_url}\n            \"\"\"\n            ).format(index_url=index_url)\n        )\n    reqs = \"\"\"\n    barbazquux-runner\n    barbazquux\n    \"\"\".split()\n    with tmpdir.as_cwd():\n        dist = Distribution()\n        dist.parse_config_files()\n        resolved_dists = [dist.fetch_build_egg(r) for r in reqs]\n    assert [dist.key for dist in resolved_dists if dist] == reqs"
}