{
  "test_name": "test_editable_with_prefix",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
  "static_methods": [
    {
      "name": "_addsitedirs",
      "source_code": "def _addsitedirs(new_dirs):\n    \"\"\"To use this function, it is necessary to insert new_dir in front of sys.path.\n    The Python process will try to import a ``sitecustomize`` module on startup.\n    If we manipulate sys.path/PYTHONPATH, we can force it to run our code,\n    which invokes ``addsitedir`` and ensure ``.pth`` files are loaded.\n    \"\"\"\n    content = '\\n'.join(\n        (\"import site\",)\n        + tuple(f\"site.addsitedir({os.fspath(new_dir)!r})\" for new_dir in new_dirs)\n    )\n    (new_dirs[0] / \"sitecustomize.py\").write_text(content, encoding=\"utf-8\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
      "line_number": 1254
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sp.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Path.relative_to",
      "source_code": "    def relative_to(self, other, *extra):\n        return posixpath.relpath(str(self), str(other.joinpath(*extra)))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line_number": 479
    },
    {
      "name": "path.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "map",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_addsitedirs",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_editable_install.py",
      "line": 1254,
      "caller": "test_editable_with_prefix",
      "source_code": "def _addsitedirs(new_dirs):\n    \"\"\"To use this function, it is necessary to insert new_dir in front of sys.path.\n    The Python process will try to import a ``sitecustomize`` module on startup.\n    If we manipulate sys.path/PYTHONPATH, we can force it to run our code,\n    which invokes ``addsitedir`` and ensure ``.pth`` files are loaded.\n    \"\"\"\n    content = '\\n'.join(\n        (\"import site\",)\n        + tuple(f\"site.addsitedir({os.fspath(new_dir)!r})\" for new_dir in new_dirs)\n    )\n    (new_dirs[0] / \"sitecustomize.py\").write_text(content, encoding=\"utf-8\")\n\n\n"
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    },
    {
      "function": "sp.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_editable_with_prefix",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    },
    {
      "function": "Path.relative_to",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/zipp/__init__.py",
      "line": 479,
      "caller": "test_editable_with_prefix",
      "source_code": "    def relative_to(self, other, *extra):\n        return posixpath.relpath(str(self), str(other.joinpath(*extra)))\n\n"
    },
    {
      "function": "path.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    },
    {
      "function": "map",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_editable_with_prefix",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_editable_with_prefix(tmp_path, sample_project, editable_opts):\n    \"\"\"\n    Editable install to a prefix should be discoverable.\n    \"\"\"\n    prefix = tmp_path / 'prefix'\n\n    # figure out where pip will likely install the package\n    site_packages_all = [\n        prefix / Path(path).relative_to(sys.prefix)\n        for path in sys.path\n        if 'site-packages' in path and path.startswith(sys.prefix)\n    ]\n\n    for sp in site_packages_all:\n        sp.mkdir(parents=True)\n\n    # install workaround\n    _addsitedirs(site_packages_all)\n\n    env = dict(os.environ, PYTHONPATH=os.pathsep.join(map(str, site_packages_all)))\n    cmd = [\n        sys.executable,\n        '-m',\n        'pip',\n        'install',\n        '--editable',\n        str(sample_project),\n        '--prefix',\n        str(prefix),\n        '--no-build-isolation',\n        *editable_opts,\n    ]\n    subprocess.check_call(cmd, env=env)\n\n    # now run 'sample' with the prefix on the PYTHONPATH\n    bin = 'Scripts' if platform.system() == 'Windows' else 'bin'\n    exe = prefix / bin / 'sample'\n    subprocess.check_call([exe], env=env)"
}