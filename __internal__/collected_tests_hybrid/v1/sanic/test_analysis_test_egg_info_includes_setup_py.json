{
  "test_name": "test_egg_info_includes_setup_py",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._create_project",
      "source_code": "    def _create_project(self):\n        path.build({\n            'setup.py': self.setup_script,\n            'hello.py': DALS(\n                \"\"\"\n                def run():\n                    print('hello')\n                \"\"\"\n            ),\n        })",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line_number": 64
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "egg_info",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "egg_info_instance.finalize_options",
      "source_code": "    def finalize_options(self) -> None:\n        \"\"\"\n        Allow plugins to apply arbitrary operations to the\n        distribution. Each hook may optionally define a 'order'\n        to influence the order of execution. Smaller numbers\n        go first and the default is 0.\n        \"\"\"\n        group = 'setuptools.finalize_distribution_options'",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/dist.py",
      "line_number": 661
    },
    {
      "name": "egg_info_instance.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.read.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "f.read",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line_number": 89
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": ""
    },
    {
      "function": "self._create_project",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line": 64,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": "    def _create_project(self):\n        path.build({\n            'setup.py': self.setup_script,\n            'hello.py': DALS(\n                \"\"\"\n                def run():\n                    print('hello')\n                \"\"\"\n            ),\n        })\n\n"
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": ""
    },
    {
      "function": "egg_info",
      "filename": "",
      "line": 0,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": ""
    },
    {
      "function": "egg_info_instance.finalize_options",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/dist.py",
      "line": 661,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": "    def finalize_options(self) -> None:\n        \"\"\"\n        Allow plugins to apply arbitrary operations to the\n        distribution. Each hook may optionally define a 'order'\n        to influence the order of execution. Smaller numbers\n        go first and the default is 0.\n        \"\"\"\n        group = 'setuptools.finalize_distribution_options'\n\n        def by_order(hook):\n            return getattr(hook, 'order', 0)\n\n        defined = metadata.entry_points(group=group)\n        filtered = itertools.filterfalse(self._removed, defined)\n        loaded = map(lambda e: e.load(), filtered)\n        for ep in sorted(loaded, key=by_order):\n            ep(self)\n\n"
    },
    {
      "function": "egg_info_instance.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": ""
    },
    {
      "function": "f.read.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line": 89,
      "caller": "test_egg_info_includes_setup_py",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()\n\n        return data\n\n"
    }
  ],
  "assertions": [
    "assert 'setup.py' in egg_info_instance.filelist.files",
    "assert 'setup.py' in sources"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_egg_info_includes_setup_py(self, tmpdir_cwd):\n        self._create_project()\n        dist = Distribution({\"name\": \"foo\", \"version\": \"0.0.1\"})\n        dist.script_name = \"non_setup.py\"\n        egg_info_instance = egg_info(dist)\n        egg_info_instance.finalize_options()\n        egg_info_instance.run()\n\n        assert 'setup.py' in egg_info_instance.filelist.files\n\n        with open(egg_info_instance.egg_info + \"/SOURCES.txt\", encoding=\"utf-8\") as f:\n            sources = f.read().split('\\n')\n            assert 'setup.py' in sources"
}