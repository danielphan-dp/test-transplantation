{
  "test_name": "test_egg_info_save_version_info_setup_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "egg_info",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ei.initialize_options",
      "source_code": "    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = \"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/setup.py",
      "line_number": 20
    },
    {
      "name": "ei.save_version_info",
      "source_code": "    def save_version_info(self, filename) -> None:\n        \"\"\"\n        Materialize the value of date into the\n        build tag. Install build keys in a deterministic order\n        to avoid arbitrary reordering on subsequent builds.\n        \"\"\"\n        # follow the order these keys would have been added\n        # when PYTHONHASHSEED=0\n        egg_info = dict(tag_build=self.tags(), tag_date=0)\n        edit_config(filename, dict(egg_info=egg_info))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line_number": 208
    },
    {
      "name": "self._validate_content_order",
      "source_code": "    def _validate_content_order(content, expected):\n        \"\"\"\n        Assert that the strings in expected appear in content\n        in order.\n        \"\"\"\n        pattern = '.*'.join(expected)\n        flags = re.MULTILINE | re.DOTALL\n        assert re.search(pattern, content, flags)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line_number": 108
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.read",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line_number": 89
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": ""
    },
    {
      "function": "egg_info",
      "filename": "",
      "line": 0,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": ""
    },
    {
      "function": "ei.initialize_options",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/setup.py",
      "line": 20,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": "    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.pytest_args = \"\"\n\n"
    },
    {
      "function": "ei.save_version_info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line": 208,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": "    def save_version_info(self, filename) -> None:\n        \"\"\"\n        Materialize the value of date into the\n        build tag. Install build keys in a deterministic order\n        to avoid arbitrary reordering on subsequent builds.\n        \"\"\"\n        # follow the order these keys would have been added\n        # when PYTHONHASHSEED=0\n        egg_info = dict(tag_build=self.tags(), tag_date=0)\n        edit_config(filename, dict(egg_info=egg_info))\n\n"
    },
    {
      "function": "self._validate_content_order",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line": 108,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": "    @staticmethod\n    def _validate_content_order(content, expected):\n        \"\"\"\n        Assert that the strings in expected appear in content\n        in order.\n        \"\"\"\n        pattern = '.*'.join(expected)\n        flags = re.MULTILINE | re.DOTALL\n        assert re.search(pattern, content, flags)\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": ""
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line": 89,
      "caller": "test_egg_info_save_version_info_setup_empty",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()\n\n        return data\n\n"
    }
  ],
  "assertions": [
    "assert '[egg_info]' in content",
    "assert 'tag_build =' in content",
    "assert 'tag_date = 0' in content"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_egg_info_save_version_info_setup_empty(self, tmpdir_cwd, env):\n        \"\"\"\n        When the egg_info section is empty or not present, running\n        save_version_info should add the settings to the setup.cfg\n        in a deterministic order.\n        \"\"\"\n        setup_cfg = os.path.join(env.paths['home'], 'setup.cfg')\n        dist = Distribution()\n        ei = egg_info(dist)\n        ei.initialize_options()\n        ei.save_version_info(setup_cfg)\n\n        with open(setup_cfg, 'r', encoding=\"utf-8\") as f:\n            content = f.read()\n\n        assert '[egg_info]' in content\n        assert 'tag_build =' in content\n        assert 'tag_date = 0' in content\n\n        expected_order = (\n            'tag_build',\n            'tag_date',\n        )\n\n        self._validate_content_order(content, expected_order)"
}