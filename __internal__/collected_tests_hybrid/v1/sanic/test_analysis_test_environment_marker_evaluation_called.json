{
  "test_name": "test_environment_marker_evaluation_called",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/tests/test_resources.py",
  "static_methods": [
    {
      "name": "parse_requirements",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 3075
    },
    {
      "name": "parse_requirements",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 3075
    },
    {
      "name": "pkg_resources._ReqExtras",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "req_extras.markers_pass",
      "source_code": "    def markers_pass(self, req, extras=None):\n        \"\"\"\n        Evaluate markers for req against each extra that\n        demanded it.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 944
    },
    {
      "name": "parse_requirements",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 3075
    },
    {
      "name": "parse_requirements",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 3075
    },
    {
      "name": "pkg_resources._ReqExtras",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "req_extras.markers_pass",
      "source_code": "    def markers_pass(self, req, extras=None):\n        \"\"\"\n        Evaluate markers for req against each extra that\n        demanded it.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 944
    }
  ],
  "dynamic_methods": [
    {
      "function": "parse_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 3075,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    \"\"\"\n    # create a steppable iterator, so we can handle \\-continuations\n    lines = iter(yield_lines(strs))\n\n    for line in lines:\n        # Drop comments -- a hash without a space may be in a URL.\n        if ' #' in line:\n            line = line[:line.find(' #')]\n        # If there is a line continuation, drop it, and append the next line.\n        if line.endswith('\\\\'):\n            line = line[:-2].strip()\n            try:\n                line += next(lines)\n            except StopIteration:\n                return\n        yield Requirement(line)\n\n\n"
    },
    {
      "function": "parse_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 3075,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    \"\"\"\n    # create a steppable iterator, so we can handle \\-continuations\n    lines = iter(yield_lines(strs))\n\n    for line in lines:\n        # Drop comments -- a hash without a space may be in a URL.\n        if ' #' in line:\n            line = line[:line.find(' #')]\n        # If there is a line continuation, drop it, and append the next line.\n        if line.endswith('\\\\'):\n            line = line[:-2].strip()\n            try:\n                line += next(lines)\n            except StopIteration:\n                return\n        yield Requirement(line)\n\n\n"
    },
    {
      "function": "pkg_resources._ReqExtras",
      "filename": "",
      "line": 0,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": ""
    },
    {
      "function": "req_extras.markers_pass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 944,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "    def markers_pass(self, req, extras=None):\n        \"\"\"\n        Evaluate markers for req against each extra that\n        demanded it.\n\n        Return False if the req has a marker and fails\n        evaluation. Otherwise, return True.\n        \"\"\"\n        extra_evals = (\n            req.marker.evaluate({'extra': extra})\n            for extra in self.get(req, ()) + (extras or (None,))\n        )\n        return not req.marker or any(extra_evals)\n\n\n"
    },
    {
      "function": "parse_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 3075,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    \"\"\"\n    # create a steppable iterator, so we can handle \\-continuations\n    lines = iter(yield_lines(strs))\n\n    for line in lines:\n        # Drop comments -- a hash without a space may be in a URL.\n        if ' #' in line:\n            line = line[:line.find(' #')]\n        # If there is a line continuation, drop it, and append the next line.\n        if line.endswith('\\\\'):\n            line = line[:-2].strip()\n            try:\n                line += next(lines)\n            except StopIteration:\n                return\n        yield Requirement(line)\n\n\n"
    },
    {
      "function": "parse_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 3075,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    \"\"\"\n    # create a steppable iterator, so we can handle \\-continuations\n    lines = iter(yield_lines(strs))\n\n    for line in lines:\n        # Drop comments -- a hash without a space may be in a URL.\n        if ' #' in line:\n            line = line[:line.find(' #')]\n        # If there is a line continuation, drop it, and append the next line.\n        if line.endswith('\\\\'):\n            line = line[:-2].strip()\n            try:\n                line += next(lines)\n            except StopIteration:\n                return\n        yield Requirement(line)\n\n\n"
    },
    {
      "function": "pkg_resources._ReqExtras",
      "filename": "",
      "line": 0,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": ""
    },
    {
      "function": "req_extras.markers_pass",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 944,
      "caller": "test_environment_marker_evaluation_called",
      "source_code": "    def markers_pass(self, req, extras=None):\n        \"\"\"\n        Evaluate markers for req against each extra that\n        demanded it.\n\n        Return False if the req has a marker and fails\n        evaluation. Otherwise, return True.\n        \"\"\"\n        extra_evals = (\n            req.marker.evaluate({'extra': extra})\n            for extra in self.get(req, ()) + (extras or (None,))\n        )\n        return not req.marker or any(extra_evals)\n\n\n"
    }
  ],
  "assertions": [
    "assert req_extras.markers_pass(req)",
    "assert req_extras.markers_pass(req)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_environment_marker_evaluation_called(self):\n        \"\"\"\n        If one package foo requires bar without any extras,\n        markers should pass for bar without extras.\n        \"\"\"\n        (parent_req,) = parse_requirements(\"foo\")\n        (req,) = parse_requirements(\"bar;python_version>='2'\")\n        req_extras = pkg_resources._ReqExtras({req: parent_req.extras})\n        assert req_extras.markers_pass(req)\n\n        (parent_req,) = parse_requirements(\"foo[]\")\n        (req,) = parse_requirements(\"bar;python_version>='2'\")\n        req_extras = pkg_resources._ReqExtras({req: parent_req.extras})\n        assert req_extras.markers_pass(req)"
}