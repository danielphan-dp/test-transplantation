{
  "test_name": "test_environment_marker_evaluation_negative",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/tests/test_resources.py",
  "static_methods": [
    {
      "name": "pkg_resources.Environment",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WorkingSet",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ws.resolve",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line_number": 121
    },
    {
      "name": "parse_requirements",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 3075
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "pkg_resources.Environment",
      "filename": "",
      "line": 0,
      "caller": "test_environment_marker_evaluation_negative",
      "source_code": ""
    },
    {
      "function": "WorkingSet",
      "filename": "",
      "line": 0,
      "caller": "test_environment_marker_evaluation_negative",
      "source_code": ""
    },
    {
      "function": "ws.resolve",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/providers.py",
      "line": 121,
      "caller": "test_environment_marker_evaluation_negative",
      "source_code": "    def resolve(self, requirements, **kwargs):\n        \"\"\"Take a collection of constraints, spit out the resolution result.\n\n        This returns a representation of the final resolution state, with one\n        guarenteed attribute ``mapping`` that contains resolved candidates as\n        values. The keys are their respective identifiers.\n\n        :param requirements: A collection of constraints.\n        :param kwargs: Additional keyword arguments that subclasses may accept.\n\n        :raises: ``self.base_exception`` or its subclass.\n        \"\"\"\n        raise NotImplementedError\n"
    },
    {
      "function": "parse_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 3075,
      "caller": "test_environment_marker_evaluation_negative",
      "source_code": "def parse_requirements(strs):\n    \"\"\"Yield ``Requirement`` objects for each specification in `strs`\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    \"\"\"\n    # create a steppable iterator, so we can handle \\-continuations\n    lines = iter(yield_lines(strs))\n\n    for line in lines:\n        # Drop comments -- a hash without a space may be in a URL.\n        if ' #' in line:\n            line = line[:line.find(' #')]\n        # If there is a line continuation, drop it, and append the next line.\n        if line.endswith('\\\\'):\n            line = line[:-2].strip()\n            try:\n                line += next(lines)\n            except StopIteration:\n                return\n        yield Requirement(line)\n\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_environment_marker_evaluation_negative",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert list(res) == []"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_environment_marker_evaluation_negative(self):\n        \"\"\"Environment markers are evaluated at resolution time.\"\"\"\n        ad = pkg_resources.Environment([])\n        ws = WorkingSet([])\n        res = ws.resolve(parse_requirements(\"Foo;python_version<'2'\"), ad)\n        assert list(res) == []"
}