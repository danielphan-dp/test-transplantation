{
  "test_name": "test_equivalent_output",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
  "static_methods": [
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_get_pkginfo",
      "source_code": "def _get_pkginfo(dist: Distribution):\n    with io.StringIO() as fp:\n        dist.metadata.write_pkg_file(fp)\n        return fp.getvalue()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 476
    },
    {
      "name": "egg_info_dir.mkdir",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line_number": 123
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "write_requirements",
      "source_code": "def write_requirements(cmd, basename, filename):\n    dist = cmd.distribution\n    data = io.StringIO()\n    install_requires, extras_require = _prepare(\n        dist.install_requires or (), dist.extras_require or {}\n    )\n    _write_requirements(data, install_requires)\n    for extra in sorted(extras_require):\n        data.write('\\n[{extra}]\\n'.format(**vars()))\n        _write_requirements(data, extras_require[extra])\n    cmd.write_or_delete_file(\"requirements\", filename, data.getvalue())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/_requirestxt.py",
      "line_number": 115
    },
    {
      "name": "pkginfo_to_metadata",
      "source_code": "def pkginfo_to_metadata(egg_info_path: str, pkginfo_path: str) -> Message:\n    \"\"\"\n    Convert .egg-info directory with PKG-INFO to the Metadata 2.1 format\n    \"\"\"\n    with open(pkginfo_path, encoding=\"utf-8\") as headers:\n        pkg_info = Parser().parse(headers)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/metadata.py",
      "line_number": 143
    },
    {
      "name": "_normalize_metadata",
      "source_code": "def _normalize_metadata(msg: Message) -> str:\n    \"\"\"Allow equivalent metadata to be compared directly\"\"\"\n    # The main challenge regards the requirements and extras.\n    # Both setuptools and wheel already apply some level of normalization\n    # but they differ regarding which character is chosen, according to the\n    # following spec it should be \"-\":\n    # https://packaging.python.org/en/latest/specifications/name-normalization/",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 439
    },
    {
      "name": "message_from_string",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_normalize_metadata",
      "source_code": "def _normalize_metadata(msg: Message) -> str:\n    \"\"\"Allow equivalent metadata to be compared directly\"\"\"\n    # The main challenge regards the requirements and extras.\n    # Both setuptools and wheel already apply some level of normalization\n    # but they differ regarding which character is chosen, according to the\n    # following spec it should be \"-\":\n    # https://packaging.python.org/en/latest/specifications/name-normalization/",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 439
    },
    {
      "name": "_assert_roundtrip_message",
      "source_code": "def _assert_roundtrip_message(metadata: str) -> None:\n    \"\"\"Emulate the way wheel.bdist_wheel parses and regenerates the message,\n    then ensures the metadata generated by setuptools is compatible.\n    \"\"\"\n    with io.StringIO(metadata) as buffer:\n        msg = Parser().parse(buffer)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line_number": 414
    },
    {
      "name": "egg_info",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_equivalent_output",
      "source_code": ""
    },
    {
      "function": "_get_pkginfo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 476,
      "caller": "test_equivalent_output",
      "source_code": "def _get_pkginfo(dist: Distribution):\n    with io.StringIO() as fp:\n        dist.metadata.write_pkg_file(fp)\n        return fp.getvalue()\n\n\n"
    },
    {
      "function": "egg_info_dir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dir_util.py",
      "line": 123,
      "caller": "test_equivalent_output",
      "source_code": "            def mkdir(self, *args, **kwargs):\n                raise OSError(\"Failed to create directory\")\n\n"
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_equivalent_output",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "write_requirements",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/_requirestxt.py",
      "line": 115,
      "caller": "test_equivalent_output",
      "source_code": "def write_requirements(cmd, basename, filename):\n    dist = cmd.distribution\n    data = io.StringIO()\n    install_requires, extras_require = _prepare(\n        dist.install_requires or (), dist.extras_require or {}\n    )\n    _write_requirements(data, install_requires)\n    for extra in sorted(extras_require):\n        data.write('\\n[{extra}]\\n'.format(**vars()))\n        _write_requirements(data, extras_require[extra])\n    cmd.write_or_delete_file(\"requirements\", filename, data.getvalue())\n\n\n"
    },
    {
      "function": "pkginfo_to_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/wheel/metadata.py",
      "line": 143,
      "caller": "test_equivalent_output",
      "source_code": "def pkginfo_to_metadata(egg_info_path: str, pkginfo_path: str) -> Message:\n    \"\"\"\n    Convert .egg-info directory with PKG-INFO to the Metadata 2.1 format\n    \"\"\"\n    with open(pkginfo_path, encoding=\"utf-8\") as headers:\n        pkg_info = Parser().parse(headers)\n\n    pkg_info.replace_header(\"Metadata-Version\", \"2.1\")\n    # Those will be regenerated from `requires.txt`.\n    del pkg_info[\"Provides-Extra\"]\n    del pkg_info[\"Requires-Dist\"]\n    requires_path = os.path.join(egg_info_path, \"requires.txt\")\n    if os.path.exists(requires_path):\n        with open(requires_path, encoding=\"utf-8\") as requires_file:\n            requires = requires_file.read()\n\n        parsed_requirements = sorted(split_sections(requires), key=lambda x: x[0] or \"\")\n        for extra, reqs in parsed_requirements:\n            for key, value in generate_requirements({extra: reqs}):\n                if (key, value) not in pkg_info.items():\n                    pkg_info[key] = value\n\n    description = pkg_info[\"Description\"]\n    if description:\n        description_lines = pkg_info[\"Description\"].splitlines()\n        dedented_description = \"\\n\".join(\n            # if the first line of long_description is blank,\n            # the first line here will be indented.\n            (\n                description_lines[0].lstrip(),\n                textwrap.dedent(\"\\n\".join(description_lines[1:])),\n                \"\\n\",\n            )\n        )\n        pkg_info.set_payload(dedented_description)\n        del pkg_info[\"Description\"]\n\n    return pkg_info\n"
    },
    {
      "function": "_normalize_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 439,
      "caller": "test_equivalent_output",
      "source_code": "def _normalize_metadata(msg: Message) -> str:\n    \"\"\"Allow equivalent metadata to be compared directly\"\"\"\n    # The main challenge regards the requirements and extras.\n    # Both setuptools and wheel already apply some level of normalization\n    # but they differ regarding which character is chosen, according to the\n    # following spec it should be \"-\":\n    # https://packaging.python.org/en/latest/specifications/name-normalization/\n\n    # Related issues:\n    # https://github.com/pypa/packaging/issues/845\n    # https://github.com/pypa/packaging/issues/644#issuecomment-2429813968\n\n    extras = {x.replace(\"_\", \"-\"): x for x in msg.get_all(\"Provides-Extra\", [])}\n    reqs = [\n        _normalize_req(req, extras)\n        for req in _reqs.parse(msg.get_all(\"Requires-Dist\", []))\n    ]\n    del msg[\"Requires-Dist\"]\n    del msg[\"Provides-Extra\"]\n\n    # Ensure consistent ord\n    for req in sorted(reqs):\n        msg[\"Requires-Dist\"] = req\n    for extra in sorted(extras):\n        msg[\"Provides-Extra\"] = extra\n\n    return msg.as_string()\n\n\n"
    },
    {
      "function": "message_from_string",
      "filename": "",
      "line": 0,
      "caller": "test_equivalent_output",
      "source_code": ""
    },
    {
      "function": "_normalize_metadata",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 439,
      "caller": "test_equivalent_output",
      "source_code": "def _normalize_metadata(msg: Message) -> str:\n    \"\"\"Allow equivalent metadata to be compared directly\"\"\"\n    # The main challenge regards the requirements and extras.\n    # Both setuptools and wheel already apply some level of normalization\n    # but they differ regarding which character is chosen, according to the\n    # following spec it should be \"-\":\n    # https://packaging.python.org/en/latest/specifications/name-normalization/\n\n    # Related issues:\n    # https://github.com/pypa/packaging/issues/845\n    # https://github.com/pypa/packaging/issues/644#issuecomment-2429813968\n\n    extras = {x.replace(\"_\", \"-\"): x for x in msg.get_all(\"Provides-Extra\", [])}\n    reqs = [\n        _normalize_req(req, extras)\n        for req in _reqs.parse(msg.get_all(\"Requires-Dist\", []))\n    ]\n    del msg[\"Requires-Dist\"]\n    del msg[\"Provides-Extra\"]\n\n    # Ensure consistent ord\n    for req in sorted(reqs):\n        msg[\"Requires-Dist\"] = req\n    for extra in sorted(extras):\n        msg[\"Provides-Extra\"] = extra\n\n    return msg.as_string()\n\n\n"
    },
    {
      "function": "_assert_roundtrip_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_core_metadata.py",
      "line": 414,
      "caller": "test_equivalent_output",
      "source_code": "def _assert_roundtrip_message(metadata: str) -> None:\n    \"\"\"Emulate the way wheel.bdist_wheel parses and regenerates the message,\n    then ensures the metadata generated by setuptools is compatible.\n    \"\"\"\n    with io.StringIO(metadata) as buffer:\n        msg = Parser().parse(buffer)\n\n    serialization_policy = EmailPolicy(\n        utf8=True,\n        mangle_from_=False,\n        max_line_length=0,\n    )\n    with io.BytesIO() as buffer:\n        out = io.TextIOWrapper(buffer, encoding=\"utf-8\")\n        Generator(out, policy=serialization_policy).flatten(msg)\n        out.flush()\n        regenerated = buffer.getvalue()\n\n    raw_metadata = bytes(metadata, \"utf-8\")\n    # Normalise newlines to avoid test errors on Windows:\n    raw_metadata = b\"\\n\".join(raw_metadata.splitlines())\n    regenerated = b\"\\n\".join(regenerated.splitlines())\n    assert regenerated == raw_metadata\n\n\n"
    },
    {
      "function": "egg_info",
      "filename": "",
      "line": 0,
      "caller": "test_equivalent_output",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert metadata_str == pkg_info_str"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_equivalent_output(self, tmp_path, dist):\n        \"\"\"Ensure output from setuptools is equivalent to the one from `pypa/wheel`\"\"\"\n        # Generate a METADATA file using pypa/wheel for comparison\n        wheel_metadata = importlib.import_module(\"wheel.metadata\")\n        pkginfo_to_metadata = getattr(wheel_metadata, \"pkginfo_to_metadata\", None)\n\n        if pkginfo_to_metadata is None:  # pragma: nocover\n            pytest.xfail(\n                \"wheel.metadata.pkginfo_to_metadata is undefined, \"\n                \"(this is likely to be caused by API changes in pypa/wheel\"\n            )\n\n        # Generate an simplified \"egg-info\" dir for pypa/wheel to convert\n        pkg_info = _get_pkginfo(dist)\n        egg_info_dir = tmp_path / \"pkg.egg-info\"\n        egg_info_dir.mkdir(parents=True)\n        (egg_info_dir / \"PKG-INFO\").write_text(pkg_info, encoding=\"utf-8\")\n        write_requirements(egg_info(dist), egg_info_dir, egg_info_dir / \"requires.txt\")\n\n        # Get pypa/wheel generated METADATA but normalize requirements formatting\n        metadata_msg = pkginfo_to_metadata(egg_info_dir, egg_info_dir / \"PKG-INFO\")\n        metadata_str = _normalize_metadata(metadata_msg)\n        pkg_info_msg = message_from_string(pkg_info)\n        pkg_info_str = _normalize_metadata(pkg_info_msg)\n\n        # Compare setuptools PKG-INFO x pypa/wheel METADATA\n        assert metadata_str == pkg_info_str\n\n        # Make sure it parses/serializes well in pypa/wheel\n        _assert_roundtrip_message(pkg_info)"
}