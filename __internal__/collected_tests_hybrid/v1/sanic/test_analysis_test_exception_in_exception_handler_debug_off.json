{
  "test_name": "test_exception_in_exception_handler_debug_off",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "exception_app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    }
  ],
  "dynamic_methods": [
    {
      "function": "exception_app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_exception_in_exception_handler_debug_off",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    }
  ],
  "assertions": [
    "assert response.status == 500",
    "assert response.body == b'An error occurred while handling an error'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_exception_in_exception_handler_debug_off(exception_app):\n    \"\"\"Test that an exception thrown in an error handler is handled\"\"\"\n    request, response = exception_app.test_client.get(\n        \"/error_in_error_handler_handler\", debug=False\n    )\n    assert response.status == 500\n    assert response.body == b\"An error occurred while handling an error\""
}