{
  "test_name": "test_exclude_pattern",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_filelist.py",
  "static_methods": [
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 241
    },
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 241
    },
    {
      "name": "file_list.exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 241
    }
  ],
  "dynamic_methods": [
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_exclude_pattern",
      "source_code": ""
    },
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_exclude_pattern",
      "source_code": ""
    },
    {
      "function": "file_list.exclude_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 241,
      "caller": "test_exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found\n\n\n"
    },
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_exclude_pattern",
      "source_code": ""
    },
    {
      "function": "file_list.exclude_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 241,
      "caller": "test_exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found\n\n\n"
    },
    {
      "function": "file_list.exclude_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 241,
      "caller": "test_exclude_pattern",
      "source_code": "    def exclude_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return True if files are found, False otherwise.\n        \"\"\"\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"exclude_pattern: applying regex r'{pattern_re.pattern}'\")\n        for i in range(len(self.files) - 1, -1, -1):\n            if pattern_re.search(self.files[i]):\n                self.debug_print(\" removing \" + self.files[i])\n                del self.files[i]\n                files_found = True\n        return files_found\n\n\n"
    }
  ],
  "assertions": [
    "assert not file_list.exclude_pattern('*.py')",
    "assert file_list.exclude_pattern('*.py')",
    "assert file_list.files == ['a.txt']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_exclude_pattern(self):\n        # return False if no match\n        file_list = FileList()\n        assert not file_list.exclude_pattern('*.py')\n\n        # return True if files match\n        file_list = FileList()\n        file_list.files = ['a.py', 'b.py']\n        assert file_list.exclude_pattern('*.py')\n\n        # test excludes\n        file_list = FileList()\n        file_list.files = ['a.py', 'a.txt']\n        file_list.exclude_pattern('*.py')\n        assert file_list.files == ['a.txt']"
}