{
  "test_name": "test_ext_fullpath",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    }
  ],
  "dynamic_methods": [
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_ext_fullpath",
      "source_code": ""
    },
    {
      "function": "self.build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_ext_fullpath",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    }
  ],
  "assertions": [
    "assert wanted == path",
    "assert wanted == path",
    "assert wanted == path",
    "assert wanted == path"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_ext_fullpath(self):\n        ext = sysconfig.get_config_var('EXT_SUFFIX')\n        # building lxml.etree inplace\n        # etree_c = os.path.join(self.tmp_dir, 'lxml.etree.c')\n        # etree_ext = Extension('lxml.etree', [etree_c])\n        # dist = Distribution({'name': 'lxml', 'ext_modules': [etree_ext]})\n        dist = Distribution()\n        cmd = self.build_ext(dist)\n        cmd.inplace = True\n        cmd.distribution.package_dir = {'': 'src'}\n        cmd.distribution.packages = ['lxml', 'lxml.html']\n        curdir = os.getcwd()\n        wanted = os.path.join(curdir, 'src', 'lxml', 'etree' + ext)\n        path = cmd.get_ext_fullpath('lxml.etree')\n        assert wanted == path\n\n        # building lxml.etree not inplace\n        cmd.inplace = False\n        cmd.build_lib = os.path.join(curdir, 'tmpdir')\n        wanted = os.path.join(curdir, 'tmpdir', 'lxml', 'etree' + ext)\n        path = cmd.get_ext_fullpath('lxml.etree')\n        assert wanted == path\n\n        # building twisted.runner.portmap not inplace\n        build_py = cmd.get_finalized_command('build_py')\n        build_py.package_dir = {}\n        cmd.distribution.packages = ['twisted', 'twisted.runner.portmap']\n        path = cmd.get_ext_fullpath('twisted.runner.portmap')\n        wanted = os.path.join(curdir, 'tmpdir', 'twisted', 'runner', 'portmap' + ext)\n        assert wanted == path\n\n        # building twisted.runner.portmap inplace\n        cmd.inplace = True\n        path = cmd.get_ext_fullpath('twisted.runner.portmap')\n        wanted = os.path.join(curdir, 'twisted', 'runner', 'portmap' + ext)\n        assert wanted == path"
}