{
  "test_name": "test_find_library_file",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
  "static_methods": [
    {
      "name": "UnixCCompiler",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "compiler.find_library_file.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "compiler.find_library_file.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "compiler.find_library_file.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "compiler.find_library_file.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "compiler.find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line_number": 383
    },
    {
      "name": "compiler.find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line_number": 383
    },
    {
      "name": "compiler.find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line_number": 383
    },
    {
      "name": "compiler.find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line_number": 383
    },
    {
      "name": "reversed",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "reversed",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "UnixCCompiler",
      "filename": "",
      "line": 0,
      "caller": "test_find_library_file",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_find_library_file",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_find_library_file",
      "source_code": ""
    },
    {
      "function": "compiler.find_library_file.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_find_library_file",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "compiler.find_library_file.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_find_library_file",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "compiler.find_library_file.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_find_library_file",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "compiler.find_library_file.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_find_library_file",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "compiler.find_library_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line": 383,
      "caller": "test_find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )\n\n        roots = map(self._library_root, dirs)\n\n        searched = itertools.starmap(os.path.join, itertools.product(roots, lib_names))\n\n        found = filter(os.path.exists, searched)\n\n        # Return None if it could not be found in any dir.\n        return next(found, None)\n"
    },
    {
      "function": "compiler.find_library_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line": 383,
      "caller": "test_find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )\n\n        roots = map(self._library_root, dirs)\n\n        searched = itertools.starmap(os.path.join, itertools.product(roots, lib_names))\n\n        found = filter(os.path.exists, searched)\n\n        # Return None if it could not be found in any dir.\n        return next(found, None)\n"
    },
    {
      "function": "compiler.find_library_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line": 383,
      "caller": "test_find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )\n\n        roots = map(self._library_root, dirs)\n\n        searched = itertools.starmap(os.path.join, itertools.product(roots, lib_names))\n\n        found = filter(os.path.exists, searched)\n\n        # Return None if it could not be found in any dir.\n        return next(found, None)\n"
    },
    {
      "function": "compiler.find_library_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/unixccompiler.py",
      "line": 383,
      "caller": "test_find_library_file",
      "source_code": "    def find_library_file(self, dirs, lib, debug=False):\n        \"\"\"\n        Second-guess the linker with not much hard\n        data to go on: GCC seems to prefer the shared library, so\n        assume that *all* Unix C compilers do,\n        ignoring even GCC's \"-static\" option.\n        \"\"\"\n        lib_names = (\n            self.library_filename(lib, lib_type=type)\n            for type in 'dylib xcode_stub shared static'.split()\n        )\n\n        roots = map(self._library_root, dirs)\n\n        searched = itertools.starmap(os.path.join, itertools.product(roots, lib_names))\n\n        found = filter(os.path.exists, searched)\n\n        # Return None if it could not be found in any dir.\n        return next(found, None)\n"
    },
    {
      "function": "reversed",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_find_library_file",
      "source_code": ""
    },
    {
      "function": "reversed",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_find_library_file",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert compiler.find_library_file(dirs, 'abc').replace('\\\\', '/') == f'/foo/bar/existing/{libname}'",
    "assert compiler.find_library_file(reversed(dirs), 'abc').replace('\\\\', '/') == f'/foo/bar/existing/{libname}'",
    "assert compiler.find_library_file(dirs, 'abc').replace('\\\\', '/') == '/foo/bar/existing/libabc.a'",
    "assert compiler.find_library_file(reversed(dirs), 'abc').replace('\\\\', '/') == '/foo/bar/existing/libabc.a'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_find_library_file(self, monkeypatch):\n        compiler = UnixCCompiler()\n        compiler._library_root = lambda dir: dir\n        monkeypatch.setattr(os.path, 'exists', lambda d: 'existing' in d)\n\n        libname = 'libabc.dylib' if sys.platform != 'cygwin' else 'cygabc.dll'\n        dirs = ('/foo/bar/missing', '/foo/bar/existing')\n        assert (\n            compiler.find_library_file(dirs, 'abc').replace('\\\\', '/')\n            == f'/foo/bar/existing/{libname}'\n        )\n        assert (\n            compiler.find_library_file(reversed(dirs), 'abc').replace('\\\\', '/')\n            == f'/foo/bar/existing/{libname}'\n        )\n\n        monkeypatch.setattr(\n            os.path,\n            'exists',\n            lambda d: 'existing' in d and '.a' in d and '.dll.a' not in d,\n        )\n        assert (\n            compiler.find_library_file(dirs, 'abc').replace('\\\\', '/')\n            == '/foo/bar/existing/libabc.a'\n        )\n        assert (\n            compiler.find_library_file(reversed(dirs), 'abc').replace('\\\\', '/')\n            == '/foo/bar/existing/libabc.a'\n        )"
}