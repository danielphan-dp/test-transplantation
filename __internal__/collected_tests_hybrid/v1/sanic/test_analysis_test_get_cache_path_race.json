{
  "test_name": "test_get_cache_path_race",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/tests/test_pkg_resources.py",
  "static_methods": [
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "pkg_resources.ResourceManager",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mgr.set_extraction_path",
      "source_code": "    def set_extraction_path(self, path):\n        \"\"\"Set the base path where resources will be extracted to, if needed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 1265
    },
    {
      "name": "patched_isdir.dirnames.append",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n    ) -> \"Text\":\n        \"\"\"Add text with an optional style.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 917
    },
    {
      "name": "unpatched_isdir",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mgr.get_cache_path",
      "source_code": "    def get_cache_path(self, archive_name, names=()):\n        \"\"\"Return absolute location in cache for `archive_name` and `names`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 1194
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "called_dirnames.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "called_dirnames.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "pkg_resources.ResourceManager",
      "filename": "",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "mgr.set_extraction_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 1265,
      "caller": "test_get_cache_path_race",
      "source_code": "    def set_extraction_path(self, path):\n        \"\"\"Set the base path where resources will be extracted to, if needed.\n\n        If you do not call this routine before any extractions take place, the\n        path defaults to the return value of ``get_default_cache()``.  (Which\n        is based on the ``PYTHON_EGG_CACHE`` environment variable, with various\n        platform-specific fallbacks.  See that routine's documentation for more\n        details.)\n\n        Resources are extracted to subdirectories of this path based upon\n        information given by the ``IResourceProvider``.  You may set this to a\n        temporary directory, but then you must call ``cleanup_resources()`` to\n        delete the extracted files when done.  There is no guarantee that\n        ``cleanup_resources()`` will be able to remove all extracted files.\n\n        (Note: you may not change the extraction path for a given resource\n        manager once resources have been extracted, unless you first call\n        ``cleanup_resources()``.)\n        \"\"\"\n        if self.cached_files:\n            raise ValueError(\n                \"Can't change extraction path, files already extracted\"\n            )\n\n        self.extraction_path = path\n\n"
    },
    {
      "function": "patched_isdir.dirnames.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 917,
      "caller": "test_get_cache_path_race",
      "source_code": "    def append(\n        self, text: Union[\"Text\", str], style: Optional[Union[str, \"Style\"]] = None\n"
    },
    {
      "function": "unpatched_isdir",
      "filename": "",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "mgr.get_cache_path",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 1194,
      "caller": "test_get_cache_path_race",
      "source_code": "    def get_cache_path(self, archive_name, names=()):\n        \"\"\"Return absolute location in cache for `archive_name` and `names`\n\n        The parent directory of the resulting path will be created if it does\n        not already exist.  `archive_name` should be the base filename of the\n        enclosing egg (which may not be the name of the enclosing zipfile!),\n        including its \".egg\" extension.  `names`, if provided, should be a\n        sequence of path name parts \"under\" the egg's extraction location.\n\n        This method should only be called by resource providers that need to\n        obtain an extraction location, and only for names they intend to\n        extract, as it tracks the generated names for possible cleanup later.\n        \"\"\"\n        extract_path = self.extraction_path or get_default_cache()\n        target_path = os.path.join(extract_path, archive_name + '-tmp', *names)\n        try:\n            _bypass_ensure_directory(target_path)\n        except Exception:\n            self.extraction_error()\n\n        self._warn_unsafe_extraction_path(extract_path)\n\n        self.cached_files[target_path] = 1\n        return target_path\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_cache_path_race",
      "source_code": ""
    },
    {
      "function": "called_dirnames.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_get_cache_path_race",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "called_dirnames.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_get_cache_path_race",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    }
  ],
  "assertions": [
    "assert len(called_dirnames) == 2",
    "assert called_dirnames[0].split(os.sep)[-2:] == ['foo', 'bar']",
    "assert called_dirnames[1].split(os.sep)[-1:] == ['foo']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_cache_path_race(self, tmpdir):\n        # Patch to os.path.isdir to create a race condition\n        def patched_isdir(dirname, unpatched_isdir=pkg_resources.isdir):\n            patched_isdir.dirnames.append(dirname)\n\n            was_dir = unpatched_isdir(dirname)\n            if not was_dir:\n                os.makedirs(dirname)\n            return was_dir\n\n        patched_isdir.dirnames = []\n\n        # Get a cache path with a \"race condition\"\n        mgr = pkg_resources.ResourceManager()\n        mgr.set_extraction_path(str(tmpdir))\n\n        archive_name = os.sep.join(('foo', 'bar', 'baz'))\n        with mock.patch.object(pkg_resources, 'isdir', new=patched_isdir):\n            mgr.get_cache_path(archive_name)\n\n        # Because this test relies on the implementation details of this\n        # function, these assertions are a sentinel to ensure that the\n        # test suite will not fail silently if the implementation changes.\n        called_dirnames = patched_isdir.dirnames\n        assert len(called_dirnames) == 2\n        assert called_dirnames[0].split(os.sep)[-2:] == ['foo', 'bar']\n        assert called_dirnames[1].split(os.sep)[-1:] == ['foo']"
}