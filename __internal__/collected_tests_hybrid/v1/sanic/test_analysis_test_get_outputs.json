{
  "test_name": "test_get_outputs",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
  "static_methods": [
    {
      "name": "missing_compiler_executable",
      "source_code": "def missing_compiler_executable(cmd_names: Sequence[str] = []):  # pragma: no cover\n    \"\"\"Check if the compiler components used to build the interpreter exist.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/__init__.py",
      "line_number": 14
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "self.write_file",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line_number": 391
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    },
    {
      "name": "fixup_build_ext",
      "source_code": "def fixup_build_ext(cmd):\n    \"\"\"Function needed to make build_ext tests pass.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 86
    },
    {
      "name": "so_file.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "so_file.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    }
  ],
  "dynamic_methods": [
    {
      "function": "missing_compiler_executable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/__init__.py",
      "line": 14,
      "caller": "test_get_outputs",
      "source_code": "def missing_compiler_executable(cmd_names: Sequence[str] = []):  # pragma: no cover\n    \"\"\"Check if the compiler components used to build the interpreter exist.\n\n    Check for the existence of the compiler executables whose names are listed\n    in 'cmd_names' or all the compiler executables when 'cmd_names' is empty\n    and return the first missing executable or None when none is found\n    missing.\n\n    \"\"\"\n    from distutils import ccompiler, errors, sysconfig\n\n    compiler = ccompiler.new_compiler()\n    sysconfig.customize_compiler(compiler)\n    if compiler.compiler_type == \"msvc\":\n        # MSVC has no executables, so check whether initialization succeeds\n        try:\n            compiler.initialize()\n        except errors.DistutilsPlatformError:\n            return \"msvc\"\n    for name in compiler.executables:\n        if cmd_names and name not in cmd_names:\n            continue\n        cmd = getattr(compiler, name)\n        if cmd_names:\n            assert cmd is not None, f\"the '{name}' executable is not configured\"\n        elif not cmd:\n            continue\n        if shutil.which(cmd[0]) is None:\n            return cmd[0]\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_get_outputs",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "self.write_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/metadata.py",
      "line": 391,
      "caller": "test_get_outputs",
      "source_code": "    def write_file(self, fileobject, skip_unknown=False):\n        \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n        self.set_metadata_version()\n\n        for field in _version2fieldlist(self['Metadata-Version']):\n            values = self.get(field)\n            if skip_unknown and values in ('UNKNOWN', [], ['UNKNOWN']):\n                continue\n            if field in _ELEMENTSFIELD:\n                self._write_field(fileobject, field, ','.join(values))\n                continue\n            if field not in _LISTFIELDS:\n                if field == 'Description':\n                    if self.metadata_version in ('1.0', '1.1'):\n                        values = values.replace('\\n', '\\n        ')\n                    else:\n                        values = values.replace('\\n', '\\n       |')\n                values = [values]\n\n            if field in _LISTTUPLEFIELDS:\n                values = [','.join(value) for value in values]\n\n            for value in values:\n                self._write_field(fileobject, field, value)\n\n"
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_get_outputs",
      "source_code": ""
    },
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_get_outputs",
      "source_code": ""
    },
    {
      "function": "self.build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_get_outputs",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    },
    {
      "function": "fixup_build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 86,
      "caller": "test_get_outputs",
      "source_code": "def fixup_build_ext(cmd):\n    \"\"\"Function needed to make build_ext tests pass.\n\n    When Python was built with --enable-shared on Unix, -L. is not enough to\n    find libpython<blah>.so, because regrtest runs in a tempdir, not in the\n    source directory where the .so lives.\n\n    When Python was built with in debug mode on Windows, build_ext commands\n    need their debug attribute set, and it is not done automatically for\n    some reason.\n\n    This function handles both of these things.  Example use:\n\n        cmd = build_ext(dist)\n        support.fixup_build_ext(cmd)\n        cmd.ensure_finalized()\n\n    Unlike most other Unix platforms, Mac OS X embeds absolute paths\n    to shared libraries into executables, so the fixup is not needed there.\n    \"\"\"\n    if os.name == 'nt':\n        cmd.debug = sys.executable.endswith('_d.exe')\n    elif sysconfig.get_config_var('Py_ENABLE_SHARED'):\n        # To further add to the shared builds fun on Unix, we can't just add\n        # library_dirs to the Extension() instance because that doesn't get\n        # plumbed through to the final compiler command.\n        runshared = sysconfig.get_config_var('RUNSHARED')\n        if runshared is None:\n            cmd.library_dirs = ['.']\n        else:\n            if sys.platform == 'darwin':\n                cmd.library_dirs = []\n            else:\n                name, equals, value = runshared.partition('=')\n                cmd.library_dirs = [d for d in value.split(os.pathsep) if d]\n\n\n"
    },
    {
      "function": "so_file.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_get_outputs",
      "source_code": ""
    },
    {
      "function": "so_file.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_get_outputs",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_outputs",
      "source_code": ""
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_get_outputs",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_get_outputs",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    }
  ],
  "assertions": [
    "assert len(cmd.get_outputs()) == 1",
    "assert os.path.exists(so_file)",
    "assert so_file.endswith(ext_suffix)",
    "assert so_dir == other_tmp_dir",
    "assert os.path.exists(so_file)",
    "assert so_file.endswith(ext_suffix)",
    "assert so_dir == cmd.build_lib",
    "assert path == cmd.build_lib",
    "assert lastdir == 'bar'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_outputs(self):\n        missing_compiler_executable()\n        tmp_dir = self.mkdtemp()\n        c_file = os.path.join(tmp_dir, 'foo.c')\n        self.write_file(c_file, 'void PyInit_foo(void) {}\\n')\n        ext = Extension('foo', [c_file], optional=False)\n        dist = Distribution({'name': 'xx', 'ext_modules': [ext]})\n        cmd = self.build_ext(dist)\n        fixup_build_ext(cmd)\n        cmd.ensure_finalized()\n        assert len(cmd.get_outputs()) == 1\n\n        cmd.build_lib = os.path.join(self.tmp_dir, 'build')\n        cmd.build_temp = os.path.join(self.tmp_dir, 'tempt')\n\n        # issue #5977 : distutils build_ext.get_outputs\n        # returns wrong result with --inplace\n        other_tmp_dir = os.path.realpath(self.mkdtemp())\n        old_wd = os.getcwd()\n        os.chdir(other_tmp_dir)\n        try:\n            cmd.inplace = True\n            cmd.run()\n            so_file = cmd.get_outputs()[0]\n        finally:\n            os.chdir(old_wd)\n        assert os.path.exists(so_file)\n        ext_suffix = sysconfig.get_config_var('EXT_SUFFIX')\n        assert so_file.endswith(ext_suffix)\n        so_dir = os.path.dirname(so_file)\n        assert so_dir == other_tmp_dir\n\n        cmd.inplace = False\n        cmd.compiler = None\n        cmd.run()\n        so_file = cmd.get_outputs()[0]\n        assert os.path.exists(so_file)\n        assert so_file.endswith(ext_suffix)\n        so_dir = os.path.dirname(so_file)\n        assert so_dir == cmd.build_lib\n\n        # inplace = False, cmd.package = 'bar'\n        build_py = cmd.get_finalized_command('build_py')\n        build_py.package_dir = {'': 'bar'}\n        path = cmd.get_ext_fullpath('foo')\n        # checking that the last directory is the build_dir\n        path = os.path.split(path)[0]\n        assert path == cmd.build_lib\n\n        # inplace = True, cmd.package = 'bar'\n        cmd.inplace = True\n        other_tmp_dir = os.path.realpath(self.mkdtemp())\n        old_wd = os.getcwd()\n        os.chdir(other_tmp_dir)\n        try:\n            path = cmd.get_ext_fullpath('foo')\n        finally:\n            os.chdir(old_wd)\n        # checking that the last directory is bar\n        path = os.path.split(path)[0]\n        lastdir = os.path.split(path)[-1]\n        assert lastdir == 'bar'"
}