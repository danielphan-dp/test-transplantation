{
  "test_name": "test_has_function_prototype",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_ccompiler.py",
  "static_methods": [
    {
      "name": "ccompiler.new_compiler",
      "source_code": "def new_compiler(plat=None, compiler=None, verbose=False, dry_run=False, force=False):\n    \"\"\"Generate an instance of some CCompiler subclass for the supplied\n    platform/compiler combination.  'plat' defaults to 'os.name'\n    (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler\n    for that platform.  Currently only 'posix' and 'nt' are supported, and\n    the default compilers are \"traditional Unix interface\" (UnixCCompiler\n    class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly\n    possible to ask for a Unix compiler object under Windows, and a\n    Microsoft compiler object under Unix -- if you supply a value for\n    'compiler', 'plat' is ignored.\n    \"\"\"\n    if plat is None:\n        plat = os.name",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 1136
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    },
    {
      "name": "compiler.has_function",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n    ):\n        \"\"\"Return a boolean indicating whether funcname is provided as\n        a symbol on the current platform.  The optional arguments can\n        be used to augment the compilation environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line_number": 826
    }
  ],
  "dynamic_methods": [
    {
      "function": "ccompiler.new_compiler",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 1136,
      "caller": "test_has_function_prototype",
      "source_code": "def new_compiler(plat=None, compiler=None, verbose=False, dry_run=False, force=False):\n    \"\"\"Generate an instance of some CCompiler subclass for the supplied\n    platform/compiler combination.  'plat' defaults to 'os.name'\n    (eg. 'posix', 'nt'), and 'compiler' defaults to the default compiler\n    for that platform.  Currently only 'posix' and 'nt' are supported, and\n    the default compilers are \"traditional Unix interface\" (UnixCCompiler\n    class) and Visual C++ (MSVCCompiler class).  Note that it's perfectly\n    possible to ask for a Unix compiler object under Windows, and a\n    Microsoft compiler object under Unix -- if you supply a value for\n    'compiler', 'plat' is ignored.\n    \"\"\"\n    if plat is None:\n        plat = os.name\n\n    try:\n        if compiler is None:\n            compiler = get_default_compiler(plat)\n\n        (module_name, class_name, long_description) = compiler_class[compiler]\n    except KeyError:\n        msg = f\"don't know how to compile C/C++ code on platform '{plat}'\"\n        if compiler is not None:\n            msg = msg + f\" with '{compiler}' compiler\"\n        raise DistutilsPlatformError(msg)\n\n    try:\n        module_name = \"distutils.\" + module_name\n        __import__(module_name)\n        module = sys.modules[module_name]\n        klass = vars(module)[class_name]\n    except ImportError:\n        raise DistutilsModuleError(\n            f\"can't compile C/C++ code: unable to load module '{module_name}'\"\n        )\n    except KeyError:\n        raise DistutilsModuleError(\n            f\"can't compile C/C++ code: unable to find class '{class_name}' \"\n            f\"in module '{module_name}'\"\n        )\n\n    # XXX The None is necessary to preserve backwards compatibility\n    # with classes that expect verbose to be the first positional\n    # argument.\n    return klass(None, dry_run, force)\n\n\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    },
    {
      "function": "compiler.has_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/ccompiler.py",
      "line": 826,
      "caller": "test_has_function_prototype",
      "source_code": "    def has_function(  # noqa: C901\n        self,\n        funcname,\n        includes=None,\n        include_dirs=None,\n        libraries=None,\n        library_dirs=None,\n"
    }
  ],
  "assertions": [
    "assert compiler.has_function('abort')",
    "assert compiler.has_function('exit')",
    "assert not compiler.has_function('setuptools_does_not_exist')",
    "assert compiler.has_function('abort', includes=['stdlib.h'])",
    "assert not compiler.has_function('exit', includes=['stdlib.h'])",
    "assert not compiler.has_function('setuptools_does_not_exist', includes=['stdio.h'])"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_has_function_prototype():\n    # Issue https://github.com/pypa/setuptools/issues/3648\n    # Test prototype-generating behavior.\n\n    compiler = ccompiler.new_compiler()\n\n    # Every C implementation should have these.\n    assert compiler.has_function('abort')\n    assert compiler.has_function('exit')\n    with pytest.deprecated_call(match='includes is deprecated'):\n        # abort() is a valid expression with the <stdlib.h> prototype.\n        assert compiler.has_function('abort', includes=['stdlib.h'])\n    with pytest.deprecated_call(match='includes is deprecated'):\n        # But exit() is not valid with the actual prototype in scope.\n        assert not compiler.has_function('exit', includes=['stdlib.h'])\n    # And setuptools_does_not_exist is not declared or defined at all.\n    assert not compiler.has_function('setuptools_does_not_exist')\n    with pytest.deprecated_call(match='includes is deprecated'):\n        assert not compiler.has_function(\n            'setuptools_does_not_exist', includes=['stdio.h']\n        )"
}