{
  "test_name": "test_http1_response_has_alt_svc",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_http_alt_svc.py",
  "static_methods": [
    {
      "name": "Sanic._app_registry.clear",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 271
    },
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "app.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    },
    {
      "name": "app.prepare",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 296
    },
    {
      "name": "Sanic.serve_single",
      "source_code": "    def serve_single(cls, primary: Optional[Sanic] = None) -> None:\n        \"\"\"Serve a single process of a Sanic application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/startup.py",
      "line_number": 1209
    },
    {
      "name": "empty",
      "source_code": "    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line_number": 31
    },
    {
      "name": "app.router.reset",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n    ) -> None:\n        \"\"\"Reset a task so completed is 0 and the clock is reset.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 1467
    },
    {
      "name": "app.router.finalize",
      "source_code": "    def finalize(self):\n        self._finalize_params()\n        if self.regex:\n            self._compile_regex()\n        self.requirements = Immutable(self.requirements)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/sanic_routing/route.py",
      "line_number": 282
    },
    {
      "name": "RawClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    },
    {
      "name": "client.connect",
      "source_code": "    def connect(self, f, t):\n        \"\"\"Connect two existing vertices.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 50
    },
    {
      "name": "client.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    },
    {
      "name": "client.recv",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 577
    },
    {
      "name": "client.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    }
  ],
  "dynamic_methods": [
    {
      "function": "Sanic._app_registry.clear",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 271,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": ""
    },
    {
      "function": "app.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "app.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    },
    {
      "function": "app.prepare",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 296,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def prepare(self):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n        p = PreparedRequest()\n        p.prepare(\n            method=self.method,\n            url=self.url,\n            headers=self.headers,\n            files=self.files,\n            data=self.data,\n            json=self.json,\n            params=self.params,\n            auth=self.auth,\n            cookies=self.cookies,\n            hooks=self.hooks,\n        )\n        return p\n\n\n"
    },
    {
      "function": "Sanic.serve_single",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/startup.py",
      "line": 1209,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    @classmethod\n    def serve_single(cls, primary: Optional[Sanic] = None) -> None:\n        \"\"\"Serve a single process of a Sanic application.\n\n        Similar to `serve`, but only serves a single process. When used,\n        certain features are disabled, such as `fast`, `workers`,\n        `multiplexer`, `auto_reload`, and the Inspector. It is almost\n        never needed to use this method directly. Instead, you should\n        use the CLI:\n\n        ```sh\n        sanic app.sanic:app --single-process\n        ```\n\n        Or, if you need to do it programmatically, you should use the\n        `single_process` argument of `run`:\n\n        ```python\n        app.run(single_process=True)\n        ```\n\n        Args:\n            primary (Optional[Sanic], optional): The primary Sanic application\n                to serve. Defaults to `None`.\n\n        Raises:\n            RuntimeError: Raised when no applications are found.\n            RuntimeError: Raised when no server information is found for the\n                primary application.\n            RuntimeError: Raised when attempting to serve HTTP/3 as a\n                secondary server.\n            RuntimeError: Raised when attempting to use both `fast` and\n                `workers`.\n            ValueError: Raised when `PROXIES_COUNT` is negative.\n        \"\"\"\n        os.environ[\"SANIC_MOTD_OUTPUT\"] = \"true\"\n        apps = list(cls._app_registry.values())\n\n        if not primary:\n            try:\n                primary = apps[0]\n            except IndexError:\n                raise RuntimeError(\"Did not find any applications.\")\n\n        # This exists primarily for unit testing\n        if not primary.state.server_info:  # no cov\n            for app in apps:\n                app.state.server_info.clear()\n            return\n\n        primary_server_info = primary.state.server_info[0]\n        primary.before_server_start(partial(primary._start_servers, apps=apps))\n        kwargs = {\n            k: v\n            for k, v in primary_server_info.settings.items()\n            if k\n            not in (\n                \"main_start\",\n                \"main_stop\",\n                \"app\",\n            )\n        }\n        kwargs[\"app_name\"] = primary.name\n        kwargs[\"app_loader\"] = None\n        sock = configure_socket(kwargs)\n\n        kwargs[\"server_info\"] = {}\n        kwargs[\"server_info\"][primary.name] = []\n        for server_info in primary.state.server_info:\n            server_info.settings = {\n                k: v\n                for k, v in server_info.settings.items()\n                if k not in (\"main_start\", \"main_stop\", \"app\")\n            }\n            kwargs[\"server_info\"][primary.name].append(server_info)\n\n        try:\n            worker_serve(monitor_publisher=None, **kwargs)\n        except BaseException:\n            error_logger.exception(\n                \"Experienced exception while trying to serve\"\n            )\n            raise\n        finally:\n            logger.info(\"Server Stopped\")\n            for app in apps:\n                app.state.server_info.clear()\n                app.router.reset()\n                app.signal_router.reset()\n\n            if sock:\n                sock.close()\n\n            cls._cleanup_env_vars()\n            cls._cleanup_apps()\n\n"
    },
    {
      "function": "empty",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line": 31,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    @classmethod\n    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())\n\n"
    },
    {
      "function": "app.router.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 1467,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def reset(\n        self,\n        task_id: TaskID,\n        *,\n        start: bool = True,\n        total: Optional[float] = None,\n        completed: int = 0,\n        visible: Optional[bool] = None,\n        description: Optional[str] = None,\n        **fields: Any,\n"
    },
    {
      "function": "app.router.finalize",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/sanic_routing/route.py",
      "line": 282,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def finalize(self):\n        self._finalize_params()\n        if self.regex:\n            self._compile_regex()\n        self.requirements = Immutable(self.requirements)\n\n"
    },
    {
      "function": "RawClient",
      "filename": "",
      "line": 0,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": ""
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    },
    {
      "function": "client.connect",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 50,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def connect(self, f, t):\n        \"\"\"Connect two existing vertices.\n\n        Nothing happens if the vertices are already connected.\n        \"\"\"\n        if t not in self._vertices:\n            raise KeyError(t)\n        self._forwards[f].add(t)\n        self._backwards[t].add(f)\n\n"
    },
    {
      "function": "client.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    },
    {
      "function": "client.recv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 577,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data\n\n"
    },
    {
      "function": "client.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_http1_response_has_alt_svc",
      "source_code": "    def close(self):\n        pass\n\n\n"
    }
  ],
  "assertions": [
    "assert f'alt-svc: h3=\":{port}\"\\r\\n'.encode() in response"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_http1_response_has_alt_svc(port):\n    Sanic._app_registry.clear()\n    app = Sanic(\"TestAltSvc\")\n    app.config.TOUCHUP = True\n    response = b\"\"\n\n    @app.get(\"/\")\n    async def handler(*_):\n        return empty()\n\n    @app.after_server_start\n    async def do_request(*_):\n        nonlocal response\n\n        app.router.reset()\n        app.router.finalize()\n\n        client = RawClient(app.state.host, app.state.port)\n        await client.connect()\n        await client.send(\n            \"\"\"\n            GET / HTTP/1.1\n            host: localhost:7777\n\n            \"\"\"\n        )\n        response = await client.recv(1024)\n        await client.close()\n\n    @app.after_server_start\n    def shutdown(*_):\n        app.stop()\n\n    app.prepare(\n        version=3,\n        ssl={\n            \"cert\": localhost_dir / \"fullchain.pem\",\n            \"key\": localhost_dir / \"privkey.pem\",\n        },\n        port=port,\n    )\n    app.prepare(\n        version=1,\n        port=port,\n    )\n    Sanic.serve_single(app)\n\n    assert f'alt-svc: h3=\":{port}\"\\r\\n'.encode() in response"
}