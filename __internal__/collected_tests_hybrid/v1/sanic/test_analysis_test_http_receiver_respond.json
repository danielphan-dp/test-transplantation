{
  "test_name": "test_http_receiver_respond",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_http_receiver.py",
  "static_methods": [
    {
      "name": "generate_http_receiver",
      "source_code": "def generate_http_receiver(app, http_request) -> HTTPReceiver:\n    protocol = generate_protocol(app)\n    receiver = HTTPReceiver(\n        protocol.transmit,\n        protocol,\n        http_request,\n    )\n    http_request.stream = receiver\n    return receiver",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_http_receiver.py",
      "line_number": 60
    },
    {
      "name": "empty",
      "source_code": "    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line_number": 31
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receiver.respond",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line_number": 90
    },
    {
      "name": "receiver.respond",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line_number": 90
    }
  ],
  "dynamic_methods": [
    {
      "function": "generate_http_receiver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_http_receiver.py",
      "line": 60,
      "caller": "test_http_receiver_respond",
      "source_code": "def generate_http_receiver(app, http_request) -> HTTPReceiver:\n    protocol = generate_protocol(app)\n    receiver = HTTPReceiver(\n        protocol.transmit,\n        protocol,\n        http_request,\n    )\n    http_request.stream = receiver\n    return receiver\n\n\n"
    },
    {
      "function": "empty",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/base.py",
      "line": 31,
      "caller": "test_http_receiver_respond",
      "source_code": "    @classmethod\n    def empty(cls) -> \"Constraint\":\n        return Constraint(SpecifierSet(), Hashes(), frozenset())\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_http_receiver_respond",
      "source_code": ""
    },
    {
      "function": "receiver.respond",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line": 90,
      "caller": "test_http_receiver_respond",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.\n\n        ``process_request`` and ``process_response`` may call this method to\n        return an HTTP response instead of performing the WebSocket opening\n        handshake.\n\n        You can modify the response before returning it, for example by changing\n        HTTP headers.\n\n        Args:\n            status: HTTP status code.\n            text: HTTP response body; it will be encoded to UTF-8.\n\n        Returns:\n            HTTP response to send to the client.\n\n        \"\"\"\n        return self.protocol.reject(status, text)\n\n"
    },
    {
      "function": "receiver.respond",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line": 90,
      "caller": "test_http_receiver_respond",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.\n\n        ``process_request`` and ``process_response`` may call this method to\n        return an HTTP response instead of performing the WebSocket opening\n        handshake.\n\n        You can modify the response before returning it, for example by changing\n        HTTP headers.\n\n        Args:\n            status: HTTP status code.\n            text: HTTP response body; it will be encoded to UTF-8.\n\n        Returns:\n            HTTP response to send to the client.\n\n        \"\"\"\n        return self.protocol.reject(status, text)\n\n"
    }
  ],
  "assertions": [
    "assert receiver.response is resp",
    "assert resp is response",
    "assert response.stream is receiver"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_http_receiver_respond(app: Sanic, http_request: Request):\n    receiver = generate_http_receiver(app, http_request)\n    response = empty()\n\n    receiver.stage = Stage.RESPONSE\n    with pytest.raises(RuntimeError, match=\"Response already started\"):\n        receiver.respond(response)\n\n    receiver.stage = Stage.HANDLER\n    receiver.response = Mock()\n    resp = receiver.respond(response)\n\n    assert receiver.response is resp\n    assert resp is response\n    assert response.stream is receiver"
}