{
  "test_name": "test_include_pattern",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_filelist.py",
  "static_methods": [
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.set_allfiles",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 38
    },
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.set_allfiles",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 38
    },
    {
      "name": "file_list.include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 200
    },
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.set_allfiles",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 38
    },
    {
      "name": "file_list.include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 200
    },
    {
      "name": "file_list.include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line_number": 200
    }
  ],
  "dynamic_methods": [
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_include_pattern",
      "source_code": ""
    },
    {
      "function": "file_list.set_allfiles",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 38,
      "caller": "test_include_pattern",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles\n\n"
    },
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_include_pattern",
      "source_code": ""
    },
    {
      "function": "file_list.set_allfiles",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 38,
      "caller": "test_include_pattern",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles\n\n"
    },
    {
      "function": "file_list.include_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 200,
      "caller": "test_include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If 'anchor' is true (the default), then the pattern match is more\n        stringent: \"*.py\" will match \"foo.py\" but not \"foo/bar.py\".  If\n        'anchor' is false, both of these will match.\n\n        If 'prefix' is supplied, then only filenames starting with 'prefix'\n        (itself a pattern) and ending with 'pattern', with anything in between\n        them, will match.  'anchor' is ignored in this case.\n\n        If 'is_regex' is true, 'anchor' and 'prefix' are ignored, and\n        'pattern' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return True if files are found, False otherwise.\n        \"\"\"\n        # XXX docstring lying about what the special chars are?\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"include_pattern: applying regex r'{pattern_re.pattern}'\")\n\n        # delayed loading of allfiles list\n        if self.allfiles is None:\n            self.findall()\n\n        for name in self.allfiles:\n            if pattern_re.search(name):\n                self.debug_print(\" adding \" + name)\n                self.files.append(name)\n                files_found = True\n        return files_found\n\n"
    },
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_include_pattern",
      "source_code": ""
    },
    {
      "function": "file_list.set_allfiles",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 38,
      "caller": "test_include_pattern",
      "source_code": "    def set_allfiles(self, allfiles):\n        self.allfiles = allfiles\n\n"
    },
    {
      "function": "file_list.include_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 200,
      "caller": "test_include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If 'anchor' is true (the default), then the pattern match is more\n        stringent: \"*.py\" will match \"foo.py\" but not \"foo/bar.py\".  If\n        'anchor' is false, both of these will match.\n\n        If 'prefix' is supplied, then only filenames starting with 'prefix'\n        (itself a pattern) and ending with 'pattern', with anything in between\n        them, will match.  'anchor' is ignored in this case.\n\n        If 'is_regex' is true, 'anchor' and 'prefix' are ignored, and\n        'pattern' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return True if files are found, False otherwise.\n        \"\"\"\n        # XXX docstring lying about what the special chars are?\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"include_pattern: applying regex r'{pattern_re.pattern}'\")\n\n        # delayed loading of allfiles list\n        if self.allfiles is None:\n            self.findall()\n\n        for name in self.allfiles:\n            if pattern_re.search(name):\n                self.debug_print(\" adding \" + name)\n                self.files.append(name)\n                files_found = True\n        return files_found\n\n"
    },
    {
      "function": "file_list.include_pattern",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/filelist.py",
      "line": 200,
      "caller": "test_include_pattern",
      "source_code": "    def include_pattern(self, pattern, anchor=True, prefix=None, is_regex=False):\n        \"\"\"Select strings (presumably filenames) from 'self.files' that\n        match 'pattern', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the 'fnmatch' module: '*'\n        and '?'  match non-special characters, where \"special\" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If 'anchor' is true (the default), then the pattern match is more\n        stringent: \"*.py\" will match \"foo.py\" but not \"foo/bar.py\".  If\n        'anchor' is false, both of these will match.\n\n        If 'prefix' is supplied, then only filenames starting with 'prefix'\n        (itself a pattern) and ending with 'pattern', with anything in between\n        them, will match.  'anchor' is ignored in this case.\n\n        If 'is_regex' is true, 'anchor' and 'prefix' are ignored, and\n        'pattern' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return True if files are found, False otherwise.\n        \"\"\"\n        # XXX docstring lying about what the special chars are?\n        files_found = False\n        pattern_re = translate_pattern(pattern, anchor, prefix, is_regex)\n        self.debug_print(f\"include_pattern: applying regex r'{pattern_re.pattern}'\")\n\n        # delayed loading of allfiles list\n        if self.allfiles is None:\n            self.findall()\n\n        for name in self.allfiles:\n            if pattern_re.search(name):\n                self.debug_print(\" adding \" + name)\n                self.files.append(name)\n                files_found = True\n        return files_found\n\n"
    }
  ],
  "assertions": [
    "assert not file_list.include_pattern('*.py')",
    "assert file_list.include_pattern('*.py')",
    "assert file_list.allfiles is None",
    "assert file_list.allfiles == ['a.py', 'b.txt']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_include_pattern(self):\n        # return False if no match\n        file_list = FileList()\n        file_list.set_allfiles([])\n        assert not file_list.include_pattern('*.py')\n\n        # return True if files match\n        file_list = FileList()\n        file_list.set_allfiles(['a.py', 'b.txt'])\n        assert file_list.include_pattern('*.py')\n\n        # test * matches all files\n        file_list = FileList()\n        assert file_list.allfiles is None\n        file_list.set_allfiles(['a.py', 'b.txt'])\n        file_list.include_pattern('*')\n        assert file_list.allfiles == ['a.py', 'b.txt']"
}