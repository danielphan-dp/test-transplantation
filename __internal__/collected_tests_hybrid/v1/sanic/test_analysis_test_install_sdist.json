{
  "test_name": "test_install_sdist",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
  "static_methods": [
    {
      "name": "retrieve_sdist",
      "source_code": "def retrieve_sdist(package, version, tmp_path):\n    \"\"\"Either use cached sdist file or download it from PyPI\"\"\"\n    # `pip download` cannot be used due to\n    # https://github.com/pypa/pip/issues/1884\n    # https://discuss.python.org/t/pep-625-file-name-of-a-source-distribution/4686\n    # We have to find the correct distribution file and download it\n    download_path = os.getenv(\"DOWNLOAD_PATH\", str(tmp_path))\n    dist = retrieve_pypi_sdist_metadata(package, version)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line_number": 151
    },
    {
      "name": "build_deps",
      "source_code": "def build_deps(package, sdist_file):\n    \"\"\"Find out what are the build dependencies for a package.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line_number": 198
    },
    {
      "name": "EXTRA_ENV_VARS.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "IMPORT_NAME.get.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    },
    {
      "name": "IMPORT_NAME.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    }
  ],
  "dynamic_methods": [
    {
      "function": "retrieve_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line": 151,
      "caller": "test_install_sdist",
      "source_code": "def retrieve_sdist(package, version, tmp_path):\n    \"\"\"Either use cached sdist file or download it from PyPI\"\"\"\n    # `pip download` cannot be used due to\n    # https://github.com/pypa/pip/issues/1884\n    # https://discuss.python.org/t/pep-625-file-name-of-a-source-distribution/4686\n    # We have to find the correct distribution file and download it\n    download_path = os.getenv(\"DOWNLOAD_PATH\", str(tmp_path))\n    dist = retrieve_pypi_sdist_metadata(package, version)\n\n    # Remove old files to prevent cache to grow indefinitely\n    for file in glob(os.path.join(download_path, f\"{package}*\")):\n        if dist[\"filename\"] != file:\n            os.unlink(file)\n\n    dist_file = os.path.join(download_path, dist[\"filename\"])\n    if not os.path.exists(dist_file):\n        download(dist[\"url\"], dist_file, dist[\"md5_digest\"])\n    return dist_file\n\n\n"
    },
    {
      "function": "build_deps",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/test_pip_install_sdist.py",
      "line": 198,
      "caller": "test_install_sdist",
      "source_code": "def build_deps(package, sdist_file):\n    \"\"\"Find out what are the build dependencies for a package.\n\n    \"Manually\" install them, since pip will not install build\n    deps with `--no-build-isolation`.\n    \"\"\"\n    # delay importing, since pytest discovery phase may hit this file from a\n    # testenv without tomli\n    from setuptools.compat.py310 import tomllib\n\n    archive = Archive(sdist_file)\n    info = tomllib.loads(_read_pyproject(archive))\n    deps = info.get(\"build-system\", {}).get(\"requires\", [])\n    deps += EXTRA_BUILD_DEPS.get(package, [])\n    # Remove setuptools from requirements (and deduplicate)\n    requirements = {Requirement(d).name: d for d in deps}\n    return [v for k, v in requirements.items() if k != \"setuptools\"]\n\n\n"
    },
    {
      "function": "EXTRA_ENV_VARS.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_install_sdist",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_install_sdist",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_install_sdist",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "IMPORT_NAME.get.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_install_sdist",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_install_sdist",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_install_sdist",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_install_sdist",
      "source_code": ""
    },
    {
      "function": "run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_install_sdist",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    },
    {
      "function": "IMPORT_NAME.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_install_sdist",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_install_sdist(package, version, tmp_path, venv_python, setuptools_wheel):\n    venv_pip = (venv_python, \"-m\", \"pip\")\n    sdist = retrieve_sdist(package, version, tmp_path)\n    deps = build_deps(package, sdist)\n    if deps:\n        print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\")\n        print(\"Dependencies:\", deps)\n        run([*venv_pip, \"install\", *deps])\n\n    # Use a virtualenv to simulate PEP 517 isolation\n    # but install fresh setuptools wheel to ensure the version under development\n    env = EXTRA_ENV_VARS.get(package, {})\n    run([*venv_pip, \"install\", \"--force-reinstall\", setuptools_wheel])\n    run([*venv_pip, \"install\", *INSTALL_OPTIONS, sdist], env)\n\n    # Execute a simple script to make sure the package was installed correctly\n    pkg = IMPORT_NAME.get(package, package).replace(\"-\", \"_\")\n    script = f\"import {pkg}; print(getattr({pkg}, '__version__', 0))\"\n    run([venv_python, \"-c\", script])"
}