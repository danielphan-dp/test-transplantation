{
  "test_name": "test_keep_alive_connection_context",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_keep_alive_timeout.py",
  "static_methods": [
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ReusableClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "environ.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> None:\n        return None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line_number": 144
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "aio_sleep",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    },
    {
      "function": "ReusableClient",
      "filename": "",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    },
    {
      "function": "environ.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_keep_alive_connection_context",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line": 144,
      "caller": "test_keep_alive_connection_context",
      "source_code": "    @property\n    def post(self) -> None:\n        return None\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_keep_alive_connection_context",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "aio_sleep",
      "filename": "",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_keep_alive_connection_context",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.text == 'hello'",
    "assert id(request1.conn_info.ctx) == id(request2.conn_info.ctx)",
    "assert request1.conn_info.ctx.foo == request2.conn_info.ctx.foo == 'hello'",
    "assert request2.protocol.state['requests_count'] == 2"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_keep_alive_connection_context(port):\n    loops = 0\n    while True:\n        try:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            client = ReusableClient(\n                keep_alive_app_context, loop=loop, port=port\n            )\n            with client:\n                headers = {\"Connection\": \"keep-alive\"}\n                request1, _ = client.post(\"/ctx\", headers=headers)\n\n                loop.run_until_complete(aio_sleep(1))\n                request2, response = client.get(\"/ctx\")\n\n                assert response.text == \"hello\"\n                assert id(request1.conn_info.ctx) == id(request2.conn_info.ctx)\n                assert (\n                    request1.conn_info.ctx.foo\n                    == request2.conn_info.ctx.foo\n                    == \"hello\"\n                )\n                assert request2.protocol.state[\"requests_count\"] == 2\n        except OSError:\n            loops += 1\n            if loops > MAX_LOOPS:\n                raise\n            continue\n        else:\n            break"
}