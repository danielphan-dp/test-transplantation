{
  "test_name": "test_license_escape",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self._setup_script_with_requires",
      "source_code": "    def _setup_script_with_requires(self, requires, use_setup_cfg=False):\n        setup_script = DALS(\n            \"\"\"\n            from setuptools import setup",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line_number": 249
    },
    {
      "name": "environment.run_setup_py",
      "source_code": "def run_setup_py(cmd, pypath=None, path=None, data_stream=0, env=None):\n    \"\"\"\n    Execution command for tests, separate from those used by the\n    code directly to prevent accidental behavior issues\n    \"\"\"\n    if env is None:\n        env = dict()\n        for envname in os.environ:\n            env[envname] = os.environ[envname]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/environment.py",
      "line_number": 46
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "fp.read.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "join",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line_number": 740
    },
    {
      "name": "fp.read",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line_number": 89
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_license_escape",
      "source_code": ""
    },
    {
      "function": "self._setup_script_with_requires",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_egg_info.py",
      "line": 249,
      "caller": "test_license_escape",
      "source_code": "    def _setup_script_with_requires(self, requires, use_setup_cfg=False):\n        setup_script = DALS(\n            \"\"\"\n            from setuptools import setup\n\n            setup(name='foo', zip_safe=False, %s)\n            \"\"\"\n        ) % ('' if use_setup_cfg else requires)\n        setup_config = requires if use_setup_cfg else ''\n        path.build({\n            'setup.py': setup_script,\n            'setup.cfg': setup_config,\n        })\n\n"
    },
    {
      "function": "environment.run_setup_py",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/environment.py",
      "line": 46,
      "caller": "test_license_escape",
      "source_code": "def run_setup_py(cmd, pypath=None, path=None, data_stream=0, env=None):\n    \"\"\"\n    Execution command for tests, separate from those used by the\n    code directly to prevent accidental behavior issues\n    \"\"\"\n    if env is None:\n        env = dict()\n        for envname in os.environ:\n            env[envname] = os.environ[envname]\n\n    # override the python path if needed\n    if pypath is not None:\n        env[\"PYTHONPATH\"] = pypath\n\n    # override the execution path if needed\n    if path is not None:\n        env[\"PATH\"] = path\n    if not env.get(\"PATH\", \"\"):\n        env[\"PATH\"] = _which_dirs(\"tar\").union(_which_dirs(\"gzip\"))\n        env[\"PATH\"] = os.pathsep.join(env[\"PATH\"])\n\n    cmd = [sys.executable, \"setup.py\"] + list(cmd)\n\n    # https://bugs.python.org/issue8557\n    shell = sys.platform == 'win32'\n\n    try:\n        proc = _Popen(\n            cmd,\n            stdout=_PIPE,\n            stderr=_PIPE,\n            shell=shell,\n            env=env,\n            encoding=\"utf-8\",\n        )\n\n        if isinstance(data_stream, tuple):\n            data_stream = slice(*data_stream)\n        data = proc.communicate()[data_stream]\n    except OSError:\n        return 1, ''\n\n    # decode the console string if needed\n    if hasattr(data, \"decode\"):\n        # use the default encoding\n        data = data.decode()\n        data = unicodedata.normalize('NFC', data)\n\n    # communicate calls wait()\n    return proc.returncode, data\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_license_escape",
      "source_code": ""
    },
    {
      "function": "fp.read.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_license_escape",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "join",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/text.py",
      "line": 740,
      "caller": "test_license_escape",
      "source_code": "    def join(self, lines: Iterable[\"Text\"]) -> \"Text\":\n        \"\"\"Join text together with this instance as the separator.\n\n        Args:\n            lines (Iterable[Text]): An iterable of Text instances to join.\n\n        Returns:\n            Text: A new text instance containing join text.\n        \"\"\"\n\n        new_text = self.blank_copy()\n\n        def iter_text() -> Iterable[\"Text\"]:\n            if self.plain:\n                for last, line in loop_last(lines):\n                    yield line\n                    if not last:\n                        yield self\n            else:\n                yield from lines\n\n        extend_text = new_text._text.extend\n        append_span = new_text._spans.append\n        extend_spans = new_text._spans.extend\n        offset = 0\n        _Span = Span\n\n        for text in iter_text():\n            extend_text(text._text)\n            if text.style:\n                append_span(_Span(offset, offset + len(text), text.style))\n            extend_spans(\n                _Span(offset + start, offset + end, style)\n                for start, end, style in text._spans\n            )\n            offset += len(text)\n        new_text._length = offset\n        return new_text\n\n"
    },
    {
      "function": "fp.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line": 89,
      "caller": "test_license_escape",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()\n\n        return data\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_license_escape",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'License: This is a long license text ' in pkg_info_lines",
    "assert '        over multiple lines' in pkg_info_lines",
    "assert 'text \\n        over multiple' in '\\n'.join(pkg_info_lines)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_license_escape(self, tmpdir_cwd, env):\n        \"\"\"Test license is escaped correctly if longer than one line.\"\"\"\n        self._setup_script_with_requires(\n            \"license='This is a long license text \\\\nover multiple lines',\"\n        )\n        environment.run_setup_py(\n            cmd=['egg_info'],\n            pypath=os.pathsep.join([env.paths['lib'], str(tmpdir_cwd)]),\n            data_stream=1,\n        )\n        egg_info_dir = os.path.join('.', 'foo.egg-info')\n        with open(os.path.join(egg_info_dir, 'PKG-INFO'), encoding=\"utf-8\") as fp:\n            pkg_info_lines = fp.read().split('\\n')\n\n        assert 'License: This is a long license text ' in pkg_info_lines\n        assert '        over multiple lines' in pkg_info_lines\n        assert 'text \\n        over multiple' in '\\n'.join(pkg_info_lines)"
}