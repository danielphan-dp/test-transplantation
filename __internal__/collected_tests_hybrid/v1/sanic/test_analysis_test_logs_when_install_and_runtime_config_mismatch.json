{
  "test_name": "test_logs_when_install_and_runtime_config_mismatch",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_server_loop.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getenv.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getenv.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.try_use_uvloop",
      "source_code": "def try_use_uvloop() -> None:\n    \"\"\"Use uvloop instead of the default asyncio loop.\"\"\"\n    if OS_IS_WINDOWS:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not compatible \"\n            \"with your system. You can disable uvloop completely by setting \"\n            \"the 'USE_UVLOOP' configuration value to false, or simply not \"\n            \"defining it and letting Sanic handle it for you. Sanic will now \"\n            \"continue to run using the default event loop.\"\n        )\n        return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/loop.py",
      "line_number": 11
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.try_use_uvloop",
      "source_code": "def try_use_uvloop() -> None:\n    \"\"\"Use uvloop instead of the default asyncio loop.\"\"\"\n    if OS_IS_WINDOWS:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not compatible \"\n            \"with your system. You can disable uvloop completely by setting \"\n            \"the 'USE_UVLOOP' configuration value to false, or simply not \"\n            \"defining it and letting Sanic handle it for you. Sanic will now \"\n            \"continue to run using the default event loop.\"\n        )\n        return",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/loop.py",
      "line_number": 11
    },
    {
      "name": "record.message.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "getenv.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "getenv.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "loop.try_use_uvloop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/loop.py",
      "line": 11,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": "def try_use_uvloop() -> None:\n    \"\"\"Use uvloop instead of the default asyncio loop.\"\"\"\n    if OS_IS_WINDOWS:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not compatible \"\n            \"with your system. You can disable uvloop completely by setting \"\n            \"the 'USE_UVLOOP' configuration value to false, or simply not \"\n            \"defining it and letting Sanic handle it for you. Sanic will now \"\n            \"continue to run using the default event loop.\"\n        )\n        return\n\n    try:\n        import uvloop  # type: ignore\n    except ImportError:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not \"\n            \"installed in your system. In order to use uvloop \"\n            \"you must first install it. Otherwise, you can disable \"\n            \"uvloop completely by setting the 'USE_UVLOOP' \"\n            \"configuration value to false. Sanic will now continue \"\n            \"to run with the default event loop.\"\n        )\n        return\n\n    uvloop_install_removed = str_to_bool(getenv(\"SANIC_NO_UVLOOP\", \"no\"))\n    if uvloop_install_removed:\n        error_logger.info(\n            \"You are requesting to run Sanic using uvloop, but the \"\n            \"install-time 'SANIC_NO_UVLOOP' environment variable (used to \"\n            \"opt-out of installing uvloop with Sanic) is set to true. If \"\n            \"you want to prevent Sanic from overriding the event loop policy \"\n            \"during runtime, set the 'USE_UVLOOP' configuration value to \"\n            \"false.\"\n        )\n\n    if not isinstance(asyncio.get_event_loop_policy(), uvloop.EventLoopPolicy):\n        asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    },
    {
      "function": "loop.try_use_uvloop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/server/loop.py",
      "line": 11,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": "def try_use_uvloop() -> None:\n    \"\"\"Use uvloop instead of the default asyncio loop.\"\"\"\n    if OS_IS_WINDOWS:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not compatible \"\n            \"with your system. You can disable uvloop completely by setting \"\n            \"the 'USE_UVLOOP' configuration value to false, or simply not \"\n            \"defining it and letting Sanic handle it for you. Sanic will now \"\n            \"continue to run using the default event loop.\"\n        )\n        return\n\n    try:\n        import uvloop  # type: ignore\n    except ImportError:\n        error_logger.warning(\n            \"You are trying to use uvloop, but uvloop is not \"\n            \"installed in your system. In order to use uvloop \"\n            \"you must first install it. Otherwise, you can disable \"\n            \"uvloop completely by setting the 'USE_UVLOOP' \"\n            \"configuration value to false. Sanic will now continue \"\n            \"to run with the default event loop.\"\n        )\n        return\n\n    uvloop_install_removed = str_to_bool(getenv(\"SANIC_NO_UVLOOP\", \"no\"))\n    if uvloop_install_removed:\n        error_logger.info(\n            \"You are requesting to run Sanic using uvloop, but the \"\n            \"install-time 'SANIC_NO_UVLOOP' environment variable (used to \"\n            \"opt-out of installing uvloop with Sanic) is set to true. If \"\n            \"you want to prevent Sanic from overriding the event loop policy \"\n            \"during runtime, set the 'USE_UVLOOP' configuration value to \"\n            \"false.\"\n        )\n\n    if not isinstance(asyncio.get_event_loop_policy(), uvloop.EventLoopPolicy):\n        asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())\n\n\n"
    },
    {
      "function": "record.message.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_logs_when_install_and_runtime_config_mismatch",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert caplog.record_tuples == []",
    "assert record.message == \"You are requesting to run Sanic using uvloop, but the install-time 'SANIC_NO_UVLOOP' environment variable (used to opt-out of installing uvloop with Sanic) is set to true. If you want to prevent Sanic from overriding the event loop policy during runtime, set the 'USE_UVLOOP' configuration value to false.\""
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_logs_when_install_and_runtime_config_mismatch(caplog, monkeypatch):\n    getenv = Mock(return_value=\"no\")\n    monkeypatch.setattr(loop, \"getenv\", getenv)\n\n    with caplog.at_level(logging.INFO):\n        loop.try_use_uvloop()\n\n    getenv.assert_called_once_with(\"SANIC_NO_UVLOOP\", \"no\")\n    assert caplog.record_tuples == []\n\n    getenv = Mock(return_value=\"yes\")\n    monkeypatch.setattr(loop, \"getenv\", getenv)\n    with caplog.at_level(logging.INFO):\n        loop.try_use_uvloop()\n\n    getenv.assert_called_once_with(\"SANIC_NO_UVLOOP\", \"no\")\n    for record in caplog.records:\n        if record.message.startswith(\"You are requesting to run\"):\n            break\n\n    assert record.message == (\n        \"You are requesting to run Sanic using uvloop, but the \"\n        \"install-time 'SANIC_NO_UVLOOP' environment variable (used to \"\n        \"opt-out of installing uvloop with Sanic) is set to true. If \"\n        \"you want to prevent Sanic from overriding the event loop policy \"\n        \"during runtime, set the 'USE_UVLOOP' configuration value to \"\n        \"false.\"\n    )"
}