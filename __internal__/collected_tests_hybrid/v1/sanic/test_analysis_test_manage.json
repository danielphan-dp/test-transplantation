{
  "test_name": "test_manage",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_multiplexer.py",
  "static_methods": [
    {
      "name": "m.manage",
      "source_code": "    def manage(\n        self,\n        ident: str,\n        func: Callable[..., Any],\n        kwargs: Dict[str, Any],\n        transient: bool = False,\n        restartable: Optional[bool] = None,\n        tracked: bool = False,\n        auto_start: bool = True,\n        workers: int = 1,\n    ) -> None:\n        \"\"\"Manages the initiation and monitoring of a worker process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/multiplexer.py",
      "line_number": 42
    },
    {
      "name": "monitor_publisher.send.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "m.manage",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/multiplexer.py",
      "line": 42,
      "caller": "test_manage",
      "source_code": "    def manage(\n        self,\n        ident: str,\n        func: Callable[..., Any],\n        kwargs: Dict[str, Any],\n        transient: bool = False,\n        restartable: Optional[bool] = None,\n        tracked: bool = False,\n        auto_start: bool = True,\n        workers: int = 1,\n"
    },
    {
      "function": "monitor_publisher.send.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_manage",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_manage(monitor_publisher: Mock, m: WorkerMultiplexer):\n    m.manage(\"NEW\", noop, auto_start=False, kwargs={\"foo\": 99})\n    monitor_publisher.send.assert_called_once_with(\n        (\"NEW\", noop, {\"foo\": 99}, False, None, False, False, 1)\n    )"
}