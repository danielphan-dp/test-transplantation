{
  "test_name": "test_native_windows_ansi",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
  "static_methods": [
    {
      "name": "ExitStack",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExitStack",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "AnsiToWin32",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SetConsoleMode.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertFalse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line_number": 250
    },
    {
      "name": "AnsiToWin32",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SetConsoleMode.assert_called_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stack.enter_context",
      "source_code": "    def enter_context(self, context_provider: ContextManager[_T]) -> _T:\n        assert self._in_main_context",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/cli/command_context.py",
      "line_number": 24
    },
    {
      "name": "stream.should_wrap",
      "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
      "line_number": 121
    },
    {
      "name": "stream.should_wrap",
      "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
      "line_number": 121
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    }
  ],
  "dynamic_methods": [
    {
      "function": "ExitStack",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "ExitStack",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "AnsiToWin32",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "SetConsoleMode.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertFalse",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "p",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/tests/ansitowin32_test.py",
      "line": 250,
      "caller": "test_native_windows_ansi",
      "source_code": "            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n"
    },
    {
      "function": "AnsiToWin32",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "SetConsoleMode.assert_called_with",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_native_windows_ansi",
      "source_code": ""
    },
    {
      "function": "stack.enter_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/cli/command_context.py",
      "line": 24,
      "caller": "test_native_windows_ansi",
      "source_code": "    def enter_context(self, context_provider: ContextManager[_T]) -> _T:\n        assert self._in_main_context\n\n        return self._main_context.enter_context(context_provider)\n"
    },
    {
      "function": "stream.should_wrap",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
      "line": 121,
      "caller": "test_native_windows_ansi",
      "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset\n\n"
    },
    {
      "function": "stream.should_wrap",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/colorama/ansitowin32.py",
      "line": 121,
      "caller": "test_native_windows_ansi",
      "source_code": "    def should_wrap(self):\n        '''\n        True if this class is actually needed. If false, then the output\n        stream will not be affected, nor will win32 calls be issued, so\n        wrapping stdout is not actually required. This will generally be\n        False on non-Windows platforms, unless optional functionality like\n        autoreset has been requested using kwargs to init()\n        '''\n        return self.convert or self.strip or self.autoreset\n\n"
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_native_windows_ansi",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch(a, b, create=True)"
  ],
  "success": false,
  "test_source_code": "def test_native_windows_ansi(self):\n        with ExitStack() as stack:\n            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)\n\n            # Pretend that our mock stream has native ANSI support\n            p(\n                \"colorama.winterm.win32.GetConsoleMode\",\n                lambda _: ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n            )\n            SetConsoleMode = Mock()\n            p(\"colorama.winterm.win32.SetConsoleMode\", SetConsoleMode)\n\n            stdout = Mock()\n            stdout.closed = False\n            stdout.isatty.return_value = True\n            stdout.fileno.return_value = 1\n\n            # Our fake console says it has native vt support, so AnsiToWin32 should\n            # enable that support and do nothing else.\n            stream = AnsiToWin32(stdout)\n            SetConsoleMode.assert_called_with(1234, ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n            self.assertFalse(stream.strip)\n            self.assertFalse(stream.convert)\n            self.assertFalse(stream.should_wrap())\n\n            # Now let's pretend we're on an old Windows console, that doesn't have\n            # native ANSI support.\n            p(\"colorama.winterm.win32.GetConsoleMode\", lambda _: 0)\n            SetConsoleMode = Mock()\n            p(\"colorama.winterm.win32.SetConsoleMode\", SetConsoleMode)\n\n            stream = AnsiToWin32(stdout)\n            SetConsoleMode.assert_called_with(1234, ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n            self.assertTrue(stream.strip)\n            self.assertTrue(stream.convert)\n            self.assertTrue(stream.should_wrap())"
}