{
  "test_name": "test_process_template_line",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_filelist.py",
  "static_methods": [
    {
      "name": "FileList",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MANIFEST_IN.split",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n    ) -> None:\n        \"\"\"Split the layout in to multiple sub-layouts.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line_number": 262
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "file_list.process_template_line",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line_number": 334
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mlp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "line.strip",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2421
    }
  ],
  "dynamic_methods": [
    {
      "function": "FileList",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "MANIFEST_IN.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/layout.py",
      "line": 262,
      "caller": "test_process_template_line",
      "source_code": "    def split(\n        self,\n        *layouts: Union[\"Layout\", RenderableType],\n        splitter: Union[Splitter, str] = \"column\",\n"
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "file_list.process_template_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/command/egg_info.py",
      "line": 334,
      "caller": "test_process_template_line",
      "source_code": "    def process_template_line(self, line) -> None:\n        # Parse the line: split it up, make sure the right number of words\n        # is there, and return the relevant words.  'action' is always\n        # defined: it's the first word of the line.  Which of the other\n        # three are defined depends on the action; it'll be either\n        # patterns, (dir and patterns), or (dir_pattern).\n        (action, patterns, dir, dir_pattern) = self._parse_template_line(line)\n\n        action_map: dict[str, Callable] = {\n            'include': self.include,\n            'exclude': self.exclude,\n            'global-include': self.global_include,\n            'global-exclude': self.global_exclude,\n            'recursive-include': functools.partial(\n                self.recursive_include,\n                dir,\n            ),\n            'recursive-exclude': functools.partial(\n                self.recursive_exclude,\n                dir,\n            ),\n            'graft': self.graft,\n            'prune': self.prune,\n        }\n        log_map = {\n            'include': \"warning: no files found matching '%s'\",\n            'exclude': (\"warning: no previously-included files found matching '%s'\"),\n            'global-include': (\n                \"warning: no files found matching '%s' anywhere in distribution\"\n            ),\n            'global-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found anywhere in distribution\"\n            ),\n            'recursive-include': (\n                \"warning: no files found matching '%s' under directory '%s'\"\n            ),\n            'recursive-exclude': (\n                \"warning: no previously-included files matching \"\n                \"'%s' found under directory '%s'\"\n            ),\n            'graft': \"warning: no directories found matching '%s'\",\n            'prune': \"no previously-included directories found matching '%s'\",\n        }\n\n        try:\n            process_action = action_map[action]\n        except KeyError:\n            msg = f\"Invalid MANIFEST.in: unknown action {action!r} in {line!r}\"\n            raise DistutilsInternalError(msg) from None\n\n        # OK, now we know that the action is valid and we have the\n        # right number of words on the line for that action -- so we\n        # can proceed with minimal error-checking.\n\n        action_is_recursive = action.startswith('recursive-')\n        if action in {'graft', 'prune'}:\n            patterns = [dir_pattern]\n        extra_log_args = (dir,) if action_is_recursive else ()\n        log_tmpl = log_map[action]\n\n        self.debug_print(\n            ' '.join(\n                [action] + ([dir] if action_is_recursive else []) + patterns,\n            )\n        )\n        for pattern in patterns:\n            if not process_action(pattern):\n                log.warn(log_tmpl, pattern, *extra_log_args)\n\n"
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "mlp",
      "filename": "",
      "line": 0,
      "caller": "test_process_template_line",
      "source_code": ""
    },
    {
      "function": "line.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2421,
      "caller": "test_process_template_line",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.\n\n    For example, to remove a set of items from both ends of an iterable:\n\n        >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n        >>> pred = lambda x: x in {None, False, ''}\n        >>> list(strip(iterable, pred))\n        [1, 2, None, 3]\n\n    This function is analogous to :func:`str.strip`.\n\n    \"\"\"\n    return rstrip(lstrip(iterable, pred), pred)\n\n\n"
    }
  ],
  "assertions": [
    "assert file_list.files == wanted"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_process_template_line(self):\n        # testing  all MANIFEST.in template patterns\n        file_list = FileList()\n        mlp = make_local_path\n\n        # simulated file list\n        file_list.allfiles = [\n            'foo.tmp',\n            'ok',\n            'xo',\n            'four.txt',\n            'buildout.cfg',\n            # filelist does not filter out VCS directories,\n            # it's sdist that does\n            mlp('.hg/last-message.txt'),\n            mlp('global/one.txt'),\n            mlp('global/two.txt'),\n            mlp('global/files.x'),\n            mlp('global/here.tmp'),\n            mlp('f/o/f.oo'),\n            mlp('dir/graft-one'),\n            mlp('dir/dir2/graft2'),\n            mlp('dir3/ok'),\n            mlp('dir3/sub/ok.txt'),\n        ]\n\n        for line in MANIFEST_IN.split('\\n'):\n            if line.strip() == '':\n                continue\n            file_list.process_template_line(line)\n\n        wanted = [\n            'ok',\n            'buildout.cfg',\n            'four.txt',\n            mlp('.hg/last-message.txt'),\n            mlp('global/one.txt'),\n            mlp('global/two.txt'),\n            mlp('f/o/f.oo'),\n            mlp('dir/graft-one'),\n            mlp('dir/dir2/graft2'),\n        ]\n\n        assert file_list.files == wanted"
}