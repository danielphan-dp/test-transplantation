{
  "test_name": "test_py_modules_when_wheel_dir_is_cwd",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
  "static_methods": [
    {
      "name": "jaraco.path.DirectoryStack.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "touch",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line_number": 57
    },
    {
      "name": "get_wheel_members",
      "source_code": "def get_wheel_members(wheel_path):\n    with ZipFile(wheel_path) as zipfile:\n        return set(zipfile.namelist())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/helpers.py",
      "line_number": 75
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "jaraco.path.DirectoryStack.context",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "build_meta.build_wheel",
      "source_code": "    def build_wheel(\n            self, wheel_directory, config_settings=None,\n            metadata_directory=None):\n        \"\"\"Build a wheel from this project.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line_number": 192
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "tmp_path.glob",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line_number": 23
    },
    {
      "name": "jaraco.path.DirectoryStack",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "jaraco.path.DirectoryStack.context",
      "filename": "",
      "line": 0,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": ""
    },
    {
      "function": "write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "touch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_manifest.py",
      "line": 57,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "def touch(filename):\n    open(filename, 'wb').close()\n\n\n"
    },
    {
      "function": "get_wheel_members",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/integration/helpers.py",
      "line": 75,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "def get_wheel_members(wheel_path):\n    with ZipFile(wheel_path) as zipfile:\n        return set(zipfile.namelist())\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "jaraco.path.DirectoryStack.context",
      "filename": "",
      "line": 0,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": ""
    },
    {
      "function": "build_meta.build_wheel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pyproject_hooks/_impl.py",
      "line": 192,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "    def build_wheel(\n            self, wheel_directory, config_settings=None,\n            metadata_directory=None):\n        \"\"\"Build a wheel from this project.\n\n        :returns:\n            The name of the newly created wheel within ``wheel_directory``.\n\n        .. admonition:: Interaction with fallback\n\n            If the ``build_wheel`` hook was called in the fallback for\n            :meth:`prepare_metadata_for_build_wheel`, the build backend would\n            not be invoked. Instead, the previously built wheel will be copied\n            to ``wheel_directory`` and the name of that file will be returned.\n        \"\"\"\n        if metadata_directory is not None:\n            metadata_directory = abspath(metadata_directory)\n        return self._call_hook('build_wheel', {\n            'wheel_directory': abspath(wheel_directory),\n            'config_settings': config_settings,\n            'metadata_directory': metadata_directory,\n        })\n\n"
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": ""
    },
    {
      "function": "tmp_path.glob",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/glob.py",
      "line": 23,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": "def glob(pathname: AnyStr, recursive: bool = False) -> list[AnyStr]:\n    \"\"\"Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la\n    fnmatch. However, unlike fnmatch, filenames starting with a\n    dot are special cases that are not matched by '*' and '?'\n    patterns.\n\n    If recursive is true, the pattern '**' will match any files and\n    zero or more directories and subdirectories.\n    \"\"\"\n    return list(iglob(pathname, recursive=recursive))\n\n\n"
    },
    {
      "function": "jaraco.path.DirectoryStack",
      "filename": "",
      "line": 0,
      "caller": "test_py_modules_when_wheel_dir_is_cwd",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert 'foo.py' in wheel_files"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_py_modules_when_wheel_dir_is_cwd(self, tmp_path):\n        \"\"\"Regression for issue 3692\"\"\"\n        from setuptools import build_meta\n\n        pyproject = '[project]\\nname = \"test\"\\nversion = \"1\"'\n        (tmp_path / \"pyproject.toml\").write_text(DALS(pyproject), encoding=\"utf-8\")\n        (tmp_path / \"foo.py\").touch()\n        with jaraco.path.DirectoryStack().context(tmp_path):\n            build_meta.build_wheel(\".\")\n        # Ensure py_modules are found\n        wheel_files = get_wheel_members(next(tmp_path.glob(\"*.whl\")))\n        assert \"foo.py\" in wheel_files"
}