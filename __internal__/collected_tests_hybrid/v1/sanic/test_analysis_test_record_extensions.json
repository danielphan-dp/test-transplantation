{
  "test_name": "test_record_extensions",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_install.py",
  "static_methods": [
    {
      "name": "missing_compiler_executable",
      "source_code": "def missing_compiler_executable(cmd_names: Sequence[str] = []):  # pragma: no cover\n    \"\"\"Check if the compiler components used to build the interpreter exist.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/__init__.py",
      "line_number": 14
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "self.create_dist",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 38
    },
    {
      "name": "support.copy_xxmodule_c",
      "source_code": "def copy_xxmodule_c(directory):\n    \"\"\"Helper for tests that need the xxmodule.c source file.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 66
    },
    {
      "name": "build_ext",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line_number": 90
    },
    {
      "name": "support.fixup_build_ext",
      "source_code": "def fixup_build_ext(cmd):\n    \"\"\"Function needed to make build_ext tests pass.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 86
    },
    {
      "name": "buildextcmd.ensure_finalized",
      "source_code": "    def ensure_finalized(self):\n        if not self.finalized:\n            self.finalize_options()\n        self.finalized = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line_number": 109
    },
    {
      "name": "install",
      "source_code": "def install():\n    if not any(finder == _EditableFinder for finder in sys.meta_path):\n        sys.meta_path.append(_EditableFinder)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/__editable___sanic_24_6_0_finder.py",
      "line_number": 74
    },
    {
      "name": "_make_ext_name",
      "source_code": "def _make_ext_name(modname):\n    return modname + sysconfig.get_config_var('EXT_SUFFIX')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_install.py",
      "line_number": 21
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "content.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Extension",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "missing_compiler_executable",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/__init__.py",
      "line": 14,
      "caller": "test_record_extensions",
      "source_code": "def missing_compiler_executable(cmd_names: Sequence[str] = []):  # pragma: no cover\n    \"\"\"Check if the compiler components used to build the interpreter exist.\n\n    Check for the existence of the compiler executables whose names are listed\n    in 'cmd_names' or all the compiler executables when 'cmd_names' is empty\n    and return the first missing executable or None when none is found\n    missing.\n\n    \"\"\"\n    from distutils import ccompiler, errors, sysconfig\n\n    compiler = ccompiler.new_compiler()\n    sysconfig.customize_compiler(compiler)\n    if compiler.compiler_type == \"msvc\":\n        # MSVC has no executables, so check whether initialization succeeds\n        try:\n            compiler.initialize()\n        except errors.DistutilsPlatformError:\n            return \"msvc\"\n    for name in compiler.executables:\n        if cmd_names and name not in cmd_names:\n            continue\n        cmd = getattr(compiler, name)\n        if cmd_names:\n            assert cmd is not None, f\"the '{name}' executable is not configured\"\n        elif not cmd:\n            continue\n        if shutil.which(cmd[0]) is None:\n            return cmd[0]\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_record_extensions",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "self.create_dist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 38,
      "caller": "test_record_extensions",
      "source_code": "    def create_dist(self, pkg_name='foo', **kw):\n        \"\"\"Will generate a test environment.\n\n        This function creates:\n         - a Distribution instance using keywords\n         - a temporary directory with a package structure\n\n        It returns the package directory and the distribution\n        instance.\n        \"\"\"\n        tmp_dir = self.mkdtemp()\n        pkg_dir = os.path.join(tmp_dir, pkg_name)\n        os.mkdir(pkg_dir)\n        dist = Distribution(attrs=kw)\n\n        return pkg_dir, dist\n\n\n"
    },
    {
      "function": "support.copy_xxmodule_c",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 66,
      "caller": "test_record_extensions",
      "source_code": "def copy_xxmodule_c(directory):\n    \"\"\"Helper for tests that need the xxmodule.c source file.\n\n    Example use:\n\n        def test_compile(self):\n            copy_xxmodule_c(self.tmpdir)\n            self.assertIn('xxmodule.c', os.listdir(self.tmpdir))\n\n    If the source file can be found, it will be copied to *directory*.  If not,\n    the test will be skipped.  Errors during copy are not caught.\n    \"\"\"\n    shutil.copy(_get_xxmodule_path(), os.path.join(directory, 'xxmodule.c'))\n\n\n"
    },
    {
      "function": "build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_build_ext.py",
      "line": 90,
      "caller": "test_record_extensions",
      "source_code": "    def build_ext(self, *args, **kwargs):\n        return build_ext(*args, **kwargs)\n\n"
    },
    {
      "function": "support.fixup_build_ext",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 86,
      "caller": "test_record_extensions",
      "source_code": "def fixup_build_ext(cmd):\n    \"\"\"Function needed to make build_ext tests pass.\n\n    When Python was built with --enable-shared on Unix, -L. is not enough to\n    find libpython<blah>.so, because regrtest runs in a tempdir, not in the\n    source directory where the .so lives.\n\n    When Python was built with in debug mode on Windows, build_ext commands\n    need their debug attribute set, and it is not done automatically for\n    some reason.\n\n    This function handles both of these things.  Example use:\n\n        cmd = build_ext(dist)\n        support.fixup_build_ext(cmd)\n        cmd.ensure_finalized()\n\n    Unlike most other Unix platforms, Mac OS X embeds absolute paths\n    to shared libraries into executables, so the fixup is not needed there.\n    \"\"\"\n    if os.name == 'nt':\n        cmd.debug = sys.executable.endswith('_d.exe')\n    elif sysconfig.get_config_var('Py_ENABLE_SHARED'):\n        # To further add to the shared builds fun on Unix, we can't just add\n        # library_dirs to the Extension() instance because that doesn't get\n        # plumbed through to the final compiler command.\n        runshared = sysconfig.get_config_var('RUNSHARED')\n        if runshared is None:\n            cmd.library_dirs = ['.']\n        else:\n            if sys.platform == 'darwin':\n                cmd.library_dirs = []\n            else:\n                name, equals, value = runshared.partition('=')\n                cmd.library_dirs = [d for d in value.split(os.pathsep) if d]\n\n\n"
    },
    {
      "function": "buildextcmd.ensure_finalized",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line": 109,
      "caller": "test_record_extensions",
      "source_code": "    def ensure_finalized(self):\n        if not self.finalized:\n            self.finalize_options()\n        self.finalized = True\n\n"
    },
    {
      "function": "install",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/__editable___sanic_24_6_0_finder.py",
      "line": 74,
      "caller": "test_record_extensions",
      "source_code": "def install():\n    if not any(finder == _EditableFinder for finder in sys.meta_path):\n        sys.meta_path.append(_EditableFinder)\n\n    if not NAMESPACES:\n        return\n\n    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):\n        # PathEntryFinder is needed to create NamespaceSpec without private APIS\n        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)\n    if PATH_PLACEHOLDER not in sys.path:\n        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook\n"
    },
    {
      "function": "_make_ext_name",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_install.py",
      "line": 21,
      "caller": "test_record_extensions",
      "source_code": "def _make_ext_name(modname):\n    return modname + sysconfig.get_config_var('EXT_SUFFIX')\n\n\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_record_extensions",
      "source_code": ""
    },
    {
      "function": "content.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_record_extensions",
      "source_code": ""
    },
    {
      "function": "Extension",
      "filename": "",
      "line": 0,
      "caller": "test_record_extensions",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert found == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_record_extensions(self):\n        cmd = missing_compiler_executable()\n        if cmd is not None:\n            pytest.skip(f'The {cmd!r} command is not found')\n        install_dir = self.mkdtemp()\n        project_dir, dist = self.create_dist(\n            ext_modules=[Extension('xx', ['xxmodule.c'])]\n        )\n        os.chdir(project_dir)\n        support.copy_xxmodule_c(project_dir)\n\n        buildextcmd = build_ext(dist)\n        support.fixup_build_ext(buildextcmd)\n        buildextcmd.ensure_finalized()\n\n        cmd = install(dist)\n        dist.command_obj['install'] = cmd\n        dist.command_obj['build_ext'] = buildextcmd\n        cmd.root = install_dir\n        cmd.record = os.path.join(project_dir, 'filelist')\n        cmd.ensure_finalized()\n        cmd.run()\n\n        content = pathlib.Path(cmd.record).read_text(encoding='utf-8')\n\n        found = [pathlib.Path(line).name for line in content.splitlines()]\n        expected = [\n            _make_ext_name('xx'),\n            'UNKNOWN-0.0.0-py{}.{}.egg-info'.format(*sys.version_info[:2]),\n        ]\n        assert found == expected"
}