{
  "test_name": "test_reloader_triggers_reload_listeners",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
  "static_methods": [
    {
      "name": "Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Reloader",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run_reloader",
      "source_code": "def run_reloader(reloader):\n    def stop(*_):\n        reloader.stop()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
      "line_number": 39
    },
    {
      "name": "before.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "after.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "before.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "after.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "changed_files.update",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 360
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "after.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "reloader.files",
      "source_code": "def files(distribution_name: str) -> Optional[List[PackagePath]]:\n    \"\"\"Return a list of files for the named package.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/importlib_metadata/__init__.py",
      "line_number": 1004
    }
  ],
  "dynamic_methods": [
    {
      "function": "Event",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "Event",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "Reloader",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "run_reloader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_reloader.py",
      "line": 39,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": "def run_reloader(reloader):\n    def stop(*_):\n        reloader.stop()\n\n    signal.signal(signal.SIGALRM, stop)\n    signal.alarm(1)\n    reloader()\n\n\n"
    },
    {
      "function": "before.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "after.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "before.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "after.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "changed_files.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 360,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": "    def update(self, *args, **kwargs):\n        \"\"\"Update the dictionary from *other*, overwriting existing keys.\"\"\"\n        self._extend(args, kwargs, \"update\", self._update_items)\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "after.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": ""
    },
    {
      "function": "reloader.files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/importlib_metadata/__init__.py",
      "line": 1004,
      "caller": "test_reloader_triggers_reload_listeners",
      "source_code": "def files(distribution_name: str) -> Optional[List[PackagePath]]:\n    \"\"\"Return a list of files for the named package.\n\n    :param distribution_name: The name of the distribution package to query.\n    :return: List of files composing the distribution.\n    \"\"\"\n    return distribution(distribution_name).files\n\n\n"
    }
  ],
  "assertions": [
    "assert before.is_set()",
    "assert after.is_set()",
    "assert len(changed_files) > 0",
    "assert changed_files == set(reloader.files())"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_reloader_triggers_reload_listeners(app: Sanic, app_loader: AppLoader):\n    before = Event()\n    after = Event()\n    changed_files = set()\n\n    def check_file(filename, mtimes):\n        return not after.is_set()\n\n    @app.before_reload_trigger\n    async def before_reload_trigger(_):\n        before.set()\n\n    @app.after_reload_trigger\n    async def after_reload_trigger(_, changed):\n        after.set()\n        changed_files.update(changed)\n\n    reloader = Reloader(Mock(), 0.1, set(), app_loader)\n    reloader.check_file = check_file  # type: ignore\n    run_reloader(reloader)\n\n    assert before.is_set()\n    assert after.is_set()\n    assert len(changed_files) > 0\n    assert changed_files == set(reloader.files())"
}