{
  "test_name": "test_request_url",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_ws_handlers.py",
  "static_methods": [
    {
      "name": "app.websocket",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ):\n        \"\"\"Decorate a function to be registered as a websocket route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 675
    },
    {
      "name": "app.test_client.websocket",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ):\n        \"\"\"Decorate a function to be registered as a websocket route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 675
    },
    {
      "name": "ws_proxy.client_received.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ws_proxy.client_received.startswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ws.recv",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 577
    },
    {
      "name": "ws.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    },
    {
      "name": "ws.recv",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 577
    },
    {
      "name": "ws.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    },
    {
      "name": "ws.recv",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 577
    },
    {
      "name": "request.url_for",
      "source_code": "    def url_for(request):\n        return text(\"url-for\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_requests.py",
      "line_number": 2180
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.websocket",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 675,
      "caller": "test_request_url",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.websocket",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 675,
      "caller": "test_request_url",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "ws_proxy.client_received.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_request_url",
      "source_code": ""
    },
    {
      "function": "ws_proxy.client_received.startswith",
      "filename": "",
      "line": 0,
      "caller": "test_request_url",
      "source_code": ""
    },
    {
      "function": "ws.recv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 577,
      "caller": "test_request_url",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data\n\n"
    },
    {
      "function": "ws.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_request_url",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    },
    {
      "function": "ws.recv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 577,
      "caller": "test_request_url",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data\n\n"
    },
    {
      "function": "ws.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_request_url",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    },
    {
      "function": "ws.recv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 577,
      "caller": "test_request_url",
      "source_code": "    def recv(self, bufsiz):\n        buffer = ctypes.create_string_buffer(bufsiz)\n        bytes_read = self.recv_into(buffer, bufsiz)\n        data = buffer[:bytes_read]\n        return data\n\n"
    },
    {
      "function": "request.url_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_requests.py",
      "line": 2180,
      "caller": "test_request_url",
      "source_code": "    @app.route(\"/url-for\")\n    def url_for(request):\n        return text(\"url-for\")\n\n"
    }
  ],
  "assertions": [
    "assert ws_proxy.client_sent == ['test 1', 'test 2', '']",
    "assert ws_proxy.client_received[0] == ws_proxy.client_received[1]",
    "assert ws_proxy.client_received[0] == 'wss://example.com/ws'",
    "assert ws_proxy.client_received[1] == 'wss://example.com/ws'",
    "assert ws_proxy.client_received[0].startswith('ws://127.0.0.1')",
    "assert ws_proxy.client_received[1].startswith('ws://127.0.0.1')"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_request_url(\n    app: Sanic,\n    simple_ws_mimic_client: MimicClientType,\n    proxy: str,\n):\n    @app.websocket(\"/ws\")\n    async def ws_url_handler(request: Request, ws: Websocket):\n        request.headers[\"forwarded\"] = (\n            \"for=[2001:db8::1];proto=https;host=example.com;by=proxy\"\n        )\n\n        await ws.recv()\n        await ws.send(request.url)\n        await ws.recv()\n        await ws.send(request.url_for(\"ws_url_handler\"))\n        await ws.recv()\n\n    app.config.FORWARDED_SECRET = proxy\n    app.config.SERVER_NAME = (\n        \"https://example.com\" if proxy == \"servername\" else \"\"\n    )\n    _, ws_proxy = app.test_client.websocket(\n        \"/ws\",\n        mimic=simple_ws_mimic_client,\n    )\n    assert ws_proxy.client_sent == [\"test 1\", \"test 2\", \"\"]\n    assert ws_proxy.client_received[0] == ws_proxy.client_received[1]\n    if proxy == \"servername\":\n        assert ws_proxy.client_received[0] == \"wss://example.com/ws\"\n        assert ws_proxy.client_received[1] == \"wss://example.com/ws\"\n    else:\n        assert ws_proxy.client_received[0].startswith(\"ws://127.0.0.1\")\n        assert ws_proxy.client_received[1].startswith(\"ws://127.0.0.1\")"
}