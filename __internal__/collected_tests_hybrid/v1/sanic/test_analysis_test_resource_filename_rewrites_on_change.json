{
  "test_name": "test_resource_filename_rewrites_on_change",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pkg_resources/tests/test_pkg_resources.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "pkg_resources.ResourceManager",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "pkg_resources.ZipProvider",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "zp.get_resource_filename",
      "source_code": "    def get_resource_filename(manager, resource_name):\n        \"\"\"Return a true filesystem path for `resource_name`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 528
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "f.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "self.ref_time.timestamp",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "zp.get_resource_filename",
      "source_code": "    def get_resource_filename(manager, resource_name):\n        \"\"\"Return a true filesystem path for `resource_name`",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 528
    },
    {
      "name": "manager.cleanup_resources",
      "source_code": "    def cleanup_resources(self, force=False):\n        \"\"\"\n        Delete all extracted resource files and directories, returning a list\n        of the file and directory names that could not be successfully removed.\n        This function does not have any concurrency protection, so it should\n        generally only be called when the extraction path is a temporary\n        directory exclusive to a single process.  This method is not\n        automatically called; you must call it explicitly or register it as an\n        ``atexit`` function if you wish to ensure cleanup of a temporary\n        directory used for extractions.\n        \"\"\"\n        # XXX",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 1291
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.read",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line_number": 89
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "pkg_resources.ResourceManager",
      "filename": "",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "pkg_resources.ZipProvider",
      "filename": "",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "zp.get_resource_filename",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 528,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "    def get_resource_filename(manager, resource_name):\n        \"\"\"Return a true filesystem path for `resource_name`\n\n        `manager` must be an ``IResourceManager``\"\"\"\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "f.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "f.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "self.ref_time.timestamp",
      "filename": "",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "zp.get_resource_filename",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 528,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "    def get_resource_filename(manager, resource_name):\n        \"\"\"Return a true filesystem path for `resource_name`\n\n        `manager` must be an ``IResourceManager``\"\"\"\n\n"
    },
    {
      "function": "manager.cleanup_resources",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 1291,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "    def cleanup_resources(self, force=False):\n        \"\"\"\n        Delete all extracted resource files and directories, returning a list\n        of the file and directory names that could not be successfully removed.\n        This function does not have any concurrency protection, so it should\n        generally only be called when the extraction path is a temporary\n        directory exclusive to a single process.  This method is not\n        automatically called; you must call it explicitly or register it as an\n        ``atexit`` function if you wish to ensure cleanup of a temporary\n        directory used for extractions.\n        \"\"\"\n        # XXX\n\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": ""
    },
    {
      "function": "f.read",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/filewrapper.py",
      "line": 89,
      "caller": "test_resource_filename_rewrites_on_change",
      "source_code": "    def read(self, amt=None):\n        data = self.__fp.read(amt)\n        if data:\n            # We may be dealing with b'', a sign that things are over:\n            # it's passed e.g. after we've already closed self.__buf.\n            self.__buf.write(data)\n        if self.__is_fp_closed():\n            self._close()\n\n        return data\n\n"
    }
  ],
  "assertions": [
    "assert actual == self.ref_time",
    "assert f.read() == 'hello, world!'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_resource_filename_rewrites_on_change(self):\n        \"\"\"\n        If a previous call to get_resource_filename has saved the file, but\n        the file has been subsequently mutated with different file of the\n        same size and modification time, it should not be overwritten on a\n        subsequent call to get_resource_filename.\n        \"\"\"\n        import mod  # pyright: ignore[reportMissingImports] # Temporary package for test\n\n        manager = pkg_resources.ResourceManager()\n        zp = pkg_resources.ZipProvider(mod)\n        filename = zp.get_resource_filename(manager, 'data.dat')\n        actual = datetime.datetime.fromtimestamp(os.stat(filename).st_mtime)\n        assert actual == self.ref_time\n        f = open(filename, 'w', encoding=\"utf-8\")\n        f.write('hello, world?')\n        f.close()\n        ts = self.ref_time.timestamp()\n        os.utime(filename, (ts, ts))\n        filename = zp.get_resource_filename(manager, 'data.dat')\n        with open(filename, encoding=\"utf-8\") as f:\n            assert f.read() == 'hello, world!'\n        manager.cleanup_resources()"
}