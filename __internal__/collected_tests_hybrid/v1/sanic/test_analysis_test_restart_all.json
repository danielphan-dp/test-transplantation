{
  "test_name": "test_restart_all",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_manager.py",
  "static_methods": [
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WorkerManager",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "manager.restart",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n    ) -> None:\n        \"\"\"Restart the worker processes.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line_number": 9
    },
    {
      "name": "p1.terminate.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p2.terminate.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "context.Process.assert_has_calls",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "call",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "WorkerManager",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "manager.restart",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line": 9,
      "caller": "test_restart_all",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n"
    },
    {
      "function": "p1.terminate.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "p2.terminate.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "context.Process.assert_has_calls",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    },
    {
      "function": "call",
      "filename": "",
      "line": 0,
      "caller": "test_restart_all",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(list(manager.transient_processes))"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_restart_all():\n    p1 = Mock()\n    p2 = Mock()\n    context = Mock()\n    context.Process.side_effect = [p1, p2, p1, p2]\n    manager = WorkerManager(2, fake_serve, {}, context, (Mock(), Mock()), {})\n    assert len(list(manager.transient_processes))\n    manager.restart()\n    p1.terminate.assert_called_once()\n    p2.terminate.assert_called_once()\n    context.Process.assert_has_calls(\n        [\n            call(\n                name=\"Sanic-Server-0-0\",\n                target=fake_serve,\n                kwargs={},\n                daemon=True,\n            ),\n            call(\n                name=\"Sanic-Server-1-0\",\n                target=fake_serve,\n                kwargs={},\n                daemon=True,\n            ),\n            call(\n                name=\"Sanic-Server-0-0\",\n                target=fake_serve,\n                kwargs={},\n                daemon=True,\n            ),\n            call(\n                name=\"Sanic-Server-1-0\",\n                target=fake_serve,\n                kwargs={},\n                daemon=True,\n            ),\n        ]\n    )"
}