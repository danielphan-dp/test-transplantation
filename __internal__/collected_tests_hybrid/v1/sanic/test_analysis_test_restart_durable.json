{
  "test_name": "test_restart_durable",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_restarter.py",
  "static_methods": [
    {
      "name": "make_worker_process",
      "source_code": "def make_worker_process(\n    name: str, state: ProcessState = ProcessState.STARTED",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_restarter.py",
      "line_number": 14
    },
    {
      "name": "make_worker_process",
      "source_code": "def make_worker_process(\n    name: str, state: ProcessState = ProcessState.STARTED",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_restarter.py",
      "line_number": 14
    },
    {
      "name": "Restarter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "restarter.restart",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n    ) -> None:\n        \"\"\"Restart the worker processes.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line_number": 9
    },
    {
      "name": "transient.restart.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "durable.restart.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "restarter.restart",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n    ) -> None:\n        \"\"\"Restart the worker processes.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line_number": 9
    },
    {
      "name": "transient.restart.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "durable.restart.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "durable.restart.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "make_worker_process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_restarter.py",
      "line": 14,
      "caller": "test_restart_durable",
      "source_code": "def make_worker_process(\n    name: str, state: ProcessState = ProcessState.STARTED\n"
    },
    {
      "function": "make_worker_process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_restarter.py",
      "line": 14,
      "caller": "test_restart_durable",
      "source_code": "def make_worker_process(\n    name: str, state: ProcessState = ProcessState.STARTED\n"
    },
    {
      "function": "Restarter",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    },
    {
      "function": "restarter.restart",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line": 9,
      "caller": "test_restart_durable",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n"
    },
    {
      "function": "transient.restart.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    },
    {
      "function": "durable.restart.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    },
    {
      "function": "restarter.restart",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/restarter.py",
      "line": 9,
      "caller": "test_restart_durable",
      "source_code": "    def restart(\n        self,\n        transient_processes: List[WorkerProcess],\n        durable_processes: List[WorkerProcess],\n        process_names: Optional[List[str]] = None,\n        restart_order=RestartOrder.SHUTDOWN_FIRST,\n        **kwargs,\n"
    },
    {
      "function": "transient.restart.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    },
    {
      "function": "durable.restart.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    },
    {
      "function": "durable.restart.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_restart_durable",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert ('sanic.error', 40, 'Cannot restart process Durable because it is not in a final state. Current state is: STARTED.') in caplog.record_tuples",
    "assert ('sanic.error', 40, 'Failed to restart processes: Durable') in caplog.record_tuples"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_restart_durable(caplog, state, called):\n    transient = make_worker_process(\"Transient\")\n    durable = make_worker_process(\"Durable\")\n    restarter = Restarter()\n\n    restarter.restart([transient], [durable], process_names=[\"Durable\"])\n\n    transient.restart.assert_not_called()\n    durable.restart.assert_not_called()\n\n    assert (\n        \"sanic.error\",\n        40,\n        \"Cannot restart process Durable because it is not in a \"\n        \"final state. Current state is: STARTED.\",\n    ) in caplog.record_tuples\n    assert (\n        \"sanic.error\",\n        40,\n        \"Failed to restart processes: Durable\",\n    ) in caplog.record_tuples\n\n    durable.state = state\n    restarter.restart([transient], [durable], process_names=[\"Durable\"])\n\n    transient.restart.assert_not_called()\n    if called:\n        durable.restart.assert_called_once_with(\n            restart_order=RestartOrder.SHUTDOWN_FIRST\n        )\n    else:\n        durable.restart.assert_not_called()"
}