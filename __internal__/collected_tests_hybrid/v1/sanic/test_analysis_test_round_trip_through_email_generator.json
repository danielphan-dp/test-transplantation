{
  "test_name": "test_round_trip_through_email_generator",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_dist.py",
  "static_methods": [
    {
      "name": "Distribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "metadata.write_pkg_file",
      "source_code": "def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME\n    \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n    version = self.get_metadata_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line_number": 148
    },
    {
      "name": "buffer.getvalue",
      "source_code": "        def getvalue(self):\n            return self.builder.build()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line_number": 66
    },
    {
      "name": "buffer.seek",
      "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 38
    },
    {
      "name": "orig.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regen.splitlines",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Distribution",
      "filename": "",
      "line": 0,
      "caller": "test_round_trip_through_email_generator",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_round_trip_through_email_generator",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_round_trip_through_email_generator",
      "source_code": ""
    },
    {
      "function": "metadata.write_pkg_file",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_core_metadata.py",
      "line": 148,
      "caller": "test_round_trip_through_email_generator",
      "source_code": "def write_pkg_file(self, file):  # noqa: C901  # is too complex (14)  # FIXME\n    \"\"\"Write the PKG-INFO format data to a file object.\"\"\"\n    version = self.get_metadata_version()\n\n    def write_field(key, value):\n        file.write(\"%s: %s\\n\" % (key, value))\n\n    write_field('Metadata-Version', str(version))\n    write_field('Name', self.get_name())\n    write_field('Version', self.get_version())\n\n    summary = self.get_description()\n    if summary:\n        write_field('Summary', single_line(summary))\n\n    optional_fields = (\n        ('Home-page', 'url'),\n        ('Download-URL', 'download_url'),\n        ('Author', 'author'),\n        ('Author-email', 'author_email'),\n        ('Maintainer', 'maintainer'),\n        ('Maintainer-email', 'maintainer_email'),\n    )\n\n    for field, attr in optional_fields:\n        attr_val = getattr(self, attr, None)\n        if attr_val is not None:\n            write_field(field, attr_val)\n\n    license = self.get_license()\n    if license:\n        write_field('License', rfc822_escape(license))\n\n    for project_url in self.project_urls.items():\n        write_field('Project-URL', '%s, %s' % project_url)\n\n    keywords = ','.join(self.get_keywords())\n    if keywords:\n        write_field('Keywords', keywords)\n\n    platforms = self.get_platforms() or []\n    for platform in platforms:\n        write_field('Platform', platform)\n\n    self._write_list(file, 'Classifier', self.get_classifiers())\n\n    # PEP 314\n    self._write_list(file, 'Requires', self.get_requires())\n    self._write_list(file, 'Provides', self.get_provides())\n    self._write_list(file, 'Obsoletes', self.get_obsoletes())\n\n    # Setuptools specific for PEP 345\n    if hasattr(self, 'python_requires'):\n        write_field('Requires-Python', self.python_requires)\n\n    # PEP 566\n    if self.long_description_content_type:\n        write_field('Description-Content-Type', self.long_description_content_type)\n\n    self._write_list(file, 'License-File', self.license_files or [])\n    _write_requirements(self, file)\n\n    long_description = self.get_long_description()\n    if long_description:\n        file.write(\"\\n%s\" % long_description)\n        if not long_description.endswith(\"\\n\"):\n            file.write(\"\\n\")\n\n\n"
    },
    {
      "function": "buffer.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line": 66,
      "caller": "test_round_trip_through_email_generator",
      "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
    },
    {
      "function": "buffer.seek",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 38,
      "caller": "test_round_trip_through_email_generator",
      "source_code": "    def seek(self, __offset: int, __whence: int = 1) -> int:\n        return 0\n\n"
    },
    {
      "function": "orig.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_round_trip_through_email_generator",
      "source_code": ""
    },
    {
      "function": "regen.splitlines",
      "filename": "",
      "line": 0,
      "caller": "test_round_trip_through_email_generator",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert regen_desc == orig_desc"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_round_trip_through_email_generator(self):\n        \"\"\"\n        In pypa/setuptools#4033, it was shown that once PKG-INFO is\n        re-generated using ``email.generator.Generator``, some control\n        characters might cause problems.\n        \"\"\"\n        # Given a PKG-INFO file ...\n        attrs = {\n            \"name\": \"package\",\n            \"version\": \"1.0\",\n            \"long_description\": \"hello\\x0b\\nworld\\n\",\n        }\n        dist = Distribution(attrs)\n        metadata = dist.metadata\n\n        with io.StringIO() as buffer:\n            metadata.write_pkg_file(buffer)\n            msg = buffer.getvalue()\n\n        # ... when it is read and re-written using stdlib's email library,\n        orig = email.message_from_string(msg)\n        policy = email.policy.EmailPolicy(\n            utf8=True,\n            mangle_from_=False,\n            max_line_length=0,\n        )\n        with io.StringIO() as buffer:\n            email.generator.Generator(buffer, policy=policy).flatten(orig)\n\n            buffer.seek(0)\n            regen = email.message_from_file(buffer)\n\n        # ... then it should be the same as the original\n        # (except for the specific line break characters)\n        orig_desc = set(orig[\"Description\"].splitlines())\n        regen_desc = set(regen[\"Description\"].splitlines())\n        assert regen_desc == orig_desc"
}