{
  "test_name": "test_runtime_libdir_option",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
  "static_methods": [
    {
      "name": "env.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "_clear_cached_macosx_ver",
      "source_code": "def _clear_cached_macosx_ver():\n    \"\"\"For testing only. Do not call.\"\"\"\n    global _syscfg_macosx_ver\n    _syscfg_macosx_ver = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 68
    },
    {
      "name": "make_darwin_gcv",
      "source_code": "        def make_darwin_gcv(syscfg_macosx_ver):\n            def gcv(var):\n                if var == darwin_ver_var:\n                    return syscfg_macosx_ver\n                return \"xxx\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 66
    },
    {
      "name": "_clear_cached_macosx_ver",
      "source_code": "def _clear_cached_macosx_ver():\n    \"\"\"For testing only. Do not call.\"\"\"\n    global _syscfg_macosx_ver\n    _syscfg_macosx_ver = None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line_number": 68
    },
    {
      "name": "do_darwin_test",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 74
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "consolidate_linker_args",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line_number": 6
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "consolidate_linker_args",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line_number": 6
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "consolidate_linker_args",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line_number": 6
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "consolidate_linker_args",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line_number": 6
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "do_darwin_test",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 74
    },
    {
      "name": "do_darwin_test",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 74
    },
    {
      "name": "do_darwin_test",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 74
    },
    {
      "name": "env.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "self.cc.rpath_foo",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line_number": 28
    },
    {
      "name": "env.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    }
  ],
  "dynamic_methods": [
    {
      "function": "env.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_runtime_libdir_option",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "_clear_cached_macosx_ver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 68,
      "caller": "test_runtime_libdir_option",
      "source_code": "def _clear_cached_macosx_ver():\n    \"\"\"For testing only. Do not call.\"\"\"\n    global _syscfg_macosx_ver\n    _syscfg_macosx_ver = None\n\n\n"
    },
    {
      "function": "make_darwin_gcv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 66,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def make_darwin_gcv(syscfg_macosx_ver):\n            def gcv(var):\n                if var == darwin_ver_var:\n                    return syscfg_macosx_ver\n                return \"xxx\"\n\n            return gcv\n\n"
    },
    {
      "function": "_clear_cached_macosx_ver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/util.py",
      "line": 68,
      "caller": "test_runtime_libdir_option",
      "source_code": "def _clear_cached_macosx_ver():\n    \"\"\"For testing only. Do not call.\"\"\"\n    global _syscfg_macosx_ver\n    _syscfg_macosx_ver = None\n\n\n"
    },
    {
      "function": "do_darwin_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 74,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"\n\n            # Save\n            old_gcv = sysconfig.get_config_var\n            old_env_macosx_ver = env.get(darwin_ver_var)\n\n            # Setup environment\n            _clear_cached_macosx_ver()\n            sysconfig.get_config_var = make_darwin_gcv(syscfg_macosx_ver)\n            if env_macosx_ver is not None:\n                env[darwin_ver_var] = env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n\n            # Run the test\n            if expected_flag is not None:\n                assert self.cc.rpath_foo() == expected_flag, msg\n            else:\n                with pytest.raises(\n                    DistutilsPlatformError, match=darwin_ver_var + r' mismatch'\n                ):\n                    self.cc.rpath_foo()\n\n            # Restore\n            if old_env_macosx_ver is not None:\n                env[darwin_ver_var] = old_env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n            sysconfig.get_config_var = old_gcv\n            _clear_cached_macosx_ver()\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "consolidate_linker_args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line": 6,
      "caller": "test_runtime_libdir_option",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.\n\n    Retain until at least 2025-04-31. See pypa/distutils#246\n    \"\"\"\n\n    if not all(arg.startswith('-Wl,') for arg in args):\n        return args\n    return '-Wl,' + ','.join(removeprefix(arg, '-Wl,') for arg in args)\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "consolidate_linker_args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line": 6,
      "caller": "test_runtime_libdir_option",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.\n\n    Retain until at least 2025-04-31. See pypa/distutils#246\n    \"\"\"\n\n    if not all(arg.startswith('-Wl,') for arg in args):\n        return args\n    return '-Wl,' + ','.join(removeprefix(arg, '-Wl,') for arg in args)\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "consolidate_linker_args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line": 6,
      "caller": "test_runtime_libdir_option",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.\n\n    Retain until at least 2025-04-31. See pypa/distutils#246\n    \"\"\"\n\n    if not all(arg.startswith('-Wl,') for arg in args):\n        return args\n    return '-Wl,' + ','.join(removeprefix(arg, '-Wl,') for arg in args)\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "consolidate_linker_args",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/compat/__init__.py",
      "line": 6,
      "caller": "test_runtime_libdir_option",
      "source_code": "def consolidate_linker_args(args: list[str]) -> list[str] | str:\n    \"\"\"\n    Ensure the return value is a string for backward compatibility.\n\n    Retain until at least 2025-04-31. See pypa/distutils#246\n    \"\"\"\n\n    if not all(arg.startswith('-Wl,') for arg in args):\n        return args\n    return '-Wl,' + ','.join(removeprefix(arg, '-Wl,') for arg in args)\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "do_darwin_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 74,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"\n\n            # Save\n            old_gcv = sysconfig.get_config_var\n            old_env_macosx_ver = env.get(darwin_ver_var)\n\n            # Setup environment\n            _clear_cached_macosx_ver()\n            sysconfig.get_config_var = make_darwin_gcv(syscfg_macosx_ver)\n            if env_macosx_ver is not None:\n                env[darwin_ver_var] = env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n\n            # Run the test\n            if expected_flag is not None:\n                assert self.cc.rpath_foo() == expected_flag, msg\n            else:\n                with pytest.raises(\n                    DistutilsPlatformError, match=darwin_ver_var + r' mismatch'\n                ):\n                    self.cc.rpath_foo()\n\n            # Restore\n            if old_env_macosx_ver is not None:\n                env[darwin_ver_var] = old_env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n            sysconfig.get_config_var = old_gcv\n            _clear_cached_macosx_ver()\n\n"
    },
    {
      "function": "do_darwin_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 74,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"\n\n            # Save\n            old_gcv = sysconfig.get_config_var\n            old_env_macosx_ver = env.get(darwin_ver_var)\n\n            # Setup environment\n            _clear_cached_macosx_ver()\n            sysconfig.get_config_var = make_darwin_gcv(syscfg_macosx_ver)\n            if env_macosx_ver is not None:\n                env[darwin_ver_var] = env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n\n            # Run the test\n            if expected_flag is not None:\n                assert self.cc.rpath_foo() == expected_flag, msg\n            else:\n                with pytest.raises(\n                    DistutilsPlatformError, match=darwin_ver_var + r' mismatch'\n                ):\n                    self.cc.rpath_foo()\n\n            # Restore\n            if old_env_macosx_ver is not None:\n                env[darwin_ver_var] = old_env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n            sysconfig.get_config_var = old_gcv\n            _clear_cached_macosx_ver()\n\n"
    },
    {
      "function": "do_darwin_test",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 74,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"\n\n            # Save\n            old_gcv = sysconfig.get_config_var\n            old_env_macosx_ver = env.get(darwin_ver_var)\n\n            # Setup environment\n            _clear_cached_macosx_ver()\n            sysconfig.get_config_var = make_darwin_gcv(syscfg_macosx_ver)\n            if env_macosx_ver is not None:\n                env[darwin_ver_var] = env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n\n            # Run the test\n            if expected_flag is not None:\n                assert self.cc.rpath_foo() == expected_flag, msg\n            else:\n                with pytest.raises(\n                    DistutilsPlatformError, match=darwin_ver_var + r' mismatch'\n                ):\n                    self.cc.rpath_foo()\n\n            # Restore\n            if old_env_macosx_ver is not None:\n                env[darwin_ver_var] = old_env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n            sysconfig.get_config_var = old_gcv\n            _clear_cached_macosx_ver()\n\n"
    },
    {
      "function": "env.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_runtime_libdir_option",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "self.cc.rpath_foo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_unixccompiler.py",
      "line": 28,
      "caller": "test_runtime_libdir_option",
      "source_code": "        def rpath_foo(self):\n            return self.runtime_library_dir_option('/foo')\n\n"
    },
    {
      "function": "env.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_runtime_libdir_option",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    }
  ],
  "assertions": [
    "assert self.cc.rpath_foo() == ['+s', '-L/foo']",
    "assert self.cc.rpath_foo() == ['-Wl,+s', '-L/foo']",
    "assert self.cc.rpath_foo() == ['-Wl,+s', '-L/foo']",
    "assert self.cc.rpath_foo() == consolidate_linker_args(['-Wl,--enable-new-dtags', '-Wl,-rpath,/foo'])",
    "assert self.cc.rpath_foo() == consolidate_linker_args(['-Wl,--enable-new-dtags', '-Wl,-rpath,/foo'])",
    "assert self.cc.rpath_foo() == '-Wl,-R/foo'",
    "assert self.cc.rpath_foo() == consolidate_linker_args(['-Wl,--enable-new-dtags', '-Wl,-rpath,/foo'])",
    "assert self.cc.rpath_foo() == consolidate_linker_args(['-Wl,--enable-new-dtags', '-Wl,-rpath,/foo'])",
    "assert self.cc.rpath_foo() == '-Wl,-R/foo'",
    "assert self.cc.rpath_foo() == expected_flag, msg"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_runtime_libdir_option(self):  # noqa: C901\n        # Issue #5900; GitHub Issue #37\n        #\n        # Ensure RUNPATH is added to extension modules with RPATH if\n        # GNU ld is used\n\n        # darwin\n        sys.platform = 'darwin'\n        darwin_ver_var = 'MACOSX_DEPLOYMENT_TARGET'\n        darwin_rpath_flag = '-Wl,-rpath,/foo'\n        darwin_lib_flag = '-L/foo'\n\n        # (macOS version from syscfg, macOS version from env var) -> flag\n        # Version value of None generates two tests: as None and as empty string\n        # Expected flag value of None means an mismatch exception is expected\n        darwin_test_cases = [\n            ((None, None), darwin_lib_flag),\n            ((None, '11'), darwin_rpath_flag),\n            (('10', None), darwin_lib_flag),\n            (('10.3', None), darwin_lib_flag),\n            (('10.3.1', None), darwin_lib_flag),\n            (('10.5', None), darwin_rpath_flag),\n            (('10.5.1', None), darwin_rpath_flag),\n            (('10.3', '10.3'), darwin_lib_flag),\n            (('10.3', '10.5'), darwin_rpath_flag),\n            (('10.5', '10.3'), darwin_lib_flag),\n            (('10.5', '11'), darwin_rpath_flag),\n            (('10.4', '10'), None),\n        ]\n\n        def make_darwin_gcv(syscfg_macosx_ver):\n            def gcv(var):\n                if var == darwin_ver_var:\n                    return syscfg_macosx_ver\n                return \"xxx\"\n\n            return gcv\n\n        def do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag):\n            env = os.environ\n            msg = f\"macOS version = (sysconfig={syscfg_macosx_ver!r}, env={env_macosx_ver!r})\"\n\n            # Save\n            old_gcv = sysconfig.get_config_var\n            old_env_macosx_ver = env.get(darwin_ver_var)\n\n            # Setup environment\n            _clear_cached_macosx_ver()\n            sysconfig.get_config_var = make_darwin_gcv(syscfg_macosx_ver)\n            if env_macosx_ver is not None:\n                env[darwin_ver_var] = env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n\n            # Run the test\n            if expected_flag is not None:\n                assert self.cc.rpath_foo() == expected_flag, msg\n            else:\n                with pytest.raises(\n                    DistutilsPlatformError, match=darwin_ver_var + r' mismatch'\n                ):\n                    self.cc.rpath_foo()\n\n            # Restore\n            if old_env_macosx_ver is not None:\n                env[darwin_ver_var] = old_env_macosx_ver\n            elif darwin_ver_var in env:\n                env.pop(darwin_ver_var)\n            sysconfig.get_config_var = old_gcv\n            _clear_cached_macosx_ver()\n\n        for macosx_vers, expected_flag in darwin_test_cases:\n            syscfg_macosx_ver, env_macosx_ver = macosx_vers\n            do_darwin_test(syscfg_macosx_ver, env_macosx_ver, expected_flag)\n            # Bonus test cases with None interpreted as empty string\n            if syscfg_macosx_ver is None:\n                do_darwin_test(\"\", env_macosx_ver, expected_flag)\n            if env_macosx_ver is None:\n                do_darwin_test(syscfg_macosx_ver, \"\", expected_flag)\n            if syscfg_macosx_ver is None and env_macosx_ver is None:\n                do_darwin_test(\"\", \"\", expected_flag)\n\n        old_gcv = sysconfig.get_config_var\n\n        # hp-ux\n        sys.platform = 'hp-ux'\n\n        def gcv(v):\n            return 'xxx'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == ['+s', '-L/foo']\n\n        def gcv(v):\n            return 'gcc'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == ['-Wl,+s', '-L/foo']\n\n        def gcv(v):\n            return 'g++'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == ['-Wl,+s', '-L/foo']\n\n        sysconfig.get_config_var = old_gcv\n\n        # GCC GNULD\n        sys.platform = 'bar'\n\n        def gcv(v):\n            if v == 'CC':\n                return 'gcc'\n            elif v == 'GNULD':\n                return 'yes'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == consolidate_linker_args([\n            '-Wl,--enable-new-dtags',\n            '-Wl,-rpath,/foo',\n        ])\n\n        def gcv(v):\n            if v == 'CC':\n                return 'gcc -pthread -B /bar'\n            elif v == 'GNULD':\n                return 'yes'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == consolidate_linker_args([\n            '-Wl,--enable-new-dtags',\n            '-Wl,-rpath,/foo',\n        ])\n\n        # GCC non-GNULD\n        sys.platform = 'bar'\n\n        def gcv(v):\n            if v == 'CC':\n                return 'gcc'\n            elif v == 'GNULD':\n                return 'no'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == '-Wl,-R/foo'\n\n        # GCC GNULD with fully qualified configuration prefix\n        # see #7617\n        sys.platform = 'bar'\n\n        def gcv(v):\n            if v == 'CC':\n                return 'x86_64-pc-linux-gnu-gcc-4.4.2'\n            elif v == 'GNULD':\n                return 'yes'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == consolidate_linker_args([\n            '-Wl,--enable-new-dtags',\n            '-Wl,-rpath,/foo',\n        ])\n\n        # non-GCC GNULD\n        sys.platform = 'bar'\n\n        def gcv(v):\n            if v == 'CC':\n                return 'cc'\n            elif v == 'GNULD':\n                return 'yes'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == consolidate_linker_args([\n            '-Wl,--enable-new-dtags',\n            '-Wl,-rpath,/foo',\n        ])\n\n        # non-GCC non-GNULD\n        sys.platform = 'bar'\n\n        def gcv(v):\n            if v == 'CC':\n                return 'cc'\n            elif v == 'GNULD':\n                return 'no'\n\n        sysconfig.get_config_var = gcv\n        assert self.cc.rpath_foo() == '-Wl,-R/foo'"
}