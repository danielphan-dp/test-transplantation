{
  "test_name": "test_sdist_filelist",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
  "static_methods": [
    {
      "name": "self._get_info",
      "source_code": "    def _get_info(self, circumstance):\n        _, _, layout = circumstance.partition(\"-\")\n        files = self.FILES[layout]\n        options = self.OPTIONS[circumstance]\n        return files, options",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 70
    },
    {
      "name": "_populate_project_dir",
      "source_code": "def _populate_project_dir(root, files, options):\n    # NOTE: Currently pypa/build will refuse to build the project if no\n    # `pyproject.toml` or `setup.py` is found. So it is impossible to do\n    # completely \"config-less\" projects.\n    basic = {\n        \"setup.py\": \"import setuptools\\nsetuptools.setup()\",\n        \"README.md\": \"# Example Package\",\n        \"LICENSE\": \"Copyright (c) 2018\",\n    }\n    jaraco.path.build(basic, prefix=root)\n    _write_setupcfg(root, options)\n    paths = (root / f for f in files)\n    for path in paths:\n        path.parent.mkdir(exist_ok=True, parents=True)\n        path.touch()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 571
    },
    {
      "name": "_run_sdist_programatically",
      "source_code": "def _run_sdist_programatically(dist_path, attrs):\n    dist = _get_dist(dist_path, attrs)\n    cmd = sdist(dist)\n    cmd.ensure_finalized()\n    assert cmd.distribution.packages or cmd.distribution.py_modules",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line_number": 638
    },
    {
      "name": "OPTIONS.keys",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 101
    },
    {
      "name": "f.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "any",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.endswith",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._get_info",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 70,
      "caller": "test_sdist_filelist",
      "source_code": "    def _get_info(self, circumstance):\n        _, _, layout = circumstance.partition(\"-\")\n        files = self.FILES[layout]\n        options = self.OPTIONS[circumstance]\n        return files, options\n\n"
    },
    {
      "function": "_populate_project_dir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 571,
      "caller": "test_sdist_filelist",
      "source_code": "def _populate_project_dir(root, files, options):\n    # NOTE: Currently pypa/build will refuse to build the project if no\n    # `pyproject.toml` or `setup.py` is found. So it is impossible to do\n    # completely \"config-less\" projects.\n    basic = {\n        \"setup.py\": \"import setuptools\\nsetuptools.setup()\",\n        \"README.md\": \"# Example Package\",\n        \"LICENSE\": \"Copyright (c) 2018\",\n    }\n    jaraco.path.build(basic, prefix=root)\n    _write_setupcfg(root, options)\n    paths = (root / f for f in files)\n    for path in paths:\n        path.parent.mkdir(exist_ok=True, parents=True)\n        path.touch()\n\n\n"
    },
    {
      "function": "_run_sdist_programatically",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_config_discovery.py",
      "line": 638,
      "caller": "test_sdist_filelist",
      "source_code": "def _run_sdist_programatically(dist_path, attrs):\n    dist = _get_dist(dist_path, attrs)\n    cmd = sdist(dist)\n    cmd.ensure_finalized()\n    assert cmd.distribution.packages or cmd.distribution.py_modules\n\n    with quiet(), Path(dist_path):\n        cmd.run()\n\n    return dist, cmd\n"
    },
    {
      "function": "OPTIONS.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 101,
      "caller": "test_sdist_filelist",
      "source_code": "    def keys(self):\n        \"\"\"Return a new view of the dictionary's keys.\"\"\"\n        return _KeysView(self._impl)\n\n"
    },
    {
      "function": "f.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_sdist_filelist",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "any",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_sdist_filelist",
      "source_code": ""
    },
    {
      "function": "f.endswith",
      "filename": "",
      "line": 0,
      "caller": "test_sdist_filelist",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert any((f.endswith(file) for f in manifest))"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_sdist_filelist(self, tmp_path, circumstance):\n        files, options = self._get_info(circumstance)\n        _populate_project_dir(tmp_path, files, options)\n\n        _, cmd = _run_sdist_programatically(tmp_path, options)\n\n        manifest = [f.replace(os.sep, \"/\") for f in cmd.filelist.files]\n        for file in files:\n            assert any(f.endswith(file) for f in manifest)"
}