{
  "test_name": "test_send_response_after_eof_should_fail",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_response.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "message_in_records",
      "source_code": "def message_in_records():\n    def msg_in_log(records: List[LogRecord], msg: str):\n        error_captured = False\n        for record in records:\n            if msg in record.message:\n                error_captured = True\n                break\n        return error_captured",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line_number": 216
    },
    {
      "name": "message_in_records",
      "source_code": "def message_in_records():\n    def msg_in_log(records: List[LogRecord], msg: str):\n        error_captured = False\n        for record in records:\n            if msg in record.message:\n                error_captured = True\n                break\n        return error_captured",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line_number": 216
    },
    {
      "name": "request.respond",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line_number": 90
    },
    {
      "name": "response.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    },
    {
      "name": "response.eof",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "response.send",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line_number": 40
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": ""
    },
    {
      "function": "app.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": ""
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "message_in_records",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line": 216,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "@pytest.fixture(scope=\"function\")\ndef message_in_records():\n    def msg_in_log(records: List[LogRecord], msg: str):\n        error_captured = False\n        for record in records:\n            if msg in record.message:\n                error_captured = True\n                break\n        return error_captured\n\n    return msg_in_log\n\n\n"
    },
    {
      "function": "message_in_records",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line": 216,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "@pytest.fixture(scope=\"function\")\ndef message_in_records():\n    def msg_in_log(records: List[LogRecord], msg: str):\n        error_captured = False\n        for record in records:\n            if msg in record.message:\n                error_captured = True\n                break\n        return error_captured\n\n    return msg_in_log\n\n\n"
    },
    {
      "function": "request.respond",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/asyncio/server.py",
      "line": 90,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "    def respond(self, status: StatusLike, text: str) -> Response:\n        \"\"\"\n        Create a plain text HTTP response.\n\n        ``process_request`` and ``process_response`` may call this method to\n        return an HTTP response instead of performing the WebSocket opening\n        handshake.\n\n        You can modify the response before returning it, for example by changing\n        HTTP headers.\n\n        Args:\n            status: HTTP status code.\n            text: HTTP response body; it will be encoded to UTF-8.\n\n        Returns:\n            HTTP response to send to the client.\n\n        \"\"\"\n        return self.protocol.reject(status, text)\n\n"
    },
    {
      "function": "response.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    },
    {
      "function": "response.eof",
      "filename": "",
      "line": 0,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": ""
    },
    {
      "function": "response.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/adapter.py",
      "line": 40,
      "caller": "test_send_response_after_eof_should_fail",
      "source_code": "    def send(self, request, cacheable_methods=None, **kw):\n        \"\"\"\n        Send a request. Use the request information to see if it\n        exists in the cache and cache the response if we need to and can.\n        \"\"\"\n        cacheable = cacheable_methods or self.cacheable_methods\n        if request.method in cacheable:\n            try:\n                cached_response = self.controller.cached_request(request)\n            except zlib.error:\n                cached_response = None\n            if cached_response:\n                return self.build_response(request, cached_response, from_cache=True)\n\n            # check for etags and add headers if appropriate\n            request.headers.update(self.controller.conditional_headers(request))\n\n        resp = super(CacheControlAdapter, self).send(request, **kw)\n\n        return resp\n\n"
    }
  ],
  "assertions": [
    "assert 'foo, ' in response.text",
    "assert message_in_records(caplog.records, error_msg1)",
    "assert message_in_records(caplog.records, error_msg2)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_send_response_after_eof_should_fail(\n    app: Sanic,\n    caplog: LogCaptureFixture,\n    message_in_records: Callable[[List[LogRecord], str], bool],\n):\n    @app.get(\"/\")\n    async def handler(request: Request):\n        response = await request.respond()\n        await response.send(\"foo, \")\n        await response.eof()\n        await response.send(\"bar\")\n\n    error_msg1 = (\n        \"The error response will not be sent to the client for the following \"\n        'exception:\"Response stream was ended, no more response '\n        'data is allowed to be sent.\". A previous '\n        \"response has at least partially been sent.\"\n    )\n\n    error_msg2 = (\n        \"Response stream was ended, no more response \"\n        \"data is allowed to be sent.\"\n    )\n\n    with caplog.at_level(ERROR):\n        _, response = app.test_client.get(\"/\")\n        assert \"foo, \" in response.text\n        assert message_in_records(caplog.records, error_msg1)\n        assert message_in_records(caplog.records, error_msg2)"
}