{
  "test_name": "test_server_starts_http3",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_server.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ev.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ev.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http3",
      "source_code": ""
    },
    {
      "function": "Event",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http3",
      "source_code": ""
    },
    {
      "function": "ev.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http3",
      "source_code": ""
    },
    {
      "function": "ev.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_server_starts_http3",
      "source_code": ""
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_server_starts_http3",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_server_starts_http3",
      "source_code": ""
    },
    {
      "function": "app.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_server_starts_http3",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    }
  ],
  "assertions": [
    "assert ev.is_set()",
    "assert ('sanic.root', logging.INFO, 'server: sanic, HTTP/3') in caplog.record_tuples"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_server_starts_http3(app: Sanic, version, caplog):\n    ev = Event()\n\n    @app.after_server_start\n    def shutdown(*_):\n        ev.set()\n        app.stop()\n\n    with caplog.at_level(logging.INFO):\n        app.run(\n            version=version,\n            ssl={\n                \"cert\": localhost_dir / \"fullchain.pem\",\n                \"key\": localhost_dir / \"privkey.pem\",\n            },\n            single_process=True,\n        )\n\n    assert ev.is_set()\n    assert (\n        \"sanic.root\",\n        logging.INFO,\n        \"server: sanic, HTTP/3\",\n    ) in caplog.record_tuples"
}