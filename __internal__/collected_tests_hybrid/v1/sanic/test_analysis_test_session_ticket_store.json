{
  "test_name": "test_session_ticket_store",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_session_ticket_store.py",
  "static_methods": [
    {
      "name": "SessionTicketStore",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_generate_ticket",
      "source_code": "def _generate_ticket(label):\n    return SessionTicket(\n        1,\n        CipherSuite.AES_128_GCM_SHA256,\n        datetime.now(),\n        datetime.now(),\n        label,\n        label.decode(),\n        label,\n        None,\n        [],\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_session_ticket_store.py",
      "line_number": 8
    },
    {
      "name": "store.add",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 214
    },
    {
      "name": "_generate_ticket",
      "source_code": "def _generate_ticket(label):\n    return SessionTicket(\n        1,\n        CipherSuite.AES_128_GCM_SHA256,\n        datetime.now(),\n        datetime.now(),\n        label,\n        label.decode(),\n        label,\n        None,\n        [],\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_session_ticket_store.py",
      "line_number": 8
    },
    {
      "name": "store.add",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 214
    },
    {
      "name": "store.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    },
    {
      "name": "store.pop",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 940
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "SessionTicketStore",
      "filename": "",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "_generate_ticket",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_session_ticket_store.py",
      "line": 8,
      "caller": "test_session_ticket_store",
      "source_code": "def _generate_ticket(label):\n    return SessionTicket(\n        1,\n        CipherSuite.AES_128_GCM_SHA256,\n        datetime.now(),\n        datetime.now(),\n        label,\n        label.decode(),\n        label,\n        None,\n        [],\n    )\n\n\n"
    },
    {
      "function": "store.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 214,
      "caller": "test_session_ticket_store",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "_generate_ticket",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/http3/test_session_ticket_store.py",
      "line": 8,
      "caller": "test_session_ticket_store",
      "source_code": "def _generate_ticket(label):\n    return SessionTicket(\n        1,\n        CipherSuite.AES_128_GCM_SHA256,\n        datetime.now(),\n        datetime.now(),\n        label,\n        label.decode(),\n        label,\n        None,\n        [],\n    )\n\n\n"
    },
    {
      "function": "store.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 214,
      "caller": "test_session_ticket_store",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "store.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_session_ticket_store",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    },
    {
      "function": "store.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 940,
      "caller": "test_session_ticket_store",
      "source_code": "    def pop(self, key, default=None):\n        value = dict.pop(self, key, default)\n        result = self.configurator.convert(value)\n        if value is not result:\n            if type(result) in (ConvertingDict, ConvertingList,\n                                ConvertingTuple):\n                result.parent = self\n                result.key = key\n        return result\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_session_ticket_store",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(store.tickets) == 0",
    "assert len(store.tickets) == 1",
    "assert len(store.tickets) == 2",
    "assert len(store.tickets) == 2",
    "assert len(store.tickets) == 1",
    "assert popped2 is ticket2",
    "assert len(store.tickets) == 0",
    "assert popped1 is ticket1"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_session_ticket_store():\n    store = SessionTicketStore()\n\n    assert len(store.tickets) == 0\n\n    ticket1 = _generate_ticket(b\"foo\")\n    store.add(ticket1)\n\n    assert len(store.tickets) == 1\n\n    ticket2 = _generate_ticket(b\"bar\")\n    store.add(ticket2)\n\n    assert len(store.tickets) == 2\n    assert len(store.tickets) == 2\n\n    popped2 = store.pop(ticket2.ticket)\n\n    assert len(store.tickets) == 1\n    assert popped2 is ticket2\n\n    popped1 = store.pop(ticket1.ticket)\n\n    assert len(store.tickets) == 0\n    assert popped1 is ticket1"
}