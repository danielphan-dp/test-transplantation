{
  "test_name": "test_setup_requires_honors_fetch_params",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TestSetupRequires.create_sdist",
      "source_code": "    def create_sdist():\n        \"\"\"\n        Return an sdist with a setup_requires dependency (of something that\n        doesn't exist)\n        \"\"\"\n        with contexts.tempdir() as dir:\n            dist_path = os.path.join(dir, 'setuptools-test-fetcher-1.0.tar.gz')\n            make_sdist(\n                dist_path,\n                [\n                    (\n                        'setup.py',\n                        DALS(\n                            \"\"\"\n                    import setuptools\n                    setuptools.setup(\n                        name=\"setuptools-test-fetcher\",\n                        version=\"1.0\",\n                        setup_requires = ['does-not-exist'],\n                    )\n                \"\"\"\n                        ),\n                    ),\n                    ('setup.cfg', ''),\n                ],\n            )\n            yield dist_path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 597
    },
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "contexts.tempdir",
      "source_code": "def tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 416
    },
    {
      "name": "TestSetupRequires.create_sdist",
      "source_code": "    def create_sdist():\n        \"\"\"\n        Return an sdist with a setup_requires dependency (of something that\n        doesn't exist)\n        \"\"\"\n        with contexts.tempdir() as dir:\n            dist_path = os.path.join(dir, 'setuptools-test-fetcher-1.0.tar.gz')\n            make_sdist(\n                dist_path,\n                [\n                    (\n                        'setup.py',\n                        DALS(\n                            \"\"\"\n                    import setuptools\n                    setuptools.setup(\n                        name=\"setuptools-test-fetcher\",\n                        version=\"1.0\",\n                        setup_requires = ['does-not-exist'],\n                    )\n                \"\"\"\n                        ),\n                    ),\n                    ('setup.cfg', ''),\n                ],\n            )\n            yield dist_path",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 597
    },
    {
      "name": "contexts.environment",
      "source_code": "def environment(**replacements):\n    \"\"\"\n    In a context, patch the environment with replacements. Pass None values\n    to clear the values.\n    \"\"\"\n    saved = dict((key, os.environ[key]) for key in replacements if key in os.environ)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 25
    },
    {
      "name": "contexts.tempdir",
      "source_code": "def tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 416
    },
    {
      "name": "contexts.environment",
      "source_code": "def environment(**replacements):\n    \"\"\"\n    In a context, patch the environment with replacements. Pass None values\n    to clear the values.\n    \"\"\"\n    saved = dict((key, os.environ[key]) for key in replacements if key in os.environ)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 25
    }
  ],
  "dynamic_methods": [
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": ""
    },
    {
      "function": "TestSetupRequires.create_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 597,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "    @staticmethod\n    @contextlib.contextmanager\n    def create_sdist():\n        \"\"\"\n        Return an sdist with a setup_requires dependency (of something that\n        doesn't exist)\n        \"\"\"\n        with contexts.tempdir() as dir:\n            dist_path = os.path.join(dir, 'setuptools-test-fetcher-1.0.tar.gz')\n            make_sdist(\n                dist_path,\n                [\n                    (\n                        'setup.py',\n                        DALS(\n                            \"\"\"\n                    import setuptools\n                    setuptools.setup(\n                        name=\"setuptools-test-fetcher\",\n                        version=\"1.0\",\n                        setup_requires = ['does-not-exist'],\n                    )\n                \"\"\"\n                        ),\n                    ),\n                    ('setup.cfg', ''),\n                ],\n            )\n            yield dist_path\n\n"
    },
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "contexts.tempdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 416,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)\n\n"
    },
    {
      "function": "TestSetupRequires.create_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 597,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "    @staticmethod\n    @contextlib.contextmanager\n    def create_sdist():\n        \"\"\"\n        Return an sdist with a setup_requires dependency (of something that\n        doesn't exist)\n        \"\"\"\n        with contexts.tempdir() as dir:\n            dist_path = os.path.join(dir, 'setuptools-test-fetcher-1.0.tar.gz')\n            make_sdist(\n                dist_path,\n                [\n                    (\n                        'setup.py',\n                        DALS(\n                            \"\"\"\n                    import setuptools\n                    setuptools.setup(\n                        name=\"setuptools-test-fetcher\",\n                        version=\"1.0\",\n                        setup_requires = ['does-not-exist'],\n                    )\n                \"\"\"\n                        ),\n                    ),\n                    ('setup.cfg', ''),\n                ],\n            )\n            yield dist_path\n\n"
    },
    {
      "function": "contexts.environment",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 25,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef environment(**replacements):\n    \"\"\"\n    In a context, patch the environment with replacements. Pass None values\n    to clear the values.\n    \"\"\"\n    saved = dict((key, os.environ[key]) for key in replacements if key in os.environ)\n\n    # remove values that are null\n    remove = (key for (key, value) in replacements.items() if value is None)\n    for key in list(remove):\n        os.environ.pop(key, None)\n        replacements.pop(key)\n\n    os.environ.update(replacements)\n\n    try:\n        yield saved\n    finally:\n        for key in replacements:\n            os.environ.pop(key, None)\n        os.environ.update(saved)\n\n\n"
    },
    {
      "function": "contexts.tempdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 416,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)\n\n"
    },
    {
      "function": "contexts.environment",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 25,
      "caller": "test_setup_requires_honors_fetch_params",
      "source_code": "@contextlib.contextmanager\ndef environment(**replacements):\n    \"\"\"\n    In a context, patch the environment with replacements. Pass None values\n    to clear the values.\n    \"\"\"\n    saved = dict((key, os.environ[key]) for key in replacements if key in os.environ)\n\n    # remove values that are null\n    remove = (key for (key, value) in replacements.items() if value is None)\n    for key in list(remove):\n        os.environ.pop(key, None)\n        replacements.pop(key)\n\n    os.environ.update(replacements)\n\n    try:\n        yield saved\n    finally:\n        for key in replacements:\n            os.environ.pop(key, None)\n        os.environ.update(saved)\n\n\n"
    }
  ],
  "assertions": [
    "assert [r.path for r in mock_index.requests] == ['/does-not-exist/']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_requires_honors_fetch_params(self, mock_index, monkeypatch):\n        \"\"\"\n        When easy_install installs a source distribution which specifies\n        setup_requires, it should honor the fetch parameters (such as\n        index-url, and find-links).\n        \"\"\"\n        monkeypatch.setenv('PIP_RETRIES', '0')\n        monkeypatch.setenv('PIP_TIMEOUT', '0')\n        monkeypatch.setenv('PIP_NO_INDEX', 'false')\n        with contexts.quiet():\n            # create an sdist that has a build-time dependency.\n            with TestSetupRequires.create_sdist() as dist_file:\n                with contexts.tempdir() as temp_install_dir:\n                    with contexts.environment(PYTHONPATH=temp_install_dir):\n                        cmd = [\n                            sys.executable,\n                            '-c',\n                            '__import__(\"setuptools\").setup()',\n                            'easy_install',\n                            '--index-url',\n                            mock_index.url,\n                            '--exclude-scripts',\n                            '--install-dir',\n                            temp_install_dir,\n                            dist_file,\n                        ]\n                        subprocess.Popen(cmd).wait()\n        # there should have been one requests to the server\n        assert [r.path for r in mock_index.requests] == ['/does-not-exist/']"
}