{
  "test_name": "test_setup_requires_override_nspkg",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "contexts.save_pkg_resources_state",
      "source_code": "def save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 189
    },
    {
      "name": "contexts.tempdir",
      "source_code": "def tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 416
    },
    {
      "name": "contexts.save_pkg_resources_state",
      "source_code": "def save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 189
    },
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "contexts.tempdir",
      "source_code": "def tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 416
    },
    {
      "name": "make_nspkg_sdist",
      "source_code": "def make_nspkg_sdist(dist_path, distname, version):\n    \"\"\"\n    Make an sdist tarball with distname and version which also contains one\n    package with the same name as distname.  The top-level package is\n    designated a namespace package).\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1118
    },
    {
      "name": "PRDistribution",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "working_set.add",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 214
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "create_setup_requires_package",
      "source_code": "def create_setup_requires_package(\n    path,\n    distname='foobar',\n    version='0.1',\n    make_package=make_trivial_sdist,\n    setup_py_template=None,\n    setup_attrs=None,\n    use_setup_cfg=(),",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1194
    },
    {
      "name": "stdout.readlines",
      "source_code": "    def readlines(self, __hint: int = 1) -> List[str]:\n        return []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line_number": 35
    },
    {
      "name": "tf.extractall",
      "source_code": "    def extractall(self, path=\".\", members=None, *, numeric_owner=False,\n                   filter=None):\n        \"\"\"Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. 'path' specifies a different directory\n           to extract to. 'members' is optional and must be a subset of the\n           list returned by getmembers(). If 'numeric_owner' is True, only\n           the numbers for user/group names are used and not the names.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line_number": 2273
    },
    {
      "name": "contexts.quiet",
      "source_code": "def quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line_number": 49
    },
    {
      "name": "stdout.getvalue",
      "source_code": "        def getvalue(self):\n            return self.builder.build()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line_number": 66
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "lines.strip",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line_number": 2421
    },
    {
      "name": "run_setup",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 257
    },
    {
      "name": "self.fail",
      "source_code": "    def fail(self, code: int, reason: str = \"\") -> None:\n        \"\"\"\n        `Fail the WebSocket connection`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/protocol.py",
      "line_number": 429
    }
  ],
  "dynamic_methods": [
    {
      "function": "contexts.save_pkg_resources_state",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 189,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)\n\n\n"
    },
    {
      "function": "contexts.tempdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 416,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)\n\n"
    },
    {
      "function": "contexts.save_pkg_resources_state",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 189,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)\n\n\n"
    },
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "contexts.tempdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 416,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef tempdir():\n    td = tempfile.mkdtemp()\n    try:\n        yield td\n    finally:\n        shutil.rmtree(td)\n\n"
    },
    {
      "function": "make_nspkg_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1118,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "def make_nspkg_sdist(dist_path, distname, version):\n    \"\"\"\n    Make an sdist tarball with distname and version which also contains one\n    package with the same name as distname.  The top-level package is\n    designated a namespace package).\n    \"\"\"\n\n    parts = distname.split('.')\n    nspackage = parts[0]\n\n    packages = ['.'.join(parts[:idx]) for idx in range(1, len(parts) + 1)]\n\n    setup_py = DALS(\n        \"\"\"\\\n        import setuptools\n        setuptools.setup(\n            name=%r,\n            version=%r,\n            packages=%r,\n            namespace_packages=[%r]\n        )\n    \"\"\"\n        % (distname, version, packages, nspackage)\n    )\n\n    init = \"__import__('pkg_resources').declare_namespace(__name__)\"\n\n    files = [('setup.py', setup_py), (os.path.join(nspackage, '__init__.py'), init)]\n    for package in packages[1:]:\n        filename = os.path.join(*(package.split('.') + ['__init__.py']))\n        files.append((filename, ''))\n\n    make_sdist(dist_path, files)\n\n\n"
    },
    {
      "function": "PRDistribution",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": ""
    },
    {
      "function": "working_set.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 214,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "    def add(self, key, value):\n        identity = self._title(key)\n        self._impl._items.append((identity, self._key(key), value))\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "create_setup_requires_package",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1194,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "def create_setup_requires_package(\n    path,\n    distname='foobar',\n    version='0.1',\n    make_package=make_trivial_sdist,\n    setup_py_template=None,\n    setup_attrs=None,\n    use_setup_cfg=(),\n"
    },
    {
      "function": "stdout.readlines",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_null_file.py",
      "line": 35,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "    def readlines(self, __hint: int = 1) -> List[str]:\n        return []\n\n"
    },
    {
      "function": "tf.extractall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line": 2273,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "    def extractall(self, path=\".\", members=None, *, numeric_owner=False,\n                   filter=None):\n        \"\"\"Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. 'path' specifies a different directory\n           to extract to. 'members' is optional and must be a subset of the\n           list returned by getmembers(). If 'numeric_owner' is True, only\n           the numbers for user/group names are used and not the names.\n\n           The 'filter' function will be called on each member just\n           before extraction.\n           It can return a changed TarInfo or None to skip the member.\n           String names of common filters are accepted.\n        \"\"\"\n        directories = []\n\n        filter_function = self._get_filter_function(filter)\n        if members is None:\n            members = self\n\n        for member in members:\n            tarinfo = self._get_extract_tarinfo(member, filter_function, path)\n            if tarinfo is None:\n                continue\n            if tarinfo.isdir():\n                # For directories, delay setting attributes until later,\n                # since permissions can interfere with extraction and\n                # extracting contents can reset mtime.\n                directories.append(tarinfo)\n            self._extract_one(tarinfo, path, set_attrs=not tarinfo.isdir(),\n                              numeric_owner=numeric_owner)\n\n        # Reverse sort directories.\n        directories.sort(key=lambda a: a.name, reverse=True)\n\n        # Set correct owner, mtime and filemode on directories.\n        for tarinfo in directories:\n            dirpath = os.path.join(path, tarinfo.name)\n            try:\n                self.chown(tarinfo, dirpath, numeric_owner=numeric_owner)\n                self.utime(tarinfo, dirpath)\n                self.chmod(tarinfo, dirpath)\n            except ExtractError as e:\n                self._handle_nonfatal_error(e)\n\n"
    },
    {
      "function": "contexts.quiet",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/contexts.py",
      "line": 49,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "@contextlib.contextmanager\ndef quiet():\n    \"\"\"\n    Redirect stdout/stderr to StringIO objects to prevent console output from\n    distutils commands.\n    \"\"\"\n\n    old_stdout = sys.stdout\n    old_stderr = sys.stderr\n    new_stdout = sys.stdout = io.StringIO()\n    new_stderr = sys.stderr = io.StringIO()\n    try:\n        yield new_stdout, new_stderr\n    finally:\n        new_stdout.seek(0)\n        new_stderr.seek(0)\n        sys.stdout = old_stdout\n        sys.stderr = old_stderr\n\n\n"
    },
    {
      "function": "stdout.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/msgpack/fallback.py",
      "line": 66,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "        def getvalue(self):\n            return self.builder.build()\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": ""
    },
    {
      "function": "lines.strip",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/more_itertools/more.py",
      "line": 2421,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "def strip(iterable, pred):\n    \"\"\"Yield the items from *iterable*, but strip any from the\n    beginning and end for which *pred* returns ``True``.\n\n    For example, to remove a set of items from both ends of an iterable:\n\n        >>> iterable = (None, False, None, 1, 2, None, 3, False, None)\n        >>> pred = lambda x: x in {None, False, ''}\n        >>> list(strip(iterable, pred))\n        [1, 2, None, 3]\n\n    This function is analogous to :func:`str.strip`.\n\n    \"\"\"\n    return rstrip(lstrip(iterable, pred), pred)\n\n\n"
    },
    {
      "function": "run_setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 257,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())\n\n            with DirectorySandbox(setup_dir):\n                ns = dict(__file__=setup_script, __name__='__main__')\n                _execfile(setup_script, ns)\n        except SystemExit as v:\n            if v.args and v.args[0]:\n                raise\n            # Normal exit, just return\n\n\n"
    },
    {
      "function": "self.fail",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/websockets/protocol.py",
      "line": 429,
      "caller": "test_setup_requires_override_nspkg",
      "source_code": "    def fail(self, code: int, reason: str = \"\") -> None:\n        \"\"\"\n        `Fail the WebSocket connection`_.\n\n        .. _Fail the WebSocket connection:\n            https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.7\n\n        Parameters:\n            code: close code\n            reason: close reason\n\n        Raises:\n            ProtocolError: If the code isn't valid.\n        \"\"\"\n        # 7.1.7. Fail the WebSocket Connection\n\n        # Send a close frame when the state is OPEN (a close frame was already\n        # sent if it's CLOSING), except when failing the connection because\n        # of an error reading from or writing to the network.\n        if self.state is OPEN:\n            if code != CloseCode.ABNORMAL_CLOSURE:\n                close = Close(code, reason)\n                data = close.serialize()\n                self.send_frame(Frame(OP_CLOSE, data))\n                self.close_sent = close\n                # If recv_messages() raised an exception upon receiving a close\n                # frame but before echoing it, then close_rcvd is not None even\n                # though the state is OPEN. This happens when the connection is\n                # closed while receiving a fragmented message.\n                if self.close_rcvd is not None:\n                    self.close_rcvd_then_sent = True\n                self.state = CLOSING\n\n        # When failing the connection, a server closes the TCP connection\n        # without waiting for the client to complete the handshake, while a\n        # client waits for the server to close the TCP connection, possibly\n        # after sending a close frame that the client will ignore.\n        if self.side is SERVER and not self.eof_sent:\n            self.send_eof()\n\n        # 7.1.7. Fail the WebSocket Connection \"An endpoint MUST NOT continue\n        # to attempt to process data(including a responding Close frame) from\n        # the remote endpoint after being instructed to _Fail the WebSocket\n        # Connection_.\"\n        self.parser = self.discard()\n        next(self.parser)  # start coroutine\n\n"
    }
  ],
  "assertions": [
    "assert 'FAIL' not in stdout.getvalue()",
    "assert len(lines) > 0",
    "assert lines[-1].strip() == 'test_pkg'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_requires_override_nspkg(self, use_setup_cfg):\n        \"\"\"\n        Like ``test_setup_requires_overrides_version_conflict`` but where the\n        ``setup_requires`` package is part of a namespace package that has\n        *already* been imported.\n        \"\"\"\n\n        with contexts.save_pkg_resources_state():\n            with contexts.tempdir() as temp_dir:\n                foobar_1_archive = os.path.join(temp_dir, 'foo.bar-0.1.tar.gz')\n                make_nspkg_sdist(foobar_1_archive, 'foo.bar', '0.1')\n                # Now actually go ahead an extract to the temp dir and add the\n                # extracted path to sys.path so foo.bar v0.1 is importable\n                foobar_1_dir = os.path.join(temp_dir, 'foo.bar-0.1')\n                os.mkdir(foobar_1_dir)\n                with tarfile.open(foobar_1_archive) as tf:\n                    tf.extraction_filter = lambda member, path: member\n                    tf.extractall(foobar_1_dir)\n                sys.path.insert(1, foobar_1_dir)\n\n                dist = PRDistribution(\n                    foobar_1_dir, project_name='foo.bar', version='0.1'\n                )\n                working_set.add(dist)\n\n                template = DALS(\n                    \"\"\"\\\n                    import foo  # Even with foo imported first the\n                                # setup_requires package should override\n                    import setuptools\n                    setuptools.setup(**%r)\n\n                    if not (hasattr(foo, '__path__') and\n                            len(foo.__path__) == 2):\n                        print('FAIL')\n\n                    if 'foo.bar-0.2' not in foo.__path__[0]:\n                        print('FAIL')\n                \"\"\"\n                )\n\n                test_pkg = create_setup_requires_package(\n                    temp_dir,\n                    'foo.bar',\n                    '0.2',\n                    make_nspkg_sdist,\n                    template,\n                    use_setup_cfg=use_setup_cfg,\n                )\n\n                test_setup_py = os.path.join(test_pkg, 'setup.py')\n\n                with contexts.quiet() as (stdout, _stderr):\n                    try:\n                        # Don't even need to install the package, just\n                        # running the setup.py at all is sufficient\n                        run_setup(test_setup_py, ['--name'])\n                    except pkg_resources.VersionConflict:\n                        self.fail(\n                            'Installing setup.py requirements caused a VersionConflict'\n                        )\n\n                assert 'FAIL' not in stdout.getvalue()\n                lines = stdout.readlines()\n                assert len(lines) > 0\n                assert lines[-1].strip() == 'test_pkg'"
}