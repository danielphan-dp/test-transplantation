{
  "test_name": "test_setup_requires_with_python_requires",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
  "static_methods": [
    {
      "name": "contexts.save_pkg_resources_state",
      "source_code": "def save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 189
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "path_to_url",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line_number": 16
    },
    {
      "name": "make_python_requires_sdist",
      "source_code": "def make_python_requires_sdist(dist_path, distname, version, python_requires):\n    make_sdist(\n        dist_path,\n        [\n            (\n                'setup.py',\n                DALS(\n                    \"\"\"\\\n                import setuptools\n                setuptools.setup(\n                  name={name!r},\n                  version={version!r},\n                  python_requires={python_requires!r},\n                )\n                \"\"\"\n                ).format(\n                    name=distname, version=version, python_requires=python_requires\n                ),\n            ),\n            ('setup.cfg', ''),\n        ],\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1153
    },
    {
      "name": "path_to_url",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line_number": 16
    },
    {
      "name": "make_python_requires_sdist",
      "source_code": "def make_python_requires_sdist(dist_path, distname, version, python_requires):\n    make_sdist(\n        dist_path,\n        [\n            (\n                'setup.py',\n                DALS(\n                    \"\"\"\\\n                import setuptools\n                setuptools.setup(\n                  name={name!r},\n                  version={version!r},\n                  python_requires={python_requires!r},\n                )\n                \"\"\"\n                ).format(\n                    name=distname, version=version, python_requires=python_requires\n                ),\n            ),\n            ('setup.cfg', ''),\n        ],\n    )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1153
    },
    {
      "name": "index.write_text",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line_number": 397
    },
    {
      "name": "path_to_url",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line_number": 16
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "DALS.format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "contexts.save_pkg_resources_state",
      "source_code": "def save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 189
    },
    {
      "name": "create_setup_requires_package",
      "source_code": "def create_setup_requires_package(\n    path,\n    distname='foobar',\n    version='0.1',\n    make_package=make_trivial_sdist,\n    setup_py_template=None,\n    setup_attrs=None,\n    use_setup_cfg=(),",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line_number": 1194
    },
    {
      "name": "run_setup",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line_number": 257
    },
    {
      "name": "map",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "pkg_resources.find_distributions",
      "source_code": "def find_distributions(path_item, only=False):\n    \"\"\"Yield distributions accessible via `path_item`\"\"\"\n    importer = get_importer(path_item)\n    finder = _find_adapter(_distribution_finders, importer)\n    return finder(importer, path_item, only)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line_number": 1967
    },
    {
      "name": "DALS",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line_number": 4
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "contexts.save_pkg_resources_state",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 189,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "@contextlib.contextmanager\ndef save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)\n\n\n"
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "path_to_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line": 16,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url\n\n\n"
    },
    {
      "function": "make_python_requires_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1153,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def make_python_requires_sdist(dist_path, distname, version, python_requires):\n    make_sdist(\n        dist_path,\n        [\n            (\n                'setup.py',\n                DALS(\n                    \"\"\"\\\n                import setuptools\n                setuptools.setup(\n                  name={name!r},\n                  version={version!r},\n                  python_requires={python_requires!r},\n                )\n                \"\"\"\n                ).format(\n                    name=distname, version=version, python_requires=python_requires\n                ),\n            ),\n            ('setup.cfg', ''),\n        ],\n    )\n\n\n"
    },
    {
      "function": "path_to_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line": 16,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url\n\n\n"
    },
    {
      "function": "make_python_requires_sdist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1153,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def make_python_requires_sdist(dist_path, distname, version, python_requires):\n    make_sdist(\n        dist_path,\n        [\n            (\n                'setup.py',\n                DALS(\n                    \"\"\"\\\n                import setuptools\n                setuptools.setup(\n                  name={name!r},\n                  version={version!r},\n                  python_requires={python_requires!r},\n                )\n                \"\"\"\n                ).format(\n                    name=distname, version=version, python_requires=python_requires\n                ),\n            ),\n            ('setup.cfg', ''),\n        ],\n    )\n\n\n"
    },
    {
      "function": "index.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/_win32_console.py",
      "line": 397,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "    def write_text(self, text: str) -> None:\n        \"\"\"Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        \"\"\"\n        self.write(text)\n        self.flush()\n\n"
    },
    {
      "function": "path_to_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_internal/utils/urls.py",
      "line": 16,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def path_to_url(path: str) -> str:\n    \"\"\"\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    \"\"\"\n    path = os.path.normpath(os.path.abspath(path))\n    url = urllib.parse.urljoin(\"file:\", urllib.request.pathname2url(path))\n    return url\n\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "DALS.format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "contexts.save_pkg_resources_state",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 189,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "@contextlib.contextmanager\ndef save_pkg_resources_state():\n    saved = pkg_resources.__getstate__()\n    try:\n        yield saved\n    finally:\n        pkg_resources.__setstate__(saved)\n\n\n"
    },
    {
      "function": "create_setup_requires_package",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_easy_install.py",
      "line": 1194,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def create_setup_requires_package(\n    path,\n    distname='foobar',\n    version='0.1',\n    make_package=make_trivial_sdist,\n    setup_py_template=None,\n    setup_attrs=None,\n    use_setup_cfg=(),\n"
    },
    {
      "function": "run_setup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/sandbox.py",
      "line": 257,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def run_setup(setup_script, args):\n    \"\"\"Run a distutils setup script, sandboxed in its directory\"\"\"\n    setup_dir = os.path.abspath(os.path.dirname(setup_script))\n    with setup_context(setup_dir):\n        try:\n            sys.argv[:] = [setup_script] + list(args)\n            sys.path.insert(0, setup_dir)\n            # reset to include setup dir, w/clean callback list\n            working_set.__init__()\n            working_set.callbacks.append(lambda dist: dist.activate())\n\n            with DirectorySandbox(setup_dir):\n                ns = dict(__file__=setup_script, __name__='__main__')\n                _execfile(setup_script, ns)\n        except SystemExit as v:\n            if v.args and v.args[0]:\n                raise\n            # Normal exit, just return\n\n\n"
    },
    {
      "function": "map",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    },
    {
      "function": "pkg_resources.find_distributions",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/pkg_resources/__init__.py",
      "line": 1967,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def find_distributions(path_item, only=False):\n    \"\"\"Yield distributions accessible via `path_item`\"\"\"\n    importer = get_importer(path_item)\n    finder = _find_adapter(_distribution_finders, importer)\n    return finder(importer, path_item, only)\n\n\n"
    },
    {
      "function": "DALS",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/textwrap.py",
      "line": 4,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": "def DALS(s):\n    \"dedent and left-strip\"\n    return textwrap.dedent(s).lstrip()\n"
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_setup_requires_with_python_requires",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert eggs == ['dep 1.0']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_setup_requires_with_python_requires(self, monkeypatch, tmpdir):\n        \"\"\"Check `python_requires` is honored.\"\"\"\n        monkeypatch.setenv('PIP_RETRIES', '0')\n        monkeypatch.setenv('PIP_TIMEOUT', '0')\n        monkeypatch.setenv('PIP_NO_INDEX', '1')\n        monkeypatch.setenv('PIP_VERBOSE', '1')\n        dep_1_0_sdist = 'dep-1.0.tar.gz'\n        dep_1_0_url = path_to_url(str(tmpdir / dep_1_0_sdist))\n        dep_1_0_python_requires = '>=2.7'\n        make_python_requires_sdist(\n            str(tmpdir / dep_1_0_sdist), 'dep', '1.0', dep_1_0_python_requires\n        )\n        dep_2_0_sdist = 'dep-2.0.tar.gz'\n        dep_2_0_url = path_to_url(str(tmpdir / dep_2_0_sdist))\n        dep_2_0_python_requires = (\n            f'!={sys.version_info.major}.{sys.version_info.minor}.*'\n        )\n        make_python_requires_sdist(\n            str(tmpdir / dep_2_0_sdist), 'dep', '2.0', dep_2_0_python_requires\n        )\n        index = tmpdir / 'index.html'\n        index.write_text(\n            DALS(\n                \"\"\"\n            <!DOCTYPE html>\n            <html><head><title>Links for dep</title></head>\n            <body>\n                <h1>Links for dep</h1>\n                <a href=\"{dep_1_0_url}\"\\\ndata-requires-python=\"{dep_1_0_python_requires}\">{dep_1_0_sdist}</a><br/>\n                <a href=\"{dep_2_0_url}\"\\\ndata-requires-python=\"{dep_2_0_python_requires}\">{dep_2_0_sdist}</a><br/>\n            </body>\n            </html>\n            \"\"\"\n            ).format(\n                dep_1_0_url=dep_1_0_url,\n                dep_1_0_sdist=dep_1_0_sdist,\n                dep_1_0_python_requires=dep_1_0_python_requires,\n                dep_2_0_url=dep_2_0_url,\n                dep_2_0_sdist=dep_2_0_sdist,\n                dep_2_0_python_requires=dep_2_0_python_requires,\n            ),\n            'utf-8',\n        )\n        index_url = path_to_url(str(index))\n        with contexts.save_pkg_resources_state():\n            test_pkg = create_setup_requires_package(\n                str(tmpdir),\n                'python-xlib',\n                '0.19',  # Ignored (overridden by setup_attrs).\n                setup_attrs=dict(setup_requires='dep', dependency_links=[index_url]),\n            )\n            test_setup_py = os.path.join(test_pkg, 'setup.py')\n            run_setup(test_setup_py, ['--version'])\n        eggs = list(\n            map(str, pkg_resources.find_distributions(os.path.join(test_pkg, '.eggs')))\n        )\n        assert eggs == ['dep 1.0']"
}