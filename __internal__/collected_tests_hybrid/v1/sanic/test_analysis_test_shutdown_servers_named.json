{
  "test_name": "test_shutdown_servers_named",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/worker/test_manager.py",
  "static_methods": [
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WorkerManager",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "manager.shutdown_server",
      "source_code": "    def shutdown_server(self, name: Optional[str] = None) -> None:\n        \"\"\"Shutdown a server process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line_number": 163
    },
    {
      "name": "kill.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "manager.shutdown_server",
      "source_code": "    def shutdown_server(self, name: Optional[str] = None) -> None:\n        \"\"\"Shutdown a server process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line_number": 163
    }
  ],
  "dynamic_methods": [
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_shutdown_servers_named",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "WorkerManager",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_shutdown_servers_named",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "manager.shutdown_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line": 163,
      "caller": "test_shutdown_servers_named",
      "source_code": "    def shutdown_server(self, name: Optional[str] = None) -> None:\n        \"\"\"Shutdown a server process.\n\n        Args:\n            name (Optional[str], optional): The name of the server process to shutdown.\n                If `None` then a random server will be chosen. Defaults to `None`.\n        \"\"\"  # noqa: E501\n        if not name:\n            servers = [\n                worker\n                for worker in self.transient.values()\n                if worker.name.startswith(WorkerProcess.SERVER_LABEL)\n            ]\n            if not servers:\n                error_logger.error(\n                    \"Server shutdown failed because a server was not found.\"\n                )\n                return\n            worker = choice(servers)  # nosec B311\n        else:\n            worker = self.transient[name]\n\n        for process in worker.processes:\n            process.terminate()\n\n        del self.transient[worker.name]\n\n"
    },
    {
      "function": "kill.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_shutdown_servers_named",
      "source_code": ""
    },
    {
      "function": "manager.shutdown_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line": 163,
      "caller": "test_shutdown_servers_named",
      "source_code": "    def shutdown_server(self, name: Optional[str] = None) -> None:\n        \"\"\"Shutdown a server process.\n\n        Args:\n            name (Optional[str], optional): The name of the server process to shutdown.\n                If `None` then a random server will be chosen. Defaults to `None`.\n        \"\"\"  # noqa: E501\n        if not name:\n            servers = [\n                worker\n                for worker in self.transient.values()\n                if worker.name.startswith(WorkerProcess.SERVER_LABEL)\n            ]\n            if not servers:\n                error_logger.error(\n                    \"Server shutdown failed because a server was not found.\"\n                )\n                return\n            worker = choice(servers)  # nosec B311\n        else:\n            worker = self.transient[name]\n\n        for process in worker.processes:\n            process.terminate()\n\n        del self.transient[worker.name]\n\n"
    }
  ],
  "assertions": [],
  "mocks": [
    "patch('os.kill')"
  ],
  "success": true,
  "test_source_code": "def test_shutdown_servers_named():\n    p1 = Mock()\n    p1.pid = 1234\n    p2 = Mock()\n    p2.pid = 6543\n    context = Mock()\n    context.Process.side_effect = [p1, p2]\n    pub = Mock()\n    manager = WorkerManager(2, fake_serve, {}, context, (pub, Mock()), {})\n\n    with patch(\"os.kill\") as kill:\n        with pytest.raises(KeyError):\n            manager.shutdown_server(\"foo\")\n        manager.shutdown_server(\"Server-1\")\n\n        kill.assert_called_once_with(6543, SIGINT)"
}