{
  "test_name": "test_ssl_in_multiprocess_mode_password",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_tls.py",
  "static_methods": [
    {
      "name": "use_context",
      "source_code": "def use_context(method: StartMethod):\n    from sanic import Sanic",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line_number": 65
    },
    {
      "name": "Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "event.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.shared_ctx.event.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "event.is_set",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "use_context",
      "source_code": "def use_context(method: StartMethod):\n    from sanic import Sanic",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line_number": 65
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.run",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line_number": 28
    }
  ],
  "dynamic_methods": [
    {
      "function": "use_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line": 65,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": "@contextmanager\ndef use_context(method: StartMethod):\n    from sanic import Sanic\n\n    orig = Sanic.start_method\n    Sanic.start_method = method\n    yield\n    Sanic.start_method = orig\n\n\n"
    },
    {
      "function": "Event",
      "filename": "",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "event.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "app.shared_ctx.event.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "event.is_set",
      "filename": "",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "use_context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/compat.py",
      "line": 65,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": "@contextmanager\ndef use_context(method: StartMethod):\n    from sanic import Sanic\n\n    orig = Sanic.start_method\n    Sanic.start_method = method\n    yield\n    Sanic.start_method = orig\n\n\n"
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": ""
    },
    {
      "function": "app.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/live.py",
      "line": 28,
      "caller": "test_ssl_in_multiprocess_mode_password",
      "source_code": "    def run(self) -> None:\n        while not self.done.wait(1 / self.refresh_per_second):\n            with self.live._lock:\n                if not self.done.is_set():\n                    self.live.refresh()\n\n\n"
    }
  ],
  "assertions": [
    "assert not event.is_set()",
    "assert event.is_set()",
    "assert ('sanic.root', logging.INFO, \"Goin' Fast @ https://127.0.0.1:8000\") in caplog.record_tuples"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ssl_in_multiprocess_mode_password(\n    app: Sanic, caplog: pytest.LogCaptureFixture\n):\n    event = Event()\n\n    @app.main_process_start\n    async def main_start(app: Sanic):\n        app.shared_ctx.event = event\n\n    @app.after_server_start\n    async def shutdown(app):\n        app.shared_ctx.event.set()\n        app.stop()\n\n    assert not event.is_set()\n    with use_context(\"fork\"):\n        with caplog.at_level(logging.INFO):\n            app.run(ssl=password_dict)\n    assert event.is_set()\n\n    assert (\n        \"sanic.root\",\n        logging.INFO,\n        \"Goin' Fast @ https://127.0.0.1:8000\",\n    ) in caplog.record_tuples"
}