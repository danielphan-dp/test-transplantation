{
  "test_name": "test_stop_trigger_terminate",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "app.multiplexer.terminate.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.multiplexer.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "Sanic._app_registry.clear",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 271
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "app.multiplexer.terminate.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.multiplexer.reset_mock",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line_number": 27
    },
    {
      "name": "Sanic._app_registry.clear",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 271
    },
    {
      "name": "app.stop",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line_number": 1308
    },
    {
      "name": "app.multiplexer.terminate.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "app.multiplexer.terminate.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    },
    {
      "function": "app.multiplexer.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "Sanic._app_registry.clear",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 271,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "app.multiplexer.terminate.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    },
    {
      "function": "app.multiplexer.reset_mock",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/asyncmock.py",
      "line": 27,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def reset_mock(self, *args, **kwargs):\n        super().reset_mock(*args, **kwargs)\n        self.await_count = 0\n\n"
    },
    {
      "function": "Sanic._app_registry.clear",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 271,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def clear(self):\n        \"\"\"Remove all items from MultiDict.\"\"\"\n        self._impl._items.clear()\n        self._impl.incr_version()\n\n"
    },
    {
      "function": "app.stop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/distlib/util.py",
      "line": 1308,
      "caller": "test_stop_trigger_terminate",
      "source_code": "    def stop(self):\n        if self.max is not None:\n            self.update(self.max)\n        self.done = True\n\n"
    },
    {
      "function": "app.multiplexer.terminate.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_stop_trigger_terminate",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(Sanic._app_registry) == 1",
    "assert len(Sanic._app_registry) == 0"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_stop_trigger_terminate(app: Sanic):\n    app.multiplexer = Mock()\n\n    app.stop()\n\n    app.multiplexer.terminate.assert_called_once()\n    app.multiplexer.reset_mock()\n    assert len(Sanic._app_registry) == 1\n    Sanic._app_registry.clear()\n\n    app.stop(terminate=True)\n\n    app.multiplexer.terminate.assert_called_once()\n    app.multiplexer.reset_mock()\n    assert len(Sanic._app_registry) == 0\n    Sanic._app_registry.clear()\n\n    app.stop(unregister=False)\n    app.multiplexer.terminate.assert_called_once()"
}