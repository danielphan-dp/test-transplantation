{
  "test_name": "test_streaming_body_requests",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_pipelining.py",
  "static_methods": [
    {
      "name": "app.post",
      "source_code": "    def post(self) -> None:\n        return None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line_number": 144
    },
    {
      "name": "ReusableClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> None:\n        return None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line_number": 144
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> None:\n        return None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line_number": 144
    },
    {
      "name": "part.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "id",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "value.encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    },
    {
      "name": "stream",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line_number": 601
    },
    {
      "name": "stream",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line_number": 601
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line": 144,
      "caller": "test_streaming_body_requests",
      "source_code": "    @property\n    def post(self) -> None:\n        return None\n\n"
    },
    {
      "function": "ReusableClient",
      "filename": "",
      "line": 0,
      "caller": "test_streaming_body_requests",
      "source_code": ""
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line": 144,
      "caller": "test_streaming_body_requests",
      "source_code": "    @property\n    def post(self) -> None:\n        return None\n\n"
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/packaging/version.py",
      "line": 144,
      "caller": "test_streaming_body_requests",
      "source_code": "    @property\n    def post(self) -> None:\n        return None\n\n"
    },
    {
      "function": "part.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_streaming_body_requests",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_streaming_body_requests",
      "source_code": ""
    },
    {
      "function": "id",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_streaming_body_requests",
      "source_code": ""
    },
    {
      "function": "value.encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_streaming_body_requests",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    },
    {
      "function": "stream",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line": 601,
      "caller": "test_streaming_body_requests",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.\n\n        :param amt:\n            How much of the content to read. The generator will return up to\n            much data per iteration, but may return less. This is particularly\n            likely when using compressed data. However, the empty string will\n            never be returned.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n        \"\"\"\n        if self.chunked and self.supports_chunked_reads():\n            for line in self.read_chunked(amt, decode_content=decode_content):\n                yield line\n        else:\n            while not is_fp_closed(self._fp):\n                data = self.read(amt=amt, decode_content=decode_content)\n\n                if data:\n                    yield data\n\n"
    },
    {
      "function": "stream",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line": 601,
      "caller": "test_streaming_body_requests",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.\n\n        :param amt:\n            How much of the content to read. The generator will return up to\n            much data per iteration, but may return less. This is particularly\n            likely when using compressed data. However, the empty string will\n            never be returned.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n        \"\"\"\n        if self.chunked and self.supports_chunked_reads():\n            for line in self.read_chunked(amt, decode_content=decode_content):\n                yield line\n        else:\n            while not is_fp_closed(self._fp):\n                data = self.read(amt=amt, decode_content=decode_content)\n\n                if data:\n                    yield data\n\n"
    }
  ],
  "assertions": [
    "assert response1.status == response2.status == 200",
    "assert response1.json['data'] == response2.json['data'] == data",
    "assert response1.json['request_id'] != response2.json['request_id']",
    "assert response1.json['connection_id'] == response2.json['connection_id']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_streaming_body_requests(app, port):\n    @app.post(\"/\", stream=True)\n    async def handler(request):\n        data = [part.decode(\"utf-8\") async for part in request.stream]\n        return json(\n            {\n                \"request_id\": str(request.id),\n                \"connection_id\": id(request.conn_info),\n                \"data\": data,\n            }\n        )\n\n    data = [\"hello\", \"world\"]\n\n    client = ReusableClient(app, port=port)\n\n    async def stream(data):\n        for value in data:\n            yield value.encode(\"utf-8\")\n\n    with client:\n        _, response1 = client.post(\"/\", data=stream(data))\n        _, response2 = client.post(\"/\", data=stream(data))\n\n    assert response1.status == response2.status == 200\n    assert response1.json[\"data\"] == response2.json[\"data\"] == data\n    assert response1.json[\"request_id\"] != response2.json[\"request_id\"]\n    assert response1.json[\"connection_id\"] == response2.json[\"connection_id\"]"
}