{
  "test_name": "test_tarfile_root_owner",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
  "static_methods": [
    {
      "name": "self._create_files",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line_number": 123
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "make_tarball",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line_number": 56
    },
    {
      "name": "archive.getmembers",
      "source_code": "    def getmembers(self):\n        \"\"\"Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        \"\"\"\n        self._check()\n        if not self._loaded:    # if we want to obtain a list of\n            self._load()        # all members, we first have to\n                                # scan the whole archive.\n        return self.members",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line_number": 2012
    },
    {
      "name": "archive.close",
      "source_code": "    def close(self):\n        pass",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line_number": 23
    },
    {
      "name": "require_unix_id",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "require_uid_0",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._create_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line": 123,
      "caller": "test_tarfile_root_owner",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir\n\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_tarfile_root_owner",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "make_tarball",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line": 56,
      "caller": "test_tarfile_root_owner",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,\n"
    },
    {
      "function": "archive.getmembers",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_vendor/backports/tarfile/__init__.py",
      "line": 2012,
      "caller": "test_tarfile_root_owner",
      "source_code": "    def getmembers(self):\n        \"\"\"Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        \"\"\"\n        self._check()\n        if not self._loaded:    # if we want to obtain a list of\n            self._load()        # all members, we first have to\n                                # scan the whole archive.\n        return self.members\n\n"
    },
    {
      "function": "archive.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/cache.py",
      "line": 23,
      "caller": "test_tarfile_root_owner",
      "source_code": "    def close(self):\n        pass\n\n\n"
    },
    {
      "function": "require_unix_id",
      "filename": "",
      "line": 0,
      "caller": "test_tarfile_root_owner",
      "source_code": ""
    },
    {
      "function": "require_uid_0",
      "filename": "",
      "line": 0,
      "caller": "test_tarfile_root_owner",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert os.path.exists(archive_name)",
    "assert member.uid == 0",
    "assert member.gid == 0"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_tarfile_root_owner(self):\n        tmpdir = self._create_files()\n        base_name = os.path.join(self.mkdtemp(), 'archive')\n        old_dir = os.getcwd()\n        os.chdir(tmpdir)\n        group = grp.getgrgid(0)[0]\n        owner = pwd.getpwuid(0)[0]\n        try:\n            archive_name = make_tarball(\n                base_name, 'dist', compress=None, owner=owner, group=group\n            )\n        finally:\n            os.chdir(old_dir)\n\n        # check if the compressed tarball was created\n        assert os.path.exists(archive_name)\n\n        # now checks the rights\n        archive = tarfile.open(archive_name)\n        try:\n            for member in archive.getmembers():\n                assert member.uid == 0\n                assert member.gid == 0\n        finally:\n            archive.close()"
}