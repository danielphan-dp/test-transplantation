{
  "test_name": "test_tarfile_vs_tar",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
  "static_methods": [
    {
      "name": "self._create_files",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line_number": 123
    },
    {
      "name": "self.mkdtemp",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line_number": 22
    },
    {
      "name": "make_tarball",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line_number": 56
    },
    {
      "name": "spawn",
      "source_code": "    def spawn(self, cmd, search_path=True, level=1):\n        \"\"\"Spawn an external command respecting dry-run flag.\"\"\"\n        from distutils.spawn import spawn",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line_number": 390
    },
    {
      "name": "spawn",
      "source_code": "    def spawn(self, cmd, search_path=True, level=1):\n        \"\"\"Spawn an external command respecting dry-run flag.\"\"\"\n        from distutils.spawn import spawn",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line_number": 390
    },
    {
      "name": "self._tarinfo",
      "source_code": "    def _tarinfo(self, path):\n        tar = tarfile.open(path)\n        try:\n            names = tar.getnames()\n            names.sort()\n            return names\n        finally:\n            tar.close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line_number": 104
    },
    {
      "name": "self._tarinfo",
      "source_code": "    def _tarinfo(self, path):\n        tar = tarfile.open(path)\n        try:\n            names = tar.getnames()\n            names.sort()\n            return names\n        finally:\n            tar.close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line_number": 104
    },
    {
      "name": "make_tarball",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line_number": 56
    },
    {
      "name": "make_tarball",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line_number": 56
    }
  ],
  "dynamic_methods": [
    {
      "function": "self._create_files",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line": 123,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def _create_files(self):\n        # creating something to tar\n        tmpdir = self.mkdtemp()\n        dist = os.path.join(tmpdir, 'dist')\n        os.mkdir(dist)\n        self.write_file([dist, 'file1'], 'xxx')\n        self.write_file([dist, 'file2'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub'))\n        self.write_file([dist, 'sub', 'file3'], 'xxx')\n        os.mkdir(os.path.join(dist, 'sub2'))\n        return tmpdir\n\n"
    },
    {
      "function": "self.mkdtemp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/support.py",
      "line": 22,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def mkdtemp(self):\n        \"\"\"Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        \"\"\"\n        d = tempfile.mkdtemp()\n        self.tempdirs.append(d)\n        return d\n\n"
    },
    {
      "function": "make_tarball",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line": 56,
      "caller": "test_tarfile_vs_tar",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,\n"
    },
    {
      "function": "spawn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line": 390,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def spawn(self, cmd, search_path=True, level=1):\n        \"\"\"Spawn an external command respecting dry-run flag.\"\"\"\n        from distutils.spawn import spawn\n\n        spawn(cmd, search_path, dry_run=self.dry_run)\n\n"
    },
    {
      "function": "spawn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/cmd.py",
      "line": 390,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def spawn(self, cmd, search_path=True, level=1):\n        \"\"\"Spawn an external command respecting dry-run flag.\"\"\"\n        from distutils.spawn import spawn\n\n        spawn(cmd, search_path, dry_run=self.dry_run)\n\n"
    },
    {
      "function": "self._tarinfo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line": 104,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def _tarinfo(self, path):\n        tar = tarfile.open(path)\n        try:\n            names = tar.getnames()\n            names.sort()\n            return names\n        finally:\n            tar.close()\n\n"
    },
    {
      "function": "self._tarinfo",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/tests/test_archive_util.py",
      "line": 104,
      "caller": "test_tarfile_vs_tar",
      "source_code": "    def _tarinfo(self, path):\n        tar = tarfile.open(path)\n        try:\n            names = tar.getnames()\n            names.sort()\n            return names\n        finally:\n            tar.close()\n\n"
    },
    {
      "function": "make_tarball",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line": 56,
      "caller": "test_tarfile_vs_tar",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,\n"
    },
    {
      "function": "make_tarball",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/_distutils/archive_util.py",
      "line": 56,
      "caller": "test_tarfile_vs_tar",
      "source_code": "def make_tarball(\n    base_name,\n    base_dir,\n    compress=\"gzip\",\n    verbose=False,\n    dry_run=False,\n    owner=None,\n    group=None,\n"
    }
  ],
  "assertions": [
    "assert os.path.exists(tarball)",
    "assert os.path.exists(tarball2)",
    "assert self._tarinfo(tarball) == self._created_files",
    "assert self._tarinfo(tarball2) == self._created_files",
    "assert os.path.exists(tarball)",
    "assert os.path.exists(tarball)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_tarfile_vs_tar(self):\n        tmpdir = self._create_files()\n        tmpdir2 = self.mkdtemp()\n        base_name = os.path.join(tmpdir2, 'archive')\n        old_dir = os.getcwd()\n        os.chdir(tmpdir)\n        try:\n            make_tarball(base_name, 'dist')\n        finally:\n            os.chdir(old_dir)\n\n        # check if the compressed tarball was created\n        tarball = base_name + '.tar.gz'\n        assert os.path.exists(tarball)\n\n        # now create another tarball using `tar`\n        tarball2 = os.path.join(tmpdir, 'archive2.tar.gz')\n        tar_cmd = ['tar', '-cf', 'archive2.tar', 'dist']\n        gzip_cmd = ['gzip', '-f', '-9', 'archive2.tar']\n        old_dir = os.getcwd()\n        os.chdir(tmpdir)\n        try:\n            spawn(tar_cmd)\n            spawn(gzip_cmd)\n        finally:\n            os.chdir(old_dir)\n\n        assert os.path.exists(tarball2)\n        # let's compare both tarballs\n        assert self._tarinfo(tarball) == self._created_files\n        assert self._tarinfo(tarball2) == self._created_files\n\n        # trying an uncompressed one\n        base_name = os.path.join(tmpdir2, 'archive')\n        old_dir = os.getcwd()\n        os.chdir(tmpdir)\n        try:\n            make_tarball(base_name, 'dist', compress=None)\n        finally:\n            os.chdir(old_dir)\n        tarball = base_name + '.tar'\n        assert os.path.exists(tarball)\n\n        # now for a dry_run\n        base_name = os.path.join(tmpdir2, 'archive')\n        old_dir = os.getcwd()\n        os.chdir(tmpdir)\n        try:\n            make_tarball(base_name, 'dist', compress=None, dry_run=True)\n        finally:\n            os.chdir(old_dir)\n        tarball = base_name + '.tar'\n        assert os.path.exists(tarball)"
}