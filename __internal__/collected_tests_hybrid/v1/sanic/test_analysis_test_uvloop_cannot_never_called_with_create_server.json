{
  "test_name": "test_uvloop_cannot_never_called_with_create_server",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_app.py",
  "static_methods": [
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "try_use_uvloop.assert_not_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Counter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "sum",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Sanic",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "caplog.at_level",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.create_server",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line_number": 147
    },
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "get_port",
      "source_code": "def get_port():\n    sock = socket.socket()\n    sock.bind(\n        (\"\", 0)\n    )  # Bind to 0 port, so os will pick available port for us.\n    return sock.getsockname()[1]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line_number": 37
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "Mock",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "try_use_uvloop.assert_not_called",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "Counter",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "sum",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "Sanic",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "caplog.at_level",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "app.create_server",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/worker/manager.py",
      "line": 147,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": "    def create_server(self) -> Worker:\n        \"\"\"Create a new server process.\n\n        Returns:\n            Worker: The Worker instance\n        \"\"\"\n        server_number = next(self._server_count)\n        return self.manage(\n            f\"{WorkerProcess.SERVER_LABEL}-{server_number}\",\n            self._serve,\n            self._server_settings,\n            transient=True,\n            restartable=True,\n            ident=f\"{WorkerProcess.SERVER_IDENTIFIER}{server_number:2}\",\n        )\n\n"
    },
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    },
    {
      "function": "get_port",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/conftest.py",
      "line": 37,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": "def get_port():\n    sock = socket.socket()\n    sock.bind(\n        (\"\", 0)\n    )  # Bind to 0 port, so os will pick available port for us.\n    return sock.getsockname()[1]\n\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_uvloop_cannot_never_called_with_create_server",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert counter[logging.WARNING, message] == modified"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_uvloop_cannot_never_called_with_create_server(caplog, monkeypatch):\n    apps = (Sanic(\"default-uvloop\"), Sanic(\"no-uvloop\"), Sanic(\"yes-uvloop\"))\n\n    apps[1].config.USE_UVLOOP = False\n    apps[2].config.USE_UVLOOP = True\n\n    try_use_uvloop = Mock()\n    monkeypatch.setattr(sanic.mixins.startup, \"try_use_uvloop\", try_use_uvloop)\n\n    loop = asyncio.get_event_loop()\n\n    with caplog.at_level(logging.WARNING):\n        for app in apps:\n            srv_coro = app.create_server(\n                return_asyncio_server=True,\n                asyncio_server_kwargs=dict(start_serving=False),\n                port=get_port(),\n            )\n            loop.run_until_complete(srv_coro)\n\n    try_use_uvloop.assert_not_called()  # Check it didn't try to change policy\n\n    message = (\n        \"You are trying to change the uvloop configuration, but \"\n        \"this is only effective when using the run(...) method. \"\n        \"When using the create_server(...) method Sanic will use \"\n        \"the already existing loop.\"\n    )\n\n    counter = Counter([(r[1], r[2]) for r in caplog.record_tuples])\n    modified = sum(\n        1 for app in apps if not isinstance(app.config.USE_UVLOOP, Default)\n    )\n\n    assert counter[(logging.WARNING, message)] == modified"
}