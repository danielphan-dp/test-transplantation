{
  "test_name": "test_with_attach_and_bp",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_views.py",
  "static_methods": [
    {
      "name": "Blueprint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "DummyView.attach",
      "source_code": "    def attach(\n        cls,\n        to: Union[Sanic, Blueprint],\n        uri: str,\n        methods: Iterable[str] = frozenset({\"GET\"}),\n        host: Optional[str] = None,\n        strict_slashes: Optional[bool] = None,\n        version: Optional[int] = None,\n        name: Optional[str] = None,\n        stream: bool = False,\n        version_prefix: str = \"/v\",\n    ) -> None:\n        \"\"\"Attaches the view to a Sanic app or Blueprint at the specified URI.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/views.py",
      "line_number": 204
    },
    {
      "name": "app.blueprint",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n    ) -> None:\n        \"\"\"Register a blueprint on the application.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line_number": 856
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    }
  ],
  "dynamic_methods": [
    {
      "function": "Blueprint",
      "filename": "",
      "line": 0,
      "caller": "test_with_attach_and_bp",
      "source_code": ""
    },
    {
      "function": "DummyView.attach",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/views.py",
      "line": 204,
      "caller": "test_with_attach_and_bp",
      "source_code": "    @classmethod\n    def attach(\n        cls,\n        to: Union[Sanic, Blueprint],\n        uri: str,\n        methods: Iterable[str] = frozenset({\"GET\"}),\n        host: Optional[str] = None,\n        strict_slashes: Optional[bool] = None,\n        version: Optional[int] = None,\n        name: Optional[str] = None,\n        stream: bool = False,\n        version_prefix: str = \"/v\",\n"
    },
    {
      "function": "app.blueprint",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/app.py",
      "line": 856,
      "caller": "test_with_attach_and_bp",
      "source_code": "    def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        *,\n        url_prefix: Optional[str] = None,\n        version: Optional[Union[int, float, str]] = None,\n        strict_slashes: Optional[bool] = None,\n        version_prefix: Optional[str] = None,\n        name_prefix: Optional[str] = None,\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_with_attach_and_bp",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_with_attach_and_bp",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    }
  ],
  "assertions": [
    "assert response.text == 'I am get method'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_with_attach_and_bp(app):\n    bp = Blueprint(\"test_text\")\n\n    class DummyView(HTTPMethodView):\n        def get(self, request):\n            return text(\"I am get method\")\n\n    DummyView.attach(bp, \"/\")\n\n    app.blueprint(bp)\n    request, response = app.test_client.get(\"/\")\n\n    assert response.text == \"I am get method\""
}