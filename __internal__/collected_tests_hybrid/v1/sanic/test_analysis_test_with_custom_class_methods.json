{
  "test_name": "test_with_custom_class_methods",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_views.py",
  "static_methods": [
    {
      "name": "app.add_route",
      "source_code": "    def add_route(\n        self,\n        handler: RouteHandler,\n        uri: str,\n        methods: Iterable[str] = frozenset({\"GET\"}),\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        stream: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        unquote: bool = False,\n        **ctx_kwargs: Any,\n    ) -> RouteHandler:\n        \"\"\"A helper method to register class-based view or functions as a handler to the application url routes.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 217
    },
    {
      "name": "app.test_client.get",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line_number": 88
    },
    {
      "name": "DummyView.as_view",
      "source_code": "    def as_view(cls, *class_args: Any, **class_kwargs: Any) -> RouteHandler:\n        \"\"\"Return view function for use with the routing system, that dispatches request to appropriate handler method.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/views.py",
      "line_number": 161
    },
    {
      "name": "self._iternal_method",
      "source_code": "        def _iternal_method(self):\n            self.global_var += 10",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_views.py",
      "line_number": 193
    },
    {
      "name": "text",
      "source_code": "    def text(self):\n        \"\"\"Content of the response, in unicode.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 907
    }
  ],
  "dynamic_methods": [
    {
      "function": "app.add_route",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 217,
      "caller": "test_with_custom_class_methods",
      "source_code": "    def add_route(\n        self,\n        handler: RouteHandler,\n        uri: str,\n        methods: Iterable[str] = frozenset({\"GET\"}),\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        stream: bool = False,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        unquote: bool = False,\n        **ctx_kwargs: Any,\n"
    },
    {
      "function": "app.test_client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/multidict/_multidict_py.py",
      "line": 88,
      "caller": "test_with_custom_class_methods",
      "source_code": "    def get(self, key, default=None):\n        \"\"\"Get first value matching the key.\n\n        If the key is not found, returns the default (or None if no default is provided)\n        \"\"\"\n        return self.getone(key, default)\n\n"
    },
    {
      "function": "DummyView.as_view",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/views.py",
      "line": 161,
      "caller": "test_with_custom_class_methods",
      "source_code": "    @classmethod\n    def as_view(cls, *class_args: Any, **class_kwargs: Any) -> RouteHandler:\n        \"\"\"Return view function for use with the routing system, that dispatches request to appropriate handler method.\n\n        If you need to pass arguments to the class's constructor, you can\n        pass the arguments to `as_view` and they will be passed to the class\n        `__init__` method.\n\n        Args:\n            *class_args: Variable length argument list for the class instantiation.\n            **class_kwargs: Arbitrary keyword arguments for the class instantiation.\n\n        Returns:\n            RouteHandler: The view function.\n\n        Examples:\n            ```python\n            class DummyView(HTTPMethodView):\n                def __init__(self, foo: MyFoo):\n                    self.foo = foo\n\n                async def get(self, request: Request):\n                    return text(self.foo.bar)\n\n            app.add_route(DummyView.as_view(foo=MyFoo()), \"/\")\n            ```\n        \"\"\"  # noqa: E501\n\n        def view(*args, **kwargs):\n            self = view.view_class(*class_args, **class_kwargs)\n            return self.dispatch_request(*args, **kwargs)\n\n        if cls.decorators:\n            view.__module__ = cls.__module__\n            for decorator in cls.decorators:\n                view = decorator(view)\n\n        view.view_class = cls  # type: ignore\n        view.__doc__ = cls.__doc__\n        view.__module__ = cls.__module__\n        view.__name__ = cls.__name__\n        return view\n\n"
    },
    {
      "function": "self._iternal_method",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_views.py",
      "line": 193,
      "caller": "test_with_custom_class_methods",
      "source_code": "        def _iternal_method(self):\n            self.global_var += 10\n\n"
    },
    {
      "function": "text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 907,
      "caller": "test_with_custom_class_methods",
      "source_code": "    @property\n    def text(self):\n        \"\"\"Content of the response, in unicode.\n\n        If Response.encoding is None, encoding will be guessed using\n        ``charset_normalizer`` or ``chardet``.\n\n        The encoding of the response content is determined based solely on HTTP\n        headers, following RFC 2616 to the letter. If you can take advantage of\n        non-HTTP knowledge to make a better guess at the encoding, you should\n        set ``r.encoding`` appropriately before accessing this property.\n        \"\"\"\n\n        # Try charset from content-type\n        content = None\n        encoding = self.encoding\n\n        if not self.content:\n            return \"\"\n\n        # Fallback to auto-detected encoding.\n        if self.encoding is None:\n            encoding = self.apparent_encoding\n\n        # Decode unicode from given encoding.\n        try:\n            content = str(self.content, encoding, errors=\"replace\")\n        except (LookupError, TypeError):\n            # A LookupError is raised if the encoding was not found which could\n            # indicate a misspelling or similar mistake.\n            #\n            # A TypeError can be raised if encoding is None\n            #\n            # So we try blindly encoding.\n            content = str(self.content, errors=\"replace\")\n\n        return content\n\n"
    }
  ],
  "assertions": [
    "assert response.text == 'I am get method and global var is 10'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_with_custom_class_methods(app):\n    class DummyView(HTTPMethodView):\n        global_var = 0\n\n        def _iternal_method(self):\n            self.global_var += 10\n\n        def get(self, request):\n            self._iternal_method()\n            return text(\n                f\"I am get method and global var \" f\"is {self.global_var}\"\n            )\n\n    app.add_route(DummyView.as_view(), \"/\")\n    request, response = app.test_client.get(\"/\")\n    assert response.text == \"I am get method and global var is 10\""
}