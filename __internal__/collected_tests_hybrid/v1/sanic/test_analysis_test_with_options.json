{
  "test_name": "test_with_options",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_windows_wrappers.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.create_script",
      "source_code": "    def create_script(cls, tmpdir):\n        \"\"\"\n        Create a simple script, foo-script.py",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_windows_wrappers.py",
      "line_number": 36
    },
    {
      "name": "proc.communicate",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "stdout.replace",
      "source_code": "    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line_number": 58
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "f.write",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n        want_unicode = False\n        sep = kwargs.pop(\"sep\", None)\n        if sep is not None:\n            if isinstance(sep, unicode):\n                want_unicode = True\n            elif not isinstance(sep, str):\n                raise TypeError(\"sep must be None or a string\")\n        end = kwargs.pop(\"end\", None)\n        if end is not None:\n            if isinstance(end, unicode):\n                want_unicode = True\n            elif not isinstance(end, str):\n                raise TypeError(\"end must be None or a string\")\n        if kwargs:\n            raise TypeError(\"invalid keyword arguments to print()\")\n        if not want_unicode:\n            for arg in args:\n                if isinstance(arg, unicode):\n                    want_unicode = True\n                    break\n        if want_unicode:\n            newline = unicode(\"\\n\")\n            space = unicode(\" \")\n        else:\n            newline = \"\\n\"\n            space = \" \"\n        if sep is None:\n            sep = space\n        if end is None:\n            end = newline\n        for i, arg in enumerate(args):\n            if i:\n                write(sep)\n            write(arg)\n        write(end)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line_number": 765
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.prep_script",
      "source_code": "    def prep_script(cls, template):\n        python_exe = nt_quote_arg(sys.executable)\n        return template % locals()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_windows_wrappers.py",
      "line_number": 31
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_with_options",
      "source_code": ""
    },
    {
      "function": "self.create_script",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_windows_wrappers.py",
      "line": 36,
      "caller": "test_with_options",
      "source_code": "    @classmethod\n    def create_script(cls, tmpdir):\n        \"\"\"\n        Create a simple script, foo-script.py\n\n        Note that the script starts with a Unix-style '#!' line saying which\n        Python executable to run.  The wrapper will use this line to find the\n        correct Python executable.\n        \"\"\"\n\n        script = cls.prep_script(cls.script_tmpl)\n\n        with (tmpdir / cls.script_name).open('w') as f:\n            f.write(script)\n\n        # also copy cli.exe to the sample directory\n        with (tmpdir / cls.wrapper_name).open('wb') as f:\n            w = pkg_resources.resource_string('setuptools', cls.wrapper_source)\n            f.write(w)\n\n\n"
    },
    {
      "function": "proc.communicate",
      "filename": "",
      "line": 0,
      "caller": "test_with_options",
      "source_code": ""
    },
    {
      "function": "stdout.replace",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/rich/emoji.py",
      "line": 58,
      "caller": "test_with_options",
      "source_code": "    @classmethod\n    def replace(cls, text: str) -> str:\n        \"\"\"Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. \"Hello :smiley:!\"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        \"\"\"\n        return _emoji_replace(text)\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_with_options",
      "source_code": ""
    },
    {
      "function": "f.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/pip/_vendor/six.py",
      "line": 765,
      "caller": "test_with_options",
      "source_code": "        def write(data):\n            if not isinstance(data, basestring):\n                data = str(data)\n            # If the file has an encoding, encode unicode with it.\n            if (isinstance(fp, file) and\n                    isinstance(data, unicode) and\n                    fp.encoding is not None):\n                errors = getattr(fp, \"errors\", None)\n                if errors is None:\n                    errors = \"strict\"\n                data = data.encode(fp.encoding, errors)\n            fp.write(data)\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_with_options",
      "source_code": ""
    },
    {
      "function": "self.prep_script",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/venv/lib/python3.9/site-packages/setuptools/tests/test_windows_wrappers.py",
      "line": 31,
      "caller": "test_with_options",
      "source_code": "    @classmethod\n    def prep_script(cls, template):\n        python_exe = nt_quote_arg(sys.executable)\n        return template % locals()\n\n"
    }
  ],
  "assertions": [
    "assert actual == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_with_options(self, tmpdir):\n        \"\"\"\n        Specifying Python Command-line Options\n        --------------------------------------\n\n        You can specify a single argument on the '#!' line.  This can be used\n        to specify Python options like -O, to run in optimized mode or -i\n        to start the interactive interpreter.  You can combine multiple\n        options as usual. For example, to run in optimized mode and\n        enter the interpreter after running the script, you could use -Oi:\n        \"\"\"\n        self.create_script(tmpdir)\n        tmpl = textwrap.dedent(\n            \"\"\"\n            #!%(python_exe)s  -Oi\n            import sys\n            input = repr(sys.stdin.read())\n            print(sys.argv[0][-14:])\n            print(sys.argv[1:])\n            print(input)\n            if __debug__:\n                print('non-optimized')\n            sys.ps1 = '---'\n            \"\"\"\n        ).lstrip()\n        with (tmpdir / 'foo-script.py').open('w') as f:\n            f.write(self.prep_script(tmpl))\n        cmd = [str(tmpdir / 'foo.exe')]\n        proc = subprocess.Popen(\n            cmd,\n            stdout=subprocess.PIPE,\n            stdin=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            text=True,\n            encoding=\"utf-8\",\n        )\n        stdout, _stderr = proc.communicate()\n        actual = stdout.replace('\\r\\n', '\\n')\n        expected = textwrap.dedent(\n            r\"\"\"\n            \\foo-script.py\n            []\n            ''\n            ---\n            \"\"\"\n        ).lstrip()\n        assert actual == expected"
}