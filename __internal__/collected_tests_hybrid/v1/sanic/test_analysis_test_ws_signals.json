{
  "test_name": "test_ws_signals",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_ws_handlers.py",
  "static_methods": [
    {
      "name": "signalapp",
      "source_code": "def signalapp(app):\n    @app.signal(\"websocket.handler.before\")\n    async def ws_before(request: Request, websocket: Websocket):\n        app.ctx.seq.append(\"before\")\n        print(\"before\")\n        await websocket.send(\"before: \" + await websocket.recv())\n        print(\"before2\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_ws_handlers.py",
      "line_number": 29
    },
    {
      "name": "app.test_client.websocket",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n    ):\n        \"\"\"Decorate a function to be registered as a websocket route.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line_number": 675
    }
  ],
  "dynamic_methods": [
    {
      "function": "signalapp",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/tests/test_ws_handlers.py",
      "line": 29,
      "caller": "test_ws_signals",
      "source_code": "def signalapp(app):\n    @app.signal(\"websocket.handler.before\")\n    async def ws_before(request: Request, websocket: Websocket):\n        app.ctx.seq.append(\"before\")\n        print(\"before\")\n        await websocket.send(\"before: \" + await websocket.recv())\n        print(\"before2\")\n\n    @app.signal(\"websocket.handler.after\")\n    async def ws_after(request: Request, websocket: Websocket):\n        app.ctx.seq.append(\"after\")\n        await websocket.send(\"after: \" + await websocket.recv())\n        await websocket.recv()\n\n    @app.signal(\"websocket.handler.exception\")\n    async def ws_exception(\n        request: Request, websocket: Websocket, exception: Exception\n    ):\n        app.ctx.seq.append(\"exception\")\n        await websocket.send(f\"exception: {exception}\")\n        await websocket.recv()\n\n    @app.websocket(\"/ws\")\n    async def ws_handler(request: Request, ws: Websocket):\n        app.ctx.seq.append(\"ws\")\n\n    @app.websocket(\"/wserror\")\n    async def ws_error(request: Request, ws: Websocket):\n        print(\"wserr\")\n        app.ctx.seq.append(\"wserror\")\n        raise Exception(await ws.recv())\n        print(\"wserr2\")\n\n\n"
    },
    {
      "function": "app.test_client.websocket",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/sanic/sanic/mixins/routes.py",
      "line": 675,
      "caller": "test_ws_signals",
      "source_code": "    def websocket(\n        self,\n        uri: str,\n        host: Optional[Union[str, List[str]]] = None,\n        strict_slashes: Optional[bool] = None,\n        subprotocols: Optional[List[str]] = None,\n        version: Optional[Union[int, str, float]] = None,\n        name: Optional[str] = None,\n        apply: bool = True,\n        version_prefix: str = \"/v\",\n        error_format: Optional[str] = None,\n        **ctx_kwargs: Any,\n"
    }
  ],
  "assertions": [
    "assert ws_proxy.client_received == ['before: test 1', 'after: test 2']",
    "assert app.ctx.seq == ['before', 'ws', 'after']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ws_signals(\n    app: Sanic,\n    simple_ws_mimic_client: MimicClientType,\n):\n    signalapp(app)\n\n    app.ctx.seq = []\n    _, ws_proxy = app.test_client.websocket(\n        \"/ws\", mimic=simple_ws_mimic_client\n    )\n    assert ws_proxy.client_received == [\"before: test 1\", \"after: test 2\"]\n    assert app.ctx.seq == [\"before\", \"ws\", \"after\"]"
}