{
  "test_name": "test_ChunkedReader",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
  "static_methods": [
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "t_body_reader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line_number": 363
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "t_body_reader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_io.py",
      "line": 363,
      "caller": "test_ChunkedReader",
      "source_code": "def t_body_reader(thunk: Any, data: bytes, expected: Any, do_eof: bool = False) -> None:\n    # Simple: consume whole thing\n    print(\"Test 1\")\n    buf = makebuf(data)\n    assert _run_reader(thunk(), buf, do_eof) == expected\n\n    # Incrementally growing buffer\n    print(\"Test 2\")\n    reader = thunk()\n    buf = ReceiveBuffer()\n    events = []\n    for i in range(len(data)):\n        events += _run_reader(reader, buf, False)\n        buf += data[i : i + 1]\n    events += _run_reader(reader, buf, do_eof)\n    assert normalize_data_events(events) == expected\n\n    is_complete = any(type(event) is EndOfMessage for event in expected)\n    if is_complete and not do_eof:\n        buf = makebuf(data + b\"trailing\")\n        assert _run_reader(thunk(), buf, False) == expected\n\n\n"
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_ChunkedReader",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ChunkedReader() -> None:\n    t_body_reader(ChunkedReader, b\"0\\r\\n\\r\\n\", [EndOfMessage()])\n\n    t_body_reader(\n        ChunkedReader,\n        b\"0\\r\\nSome: header\\r\\n\\r\\n\",\n        [EndOfMessage(headers=[(\"Some\", \"header\")])],\n    )\n\n    t_body_reader(\n        ChunkedReader,\n        b\"5\\r\\n01234\\r\\n\"\n        + b\"10\\r\\n0123456789abcdef\\r\\n\"\n        + b\"0\\r\\n\"\n        + b\"Some: header\\r\\n\\r\\n\",\n        [\n            Data(data=b\"012340123456789abcdef\"),\n            EndOfMessage(headers=[(\"Some\", \"header\")]),\n        ],\n    )\n\n    t_body_reader(\n        ChunkedReader,\n        b\"5\\r\\n01234\\r\\n\" + b\"10\\r\\n0123456789abcdef\\r\\n\" + b\"0\\r\\n\\r\\n\",\n        [Data(data=b\"012340123456789abcdef\"), EndOfMessage()],\n    )\n\n    # handles upper and lowercase hex\n    t_body_reader(\n        ChunkedReader,\n        b\"aA\\r\\n\" + b\"x\" * 0xAA + b\"\\r\\n\" + b\"0\\r\\n\\r\\n\",\n        [Data(data=b\"x\" * 0xAA), EndOfMessage()],\n    )\n\n    # refuses arbitrarily long chunk integers\n    with pytest.raises(LocalProtocolError):\n        # Technically this is legal HTTP/1.1, but we refuse to process chunk\n        # sizes that don't fit into 20 characters of hex\n        t_body_reader(ChunkedReader, b\"9\" * 100 + b\"\\r\\nxxx\", [Data(data=b\"xxx\")])\n\n    # refuses garbage in the chunk count\n    with pytest.raises(LocalProtocolError):\n        t_body_reader(ChunkedReader, b\"10\\x00\\r\\nxxx\", None)\n\n    # handles (and discards) \"chunk extensions\" omg wtf\n    t_body_reader(\n        ChunkedReader,\n        b\"5; hello=there\\r\\n\"\n        + b\"xxxxx\"\n        + b\"\\r\\n\"\n        + b'0; random=\"junk\"; some=more; canbe=lonnnnngg\\r\\n\\r\\n',\n        [Data(data=b\"xxxxx\"), EndOfMessage()],\n    )\n\n    t_body_reader(\n        ChunkedReader,\n        b\"5   \t \\r\\n01234\\r\\n\" + b\"0\\r\\n\\r\\n\",\n        [Data(data=b\"01234\"), EndOfMessage()],\n    )"
}