{
  "test_name": "test_Connection_basics_and_content_length",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "ConnectionPair",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "p.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "InformationalResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ConnectionPair",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "p.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "InformationalResponse",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_Connection_basics_and_content_length",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert p.conn[CLIENT].our_role is CLIENT",
    "assert p.conn[CLIENT].their_role is SERVER",
    "assert p.conn[SERVER].our_role is SERVER",
    "assert p.conn[SERVER].their_role is CLIENT",
    "assert data == b'GET / HTTP/1.1\\r\\nHost: example.com\\r\\nContent-Length: 10\\r\\n\\r\\n'",
    "assert p.conn[CLIENT].our_state is SEND_BODY",
    "assert p.conn[CLIENT].their_state is SEND_RESPONSE",
    "assert p.conn[SERVER].our_state is SEND_RESPONSE",
    "assert p.conn[SERVER].their_state is SEND_BODY",
    "assert p.conn[CLIENT].their_http_version is None",
    "assert p.conn[SERVER].their_http_version == b'1.1'",
    "assert data == b'HTTP/1.1 100 \\r\\n\\r\\n'",
    "assert data == b'HTTP/1.1 200 \\r\\nContent-Length: 11\\r\\n\\r\\n'",
    "assert p.conn[CLIENT].their_http_version == b'1.1'",
    "assert p.conn[SERVER].their_http_version == b'1.1'",
    "assert data == b'12345'",
    "assert data == b'67890'",
    "assert data == b''",
    "assert data == b'1234567890'",
    "assert data == b'1'",
    "assert data == b''",
    "assert conn.states == {CLIENT: SEND_BODY, SERVER: SEND_RESPONSE}",
    "assert conn.states == {CLIENT: SEND_BODY, SERVER: SEND_BODY}",
    "assert conn.states == {CLIENT: DONE, SERVER: SEND_BODY}",
    "assert conn.states == {CLIENT: DONE, SERVER: DONE}"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_Connection_basics_and_content_length() -> None:\n    with pytest.raises(ValueError):\n        Connection(\"CLIENT\")  # type: ignore\n\n    p = ConnectionPair()\n    assert p.conn[CLIENT].our_role is CLIENT\n    assert p.conn[CLIENT].their_role is SERVER\n    assert p.conn[SERVER].our_role is SERVER\n    assert p.conn[SERVER].their_role is CLIENT\n\n    data = p.send(\n        CLIENT,\n        Request(\n            method=\"GET\",\n            target=\"/\",\n            headers=[(\"Host\", \"example.com\"), (\"Content-Length\", \"10\")],\n        ),\n    )\n    assert data == (\n        b\"GET / HTTP/1.1\\r\\n\" b\"Host: example.com\\r\\n\" b\"Content-Length: 10\\r\\n\\r\\n\"\n    )\n\n    for conn in p.conns:\n        assert conn.states == {CLIENT: SEND_BODY, SERVER: SEND_RESPONSE}\n    assert p.conn[CLIENT].our_state is SEND_BODY\n    assert p.conn[CLIENT].their_state is SEND_RESPONSE\n    assert p.conn[SERVER].our_state is SEND_RESPONSE\n    assert p.conn[SERVER].their_state is SEND_BODY\n\n    assert p.conn[CLIENT].their_http_version is None\n    assert p.conn[SERVER].their_http_version == b\"1.1\"\n\n    data = p.send(SERVER, InformationalResponse(status_code=100, headers=[]))  # type: ignore[arg-type]\n    assert data == b\"HTTP/1.1 100 \\r\\n\\r\\n\"\n\n    data = p.send(SERVER, Response(status_code=200, headers=[(\"Content-Length\", \"11\")]))\n    assert data == b\"HTTP/1.1 200 \\r\\nContent-Length: 11\\r\\n\\r\\n\"\n\n    for conn in p.conns:\n        assert conn.states == {CLIENT: SEND_BODY, SERVER: SEND_BODY}\n\n    assert p.conn[CLIENT].their_http_version == b\"1.1\"\n    assert p.conn[SERVER].their_http_version == b\"1.1\"\n\n    data = p.send(CLIENT, Data(data=b\"12345\"))\n    assert data == b\"12345\"\n    data = p.send(\n        CLIENT, Data(data=b\"67890\"), expect=[Data(data=b\"67890\"), EndOfMessage()]\n    )\n    assert data == b\"67890\"\n    data = p.send(CLIENT, EndOfMessage(), expect=[])\n    assert data == b\"\"\n\n    for conn in p.conns:\n        assert conn.states == {CLIENT: DONE, SERVER: SEND_BODY}\n\n    data = p.send(SERVER, Data(data=b\"1234567890\"))\n    assert data == b\"1234567890\"\n    data = p.send(SERVER, Data(data=b\"1\"), expect=[Data(data=b\"1\"), EndOfMessage()])\n    assert data == b\"1\"\n    data = p.send(SERVER, EndOfMessage(), expect=[])\n    assert data == b\"\"\n\n    for conn in p.conns:\n        assert conn.states == {CLIENT: DONE, SERVER: DONE}"
}