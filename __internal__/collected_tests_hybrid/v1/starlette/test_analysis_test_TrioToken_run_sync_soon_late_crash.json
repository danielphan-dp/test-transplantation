{
  "test_name": "test_TrioToken_run_sync_soon_late_crash",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "RaisesGroup.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "_core.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "saved.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "_core.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "agen",
      "filename": "",
      "line": 0,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": ""
    },
    {
      "function": "saved.asend",
      "filename": "",
      "line": 0,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": ""
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_TrioToken_run_sync_soon_late_crash",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    }
  ],
  "assertions": [
    "assert RaisesGroup(KeyError).matches(excinfo.value.__cause__)",
    "assert record == ['main exiting', '2nd ran']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_TrioToken_run_sync_soon_late_crash() -> None:\n    # Crash after system nursery is closed -- easiest way to do that is\n    # from an async generator finalizer.\n    record: list[str] = []\n    saved: list[AsyncGenerator[int, None]] = []\n\n    async def agen() -> AsyncGenerator[int, None]:\n        token = _core.current_trio_token()\n        try:\n            yield 1\n        finally:\n            token.run_sync_soon(lambda: {}[\"nope\"])  # type: ignore[index]\n            token.run_sync_soon(lambda: record.append(\"2nd ran\"))\n\n    async def main() -> None:\n        saved.append(agen())\n        await saved[-1].asend(None)\n        record.append(\"main exiting\")\n\n    with pytest.raises(_core.TrioInternalError) as excinfo:\n        _core.run(main)\n\n    assert RaisesGroup(KeyError).matches(excinfo.value.__cause__)\n    assert record == [\"main exiting\", \"2nd ran\"]"
}