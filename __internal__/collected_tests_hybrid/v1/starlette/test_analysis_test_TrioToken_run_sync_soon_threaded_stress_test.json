{
  "test_name": "test_TrioToken_run_sync_soon_threaded_stress_test",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "thread.start",
      "source_code": "    def start(self) -> None:\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 290
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": ""
    },
    {
      "function": "_core.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "thread.start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 290,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": "    @abc.abstractmethod\n    def start(self) -> None:\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": ""
    },
    {
      "function": "sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_TrioToken_run_sync_soon_threaded_stress_test",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_TrioToken_run_sync_soon_threaded_stress_test() -> None:\n    cb_counter = 0\n\n    def cb() -> None:\n        nonlocal cb_counter\n        cb_counter += 1\n\n    def stress_thread(token: _core.TrioToken) -> None:\n        try:\n            while True:\n                token.run_sync_soon(cb)\n                time.sleep(0)\n        except _core.RunFinishedError:\n            pass\n\n    async def main() -> None:\n        token = _core.current_trio_token()\n        thread = threading.Thread(target=stress_thread, args=(token,))\n        thread.start()\n        for _ in range(10):\n            start_value = cb_counter\n            while cb_counter == start_value:\n                await sleep(0.01)\n\n    _core.run(main)\n    print(cb_counter)"
}