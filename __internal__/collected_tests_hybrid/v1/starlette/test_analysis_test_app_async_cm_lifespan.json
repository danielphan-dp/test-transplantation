{
  "test_name": "test_app_async_cm_lifespan",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
  "static_methods": [
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    }
  ],
  "dynamic_methods": [
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_app_async_cm_lifespan",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_app_async_cm_lifespan",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_app_async_cm_lifespan",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    }
  ],
  "assertions": [
    "assert not startup_complete",
    "assert not cleanup_complete",
    "assert startup_complete",
    "assert cleanup_complete",
    "assert startup_complete",
    "assert not cleanup_complete"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_app_async_cm_lifespan(test_client_factory: TestClientFactory) -> None:\n    startup_complete = False\n    cleanup_complete = False\n\n    @asynccontextmanager\n    async def lifespan(app: ASGIApp) -> AsyncGenerator[None, None]:\n        nonlocal startup_complete, cleanup_complete\n        startup_complete = True\n        yield\n        cleanup_complete = True\n\n    app = Starlette(lifespan=lifespan)\n\n    assert not startup_complete\n    assert not cleanup_complete\n    with test_client_factory(app):\n        assert startup_complete\n        assert not cleanup_complete\n    assert startup_complete\n    assert cleanup_complete"
}