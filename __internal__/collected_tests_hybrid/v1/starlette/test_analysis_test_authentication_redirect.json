{
  "test_name": "test_authentication_redirect",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_authentication.py",
  "static_methods": [
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "format",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "urlencode",
      "source_code": "def urlencode(query, *args, **kwargs):\n    \"\"\"Handle nested form-data queries and serialize them appropriately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/utils/formdata.py",
      "line_number": 10
    },
    {
      "name": "response.json",
      "source_code": "    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 944
    },
    {
      "name": "urlencode",
      "source_code": "def urlencode(query, *args, **kwargs):\n    \"\"\"Handle nested form-data queries and serialize them appropriately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/utils/formdata.py",
      "line_number": 10
    },
    {
      "name": "response.json",
      "source_code": "    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 944
    }
  ],
  "dynamic_methods": [
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_authentication_redirect",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_authentication_redirect",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_authentication_redirect",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_authentication_redirect",
      "source_code": ""
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_authentication_redirect",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_authentication_redirect",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "format",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_authentication_redirect",
      "source_code": ""
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_authentication_redirect",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "urlencode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/utils/formdata.py",
      "line": 10,
      "caller": "test_authentication_redirect",
      "source_code": "def urlencode(query, *args, **kwargs):\n    \"\"\"Handle nested form-data queries and serialize them appropriately.\n\n    There are times when a website expects a nested form data query to be sent\n    but, the standard library's urlencode function does not appropriately\n    handle the nested structures. In that case, you need this function which\n    will flatten the structure first and then properly encode it for you.\n\n    When using this to send data in the body of a request, make sure you\n    specify the appropriate Content-Type header for the request.\n\n    .. code-block:: python\n\n        import requests\n        from requests_toolbelt.utils import formdata\n\n        query = {\n           'my_dict': {\n               'foo': 'bar',\n               'biz': 'baz\",\n            },\n            'a': 'b',\n        }\n\n        resp = requests.get(url, params=formdata.urlencode(query))\n        # or\n        resp = requests.post(\n            url,\n            data=formdata.urlencode(query),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        )\n\n    Similarly, you can specify a list of nested tuples, e.g.,\n\n    .. code-block:: python\n\n        import requests\n        from requests_toolbelt.utils import formdata\n\n        query = [\n            ('my_list', [\n                ('foo', 'bar'),\n                ('biz', 'baz'),\n            ]),\n            ('a', 'b'),\n        ]\n\n        resp = requests.get(url, params=formdata.urlencode(query))\n        # or\n        resp = requests.post(\n            url,\n            data=formdata.urlencode(query),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        )\n\n    For additional parameter and return information, see the official\n    `urlencode`_ documentation.\n\n    .. _urlencode:\n        https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode\n    \"\"\"\n    expand_classes = (dict, list, tuple)\n    original_query_list = _to_kv_list(query)\n\n    if not all(_is_two_tuple(i) for i in original_query_list):\n        raise ValueError(\"Expected query to be able to be converted to a \"\n                         \"list comprised of length 2 tuples.\")\n\n    query_list = original_query_list\n    while any(isinstance(v, expand_classes) for _, v in query_list):\n        query_list = _expand_query_values(query_list)\n\n    return _urlencode(query_list, *args, **kwargs)\n\n\n"
    },
    {
      "function": "response.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 944,
      "caller": "test_authentication_redirect",
      "source_code": "    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n\n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n\n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\n"
    },
    {
      "function": "urlencode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/requests_toolbelt/utils/formdata.py",
      "line": 10,
      "caller": "test_authentication_redirect",
      "source_code": "def urlencode(query, *args, **kwargs):\n    \"\"\"Handle nested form-data queries and serialize them appropriately.\n\n    There are times when a website expects a nested form data query to be sent\n    but, the standard library's urlencode function does not appropriately\n    handle the nested structures. In that case, you need this function which\n    will flatten the structure first and then properly encode it for you.\n\n    When using this to send data in the body of a request, make sure you\n    specify the appropriate Content-Type header for the request.\n\n    .. code-block:: python\n\n        import requests\n        from requests_toolbelt.utils import formdata\n\n        query = {\n           'my_dict': {\n               'foo': 'bar',\n               'biz': 'baz\",\n            },\n            'a': 'b',\n        }\n\n        resp = requests.get(url, params=formdata.urlencode(query))\n        # or\n        resp = requests.post(\n            url,\n            data=formdata.urlencode(query),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        )\n\n    Similarly, you can specify a list of nested tuples, e.g.,\n\n    .. code-block:: python\n\n        import requests\n        from requests_toolbelt.utils import formdata\n\n        query = [\n            ('my_list', [\n                ('foo', 'bar'),\n                ('biz', 'baz'),\n            ]),\n            ('a', 'b'),\n        ]\n\n        resp = requests.get(url, params=formdata.urlencode(query))\n        # or\n        resp = requests.post(\n            url,\n            data=formdata.urlencode(query),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n        )\n\n    For additional parameter and return information, see the official\n    `urlencode`_ documentation.\n\n    .. _urlencode:\n        https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode\n    \"\"\"\n    expand_classes = (dict, list, tuple)\n    original_query_list = _to_kv_list(query)\n\n    if not all(_is_two_tuple(i) for i in original_query_list):\n        raise ValueError(\"Expected query to be able to be converted to a \"\n                         \"list comprised of length 2 tuples.\")\n\n    query_list = original_query_list\n    while any(isinstance(v, expand_classes) for _, v in query_list):\n        query_list = _expand_query_values(query_list)\n\n    return _urlencode(query_list, *args, **kwargs)\n\n\n"
    },
    {
      "function": "response.json",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 944,
      "caller": "test_authentication_redirect",
      "source_code": "    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n\n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n\n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n            raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\n"
    }
  ],
  "assertions": [
    "assert response.status_code == 200",
    "assert response.url == url",
    "assert response.status_code == 200",
    "assert response.json() == {'authenticated': True, 'user': 'tomchristie'}",
    "assert response.status_code == 200",
    "assert response.url == url",
    "assert response.status_code == 200",
    "assert response.json() == {'authenticated': True, 'user': 'tomchristie'}"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_authentication_redirect(test_client_factory: TestClientFactory) -> None:\n    with test_client_factory(app) as client:\n        response = client.get(\"/admin\")\n        assert response.status_code == 200\n        url = \"{}?{}\".format(\"http://testserver/\", urlencode({\"next\": \"http://testserver/admin\"}))\n        assert response.url == url\n\n        response = client.get(\"/admin\", auth=(\"tomchristie\", \"example\"))\n        assert response.status_code == 200\n        assert response.json() == {\"authenticated\": True, \"user\": \"tomchristie\"}\n\n        response = client.get(\"/admin/sync\")\n        assert response.status_code == 200\n        url = \"{}?{}\".format(\"http://testserver/\", urlencode({\"next\": \"http://testserver/admin/sync\"}))\n        assert response.url == url\n\n        response = client.get(\"/admin/sync\", auth=(\"tomchristie\", \"example\"))\n        assert response.status_code == 200\n        assert response.json() == {\"authenticated\": True, \"user\": \"tomchristie\"}"
}