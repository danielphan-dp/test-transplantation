{
  "test_name": "test_bad_deliver_cancel",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_subprocess.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "proc.terminate",
      "source_code": "    def terminate(self) -> None:\n        \"\"\"Terminate the process, politely if possible.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_subprocess.py",
      "line_number": 279
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "nursery.cancel_scope.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "partial",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "wait_all_tasks_blocked",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "SLEEP",
      "source_code": "    def SLEEP(seconds: int) -> list[str]:\n        return [\"sleep\", str(seconds)]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_subprocess.py",
      "line_number": 77
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "proc.terminate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_subprocess.py",
      "line": 279,
      "caller": "test_bad_deliver_cancel",
      "source_code": "    def terminate(self) -> None:\n        \"\"\"Terminate the process, politely if possible.\n\n        On UNIX, this is equivalent to\n        ``send_signal(signal.SIGTERM)``; by convention this requests\n        graceful termination, but a misbehaving or buggy process might\n        ignore it. On Windows, :meth:`terminate` forcibly terminates the\n        process in the same manner as :meth:`kill`.\n        \"\"\"\n        self._proc.terminate()\n\n"
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_bad_deliver_cancel",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_bad_deliver_cancel",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_bad_deliver_cancel",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "nursery.cancel_scope.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_bad_deliver_cancel",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "partial",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "wait_all_tasks_blocked",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_bad_deliver_cancel",
      "source_code": ""
    },
    {
      "function": "SLEEP",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_subprocess.py",
      "line": 77,
      "caller": "test_bad_deliver_cancel",
      "source_code": "    def SLEEP(seconds: int) -> list[str]:\n        return [\"sleep\", str(seconds)]\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_bad_deliver_cancel() -> None:\n    async def custom_deliver_cancel(proc: Process) -> None:\n        proc.terminate()\n        raise ValueError(\"foo\")\n\n    async def do_stuff() -> None:\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(\n                partial(run_process, SLEEP(9999), deliver_cancel=custom_deliver_cancel)\n            )\n            await wait_all_tasks_blocked()\n            nursery.cancel_scope.cancel()\n\n    # double wrap from our nursery + the internal nursery\n    with RaisesGroup(RaisesGroup(Matcher(ValueError, \"^foo$\"))):\n        _core.run(do_stuff, strict_exception_groups=True)"
}