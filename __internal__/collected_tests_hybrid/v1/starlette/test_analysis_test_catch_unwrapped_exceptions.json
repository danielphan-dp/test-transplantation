{
  "test_name": "test_catch_unwrapped_exceptions",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_catch_unwrapped_exceptions",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_catch_unwrapped_exceptions() -> None:\n    # Catches lone exceptions with strict=False\n    # just as except* would\n    with RaisesGroup(ValueError, allow_unwrapped=True):\n        raise ValueError\n\n    # expecting multiple unwrapped exceptions is not possible\n    with pytest.raises(\n        ValueError, match=\"^You cannot specify multiple exceptions with\"\n    ):\n        RaisesGroup(SyntaxError, ValueError, allow_unwrapped=True)  # type: ignore[call-overload]\n    # if users want one of several exception types they need to use a Matcher\n    # (which the error message suggests)\n    with RaisesGroup(\n        Matcher(check=lambda e: isinstance(e, (SyntaxError, ValueError))),\n        allow_unwrapped=True,\n    ):\n        raise ValueError\n\n    # Unwrapped nested `RaisesGroup` is likely a user error, so we raise an error.\n    with pytest.raises(ValueError, match=\"has no effect when expecting\"):\n        RaisesGroup(RaisesGroup(ValueError), allow_unwrapped=True)  # type: ignore[call-overload]\n\n    # But it *can* be used to check for nesting level +- 1 if they move it to\n    # the nested RaisesGroup. Users should probably use `Matcher`s instead though.\n    with RaisesGroup(RaisesGroup(ValueError, allow_unwrapped=True)):\n        raise ExceptionGroup(\"\", [ExceptionGroup(\"\", [ValueError()])])\n    with RaisesGroup(RaisesGroup(ValueError, allow_unwrapped=True)):\n        raise ExceptionGroup(\"\", [ValueError()])\n\n    # with allow_unwrapped=False (default) it will not be caught\n    with pytest.raises(ValueError, match=\"^value error text$\"):\n        with RaisesGroup(ValueError):\n            raise ValueError(\"value error text\")\n\n    # allow_unwrapped on it's own won't match against nested groups\n    with pytest.raises(ExceptionGroup):\n        with RaisesGroup(ValueError, allow_unwrapped=True):\n            raise ExceptionGroup(\"\", [ExceptionGroup(\"\", [ValueError()])])\n\n    # for that you need both allow_unwrapped and flatten_subgroups\n    with RaisesGroup(ValueError, allow_unwrapped=True, flatten_subgroups=True):\n        raise ExceptionGroup(\"\", [ExceptionGroup(\"\", [ValueError()])])\n\n    # code coverage\n    with pytest.raises(TypeError):\n        with RaisesGroup(ValueError, allow_unwrapped=True):\n            raise TypeError"
}