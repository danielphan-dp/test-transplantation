{
  "test_name": "test_check_sequence_matches",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_tutil.py",
  "static_methods": [
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    },
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    },
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    },
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    },
    {
      "name": "check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 95
    }
  ],
  "dynamic_methods": [
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    },
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    },
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    },
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    },
    {
      "function": "check_sequence_matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 95,
      "caller": "test_check_sequence_matches",
      "source_code": "def check_sequence_matches(seq: Sequence[T], template: Iterable[T | set[T]]) -> None:\n    i = 0\n    for pattern in template:\n        if not isinstance(pattern, set):\n            pattern = {pattern}\n        got = set(seq[i : i + len(pattern)])\n        assert got == pattern\n        i += len(got)\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_check_sequence_matches() -> None:\n    check_sequence_matches([1, 2, 3], [1, 2, 3])\n    with pytest.raises(AssertionError):\n        check_sequence_matches([1, 3, 2], [1, 2, 3])\n    check_sequence_matches([1, 2, 3, 4], [1, {2, 3}, 4])\n    check_sequence_matches([1, 3, 2, 4], [1, {2, 3}, 4])\n    with pytest.raises(AssertionError):\n        check_sequence_matches([1, 2, 4, 3], [1, {2, 3}, 4])"
}