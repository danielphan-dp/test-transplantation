{
  "test_name": "test_classes_are_final",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
  "static_methods": [
    {
      "name": "class_is_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 82
    },
    {
      "name": "class_is_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 82
    },
    {
      "name": "module.__dict__.items",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line_number": 100
    },
    {
      "name": "name.startswith",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def endswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n    def replace(self, old: str, new: str, maxcount: int=...) -> str: ...\n    def encode(self, x: str=..., y: str=...) -> bytes: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line_number": 110
    },
    {
      "name": "issubclass",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "name.endswith",
      "source_code": "    def endswith(self, arg):\n        return str(self.path).endswith(arg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 67
    },
    {
      "name": "class_is_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line_number": 82
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "class_is_final",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 82,
      "caller": "test_classes_are_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False\n\n\n"
    },
    {
      "function": "class_is_final",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 82,
      "caller": "test_classes_are_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False\n\n\n"
    },
    {
      "function": "module.__dict__.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line": 100,
      "caller": "test_classes_are_final",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]\n\n\n"
    },
    {
      "function": "name.startswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/ir.py",
      "line": 110,
      "caller": "test_classes_are_final",
      "source_code": "    def startswith(self, x: str, start: int=..., end: int=...) -> bool: ...\n"
    },
    {
      "function": "issubclass",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_classes_are_final",
      "source_code": ""
    },
    {
      "function": "name.endswith",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 67,
      "caller": "test_classes_are_final",
      "source_code": "    def endswith(self, arg):\n        return str(self.path).endswith(arg)\n\n"
    },
    {
      "function": "class_is_final",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_exports.py",
      "line": 82,
      "caller": "test_classes_are_final",
      "source_code": "def class_is_final(cls: type) -> bool:\n    \"\"\"Check if a class cannot be subclassed.\"\"\"\n    try:\n        # new_class() handles metaclasses properly, type(...) does not.\n        types.new_class(\"SubclassTester\", (cls,))\n    except TypeError:\n        return True\n    else:\n        return False\n\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_classes_are_final",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not class_is_final(object)",
    "assert class_is_final(bool)",
    "assert class_is_final(class_)"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_classes_are_final() -> None:\n    # Sanity checks.\n    assert not class_is_final(object)\n    assert class_is_final(bool)\n\n    for module in PUBLIC_MODULES:\n        for name, class_ in module.__dict__.items():\n            if not isinstance(class_, type):\n                continue\n            # Deprecated classes are exported with a leading underscore\n            if name.startswith(\"_\"):  # pragma: no cover\n                continue\n\n            # Abstract classes can be subclassed, because that's the whole\n            # point of ABCs\n            if inspect.isabstract(class_):\n                continue\n            # Same with protocols, but only direct children.\n            if Protocol in class_.__bases__ or Protocol_ext in class_.__bases__:\n                continue\n            # Exceptions are allowed to be subclassed, because exception\n            # subclassing isn't used to inherit behavior.\n            if issubclass(class_, BaseException):\n                continue\n            # These are classes that are conceptually abstract, but\n            # inspect.isabstract returns False for boring reasons.\n            if class_ is trio.abc.Instrument or class_ is trio.socket.SocketType:\n                continue\n            # ... insert other special cases here ...\n\n            # The `Path` class needs to support inheritance to allow `WindowsPath` and `PosixPath`.\n            if class_ is trio.Path:\n                continue\n            # don't care about the *Statistics classes\n            if name.endswith(\"Statistics\"):\n                continue\n\n            assert class_is_final(class_)"
}