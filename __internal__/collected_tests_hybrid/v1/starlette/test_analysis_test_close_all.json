{
  "test_name": "test_close_all",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_highlevel_open_tcp_stream.py",
  "static_methods": [
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "CloseMe",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "CloseMe",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "CloseMe",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "to_close.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "OSError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "to_close.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "close_all",
      "source_code": "def close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line_number": 118
    },
    {
      "name": "to_close.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "to_close.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "CloseKiller",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "CloseMe",
      "filename": "",
      "line": 0,
      "caller": "test_close_all",
      "source_code": ""
    },
    {
      "function": "CloseMe",
      "filename": "",
      "line": 0,
      "caller": "test_close_all",
      "source_code": ""
    },
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "CloseMe",
      "filename": "",
      "line": 0,
      "caller": "test_close_all",
      "source_code": ""
    },
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "to_close.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_close_all",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "OSError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_close_all",
      "source_code": ""
    },
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "to_close.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_close_all",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "close_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_highlevel_open_tcp_stream.py",
      "line": 118,
      "caller": "test_close_all",
      "source_code": "@contextmanager\ndef close_all() -> Generator[set[SocketType], None, None]:\n    sockets_to_close: set[SocketType] = set()\n    try:\n        yield sockets_to_close\n    finally:\n        errs = []\n        for sock in sockets_to_close:\n            try:\n                sock.close()\n            except BaseException as exc:\n                errs.append(exc)\n        if len(errs) == 1:\n            raise errs[0]\n        elif errs:\n            raise BaseExceptionGroup(\"\", errs)\n\n\n"
    },
    {
      "function": "to_close.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_close_all",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "to_close.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_close_all",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "CloseKiller",
      "filename": "",
      "line": 0,
      "caller": "test_close_all",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert c.closed",
    "assert c.closed",
    "assert c.closed"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_close_all() -> None:\n    class CloseMe(SocketType):\n        closed = False\n\n        def close(self) -> None:\n            self.closed = True\n\n    class CloseKiller(SocketType):\n        def close(self) -> None:\n            raise OSError(\"os error text\")\n\n    c: CloseMe = CloseMe()\n    with close_all() as to_close:\n        to_close.add(c)\n    assert c.closed\n\n    c = CloseMe()\n    with pytest.raises(RuntimeError):\n        with close_all() as to_close:\n            to_close.add(c)\n            raise RuntimeError\n    assert c.closed\n\n    c = CloseMe()\n    with pytest.raises(OSError, match=\"os error text\"):\n        with close_all() as to_close:\n            to_close.add(CloseKiller())\n            to_close.add(c)\n    assert c.closed"
}