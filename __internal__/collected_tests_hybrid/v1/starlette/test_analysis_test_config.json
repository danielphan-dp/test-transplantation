{
  "test_name": "test_config",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_config.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 311
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 311
    },
    {
      "name": "monkeypatch.setenv",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 311
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "int",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "config",
      "source_code": "    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line_number": 429
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "Path",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "config.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 311,
      "caller": "test_config",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.\n\n        If ``prepend`` is a character, read the current environment variable\n        value and prepend the ``value`` adjoined with the ``prepend``\n        character.\n        \"\"\"\n        if not isinstance(value, str):\n            warnings.warn(  # type: ignore[unreachable]\n                PytestWarning(\n                    f\"Value of environment variable {name} type should be str, but got \"\n                    f\"{value!r} (type: {type(value).__name__}); converted to str implicitly\"\n                ),\n                stacklevel=2,\n            )\n            value = str(value)\n        if prepend and name in os.environ:\n            value = value + prepend + os.environ[name]\n        self.setitem(os.environ, name, value)\n\n"
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 311,
      "caller": "test_config",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.\n\n        If ``prepend`` is a character, read the current environment variable\n        value and prepend the ``value`` adjoined with the ``prepend``\n        character.\n        \"\"\"\n        if not isinstance(value, str):\n            warnings.warn(  # type: ignore[unreachable]\n                PytestWarning(\n                    f\"Value of environment variable {name} type should be str, but got \"\n                    f\"{value!r} (type: {type(value).__name__}); converted to str implicitly\"\n                ),\n                stacklevel=2,\n            )\n            value = str(value)\n        if prepend and name in os.environ:\n            value = value + prepend + os.environ[name]\n        self.setitem(os.environ, name, value)\n\n"
    },
    {
      "function": "monkeypatch.setenv",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 311,
      "caller": "test_config",
      "source_code": "    def setenv(self, name: str, value: str, prepend: str | None = None) -> None:\n        \"\"\"Set environment variable ``name`` to ``value``.\n\n        If ``prepend`` is a character, read the current environment variable\n        value and prepend the ``value`` adjoined with the ``prepend``\n        character.\n        \"\"\"\n        if not isinstance(value, str):\n            warnings.warn(  # type: ignore[unreachable]\n                PytestWarning(\n                    f\"Value of environment variable {name} type should be str, but got \"\n                    f\"{value!r} (type: {type(value).__name__}); converted to str implicitly\"\n                ),\n                stacklevel=2,\n            )\n            value = str(value)\n        if prepend and name in os.environ:\n            value = value + prepend + os.environ[name]\n        self.setitem(os.environ, name, value)\n\n"
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_config",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "int",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "config",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/fixtures.py",
      "line": 429,
      "caller": "test_config",
      "source_code": "    @property\n    def config(self) -> Config:\n        \"\"\"The pytest config object associated with this request.\"\"\"\n        return self._pyfuncitem.config\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "Path",
      "filename": "",
      "line": 0,
      "caller": "test_config",
      "source_code": ""
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "config.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_config",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    }
  ],
  "assertions": [
    "assert config('BOOL_AS_INT', cast=bool) is False",
    "assert config('BOOL_AS_INT', cast=cast_to_int) == 0",
    "assert config('DEFAULTED_BOOL', cast=cast_to_int, default=True) == 1",
    "assert DEBUG is True",
    "assert DATABASE_URL.path == '/dbname'",
    "assert DATABASE_URL.password == 'pass'",
    "assert DATABASE_URL.username == 'user'",
    "assert REQUEST_TIMEOUT == 10",
    "assert REQUEST_HOSTNAME == 'example.com'",
    "assert MAIL_HOSTNAME is None",
    "assert repr(SECRET_KEY) == \"Secret('**********')\"",
    "assert str(SECRET_KEY) == '12345'",
    "assert bool(SECRET_KEY)",
    "assert not bool(EMPTY_SECRET)",
    "assert not bool(UNSET_SECRET)",
    "assert REQUEST_HOSTNAME == 'example.com'",
    "assert config.get('STARLETTE_EXAMPLE_TEST', cast=int) == 123",
    "assert config.get('BOOL_AS_INT', cast=bool) is True"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_config(tmpdir: Path, monkeypatch: pytest.MonkeyPatch) -> None:\n    path = os.path.join(tmpdir, \".env\")\n    with open(path, \"w\") as file:\n        file.write(\"# Do not commit to source control\\n\")\n        file.write(\"DATABASE_URL=postgres://user:pass@localhost/dbname\\n\")\n        file.write(\"REQUEST_HOSTNAME=example.com\\n\")\n        file.write(\"SECRET_KEY=12345\\n\")\n        file.write(\"BOOL_AS_INT=0\\n\")\n        file.write(\"\\n\")\n        file.write(\"\\n\")\n\n    config = Config(path, environ={\"DEBUG\": \"true\"})\n\n    def cast_to_int(v: typing.Any) -> int:\n        return int(v)\n\n    DEBUG = config(\"DEBUG\", cast=bool)\n    DATABASE_URL = config(\"DATABASE_URL\", cast=URL)\n    REQUEST_TIMEOUT = config(\"REQUEST_TIMEOUT\", cast=int, default=10)\n    REQUEST_HOSTNAME = config(\"REQUEST_HOSTNAME\")\n    MAIL_HOSTNAME = config(\"MAIL_HOSTNAME\", default=None)\n    SECRET_KEY = config(\"SECRET_KEY\", cast=Secret)\n    UNSET_SECRET = config(\"UNSET_SECRET\", cast=Secret, default=None)\n    EMPTY_SECRET = config(\"EMPTY_SECRET\", cast=Secret, default=\"\")\n    assert config(\"BOOL_AS_INT\", cast=bool) is False\n    assert config(\"BOOL_AS_INT\", cast=cast_to_int) == 0\n    assert config(\"DEFAULTED_BOOL\", cast=cast_to_int, default=True) == 1\n\n    assert DEBUG is True\n    assert DATABASE_URL.path == \"/dbname\"\n    assert DATABASE_URL.password == \"pass\"\n    assert DATABASE_URL.username == \"user\"\n    assert REQUEST_TIMEOUT == 10\n    assert REQUEST_HOSTNAME == \"example.com\"\n    assert MAIL_HOSTNAME is None\n    assert repr(SECRET_KEY) == \"Secret('**********')\"\n    assert str(SECRET_KEY) == \"12345\"\n    assert bool(SECRET_KEY)\n    assert not bool(EMPTY_SECRET)\n    assert not bool(UNSET_SECRET)\n\n    with pytest.raises(KeyError):\n        config.get(\"MISSING\")\n\n    with pytest.raises(ValueError):\n        config.get(\"DEBUG\", cast=int)\n\n    with pytest.raises(ValueError):\n        config.get(\"REQUEST_HOSTNAME\", cast=bool)\n\n    config = Config(Path(path))\n    REQUEST_HOSTNAME = config(\"REQUEST_HOSTNAME\")\n    assert REQUEST_HOSTNAME == \"example.com\"\n\n    config = Config()\n    monkeypatch.setenv(\"STARLETTE_EXAMPLE_TEST\", \"123\")\n    monkeypatch.setenv(\"BOOL_AS_INT\", \"1\")\n    assert config.get(\"STARLETTE_EXAMPLE_TEST\", cast=int) == 123\n    assert config.get(\"BOOL_AS_INT\", cast=bool) is True\n\n    monkeypatch.setenv(\"BOOL_AS_INT\", \"2\")\n    with pytest.raises(ValueError):\n        config.get(\"BOOL_AS_INT\", cast=bool)"
}