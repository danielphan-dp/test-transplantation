{
  "test_name": "test_cors_allow_all_methods",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_cors.py",
  "static_methods": [
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "PlainTextResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "getattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Middleware",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_cors_allow_all_methods",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "PlainTextResponse",
      "filename": "",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "getattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    },
    {
      "function": "Middleware",
      "filename": "",
      "line": 0,
      "caller": "test_cors_allow_all_methods",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.status_code == 200",
    "assert response.status_code == 200"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_cors_allow_all_methods(\n    test_client_factory: TestClientFactory,\n) -> None:\n    def homepage(request: Request) -> PlainTextResponse:\n        return PlainTextResponse(\"Homepage\", status_code=200)\n\n    app = Starlette(\n        routes=[\n            Route(\n                \"/\",\n                endpoint=homepage,\n                methods=[\"delete\", \"get\", \"head\", \"options\", \"patch\", \"post\", \"put\"],\n            )\n        ],\n        middleware=[Middleware(CORSMiddleware, allow_origins=[\"*\"], allow_methods=[\"*\"])],\n    )\n\n    client = test_client_factory(app)\n\n    headers = {\"Origin\": \"https://example.org\"}\n\n    for method in (\"patch\", \"post\", \"put\"):\n        response = getattr(client, method)(\"/\", headers=headers, json={})\n        assert response.status_code == 200\n    for method in (\"delete\", \"get\", \"head\", \"options\"):\n        response = getattr(client, method)(\"/\", headers=headers)\n        assert response.status_code == 200"
}