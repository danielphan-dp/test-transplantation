{
  "test_name": "test_empty",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pkginfo/tests/test_commandline.py",
  "static_methods": [
    {
      "name": "_Monkey",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTrue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "usage.splitlines",
      "source_code": "    def splitlines(  # type: ignore[override]\n        self, /, keepends: bool = False\n    ) -> list[te.Self]:\n        return [self.__class__(v) for v in super().splitlines(keepends)]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line_number": 183
    },
    {
      "name": "_Monkey",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "def assertRaises(typ: type, msg: str = '') -> Iterator[None]:\n    try:\n        yield\n    except Exception as e:\n        assert isinstance(e, typ), f\"{e!r} is not a {typ.__name__}\"\n        assert msg in str(e), f'Message \"{e}\" does not match \"{msg}\"'\n    else:\n        assert False, f\"Expected {typ.__name__} but got no exception\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/testutil.py",
      "line_number": 44
    },
    {
      "name": "buf.getvalue",
      "source_code": "    def getvalue(self) -> str:\n        assert isinstance(self.buffer, io.BytesIO)\n        return self.buffer.getvalue().decode(\"UTF-8\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 187
    }
  ],
  "dynamic_methods": [
    {
      "function": "_Monkey",
      "filename": "",
      "line": 0,
      "caller": "test_empty",
      "source_code": ""
    },
    {
      "function": "self.assertTrue",
      "filename": "",
      "line": 0,
      "caller": "test_empty",
      "source_code": ""
    },
    {
      "function": "usage.splitlines",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/markupsafe/__init__.py",
      "line": 183,
      "caller": "test_empty",
      "source_code": "    def splitlines(  # type: ignore[override]\n        self, /, keepends: bool = False\n"
    },
    {
      "function": "_Monkey",
      "filename": "",
      "line": 0,
      "caller": "test_empty",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/testutil.py",
      "line": 44,
      "caller": "test_empty",
      "source_code": "@contextmanager\ndef assertRaises(typ: type, msg: str = '') -> Iterator[None]:\n    try:\n        yield\n    except Exception as e:\n        assert isinstance(e, typ), f\"{e!r} is not a {typ.__name__}\"\n        assert msg in str(e), f'Message \"{e}\" does not match \"{msg}\"'\n    else:\n        assert False, f\"Expected {typ.__name__} but got no exception\"\n\n"
    },
    {
      "function": "buf.getvalue",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 187,
      "caller": "test_empty",
      "source_code": "    def getvalue(self) -> str:\n        assert isinstance(self.buffer, io.BytesIO)\n        return self.buffer.getvalue().decode(\"UTF-8\")\n\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_empty(self):\n        from pkginfo.commandline import __doc__ as usage\n\n        firstline = usage.splitlines()[0]\n        buf = io.StringIO()\n\n        with _Monkey(sys, stderr=buf):\n            self.assertRaises(SystemExit, self._callFUT, [])\n        self.assertTrue(firstline in buf.getvalue())"
}