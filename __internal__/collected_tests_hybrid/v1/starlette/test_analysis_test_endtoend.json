{
  "test_name": "test_endtoend",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/tools/test_mypy_annotate.py",
  "static_methods": [
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "capsys.readouterr",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 685
    },
    {
      "name": "result_file.exists",
      "source_code": "    def exists(self):\n        return self._stat()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 126
    },
    {
      "name": "main",
      "source_code": "def main():\n    from argparse import ArgumentParser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 288
    },
    {
      "name": "capsys.readouterr",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 685
    },
    {
      "name": "result_file.exists",
      "source_code": "    def exists(self):\n        return self._stat()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 126
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mypy_annotate.main",
      "source_code": "def main():\n    from argparse import ArgumentParser",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 288
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_endtoend",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "capsys.readouterr",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 685,
      "caller": "test_endtoend",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]\n\n\n"
    },
    {
      "function": "result_file.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 126,
      "caller": "test_endtoend",
      "source_code": "    def exists(self):\n        return self._stat()\n\n"
    },
    {
      "function": "main",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 288,
      "caller": "test_endtoend",
      "source_code": "def main():\n    from argparse import ArgumentParser\n\n    parser = ArgumentParser()\n    parser.add_argument(\"--version\", action=\"version\", version=__version__)\n    parser.add_argument(\"directory\")\n    for args, kwargs in options():\n        parser.add_argument(*args, **kwargs)\n\n    args = parser.parse_args().__dict__\n\n    try:\n        ghp_import(args.pop(\"directory\"), **args)\n    except GhpError as e:\n        parser.error(e.message)\n\n\n"
    },
    {
      "function": "capsys.readouterr",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 685,
      "caller": "test_endtoend",
      "source_code": "    def readouterr(self) -> CaptureResult[AnyStr]:\n        out = self.out.snap() if self.out else \"\"\n        err = self.err.snap() if self.err else \"\"\n        # TODO: This type error is real, need to fix.\n        return CaptureResult(out, err)  # type: ignore[arg-type]\n\n\n"
    },
    {
      "function": "result_file.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 126,
      "caller": "test_endtoend",
      "source_code": "    def exists(self):\n        return self._stat()\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_endtoend",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_endtoend",
      "source_code": ""
    },
    {
      "function": "mypy_annotate.main",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 288,
      "caller": "test_endtoend",
      "source_code": "def main():\n    from argparse import ArgumentParser\n\n    parser = ArgumentParser()\n    parser.add_argument(\"--version\", action=\"version\", version=__version__)\n    parser.add_argument(\"directory\")\n    for args, kwargs in options():\n        parser.add_argument(*args, **kwargs)\n\n    args = parser.parse_args().__dict__\n\n    try:\n        ghp_import(args.pop(\"directory\"), **args)\n    except GhpError as e:\n        parser.error(e.message)\n\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_endtoend",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_endtoend",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not result_file.exists()",
    "assert std.err == ''",
    "assert std.out == inp_text",
    "assert result_file.exists()",
    "assert std.err == ''",
    "assert std.out == '::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing annotations  [no-untyped-def]\\n'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_endtoend(\n    tmp_path: Path,\n    monkeypatch: pytest.MonkeyPatch,\n    capsys: pytest.CaptureFixture[str],\n) -> None:\n    import trio._tools.mypy_annotate as mypy_annotate\n\n    inp_text = \"\"\"\\\nMypy begun\ntrio/core.py:15: error: Bad types here [misc]\ntrio/package/module.py:48:4:56:18: warn: Missing annotations  [no-untyped-def]\nFound 3 errors in 29 files\n\"\"\"\n    result_file = tmp_path / \"dump.dat\"\n    assert not result_file.exists()\n    with monkeypatch.context():\n        monkeypatch.setattr(sys, \"stdin\", io.StringIO(inp_text))\n\n        mypy_annotate.main(\n            [\"--dumpfile\", str(result_file), \"--platform\", \"SomePlatform\"]\n        )\n\n    std = capsys.readouterr()\n    assert std.err == \"\"\n    assert std.out == inp_text  # Echos the original.\n\n    assert result_file.exists()\n\n    main([\"--dumpfile\", str(result_file)])\n\n    std = capsys.readouterr()\n    assert std.err == \"\"\n    assert std.out == (\n        \"::error file=trio/core.py,line=15,title=Mypy-SomePlatform::trio/core.py:15: Bad types here [misc]\\n\"\n        \"::warning file=trio/package/module.py,line=48,col=4,endLine=56,endColumn=18,\"\n        \"title=Mypy-SomePlatform::trio/package/module.py:(48:4 - 56:18): Missing \"\n        \"annotations  [no-untyped-def]\\n\"\n    )"
}