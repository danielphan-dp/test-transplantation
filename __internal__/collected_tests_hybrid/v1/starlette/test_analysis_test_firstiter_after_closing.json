{
  "test_name": "test_firstiter_after_closing",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_asyncgen.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "funky_agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "saved.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "funky_agen.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "aiter_.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "funky_agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_firstiter_after_closing",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "funky_agen",
      "filename": "",
      "line": 0,
      "caller": "test_firstiter_after_closing",
      "source_code": ""
    },
    {
      "function": "saved.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_firstiter_after_closing",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_firstiter_after_closing",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_firstiter_after_closing",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "funky_agen.asend",
      "filename": "",
      "line": 0,
      "caller": "test_firstiter_after_closing",
      "source_code": ""
    },
    {
      "function": "aiter_.asend",
      "filename": "",
      "line": 0,
      "caller": "test_firstiter_after_closing",
      "source_code": ""
    },
    {
      "function": "aiter_.asend",
      "filename": "",
      "line": 0,
      "caller": "test_firstiter_after_closing",
      "source_code": ""
    },
    {
      "function": "funky_agen",
      "filename": "",
      "line": 0,
      "caller": "test_firstiter_after_closing",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert record == ['cleanup 2', 'cleanup 1']",
    "assert await aiter_.asend(None) == 1",
    "assert await aiter_.asend(None) == 2"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_firstiter_after_closing() -> None:\n    saved = []\n    record = []\n\n    async def funky_agen() -> AsyncGenerator[int, None]:\n        try:\n            yield 1\n        except GeneratorExit:\n            record.append(\"cleanup 1\")\n            raise\n        try:\n            yield 2\n        finally:\n            record.append(\"cleanup 2\")\n            await funky_agen().asend(None)\n\n    async def async_main() -> None:\n        aiter_ = funky_agen()\n        saved.append(aiter_)\n        assert await aiter_.asend(None) == 1\n        assert await aiter_.asend(None) == 2\n\n    _core.run(async_main)\n    assert record == [\"cleanup 2\", \"cleanup 1\"]"
}