{
  "test_name": "test_get_connectable_addresses",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/tests/test_bus.py",
  "static_methods": [
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bus.get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line_number": 22
    },
    {
      "name": "bus.get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line_number": 22
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bus.get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line_number": 22
    }
  ],
  "dynamic_methods": [
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_connectable_addresses",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_connectable_addresses",
      "source_code": ""
    },
    {
      "function": "bus.get_connectable_addresses",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line": 22,
      "caller": "test_get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)\n\n        elif transport == 'unix':\n            if 'abstract' in kv:\n                yield '\\0' + kv['abstract']\n                found = True\n            elif 'path' in kv:\n                yield kv['path']\n                found = True\n\n    if not found:\n        raise RuntimeError(\"DBus transports ({}) not supported. Supported: {}\"\n                           .format(unsupported_transports, SUPPORTED_TRANSPORTS))\n\n"
    },
    {
      "function": "bus.get_connectable_addresses",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line": 22,
      "caller": "test_get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)\n\n        elif transport == 'unix':\n            if 'abstract' in kv:\n                yield '\\0' + kv['abstract']\n                found = True\n            elif 'path' in kv:\n                yield kv['path']\n                found = True\n\n    if not found:\n        raise RuntimeError(\"DBus transports ({}) not supported. Supported: {}\"\n                           .format(unsupported_transports, SUPPORTED_TRANSPORTS))\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_get_connectable_addresses",
      "source_code": ""
    },
    {
      "function": "bus.get_connectable_addresses",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/bus.py",
      "line": 22,
      "caller": "test_get_connectable_addresses",
      "source_code": "def get_connectable_addresses(addr):\n    unsupported_transports = set()\n    found = False\n    for transport, kv in parse_addresses(addr):\n        if transport not in SUPPORTED_TRANSPORTS:\n            unsupported_transports.add(transport)\n\n        elif transport == 'unix':\n            if 'abstract' in kv:\n                yield '\\0' + kv['abstract']\n                found = True\n            elif 'path' in kv:\n                yield kv['path']\n                found = True\n\n    if not found:\n        raise RuntimeError(\"DBus transports ({}) not supported. Supported: {}\"\n                           .format(unsupported_transports, SUPPORTED_TRANSPORTS))\n\n"
    }
  ],
  "assertions": [
    "assert a == ['/run/user/1000/bus']",
    "assert a == ['\\x00/tmp/foo']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_get_connectable_addresses():\n    a = list(bus.get_connectable_addresses('unix:path=/run/user/1000/bus'))\n    assert a == ['/run/user/1000/bus']\n\n    a = list(bus.get_connectable_addresses('unix:abstract=/tmp/foo'))\n    assert a == ['\\0/tmp/foo']\n\n    with pytest.raises(RuntimeError):\n        list(bus.get_connectable_addresses('unix:tmpdir=/tmp'))"
}