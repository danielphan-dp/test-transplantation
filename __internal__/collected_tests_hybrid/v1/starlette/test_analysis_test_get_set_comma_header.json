{
  "test_name": "test_get_set_comma_header",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_headers.py",
  "static_methods": [
    {
      "name": "normalize_and_validate",
      "source_code": "def normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:\n    ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 134
    },
    {
      "name": "set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 252
    },
    {
      "name": "set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 252
    },
    {
      "name": "get_comma_header",
      "source_code": "def get_comma_header(headers: Headers, name: bytes) -> List[bytes]:\n    # Should only be used for headers whose value is a list of\n    # comma-separated, case-insensitive values.\n    #\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Connection: meets these criteria (including cast insensitivity).\n    #\n    # Content-Length: technically is just a single value (1*DIGIT), but the\n    # standard makes reference to implementations that do multiple values, and\n    # using this doesn't hurt. Ditto, case insensitivity doesn't things either\n    # way.\n    #\n    # Transfer-Encoding: is more complex (allows for quoted strings), so\n    # splitting on , is actually wrong. For example, this is legal:\n    #\n    #    Transfer-Encoding: foo; options=\"1,2\", chunked\n    #\n    # and should be parsed as\n    #\n    #    foo; options=\"1,2\"\n    #    chunked\n    #\n    # but this naive function will parse it as\n    #\n    #    foo; options=\"1\n    #    2\"\n    #    chunked\n    #\n    # However, this is okay because the only thing we are going to do with\n    # any Transfer-Encoding is reject ones that aren't just \"chunked\", so\n    # both of these will be treated the same anyway.\n    #\n    # Expect: the only legal value is the literal string\n    # \"100-continue\". Splitting on commas is harmless. Case insensitive.\n    #\n    out: List[bytes] = []\n    for _, found_name, found_raw_value in headers._full_items:\n        if found_name == name:\n            found_raw_value = found_raw_value.lower()\n            for found_split_value in found_raw_value.split(b\",\"):\n                found_split_value = found_split_value.strip()\n                if found_split_value:\n                    out.append(found_split_value)\n    return out",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 205
    },
    {
      "name": "set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line_number": 252
    }
  ],
  "dynamic_methods": [
    {
      "function": "normalize_and_validate",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 134,
      "caller": "test_get_set_comma_header",
      "source_code": "@overload\ndef normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:\n    ...\n\n\n"
    },
    {
      "function": "set_comma_header",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 252,
      "caller": "test_get_set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)\n\n\n"
    },
    {
      "function": "set_comma_header",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 252,
      "caller": "test_get_set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)\n\n\n"
    },
    {
      "function": "get_comma_header",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 205,
      "caller": "test_get_set_comma_header",
      "source_code": "def get_comma_header(headers: Headers, name: bytes) -> List[bytes]:\n    # Should only be used for headers whose value is a list of\n    # comma-separated, case-insensitive values.\n    #\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Connection: meets these criteria (including cast insensitivity).\n    #\n    # Content-Length: technically is just a single value (1*DIGIT), but the\n    # standard makes reference to implementations that do multiple values, and\n    # using this doesn't hurt. Ditto, case insensitivity doesn't things either\n    # way.\n    #\n    # Transfer-Encoding: is more complex (allows for quoted strings), so\n    # splitting on , is actually wrong. For example, this is legal:\n    #\n    #    Transfer-Encoding: foo; options=\"1,2\", chunked\n    #\n    # and should be parsed as\n    #\n    #    foo; options=\"1,2\"\n    #    chunked\n    #\n    # but this naive function will parse it as\n    #\n    #    foo; options=\"1\n    #    2\"\n    #    chunked\n    #\n    # However, this is okay because the only thing we are going to do with\n    # any Transfer-Encoding is reject ones that aren't just \"chunked\", so\n    # both of these will be treated the same anyway.\n    #\n    # Expect: the only legal value is the literal string\n    # \"100-continue\". Splitting on commas is harmless. Case insensitive.\n    #\n    out: List[bytes] = []\n    for _, found_name, found_raw_value in headers._full_items:\n        if found_name == name:\n            found_raw_value = found_raw_value.lower()\n            for found_split_value in found_raw_value.split(b\",\"):\n                found_split_value = found_split_value.strip()\n                if found_split_value:\n                    out.append(found_split_value)\n    return out\n\n\n"
    },
    {
      "function": "set_comma_header",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_headers.py",
      "line": 252,
      "caller": "test_get_set_comma_header",
      "source_code": "def set_comma_header(headers: Headers, name: bytes, new_values: List[bytes]) -> Headers:\n    # The header name `name` is expected to be lower-case bytes.\n    #\n    # Note that when we store the header we use title casing for the header\n    # names, in order to match the conventional HTTP header style.\n    #\n    # Simply calling `.title()` is a blunt approach, but it's correct\n    # here given the cases where we're using `set_comma_header`...\n    #\n    # Connection, Content-Length, Transfer-Encoding.\n    new_headers: List[Tuple[bytes, bytes]] = []\n    for found_raw_name, found_name, found_raw_value in headers._full_items:\n        if found_name != name:\n            new_headers.append((found_raw_name, found_raw_value))\n    for new_value in new_values:\n        new_headers.append((name.title(), new_value))\n    return normalize_and_validate(new_headers)\n\n\n"
    }
  ],
  "assertions": [
    "assert get_comma_header(headers, b'connection') == [b'close', b'foo', b'bar']",
    "assert headers == [(b'connection', b'close'), (b'whatever', b'something'), (b'connection', b'fOo,, , BAR'), (b'newthing', b'a'), (b'newthing', b'b')]",
    "assert headers == [(b'connection', b'close'), (b'connection', b'fOo,, , BAR'), (b'newthing', b'a'), (b'newthing', b'b'), (b'whatever', b'different thing')]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_get_set_comma_header() -> None:\n    headers = normalize_and_validate(\n        [\n            (\"Connection\", \"close\"),\n            (\"whatever\", \"something\"),\n            (\"connectiON\", \"fOo,, , BAR\"),\n        ]\n    )\n\n    assert get_comma_header(headers, b\"connection\") == [b\"close\", b\"foo\", b\"bar\"]\n\n    headers = set_comma_header(headers, b\"newthing\", [\"a\", \"b\"])  # type: ignore\n\n    with pytest.raises(LocalProtocolError):\n        set_comma_header(headers, b\"newthing\", [\"  a\", \"b\"])  # type: ignore\n\n    assert headers == [\n        (b\"connection\", b\"close\"),\n        (b\"whatever\", b\"something\"),\n        (b\"connection\", b\"fOo,, , BAR\"),\n        (b\"newthing\", b\"a\"),\n        (b\"newthing\", b\"b\"),\n    ]\n\n    headers = set_comma_header(headers, b\"whatever\", [\"different thing\"])  # type: ignore\n\n    assert headers == [\n        (b\"connection\", b\"close\"),\n        (b\"connection\", b\"fOo,, , BAR\"),\n        (b\"newthing\", b\"a\"),\n        (b\"newthing\", b\"b\"),\n        (b\"whatever\", b\"different thing\"),\n    ]"
}