{
  "test_name": "test_guest_is_initialized_when_start_returns",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "trio.lowlevel.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "trio_token.run_sync_soon",
      "source_code": "    def run_sync_soon(\n        self,\n        sync_fn: Callable[[Unpack[PosArgsT]], object],\n        *args: Unpack[PosArgsT],\n        idempotent: bool = False,\n    ) -> None:\n        with self.lock:\n            if self.done:\n                raise _core.RunFinishedError(\"run() has exited\")\n            # We have to hold the lock all the way through here, because\n            # otherwise the main thread might exit *while* we're doing these\n            # calls, and then our queue item might not be processed, or the\n            # wakeup call might trigger an OSError b/c the IO manager has\n            # already been shut down.\n            if idempotent:\n                self.idempotent_queue[(sync_fn, args)] = None\n            else:\n                self.queue.append((sync_fn, args))\n            self.wakeup.wakeup_thread_and_signal_safe()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_entry_queue.py",
      "line_number": 127
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "trio.lowlevel.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.lowlevel.current_trio_token",
      "source_code": "    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1964
    },
    {
      "name": "record.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.lowlevel.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BadClock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "trio.lowlevel.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "trio_token.run_sync_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_entry_queue.py",
      "line": 127,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "    def run_sync_soon(\n        self,\n        sync_fn: Callable[[Unpack[PosArgsT]], object],\n        *args: Unpack[PosArgsT],\n        idempotent: bool = False,\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "trio.lowlevel.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": ""
    },
    {
      "function": "trio.lowlevel.current_trio_token",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1964,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "    @_public\n    def current_trio_token(self) -> TrioToken:\n        \"\"\"Retrieve the :class:`TrioToken` for the current call to\n        :func:`trio.run`.\n\n        \"\"\"\n        if self.trio_token is None:\n            self.trio_token = TrioToken._create(self.entry_queue)\n        return self.trio_token\n\n"
    },
    {
      "function": "record.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": ""
    },
    {
      "function": "trio.lowlevel.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": ""
    },
    {
      "function": "BadClock",
      "filename": "",
      "line": 0,
      "caller": "test_guest_is_initialized_when_start_returns",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert res == 'ok'",
    "assert set(record) == {'system task ran', 'main task ran', 'run_sync_soon cb ran'}",
    "assert trio.lowlevel.current_trio_token() is trio_token",
    "assert record == []"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_guest_is_initialized_when_start_returns() -> None:\n    trio_token = None\n    record = []\n\n    async def trio_main(in_host: InHost) -> str:\n        record.append(\"main task ran\")\n        await trio.lowlevel.checkpoint()\n        assert trio.lowlevel.current_trio_token() is trio_token\n        return \"ok\"\n\n    def after_start() -> None:\n        # We should get control back before the main task executes any code\n        assert record == []\n\n        nonlocal trio_token\n        trio_token = trio.lowlevel.current_trio_token()\n        trio_token.run_sync_soon(record.append, \"run_sync_soon cb ran\")\n\n        @trio.lowlevel.spawn_system_task\n        async def early_task() -> None:\n            record.append(\"system task ran\")\n            await trio.lowlevel.checkpoint()\n\n    res = trivial_guest_run(trio_main, in_host_after_start=after_start)\n    assert res == \"ok\"\n    assert set(record) == {\"system task ran\", \"main task ran\", \"run_sync_soon cb ran\"}\n\n    class BadClock:\n        def start_clock(self) -> NoReturn:\n            raise ValueError(\"whoops\")\n\n    def after_start_never_runs() -> None:  # pragma: no cover\n        pytest.fail(\"shouldn't get here\")\n\n    # Errors during initialization (which can only be TrioInternalErrors)\n    # are raised out of start_guest_run, not out of the done_callback\n    with pytest.raises(trio.TrioInternalError):\n        trivial_guest_run(\n            trio_main, clock=BadClock(), in_host_after_start=after_start_never_runs\n        )"
}