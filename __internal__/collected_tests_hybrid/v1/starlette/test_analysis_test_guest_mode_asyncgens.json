{
  "test_name": "test_guest_mode_asyncgens",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.fail_after",
      "source_code": "def fail_after(seconds: float) -> AbstractContextManager[trio.CancelScope]:\n    \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n    it is actually cancelled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_timeouts.py",
      "line_number": 130
    },
    {
      "name": "context.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "trio.Event",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "task.add_done_callback",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "record.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "agen.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "iterate_in_aio",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.fail_after",
      "source_code": "def fail_after(seconds: float) -> AbstractContextManager[trio.CancelScope]:\n    \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n    it is actually cancelled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_timeouts.py",
      "line_number": 130
    },
    {
      "name": "agen.asend",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "done_evt.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "done_evt.wait",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line_number": 287
    },
    {
      "name": "agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "agen",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "restore_unraisablehook",
      "source_code": "def restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 83
    }
  ],
  "dynamic_methods": [
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "trio.fail_after",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_timeouts.py",
      "line": 130,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "def fail_after(seconds: float) -> AbstractContextManager[trio.CancelScope]:\n    \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n    it is actually cancelled.\n\n    This function and :func:`move_on_after` are similar in that both create a\n    cancel scope with a given timeout, and if the timeout expires then both\n    will cause :exc:`Cancelled` to be raised within the scope. The difference\n    is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n    it's caught and discarded. When it reaches :func:`fail_after`, then it's\n    caught and :exc:`TooSlowError` is raised in its place.\n\n    Args:\n      seconds (float): The timeout.\n\n    Raises:\n      TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n        and caught by the context manager.\n      ValueError: if *seconds* is less than zero or NaN.\n\n    \"\"\"\n    if seconds < 0:\n        raise ValueError(\"timeout must be non-negative\")\n    return fail_at(trio.current_time() + seconds)\n"
    },
    {
      "function": "context.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "trio.Event",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "task.add_done_callback",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "record.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "agen.asend",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "iterate_in_aio",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "trio.fail_after",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_timeouts.py",
      "line": 130,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "def fail_after(seconds: float) -> AbstractContextManager[trio.CancelScope]:\n    \"\"\"Creates a cancel scope with the given timeout, and raises an error if\n    it is actually cancelled.\n\n    This function and :func:`move_on_after` are similar in that both create a\n    cancel scope with a given timeout, and if the timeout expires then both\n    will cause :exc:`Cancelled` to be raised within the scope. The difference\n    is that when the :exc:`Cancelled` exception reaches :func:`move_on_after`,\n    it's caught and discarded. When it reaches :func:`fail_after`, then it's\n    caught and :exc:`TooSlowError` is raised in its place.\n\n    Args:\n      seconds (float): The timeout.\n\n    Raises:\n      TooSlowError: if a :exc:`Cancelled` exception is raised in this scope\n        and caught by the context manager.\n      ValueError: if *seconds* is less than zero or NaN.\n\n    \"\"\"\n    if seconds < 0:\n        raise ValueError(\"timeout must be non-negative\")\n    return fail_at(trio.current_time() + seconds)\n"
    },
    {
      "function": "agen.asend",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "done_evt.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "done_evt.wait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line": 287,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover\n\n\n"
    },
    {
      "function": "agen",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "agen",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_asyncgens",
      "source_code": ""
    },
    {
      "function": "restore_unraisablehook",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 83,
      "caller": "test_guest_mode_asyncgens",
      "source_code": "@contextmanager\ndef restore_unraisablehook() -> Generator[None, None, None]:\n    sys.unraisablehook, prev = sys.__unraisablehook__, sys.unraisablehook\n    try:\n        yield\n    finally:\n        sys.unraisablehook = prev\n\n\n"
    }
  ],
  "assertions": [
    "assert record == {('asyncio', 'asyncio'), ('trio', 'trio')}",
    "assert sniffio.current_async_library() == label"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_guest_mode_asyncgens() -> None:\n    import sniffio\n\n    record = set()\n\n    async def agen(label: str) -> AsyncGenerator[int, None]:\n        assert sniffio.current_async_library() == label\n        try:\n            yield 1\n        finally:\n            library = sniffio.current_async_library()\n            with contextlib.suppress(trio.Cancelled):\n                await sys.modules[library].sleep(0)\n            record.add((label, library))\n\n    async def iterate_in_aio() -> None:\n        await agen(\"asyncio\").asend(None)\n\n    async def trio_main() -> None:\n        task = asyncio.ensure_future(iterate_in_aio())\n        done_evt = trio.Event()\n        task.add_done_callback(lambda _: done_evt.set())\n        with trio.fail_after(1):\n            await done_evt.wait()\n\n        await agen(\"trio\").asend(None)\n\n        gc_collect_harder()\n\n    # Ensure we don't pollute the thread-level context if run under\n    # an asyncio without contextvars support (3.6)\n    context = contextvars.copy_context()\n    context.run(aiotrio_run, trio_main, host_uses_signal_set_wakeup_fd=True)\n\n    assert record == {(\"asyncio\", \"asyncio\"), (\"trio\", \"trio\")}"
}