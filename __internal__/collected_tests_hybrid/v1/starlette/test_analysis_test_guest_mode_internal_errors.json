{
  "test_name": "test_guest_mode_internal_errors",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "gc_collect_harder",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line_number": 48
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "monkeypatch.context",
      "source_code": "    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line_number": 138
    },
    {
      "name": "m.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "m.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "m.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "trio.sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "trio.lowlevel.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "old_get_events",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "gc_collect_harder",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/tutil.py",
      "line": 48,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def gc_collect_harder() -> None:\n    # In the test suite we sometimes want to call gc.collect() to make sure\n    # that any objects with noisy __del__ methods (e.g. unawaited coroutines)\n    # get collected before we continue, so their noise doesn't leak into\n    # unrelated tests.\n    #\n    # On PyPy, coroutine objects (for example) can survive at least 1 round of\n    # garbage collection, because executing their __del__ method to print the\n    # warning can cause them to be resurrected. So we call collect a few times\n    # to make sure.\n    for _ in range(5):\n        gc.collect()\n\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "monkeypatch.context",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/monkeypatch.py",
      "line": 138,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "    @classmethod\n    @contextmanager\n    def context(cls) -> Generator[MonkeyPatch]:\n        \"\"\"Context manager that returns a new :class:`MonkeyPatch` object\n        which undoes any patching done inside the ``with`` block upon exit.\n\n        Example:\n\n        .. code-block:: python\n\n            import functools\n\n\n            def test_partial(monkeypatch):\n                with monkeypatch.context() as m:\n                    m.setattr(functools, \"partial\", 3)\n\n        Useful in situations where it is desired to undo some patches before the test ends,\n        such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples\n        of this see :issue:`3290`).\n        \"\"\"\n        m = cls()\n        try:\n            yield m\n        finally:\n            m.undo()\n\n"
    },
    {
      "function": "m.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "m.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "m.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "trio.sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "trio.lowlevel.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    },
    {
      "function": "trio.sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_guest_mode_internal_errors",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    },
    {
      "function": "old_get_events",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_internal_errors",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_guest_mode_internal_errors(\n    monkeypatch: pytest.MonkeyPatch, recwarn: pytest.WarningsRecorder\n) -> None:\n    with monkeypatch.context() as m:\n\n        async def crash_in_run_loop(in_host: InHost) -> None:\n            m.setattr(\"trio._core._run.GLOBAL_RUN_CONTEXT.runner.runq\", \"HI\")\n            await trio.sleep(1)\n\n        with pytest.raises(trio.TrioInternalError):\n            trivial_guest_run(crash_in_run_loop)\n\n    with monkeypatch.context() as m:\n\n        async def crash_in_io(in_host: InHost) -> None:\n            m.setattr(\"trio._core._run.TheIOManager.get_events\", None)\n            await trio.lowlevel.checkpoint()\n\n        with pytest.raises(trio.TrioInternalError):\n            trivial_guest_run(crash_in_io)\n\n    with monkeypatch.context() as m:\n\n        async def crash_in_worker_thread_io(in_host: InHost) -> None:\n            t = threading.current_thread()\n            old_get_events = trio._core._run.TheIOManager.get_events\n\n            def bad_get_events(*args: Any) -> object:\n                if threading.current_thread() is not t:\n                    raise ValueError(\"oh no!\")\n                else:\n                    return old_get_events(*args)\n\n            m.setattr(\"trio._core._run.TheIOManager.get_events\", bad_get_events)\n\n            await trio.sleep(1)\n\n        with pytest.raises(trio.TrioInternalError):\n            trivial_guest_run(crash_in_worker_thread_io)\n\n    gc_collect_harder()"
}