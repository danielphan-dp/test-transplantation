{
  "test_name": "test_guest_mode_ki",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "KeyError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "signal_raise",
      "source_code": "    def signal_raise(signum: int) -> None: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_util.py",
      "line_number": 42
    },
    {
      "name": "partial",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "partial",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "KeyError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_ki",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_ki",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_mode_ki",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_ki",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_guest_mode_ki",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "signal_raise",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_util.py",
      "line": 42,
      "caller": "test_guest_mode_ki",
      "source_code": "    def signal_raise(signum: int) -> None: ...\n\n\n"
    },
    {
      "function": "partial",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_ki",
      "source_code": ""
    },
    {
      "function": "trio.sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_guest_mode_ki",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "partial",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_ki",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert signal.getsignal(signal.SIGINT) is signal.default_int_handler",
    "assert excinfo.value.__context__ is None",
    "assert signal.getsignal(signal.SIGINT) is signal.default_int_handler",
    "assert excinfo.value.__context__ is final_exc",
    "assert signal.getsignal(signal.SIGINT) is signal.default_int_handler"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_guest_mode_ki() -> None:\n    assert signal.getsignal(signal.SIGINT) is signal.default_int_handler\n\n    # Check SIGINT in Trio func and in host func\n    async def trio_main(in_host: InHost) -> None:\n        with pytest.raises(KeyboardInterrupt):\n            signal_raise(signal.SIGINT)\n\n        # Host SIGINT should get injected into Trio\n        in_host(partial(signal_raise, signal.SIGINT))\n        await trio.sleep(10)\n\n    with pytest.raises(KeyboardInterrupt) as excinfo:\n        trivial_guest_run(trio_main)\n    assert excinfo.value.__context__ is None\n    # Signal handler should be restored properly on exit\n    assert signal.getsignal(signal.SIGINT) is signal.default_int_handler\n\n    # Also check chaining in the case where KI is injected after main exits\n    final_exc = KeyError(\"whoa\")\n\n    async def trio_main_raising(in_host: InHost) -> NoReturn:\n        in_host(partial(signal_raise, signal.SIGINT))\n        raise final_exc\n\n    with pytest.raises(KeyboardInterrupt) as excinfo:\n        trivial_guest_run(trio_main_raising)\n    assert excinfo.value.__context__ is final_exc\n\n    assert signal.getsignal(signal.SIGINT) is signal.default_int_handler"
}