{
  "test_name": "test_guest_mode_on_asyncio",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "trio.open_memory_channel",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "from_trio.put_nowait",
      "source_code": "    def put_nowait(self, obj: T) -> None:\n        \"\"\"Put an object into the queue, without blocking.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_unbounded_queue.py",
      "line_number": 94
    },
    {
      "name": "AssertionError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "aiotrio_run",
      "source_code": "def aiotrio_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    pass_not_threadsafe: bool = True,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 431
    },
    {
      "name": "aiotrio_run",
      "source_code": "def aiotrio_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    pass_not_threadsafe: bool = True,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 431
    },
    {
      "name": "float",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "aio_pingpong",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.lowlevel.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "from_trio.put_nowait",
      "source_code": "    def put_nowait(self, obj: T) -> None:\n        \"\"\"Put an object into the queue, without blocking.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_unbounded_queue.py",
      "line_number": 94
    },
    {
      "name": "aio_task.cancel",
      "source_code": "    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 777
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "to_trio.send_nowait",
      "source_code": "    def send_nowait(self, value: SendType) -> None:\n        \"\"\"Like `~trio.abc.SendChannel.send`, but if the channel's buffer is\n        full, raises `WouldBlock` instead of blocking.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_channel.py",
      "line_number": 166
    },
    {
      "name": "from_trio.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    }
  ],
  "dynamic_methods": [
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "trio.open_memory_channel",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "from_trio.put_nowait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_unbounded_queue.py",
      "line": 94,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "    @_core.enable_ki_protection\n    def put_nowait(self, obj: T) -> None:\n        \"\"\"Put an object into the queue, without blocking.\n\n        This always succeeds, because the queue is unbounded. We don't provide\n        a blocking ``put`` method, because it would never need to block.\n\n        Args:\n          obj (object): The object to enqueue.\n\n        \"\"\"\n        if not self._data:\n            assert not self._can_get\n            if self._lot:\n                self._lot.unpark(count=1)\n            else:\n                self._can_get = True\n        self._data.append(obj)\n\n"
    },
    {
      "function": "AssertionError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "aiotrio_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 431,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "def aiotrio_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    pass_not_threadsafe: bool = True,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "aiotrio_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 431,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "def aiotrio_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    pass_not_threadsafe: bool = True,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "float",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "aio_pingpong",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "trio.lowlevel.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "from_trio.put_nowait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_unbounded_queue.py",
      "line": 94,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "    @_core.enable_ki_protection\n    def put_nowait(self, obj: T) -> None:\n        \"\"\"Put an object into the queue, without blocking.\n\n        This always succeeds, because the queue is unbounded. We don't provide\n        a blocking ``put`` method, because it would never need to block.\n\n        Args:\n          obj (object): The object to enqueue.\n\n        \"\"\"\n        if not self._data:\n            assert not self._can_get\n            if self._lot:\n                self._lot.unpark(count=1)\n            else:\n                self._can_get = True\n        self._data.append(obj)\n\n"
    },
    {
      "function": "aio_task.cancel",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 777,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "    @enable_ki_protection\n    def cancel(self) -> None:\n        \"\"\"Cancels this scope immediately.\n\n        This method is idempotent, i.e., if the scope was already\n        cancelled then this method silently does nothing.\n        \"\"\"\n        if self._cancel_called:\n            return\n        with self._might_change_registered_deadline():\n            self._cancel_called = True\n        if self._cancel_status is not None:\n            self._cancel_status.recalculate()\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": ""
    },
    {
      "function": "to_trio.send_nowait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_channel.py",
      "line": 166,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "    @enable_ki_protection\n    def send_nowait(self, value: SendType) -> None:\n        \"\"\"Like `~trio.abc.SendChannel.send`, but if the channel's buffer is\n        full, raises `WouldBlock` instead of blocking.\n\n        \"\"\"\n        if self._closed:\n            raise trio.ClosedResourceError\n        if self._state.open_receive_channels == 0:\n            raise trio.BrokenResourceError\n        if self._state.receive_tasks:\n            assert not self._state.data\n            task, _ = self._state.receive_tasks.popitem(last=False)\n            task.custom_sleep_data._tasks.remove(task)\n            trio.lowlevel.reschedule(task, Value(value))\n        elif len(self._state.data) < self._state.max_buffer_size:\n            self._state.data.append(value)\n        else:\n            raise trio.WouldBlock\n\n"
    },
    {
      "function": "from_trio.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_guest_mode_on_asyncio",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    }
  ],
  "assertions": [
    "assert aiotrio_run(trio_main, host_uses_signal_set_wakeup_fd=True) == 'trio-main-done'",
    "assert aiotrio_run(trio_main, pass_not_threadsafe=False, host_uses_signal_set_wakeup_fd=True) == 'trio-main-done'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_guest_mode_on_asyncio() -> None:\n    async def trio_main() -> str:\n        print(\"trio_main!\")\n\n        to_trio, from_aio = trio.open_memory_channel[int](float(\"inf\"))\n        from_trio: asyncio.Queue[int] = asyncio.Queue()\n\n        aio_task = asyncio.ensure_future(aio_pingpong(from_trio, to_trio))\n\n        # Make sure we have at least one tick where we don't need to go into\n        # the thread\n        await trio.lowlevel.checkpoint()\n\n        from_trio.put_nowait(0)\n\n        async for n in from_aio:\n            print(f\"trio got: {n}\")\n            from_trio.put_nowait(n + 1)\n            if n >= 10:\n                aio_task.cancel()\n                return \"trio-main-done\"\n\n        raise AssertionError(\"should never be reached\")  # pragma: no cover\n\n    async def aio_pingpong(\n        from_trio: asyncio.Queue[int], to_trio: MemorySendChannel[int]\n    ) -> None:\n        print(\"aio_pingpong!\")\n\n        try:\n            while True:\n                n = await from_trio.get()\n                print(f\"aio got: {n}\")\n                to_trio.send_nowait(n + 1)\n        except asyncio.CancelledError:\n            raise\n        except:  # pragma: no cover\n            traceback.print_exc()\n            raise\n\n    assert (\n        aiotrio_run(\n            trio_main,\n            # Not all versions of asyncio we test on can actually be trusted,\n            # but this test doesn't care about signal handling, and it's\n            # easier to just avoid the warnings.\n            host_uses_signal_set_wakeup_fd=True,\n        )\n        == \"trio-main-done\"\n    )\n\n    assert (\n        aiotrio_run(\n            trio_main,\n            # Also check that passing only call_soon_threadsafe works, via the\n            # fallback path where we use it for everything.\n            pass_not_threadsafe=False,\n            host_uses_signal_set_wakeup_fd=True,\n        )\n        == \"trio-main-done\"\n    )"
}