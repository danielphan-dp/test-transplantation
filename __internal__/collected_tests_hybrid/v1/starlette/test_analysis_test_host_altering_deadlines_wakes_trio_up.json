{
  "test_name": "test_host_altering_deadlines_wakes_trio_up",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
  "static_methods": [
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trivial_guest_run",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 51
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.CancelScope",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "in_host",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.sleep_forever",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "trio.sleep",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line_number": 25
    },
    {
      "name": "set_deadline",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 199
    },
    {
      "name": "set_deadline",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 199
    },
    {
      "name": "set_deadline",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line_number": 199
    }
  ],
  "dynamic_methods": [
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "trivial_guest_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 51,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": "def trivial_guest_run(\n    trio_fn: Callable[..., Awaitable[T]],\n    *,\n    in_host_after_start: Callable[[], None] | None = None,\n    **start_guest_run_kwargs: Any,\n"
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "trio.CancelScope",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "in_host",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "trio.sleep_forever",
      "filename": "",
      "line": 0,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": ""
    },
    {
      "function": "trio.sleep",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/tenacity/nap.py",
      "line": 25,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": "def sleep(seconds: float) -> None:\n    \"\"\"\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    \"\"\"\n    time.sleep(seconds)\n\n\n"
    },
    {
      "function": "set_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 199,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline\n\n"
    },
    {
      "function": "set_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 199,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline\n\n"
    },
    {
      "function": "set_deadline",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_guest_mode.py",
      "line": 199,
      "caller": "test_host_altering_deadlines_wakes_trio_up",
      "source_code": "    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline\n\n"
    }
  ],
  "assertions": [
    "assert trivial_guest_run(trio_main) == 'ok'",
    "assert cscope.cancelled_caught",
    "assert cscope.cancelled_caught"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_host_altering_deadlines_wakes_trio_up() -> None:\n    def set_deadline(cscope: trio.CancelScope, new_deadline: float) -> None:\n        cscope.deadline = new_deadline\n\n    async def trio_main(in_host: InHost) -> str:\n        with trio.CancelScope() as cscope:\n            in_host(lambda: set_deadline(cscope, -inf))\n            await trio.sleep_forever()\n        assert cscope.cancelled_caught\n\n        with trio.CancelScope() as cscope:\n            # also do a change that doesn't affect the next deadline, just to\n            # exercise that path\n            in_host(lambda: set_deadline(cscope, 1e6))\n            in_host(lambda: set_deadline(cscope, -inf))\n            await trio.sleep(999)\n        assert cscope.cancelled_caught\n\n        return \"ok\"\n\n    assert trivial_guest_run(trio_main) == \"ok\""
}