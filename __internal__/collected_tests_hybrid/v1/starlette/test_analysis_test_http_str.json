{
  "test_name": "test_http_str",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "HTTPException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "HTTPException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "HTTPException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    },
    {
      "function": "HTTPException",
      "filename": "",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    },
    {
      "function": "HTTPException",
      "filename": "",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    },
    {
      "function": "HTTPException",
      "filename": "",
      "line": 0,
      "caller": "test_http_str",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(HTTPException(status_code=404)) == '404: Not Found'",
    "assert str(HTTPException(404, 'Not Found: foo')) == '404: Not Found: foo'",
    "assert str(HTTPException(404, headers={'key': 'value'})) == '404: Not Found'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_http_str() -> None:\n    assert str(HTTPException(status_code=404)) == \"404: Not Found\"\n    assert str(HTTPException(404, \"Not Found: foo\")) == \"404: Not Found: foo\"\n    assert str(HTTPException(404, headers={\"key\": \"value\"})) == \"404: Not Found\""
}