{
  "test_name": "test_instruments",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
  "static_methods": [
    {
      "name": "TaskRecorder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TaskRecorder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TaskRecorder",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.remove_instrument",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 34
    },
    {
      "name": "_core.add_instrument",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 18
    },
    {
      "name": "_core.add_instrument",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 18
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.remove_instrument",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 34
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    },
    {
      "name": "r1.filter_tasks",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line_number": 36
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "TaskRecorder",
      "filename": "",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "TaskRecorder",
      "filename": "",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "TaskRecorder",
      "filename": "",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_instruments",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instruments",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "_core.remove_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 34,
      "caller": "test_instruments",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to de-activate.\n\n    Raises:\n      KeyError: if the instrument is not currently active. This could\n          occur either because you never added it, or because you added it\n          and then it raised an unhandled exception and was automatically\n          deactivated.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.remove_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n"
    },
    {
      "function": "_core.add_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 18,
      "caller": "test_instruments",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to activate.\n\n    If ``instrument`` is already active, does nothing.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.add_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.add_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 18,
      "caller": "test_instruments",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to activate.\n\n    If ``instrument`` is already active, does nothing.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.add_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "_core.remove_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 34,
      "caller": "test_instruments",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to de-activate.\n\n    Raises:\n      KeyError: if the instrument is not currently active. This could\n          occur either because you never added it, or because you added it\n          and then it raised an unhandled exception and was automatically\n          deactivated.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.remove_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n"
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_instruments",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_instruments",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    },
    {
      "function": "r1.filter_tasks",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
      "line": 36,
      "caller": "test_instruments",
      "source_code": "    def filter_tasks(self, tasks: Container[Task]) -> Iterable[tuple[str, Task | None]]:\n        for item in self.record:\n            if item[0] in (\"schedule\", \"before\", \"after\") and item[1] in tasks:\n                yield item\n            if item[0] in (\"before_run\", \"after_run\"):\n                yield item\n\n\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert r1.record == r2.record + r3.record",
    "assert task is not None",
    "assert list(r1.filter_tasks([task])) == expected"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_instruments(recwarn: object) -> None:\n    r1 = TaskRecorder()\n    r2 = TaskRecorder()\n    r3 = TaskRecorder()\n\n    task = None\n\n    # We use a child task for this, because the main task does some extra\n    # bookkeeping stuff that can leak into the instrument results, and we\n    # don't want to deal with it.\n    async def task_fn() -> None:\n        nonlocal task\n        task = _core.current_task()\n\n        for _ in range(4):\n            await _core.checkpoint()\n        # replace r2 with r3, to test that we can manipulate them as we go\n        _core.remove_instrument(r2)\n        with pytest.raises(KeyError):\n            _core.remove_instrument(r2)\n        # add is idempotent\n        _core.add_instrument(r3)\n        _core.add_instrument(r3)\n        for _ in range(1):\n            await _core.checkpoint()\n\n    async def main() -> None:\n        async with _core.open_nursery() as nursery:\n            nursery.start_soon(task_fn)\n\n    _core.run(main, instruments=[r1, r2])\n\n    # It sleeps 5 times, so it runs 6 times.  Note that checkpoint()\n    # reschedules the task immediately upon yielding, before the\n    # after_task_step event fires.\n    expected = (\n        [(\"before_run\", None), (\"schedule\", task)]\n        + [(\"before\", task), (\"schedule\", task), (\"after\", task)] * 5\n        + [(\"before\", task), (\"after\", task), (\"after_run\", None)]\n    )\n    assert r1.record == r2.record + r3.record\n    assert task is not None\n    assert list(r1.filter_tasks([task])) == expected"
}