{
  "test_name": "test_instruments_monkeypatch",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
  "static_methods": [
    {
      "name": "NullInstrument",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.remove_instrument",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 34
    },
    {
      "name": "_core.add_instrument",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 18
    },
    {
      "name": "_core.remove_instrument",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line_number": 34
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.count",
      "source_code": "    def count(self):\n        \"\"\" Returns the number of recurrences in this set. It will have go\n            through the whole recurrence, if this hasn't been done before. \"\"\"\n        if self._len is None:\n            for x in self:\n                pass\n        return self._len",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 183
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "record.count",
      "source_code": "    def count(self):\n        \"\"\" Returns the number of recurrences in this set. It will have go\n            through the whole recurrence, if this hasn't been done before. \"\"\"\n        if self._len is None:\n            for x in self:\n                pass\n        return self._len",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line_number": 183
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    },
    {
      "name": "_core.current_task",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 2730
    }
  ],
  "dynamic_methods": [
    {
      "function": "NullInstrument",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_instruments_monkeypatch",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.remove_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 34,
      "caller": "test_instruments_monkeypatch",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to de-activate.\n\n    Raises:\n      KeyError: if the instrument is not currently active. This could\n          occur either because you never added it, or because you added it\n          and then it raised an unhandled exception and was automatically\n          deactivated.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.remove_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n"
    },
    {
      "function": "_core.add_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 18,
      "caller": "test_instruments_monkeypatch",
      "source_code": "def add_instrument(instrument: Instrument) -> None:\n    \"\"\"Start instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to activate.\n\n    If ``instrument`` is already active, does nothing.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.add_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.remove_instrument",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_generated_instrumentation.py",
      "line": 34,
      "caller": "test_instruments_monkeypatch",
      "source_code": "def remove_instrument(instrument: Instrument) -> None:\n    \"\"\"Stop instrumenting the current run loop with the given instrument.\n\n    Args:\n      instrument (trio.abc.Instrument): The instrument to de-activate.\n\n    Raises:\n      KeyError: if the instrument is not currently active. This could\n          occur either because you never added it, or because you added it\n          and then it raised an unhandled exception and was automatically\n          deactivated.\n\n    \"\"\"\n    sys._getframe().f_locals[LOCALS_KEY_KI_PROTECTION_ENABLED] = True\n    try:\n        return GLOBAL_RUN_CONTEXT.runner.instruments.remove_instrument(instrument)\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "record.count",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 183,
      "caller": "test_instruments_monkeypatch",
      "source_code": "    def count(self):\n        \"\"\" Returns the number of recurrences in this set. It will have go\n            through the whole recurrence, if this hasn't been done before. \"\"\"\n        if self._len is None:\n            for x in self:\n                pass\n        return self._len\n\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_instruments_monkeypatch",
      "source_code": ""
    },
    {
      "function": "record.count",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/rrule.py",
      "line": 183,
      "caller": "test_instruments_monkeypatch",
      "source_code": "    def count(self):\n        \"\"\" Returns the number of recurrences in this set. It will have go\n            through the whole recurrence, if this hasn't been done before. \"\"\"\n        if self._len is None:\n            for x in self:\n                pass\n        return self._len\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instruments_monkeypatch",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    },
    {
      "function": "_core.current_task",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 2730,
      "caller": "test_instruments_monkeypatch",
      "source_code": "def current_task() -> Task:\n    \"\"\"Return the :class:`Task` object representing the current task.\n\n    Returns:\n      Task: the :class:`Task` that called :func:`current_task`.\n\n    \"\"\"\n\n    try:\n        return GLOBAL_RUN_CONTEXT.task\n    except AttributeError:\n        raise RuntimeError(\"must be called from async context\") from None\n\n\n"
    }
  ],
  "assertions": [
    "assert len(record) == 0",
    "assert record.count(_core.current_task()) == 2",
    "assert record.count(_core.current_task()) == 2"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_instruments_monkeypatch() -> None:\n    class NullInstrument(_abc.Instrument):\n        pass\n\n    instrument = NullInstrument()\n\n    async def main() -> None:\n        record: list[Task] = []\n\n        # Changing the set of hooks implemented by an instrument after\n        # it's installed doesn't make them start being called right away\n        instrument.before_task_step = (  # type: ignore[method-assign]\n            record.append  # type: ignore[assignment] # append is pos-only\n        )\n\n        await _core.checkpoint()\n        await _core.checkpoint()\n        assert len(record) == 0\n\n        # But if we remove and re-add the instrument, the new hooks are\n        # picked up\n        _core.remove_instrument(instrument)\n        _core.add_instrument(instrument)\n        await _core.checkpoint()\n        await _core.checkpoint()\n        assert record.count(_core.current_task()) == 2\n\n        _core.remove_instrument(instrument)\n        await _core.checkpoint()\n        await _core.checkpoint()\n        assert record.count(_core.current_task()) == 2\n\n    _core.run(main, instruments=[instrument])"
}