{
  "test_name": "test_issue_18468",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "regex.sub",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 3015
    },
    {
      "name": "StrSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "BytesSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "memoryview",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "StrSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "BytesSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "memoryview",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "StrSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BytesSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "memoryview",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StrSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StrSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BytesSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "BytesSubclass",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bytearray",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "memoryview",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "memoryview",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "self.assertTypedEqual",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line_number": 47
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.match.groups",
      "source_code": "    def groups(self):\n        return (self._text,)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 297
    },
    {
      "name": "regex.match.groups",
      "source_code": "    def groups(self):\n        return (self._text,)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 297
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.match.groups",
      "source_code": "    def groups(self):\n        return (self._text,)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 297
    },
    {
      "name": "regex.match.groups",
      "source_code": "    def groups(self):\n        return (self._text,)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line_number": 297
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.match.group",
      "source_code": "    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 229
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "regex.sub",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 3015,
      "caller": "test_issue_18468",
      "source_code": "    def sub(self, repl: str) -> ParserElement:\n        r\"\"\"\n        Return :class:`Regex` with an attached parse action to transform the parsed\n        result as if called using `re.sub(expr, repl, string) <https://docs.python.org/3/library/re.html#re.sub>`_.\n\n        Example::\n\n            make_html = Regex(r\"(\\w+):(.*?):\").sub(r\"<\\1>\\2</\\1>\")\n            print(make_html.transform_string(\"h1:main title:\"))\n            # prints \"<h1>main title</h1>\"\n        \"\"\"\n        if self.asGroupList:\n            raise TypeError(\"cannot use sub() with Regex(asGroupList=True)\")\n\n        if self.asMatch and callable(repl):\n            raise TypeError(\"cannot use sub() with a callable with Regex(asMatch=True)\")\n\n        if self.asMatch:\n\n            def pa(tokens):\n                return tokens[0].expand(repl)\n\n        else:\n\n            def pa(tokens):\n                return self.re.sub(repl, tokens[0])\n\n        return self.add_parse_action(pa)\n\n\n"
    },
    {
      "function": "StrSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "BytesSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "memoryview",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "StrSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "BytesSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "memoryview",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "StrSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "BytesSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "memoryview",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "StrSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "StrSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "BytesSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "BytesSubclass",
      "filename": "",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "bytearray",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "memoryview",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "memoryview",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_issue_18468",
      "source_code": ""
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "self.assertTypedEqual",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/regex/test_regex.py",
      "line": 47,
      "caller": "test_issue_18468",
      "source_code": "    def assertTypedEqual(self, actual, expect, msg=None):\n        self.assertEqual(actual, expect, msg)\n\n        def recurse(actual, expect):\n            if isinstance(expect, (tuple, list)):\n                for x, y in zip(actual, expect):\n                    recurse(x, y)\n            else:\n                self.assertIs(type(actual), type(expect), msg)\n\n        recurse(actual, expect)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_issue_18468",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.match.groups",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 297,
      "caller": "test_issue_18468",
      "source_code": "    def groups(self):\n        return (self._text,)\n\n"
    },
    {
      "function": "regex.match.groups",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 297,
      "caller": "test_issue_18468",
      "source_code": "    def groups(self):\n        return (self._text,)\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.match.groups",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 297,
      "caller": "test_issue_18468",
      "source_code": "    def groups(self):\n        return (self._text,)\n\n"
    },
    {
      "function": "regex.match.groups",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pygments/lexer.py",
      "line": 297,
      "caller": "test_issue_18468",
      "source_code": "    def groups(self):\n        return (self._text,)\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.match.group",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 229,
      "caller": "test_issue_18468",
      "source_code": "    @property\n    def group(self):\n        \"\"\"Return group name of file.\"\"\"\n        if iswin32:\n            raise NotImplementedError(\"XXX win32\")\n        import grp\n\n        entry = error.checked_call(grp.getgrgid, self.gid)  # type:ignore[attr-defined,unused-ignore]\n        return entry[0]\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_issue_18468",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_issue_18468",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_issue_18468(self):\n        self.assertTypedEqual(regex.sub('y', 'a', 'xyz'), 'xaz')\n        self.assertTypedEqual(regex.sub('y', StrSubclass('a'),\n          StrSubclass('xyz')), 'xaz')\n        self.assertTypedEqual(regex.sub(b'y', b'a', b'xyz'), b'xaz')\n        self.assertTypedEqual(regex.sub(b'y', BytesSubclass(b'a'),\n          BytesSubclass(b'xyz')), b'xaz')\n        self.assertTypedEqual(regex.sub(b'y', bytearray(b'a'),\n          bytearray(b'xyz')), b'xaz')\n        self.assertTypedEqual(regex.sub(b'y', memoryview(b'a'),\n          memoryview(b'xyz')), b'xaz')\n\n        for string in \":a:b::c\", StrSubclass(\":a:b::c\"):\n            self.assertTypedEqual(regex.split(\":\", string), ['', 'a', 'b', '',\n              'c'])\n            if sys.version_info >= (3, 7, 0):\n                self.assertTypedEqual(regex.split(\":*\", string), ['', '', 'a',\n                  '', 'b', '', 'c', ''])\n                self.assertTypedEqual(regex.split(\"(:*)\", string), ['', ':',\n                  '', '', 'a', ':', '', '', 'b', '::', '', '', 'c', '', ''])\n            else:\n                self.assertTypedEqual(regex.split(\":*\", string), ['', 'a', 'b',\n                  'c'])\n                self.assertTypedEqual(regex.split(\"(:*)\", string), ['', ':',\n                  'a', ':', 'b', '::', 'c'])\n\n        for string in (b\":a:b::c\", BytesSubclass(b\":a:b::c\"),\n          bytearray(b\":a:b::c\"), memoryview(b\":a:b::c\")):\n            self.assertTypedEqual(regex.split(b\":\", string), [b'', b'a', b'b',\n              b'', b'c'])\n            if sys.version_info >= (3, 7, 0):\n                self.assertTypedEqual(regex.split(b\":*\", string), [b'', b'',\n                  b'a', b'', b'b', b'', b'c', b''])\n                self.assertTypedEqual(regex.split(b\"(:*)\", string), [b'', b':',\n                  b'', b'', b'a', b':', b'', b'', b'b', b'::', b'', b'', b'c',\n                  b'', b''])\n            else:\n                self.assertTypedEqual(regex.split(b\":*\", string), [b'', b'a',\n                  b'b', b'c'])\n                self.assertTypedEqual(regex.split(b\"(:*)\", string), [b'', b':',\n                  b'a', b':', b'b', b'::', b'c'])\n\n        for string in \"a:b::c:::d\", StrSubclass(\"a:b::c:::d\"):\n            self.assertTypedEqual(regex.findall(\":+\", string), [\":\", \"::\",\n              \":::\"])\n            self.assertTypedEqual(regex.findall(\"(:+)\", string), [\":\", \"::\",\n              \":::\"])\n            self.assertTypedEqual(regex.findall(\"(:)(:*)\", string), [(\":\", \"\"),\n              (\":\", \":\"), (\":\", \"::\")])\n\n        for string in (b\"a:b::c:::d\", BytesSubclass(b\"a:b::c:::d\"),\n          bytearray(b\"a:b::c:::d\"), memoryview(b\"a:b::c:::d\")):\n            self.assertTypedEqual(regex.findall(b\":+\", string), [b\":\", b\"::\",\n              b\":::\"])\n            self.assertTypedEqual(regex.findall(b\"(:+)\", string), [b\":\", b\"::\",\n              b\":::\"])\n            self.assertTypedEqual(regex.findall(b\"(:)(:*)\", string), [(b\":\",\n              b\"\"), (b\":\", b\":\"), (b\":\", b\"::\")])\n\n        for string in 'a', StrSubclass('a'):\n            self.assertEqual(regex.match('a', string).groups(), ())\n            self.assertEqual(regex.match('(a)', string).groups(), ('a',))\n            self.assertEqual(regex.match('(a)', string).group(0), 'a')\n            self.assertEqual(regex.match('(a)', string).group(1), 'a')\n            self.assertEqual(regex.match('(a)', string).group(1, 1), ('a',\n              'a'))\n\n        for string in (b'a', BytesSubclass(b'a'), bytearray(b'a'),\n          memoryview(b'a')):\n            self.assertEqual(regex.match(b'a', string).groups(), ())\n            self.assertEqual(regex.match(b'(a)', string).groups(), (b'a',))\n            self.assertEqual(regex.match(b'(a)', string).group(0), b'a')\n            self.assertEqual(regex.match(b'(a)', string).group(1), b'a')\n            self.assertEqual(regex.match(b'(a)', string).group(1, 1), (b'a',\n              b'a'))"
}