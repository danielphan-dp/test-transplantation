{
  "test_name": "test_ki_disabled_in_del",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
  "static_methods": [
    {
      "name": "__del__",
      "source_code": "    def __del__(self):\n        # see if we are getting dropped because of '=' reassignment of var instead of '<<=' or '<<'\n        if (\n            self.expr is None\n            and __diag__.warn_on_assignment_to_Forward\n            and Diagnostics.warn_on_assignment_to_Forward not in self.suppress_warnings_\n        ):\n            warnings.warn_explicit(\n                \"Forward defined here but no expression attached later using '<<=' or '<<'\",\n                UserWarning,\n                filename=self.caller_frame.filename,\n                lineno=self.caller_frame.lineno,\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 5186
    },
    {
      "name": "outerfunction",
      "source_code": "    def outerfunction() -> None:\n        assert not _core.currently_ki_protected()\n        assert not nestedfunction()\n        __del__()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 249
    },
    {
      "name": "nestedfunction",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 241
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "nestedfunction",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 241
    },
    {
      "name": "__del__",
      "source_code": "    def __del__(self):\n        # see if we are getting dropped because of '=' reassignment of var instead of '<<=' or '<<'\n        if (\n            self.expr is None\n            and __diag__.warn_on_assignment_to_Forward\n            and Diagnostics.warn_on_assignment_to_Forward not in self.suppress_warnings_\n        ):\n            warnings.warn_explicit(\n                \"Forward defined here but no expression attached later using '<<=' or '<<'\",\n                UserWarning,\n                filename=self.caller_frame.filename,\n                lineno=self.caller_frame.lineno,\n            )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line_number": 5186
    },
    {
      "name": "_core.currently_ki_protected",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line_number": 104
    },
    {
      "name": "nestedfunction",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line_number": 241
    }
  ],
  "dynamic_methods": [
    {
      "function": "__del__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 5186,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    def __del__(self):\n        # see if we are getting dropped because of '=' reassignment of var instead of '<<=' or '<<'\n        if (\n            self.expr is None\n            and __diag__.warn_on_assignment_to_Forward\n            and Diagnostics.warn_on_assignment_to_Forward not in self.suppress_warnings_\n        ):\n            warnings.warn_explicit(\n                \"Forward defined here but no expression attached later using '<<=' or '<<'\",\n                UserWarning,\n                filename=self.caller_frame.filename,\n                lineno=self.caller_frame.lineno,\n            )\n\n"
    },
    {
      "function": "outerfunction",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 249,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    @_core.disable_ki_protection\n    def outerfunction() -> None:\n        assert not _core.currently_ki_protected()\n        assert not nestedfunction()\n        __del__()\n\n"
    },
    {
      "function": "nestedfunction",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 241,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_disabled_in_del",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_disabled_in_del",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "nestedfunction",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 241,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()\n\n"
    },
    {
      "function": "__del__",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/pyparsing/core.py",
      "line": 5186,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    def __del__(self):\n        # see if we are getting dropped because of '=' reassignment of var instead of '<<=' or '<<'\n        if (\n            self.expr is None\n            and __diag__.warn_on_assignment_to_Forward\n            and Diagnostics.warn_on_assignment_to_Forward not in self.suppress_warnings_\n        ):\n            warnings.warn_explicit(\n                \"Forward defined here but no expression attached later using '<<=' or '<<'\",\n                UserWarning,\n                filename=self.caller_frame.filename,\n                lineno=self.caller_frame.lineno,\n            )\n\n"
    },
    {
      "function": "_core.currently_ki_protected",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_ki.py",
      "line": 104,
      "caller": "test_ki_disabled_in_del",
      "source_code": "def currently_ki_protected() -> bool:\n    r\"\"\"Check whether the calling code has :exc:`KeyboardInterrupt` protection\n    enabled.\n\n    It's surprisingly easy to think that one's :exc:`KeyboardInterrupt`\n    protection is enabled when it isn't, or vice-versa. This function tells\n    you what Trio thinks of the matter, which makes it useful for ``assert``\\s\n    and unit tests.\n\n    Returns:\n      bool: True if protection is enabled, and False otherwise.\n\n    \"\"\"\n    return ki_protection_enabled(sys._getframe())\n\n\n"
    },
    {
      "function": "nestedfunction",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_ki.py",
      "line": 241,
      "caller": "test_ki_disabled_in_del",
      "source_code": "    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()\n\n"
    }
  ],
  "assertions": [
    "assert nestedfunction()",
    "assert _core.currently_ki_protected()",
    "assert nestedfunction()",
    "assert not _core.currently_ki_protected()",
    "assert not nestedfunction()"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_ki_disabled_in_del() -> None:\n    def nestedfunction() -> bool:\n        return _core.currently_ki_protected()\n\n    def __del__() -> None:\n        assert _core.currently_ki_protected()\n        assert nestedfunction()\n\n    @_core.disable_ki_protection\n    def outerfunction() -> None:\n        assert not _core.currently_ki_protected()\n        assert not nestedfunction()\n        __del__()\n\n    __del__()\n    outerfunction()\n    assert nestedfunction()"
}