{
  "test_name": "test_make_sentinel",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_util.py",
  "static_methods": [
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_make_sentinel",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert repr(S) == 'S'",
    "assert S == S",
    "assert type(S).__name__ == 'S'",
    "assert S in {S}",
    "assert type(S) is S",
    "assert repr(S2) == 'S2'",
    "assert S != S2",
    "assert S not in {S2}",
    "assert type(S) is not type(S2)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_make_sentinel() -> None:\n    class S(Sentinel, metaclass=Sentinel):\n        pass\n\n    assert repr(S) == \"S\"\n    assert S == S\n    assert type(S).__name__ == \"S\"\n    assert S in {S}\n    assert type(S) is S\n\n    class S2(Sentinel, metaclass=Sentinel):\n        pass\n\n    assert repr(S2) == \"S2\"\n    assert S != S2\n    assert S not in {S2}\n    assert type(S) is not type(S2)"
}