{
  "test_name": "test_message",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "check_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line_number": 236
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "check_message",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
      "line": 236,
      "caller": "test_message",
      "source_code": "    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_message",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_message() -> None:\n    def check_message(message: str, body: RaisesGroup[Any]) -> None:\n        with pytest.raises(\n            AssertionError,\n            match=f\"^DID NOT RAISE any exception, expected {re.escape(message)}$\",\n        ):\n            with body:\n                ...\n\n    # basic\n    check_message(\"ExceptionGroup(ValueError)\", RaisesGroup(ValueError))\n    # multiple exceptions\n    check_message(\n        \"ExceptionGroup(ValueError, ValueError)\", RaisesGroup(ValueError, ValueError)\n    )\n    # nested\n    check_message(\n        \"ExceptionGroup(ExceptionGroup(ValueError))\",\n        RaisesGroup(RaisesGroup(ValueError)),\n    )\n\n    # Matcher\n    check_message(\n        \"ExceptionGroup(Matcher(ValueError, match='my_str'))\",\n        RaisesGroup(Matcher(ValueError, \"my_str\")),\n    )\n    check_message(\n        \"ExceptionGroup(Matcher(match='my_str'))\",\n        RaisesGroup(Matcher(match=\"my_str\")),\n    )\n\n    # BaseExceptionGroup\n    check_message(\n        \"BaseExceptionGroup(KeyboardInterrupt)\", RaisesGroup(KeyboardInterrupt)\n    )\n    # BaseExceptionGroup with type inside Matcher\n    check_message(\n        \"BaseExceptionGroup(Matcher(KeyboardInterrupt))\",\n        RaisesGroup(Matcher(KeyboardInterrupt)),\n    )\n    # Base-ness transfers to parent containers\n    check_message(\n        \"BaseExceptionGroup(BaseExceptionGroup(KeyboardInterrupt))\",\n        RaisesGroup(RaisesGroup(KeyboardInterrupt)),\n    )\n    # but not to child containers\n    check_message(\n        \"BaseExceptionGroup(BaseExceptionGroup(KeyboardInterrupt), ExceptionGroup(ValueError))\",\n        RaisesGroup(RaisesGroup(KeyboardInterrupt), RaisesGroup(ValueError)),\n    )"
}