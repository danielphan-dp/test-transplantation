{
  "test_name": "test_middleware_stack_init",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
  "static_methods": [
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "get_app",
      "source_code": "    def get_app() -> ASGIApp:\n        app = Starlette()\n        app.add_middleware(SimpleInitializableMiddleware)\n        app.add_middleware(NoOpMiddleware)\n        return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
      "line_number": 512
    },
    {
      "name": "test_client_factory.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "get_app",
      "source_code": "    def get_app() -> ASGIApp:\n        app = Starlette()\n        app.add_middleware(SimpleInitializableMiddleware)\n        app.add_middleware(NoOpMiddleware)\n        return app",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
      "line_number": 512
    },
    {
      "name": "test_client_factory.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app.add_middleware",
      "source_code": "    def add_middleware(\n        self,\n        middleware_class: type[_MiddlewareClass[P]],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> None:\n        if self.middleware_stack is not None:  # pragma: no cover\n            raise RuntimeError(\"Cannot add middleware after an application has started\")\n        self.user_middleware.insert(0, Middleware(middleware_class, *args, **kwargs))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/applications.py",
      "line_number": 124
    },
    {
      "name": "app.add_middleware",
      "source_code": "    def add_middleware(\n        self,\n        middleware_class: type[_MiddlewareClass[P]],\n        *args: P.args,\n        **kwargs: P.kwargs,\n    ) -> None:\n        if self.middleware_stack is not None:  # pragma: no cover\n            raise RuntimeError(\"Cannot add middleware after an application has started\")\n        self.user_middleware.insert(0, Middleware(middleware_class, *args, **kwargs))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/applications.py",
      "line_number": 124
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "self.app",
      "source_code": "    def app(self) -> typing.Any:\n        return self.scope[\"app\"]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line_number": 96
    },
    {
      "name": "self.app",
      "source_code": "    def app(self) -> typing.Any:\n        return self.scope[\"app\"]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line_number": 96
    }
  ],
  "dynamic_methods": [
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_middleware_stack_init",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "get_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
      "line": 512,
      "caller": "test_middleware_stack_init",
      "source_code": "    def get_app() -> ASGIApp:\n        app = Starlette()\n        app.add_middleware(SimpleInitializableMiddleware)\n        app.add_middleware(NoOpMiddleware)\n        return app\n\n"
    },
    {
      "function": "test_client_factory.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_middleware_stack_init",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "get_app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_applications.py",
      "line": 512,
      "caller": "test_middleware_stack_init",
      "source_code": "    def get_app() -> ASGIApp:\n        app = Starlette()\n        app.add_middleware(SimpleInitializableMiddleware)\n        app.add_middleware(NoOpMiddleware)\n        return app\n\n"
    },
    {
      "function": "test_client_factory.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_middleware_stack_init",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_middleware_stack_init",
      "source_code": ""
    },
    {
      "function": "app.add_middleware",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/applications.py",
      "line": 124,
      "caller": "test_middleware_stack_init",
      "source_code": "    def add_middleware(\n        self,\n        middleware_class: type[_MiddlewareClass[P]],\n        *args: P.args,\n        **kwargs: P.kwargs,\n"
    },
    {
      "function": "app.add_middleware",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/applications.py",
      "line": 124,
      "caller": "test_middleware_stack_init",
      "source_code": "    def add_middleware(\n        self,\n        middleware_class: type[_MiddlewareClass[P]],\n        *args: P.args,\n        **kwargs: P.kwargs,\n"
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_middleware_stack_init",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_middleware_stack_init",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_middleware_stack_init",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "self.app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line": 96,
      "caller": "test_middleware_stack_init",
      "source_code": "    @property\n    def app(self) -> typing.Any:\n        return self.scope[\"app\"]\n\n"
    },
    {
      "function": "self.app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line": 96,
      "caller": "test_middleware_stack_init",
      "source_code": "    @property\n    def app(self) -> typing.Any:\n        return self.scope[\"app\"]\n\n"
    }
  ],
  "assertions": [
    "assert SimpleInitializableMiddleware.counter == 1",
    "assert SimpleInitializableMiddleware.counter == 1",
    "assert SimpleInitializableMiddleware.counter == 2"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_middleware_stack_init(test_client_factory: TestClientFactory) -> None:\n    class NoOpMiddleware:\n        def __init__(self, app: ASGIApp):\n            self.app = app\n\n        async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n            await self.app(scope, receive, send)\n\n    class SimpleInitializableMiddleware:\n        counter = 0\n\n        def __init__(self, app: ASGIApp):\n            self.app = app\n            SimpleInitializableMiddleware.counter += 1\n\n        async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n            await self.app(scope, receive, send)\n\n    def get_app() -> ASGIApp:\n        app = Starlette()\n        app.add_middleware(SimpleInitializableMiddleware)\n        app.add_middleware(NoOpMiddleware)\n        return app\n\n    app = get_app()\n\n    with test_client_factory(app):\n        pass\n\n    assert SimpleInitializableMiddleware.counter == 1\n\n    test_client_factory(app).get(\"/foo\")\n\n    assert SimpleInitializableMiddleware.counter == 1\n\n    app = get_app()\n\n    test_client_factory(app).get(\"/foo\")\n\n    assert SimpleInitializableMiddleware.counter == 2"
}