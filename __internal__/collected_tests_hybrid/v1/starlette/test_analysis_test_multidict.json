{
  "test_name": "test_multidict",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.popitem",
      "source_code": "        def popitem(self):\n            'Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.'\n            try:\n                return self.maps[0].popitem()\n            except KeyError:\n                raise KeyError('No keys found in the first mapping.')",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 597
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.clear",
      "source_code": "    def clear(self) -> None:\n        self.calls[:] = []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 455
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.setlist",
      "source_code": "    def setlist(self, key: typing.Any, values: list[typing.Any]) -> None:\n        if not values:\n            self.pop(key, None)\n        else:\n            existing_items = [(k, v) for (k, v) in self._list if k != key]\n            self._list = existing_items + [(key, value) for value in values]\n            self._dict[key] = values[-1]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 350
    },
    {
      "name": "q.setlist",
      "source_code": "    def setlist(self, key: typing.Any, values: list[typing.Any]) -> None:\n        if not values:\n            self.pop(key, None)\n        else:\n            existing_items = [(k, v) for (k, v) in self._list if k != key]\n            self._list = existing_items + [(key, value) for value in values]\n            self._dict[key] = values[-1]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 350
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.update",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line_number": 146
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.update",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line_number": 146
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.update",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line_number": 146
    },
    {
      "name": "q.update",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line_number": 146
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "dict",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "q.poplist",
      "source_code": "    def poplist(self, key: typing.Any) -> list[typing.Any]:\n        values = [v for k, v in self._list if k == key]\n        self.pop(key)\n        return values",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 334
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "q.setdefault",
      "source_code": "    def setdefault(self, key: StashKey[T], default: T) -> T:\n        \"\"\"Return the value of key if already set, otherwise set the value\n        of key to default and return default.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/stash.py",
      "line_number": 94
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "q.setdefault",
      "source_code": "    def setdefault(self, key: StashKey[T], default: T) -> T:\n        \"\"\"Return the value of key if already set, otherwise set the value\n        of key to default and return default.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/stash.py",
      "line_number": 94
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "repr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "q.getlist",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line_number": 259
    },
    {
      "name": "MultiDict",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "q.keys",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line_number": 1281
    },
    {
      "name": "q.values",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line_number": 749
    },
    {
      "name": "q.items",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line_number": 100
    }
  ],
  "dynamic_methods": [
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.popitem",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 597,
      "caller": "test_multidict",
      "source_code": "        def popitem(self):\n            'Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.'\n            try:\n                return self.maps[0].popitem()\n            except KeyError:\n                raise KeyError('No keys found in the first mapping.')\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.clear",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 455,
      "caller": "test_multidict",
      "source_code": "    def clear(self) -> None:\n        self.calls[:] = []\n\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.setlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 350,
      "caller": "test_multidict",
      "source_code": "    def setlist(self, key: typing.Any, values: list[typing.Any]) -> None:\n        if not values:\n            self.pop(key, None)\n        else:\n            existing_items = [(k, v) for (k, v) in self._list if k != key]\n            self._list = existing_items + [(key, value) for value in values]\n            self._dict[key] = values[-1]\n\n"
    },
    {
      "function": "q.setlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 350,
      "caller": "test_multidict",
      "source_code": "    def setlist(self, key: typing.Any, values: list[typing.Any]) -> None:\n        if not values:\n            self.pop(key, None)\n        else:\n            existing_items = [(k, v) for (k, v) in self._list if k != key]\n            self._list = existing_items + [(key, value) for value in values]\n            self._dict[key] = values[-1]\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_multidict",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line": 146,
      "caller": "test_multidict",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line": 146,
      "caller": "test_multidict",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line": 146,
      "caller": "test_multidict",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break\n\n"
    },
    {
      "function": "q.update",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/yaml/reader.py",
      "line": 146,
      "caller": "test_multidict",
      "source_code": "    def update(self, length):\n        if self.raw_buffer is None:\n            return\n        self.buffer = self.buffer[self.pointer:]\n        self.pointer = 0\n        while len(self.buffer) < length:\n            if not self.eof:\n                self.update_raw()\n            if self.raw_decode is not None:\n                try:\n                    data, converted = self.raw_decode(self.raw_buffer,\n                            'strict', self.eof)\n                except UnicodeDecodeError as exc:\n                    character = self.raw_buffer[exc.start]\n                    if self.stream is not None:\n                        position = self.stream_pointer-len(self.raw_buffer)+exc.start\n                    else:\n                        position = exc.start\n                    raise ReaderError(self.name, position, character,\n                            exc.encoding, exc.reason)\n            else:\n                data = self.raw_buffer\n                converted = len(data)\n            self.check_printable(data)\n            self.buffer += data\n            self.raw_buffer = self.raw_buffer[converted:]\n            if self.eof:\n                self.buffer += '\\0'\n                self.raw_buffer = None\n                break\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "dict",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_multidict",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "q.poplist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 334,
      "caller": "test_multidict",
      "source_code": "    def poplist(self, key: typing.Any) -> list[typing.Any]:\n        values = [v for k, v in self._list if k == key]\n        self.pop(key)\n        return values\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_multidict",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "q.setdefault",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/stash.py",
      "line": 94,
      "caller": "test_multidict",
      "source_code": "    def setdefault(self, key: StashKey[T], default: T) -> T:\n        \"\"\"Return the value of key if already set, otherwise set the value\n        of key to default and return default.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n"
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "q.setdefault",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/stash.py",
      "line": 94,
      "caller": "test_multidict",
      "source_code": "    def setdefault(self, key: StashKey[T], default: T) -> T:\n        \"\"\"Return the value of key if already set, otherwise set the value\n        of key to default and return default.\"\"\"\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n"
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "repr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.getlist",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/_collections.py",
      "line": 259,
      "caller": "test_multidict",
      "source_code": "    def getlist(self, key, default=__marker):\n        \"\"\"Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.\"\"\"\n        try:\n            vals = self._container[key.lower()]\n        except KeyError:\n            if default is self.__marker:\n                return []\n            return default\n        else:\n            return vals[1:]\n\n"
    },
    {
      "function": "MultiDict",
      "filename": "",
      "line": 0,
      "caller": "test_multidict",
      "source_code": ""
    },
    {
      "function": "q.keys",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/dateutil/tz/tz.py",
      "line": 1281,
      "caller": "test_multidict",
      "source_code": "    def keys(self):\n        \"\"\"\n        Retrieves the available time zones as a list.\n        \"\"\"\n        return list(self._vtz.keys())\n\n"
    },
    {
      "function": "q.values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/distlib/compat.py",
      "line": 749,
      "caller": "test_multidict",
      "source_code": "        def values(self):\n            'od.values() -> list of values in od'\n            return [self[key] for key in self]\n\n"
    },
    {
      "function": "q.items",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/iniconfig/__init__.py",
      "line": 100,
      "caller": "test_multidict",
      "source_code": "    def items(self) -> Iterator[tuple[str, str]]:\n        for name in self:\n            yield name, self[name]\n\n\n"
    }
  ],
  "assertions": [
    "assert 'a' in q",
    "assert 'A' not in q",
    "assert 'c' not in q",
    "assert q['a'] == '456'",
    "assert q.get('a') == '456'",
    "assert q.get('nope', default=None) is None",
    "assert q.getlist('a') == ['123', '456']",
    "assert list(q.keys()) == ['a', 'b']",
    "assert list(q.values()) == ['456', '789']",
    "assert list(q.items()) == [('a', '456'), ('b', '789')]",
    "assert len(q) == 2",
    "assert list(q) == ['a', 'b']",
    "assert dict(q) == {'a': '456', 'b': '789'}",
    "assert str(q) == \"MultiDict([('a', '123'), ('a', '456'), ('b', '789')])\"",
    "assert repr(q) == \"MultiDict([('a', '123'), ('a', '456'), ('b', '789')])\"",
    "assert MultiDict({'a': '123', 'b': '456'}) == MultiDict([('a', '123'), ('b', '456')])",
    "assert MultiDict({'a': '123', 'b': '456'}) == MultiDict({'b': '456', 'a': '123'})",
    "assert MultiDict() == MultiDict({})",
    "assert MultiDict({'a': '123', 'b': '456'}) != 'invalid'",
    "assert MultiDict(q) == q",
    "assert q['a'] == '789'",
    "assert q.get('a') == '789'",
    "assert q.getlist('a') == ['789']",
    "assert q.get('a') is None",
    "assert repr(q) == 'MultiDict([])'",
    "assert q.pop('a') == '456'",
    "assert q.get('a', None) is None",
    "assert repr(q) == \"MultiDict([('b', '789')])\"",
    "assert q.get(item[0]) is None",
    "assert q.poplist('a') == ['123', '456']",
    "assert q.get('a') is None",
    "assert repr(q) == \"MultiDict([('b', '789')])\"",
    "assert q.get('a') is None",
    "assert repr(q) == 'MultiDict([])'",
    "assert q.getlist('a') == ['456', '789']",
    "assert 'b' not in q",
    "assert q.setdefault('a', '456') == '123'",
    "assert q.getlist('a') == ['123']",
    "assert q.setdefault('b', '456') == '456'",
    "assert q.getlist('b') == ['456']",
    "assert repr(q) == \"MultiDict([('a', '123'), ('b', '456')])\"",
    "assert q.getlist('a') == ['123', '456']",
    "assert repr(q) == \"MultiDict([('a', '123'), ('a', '456')])\"",
    "assert q.getlist('a') == ['789']",
    "assert q == MultiDict([('a', '789'), ('b', '456')])",
    "assert repr(q) == \"MultiDict([('a', '123'), ('b', '456')])\"",
    "assert q.getlist('a') == ['123']",
    "assert q == MultiDict([('a', '456'), ('a', '789'), ('b', '123')])"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_multidict() -> None:\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\"), (\"b\", \"789\")])\n    assert \"a\" in q\n    assert \"A\" not in q\n    assert \"c\" not in q\n    assert q[\"a\"] == \"456\"\n    assert q.get(\"a\") == \"456\"\n    assert q.get(\"nope\", default=None) is None\n    assert q.getlist(\"a\") == [\"123\", \"456\"]\n    assert list(q.keys()) == [\"a\", \"b\"]\n    assert list(q.values()) == [\"456\", \"789\"]\n    assert list(q.items()) == [(\"a\", \"456\"), (\"b\", \"789\")]\n    assert len(q) == 2\n    assert list(q) == [\"a\", \"b\"]\n    assert dict(q) == {\"a\": \"456\", \"b\": \"789\"}\n    assert str(q) == \"MultiDict([('a', '123'), ('a', '456'), ('b', '789')])\"\n    assert repr(q) == \"MultiDict([('a', '123'), ('a', '456'), ('b', '789')])\"\n    assert MultiDict({\"a\": \"123\", \"b\": \"456\"}) == MultiDict([(\"a\", \"123\"), (\"b\", \"456\")])\n    assert MultiDict({\"a\": \"123\", \"b\": \"456\"}) == MultiDict({\"b\": \"456\", \"a\": \"123\"})\n    assert MultiDict() == MultiDict({})\n    assert MultiDict({\"a\": \"123\", \"b\": \"456\"}) != \"invalid\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\")])\n    assert MultiDict(q) == q\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\")])\n    q[\"a\"] = \"789\"\n    assert q[\"a\"] == \"789\"\n    assert q.get(\"a\") == \"789\"\n    assert q.getlist(\"a\") == [\"789\"]\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\")])\n    del q[\"a\"]\n    assert q.get(\"a\") is None\n    assert repr(q) == \"MultiDict([])\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\"), (\"b\", \"789\")])\n    assert q.pop(\"a\") == \"456\"\n    assert q.get(\"a\", None) is None\n    assert repr(q) == \"MultiDict([('b', '789')])\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\"), (\"b\", \"789\")])\n    item = q.popitem()\n    assert q.get(item[0]) is None\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\"), (\"b\", \"789\")])\n    assert q.poplist(\"a\") == [\"123\", \"456\"]\n    assert q.get(\"a\") is None\n    assert repr(q) == \"MultiDict([('b', '789')])\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\"), (\"b\", \"789\")])\n    q.clear()\n    assert q.get(\"a\") is None\n    assert repr(q) == \"MultiDict([])\"\n\n    q = MultiDict([(\"a\", \"123\")])\n    q.setlist(\"a\", [\"456\", \"789\"])\n    assert q.getlist(\"a\") == [\"456\", \"789\"]\n    q.setlist(\"b\", [])\n    assert \"b\" not in q\n\n    q = MultiDict([(\"a\", \"123\")])\n    assert q.setdefault(\"a\", \"456\") == \"123\"\n    assert q.getlist(\"a\") == [\"123\"]\n    assert q.setdefault(\"b\", \"456\") == \"456\"\n    assert q.getlist(\"b\") == [\"456\"]\n    assert repr(q) == \"MultiDict([('a', '123'), ('b', '456')])\"\n\n    q = MultiDict([(\"a\", \"123\")])\n    q.append(\"a\", \"456\")\n    assert q.getlist(\"a\") == [\"123\", \"456\"]\n    assert repr(q) == \"MultiDict([('a', '123'), ('a', '456')])\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"b\", \"456\")])\n    q.update({\"a\": \"789\"})\n    assert q.getlist(\"a\") == [\"789\"]\n    assert q == MultiDict([(\"a\", \"789\"), (\"b\", \"456\")])\n\n    q = MultiDict([(\"a\", \"123\"), (\"b\", \"456\")])\n    q.update(q)\n    assert repr(q) == \"MultiDict([('a', '123'), ('b', '456')])\"\n\n    q = MultiDict([(\"a\", \"123\"), (\"a\", \"456\")])\n    q.update([(\"a\", \"123\")])\n    assert q.getlist(\"a\") == [\"123\"]\n    q.update([(\"a\", \"456\")], a=\"789\", b=\"123\")\n    assert q == MultiDict([(\"a\", \"456\"), (\"a\", \"789\"), (\"b\", \"123\")])"
}