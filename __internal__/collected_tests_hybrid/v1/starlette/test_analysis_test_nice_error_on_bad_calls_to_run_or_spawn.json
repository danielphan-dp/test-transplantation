{
  "test_name": "test_nice_error_on_bad_calls_to_run_or_spawn",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "bad_call_run",
      "source_code": "    def bad_call_run(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        _core.run(func, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 1652
    },
    {
      "name": "bad_call_run",
      "source_code": "    def bad_call_run(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        _core.run(func, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 1652
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bad_call_spawn",
      "source_code": "    def bad_call_spawn(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        async def main() -> None:\n            async with _core.open_nursery() as nursery:\n                nursery.start_soon(func, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 1658
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bad_call_spawn",
      "source_code": "    def bad_call_spawn(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        async def main() -> None:\n            async with _core.open_nursery() as nursery:\n                nursery.start_soon(func, *args)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line_number": 1658
    },
    {
      "name": "f",
      "source_code": "            def f(cur: TracebackType) -> Iterable[TracebackEntry]:\n                cur_: TracebackType | None = cur\n                while cur_ is not None:\n                    yield TracebackEntry(cur_)\n                    cur_ = cur_.tb_next",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 333
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "f",
      "source_code": "            def f(cur: TracebackType) -> Iterable[TracebackEntry]:\n                cur_: TracebackType | None = cur\n                while cur_ is not None:\n                    yield TracebackEntry(cur_)\n                    cur_ = cur_.tb_next",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 333
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start_soon",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n    ) -> None:\n        \"\"\"Creates a child task, scheduling ``await async_fn(*args)``.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1152
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "bad_call_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 1652,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def bad_call_run(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n"
    },
    {
      "function": "bad_call_run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 1652,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def bad_call_run(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "bad_call_spawn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 1658,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def bad_call_spawn(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n"
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "bad_call_spawn",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
      "line": 1658,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def bad_call_spawn(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n"
    },
    {
      "function": "f",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 333,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "            def f(cur: TracebackType) -> Iterable[TracebackEntry]:\n                cur_: TracebackType | None = cur\n                while cur_ is not None:\n                    yield TracebackEntry(cur_)\n                    cur_ = cur_.tb_next\n\n"
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "f",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 333,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "            def f(cur: TracebackType) -> Iterable[TracebackEntry]:\n                cur_: TracebackType | None = cur\n                while cur_ is not None:\n                    yield TracebackEntry(cur_)\n                    cur_ = cur_.tb_next\n\n"
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1152,
      "caller": "test_nice_error_on_bad_calls_to_run_or_spawn",
      "source_code": "    def start_soon(\n        self,\n        async_fn: Callable[[Unpack[PosArgT]], Awaitable[object]],\n        *args: Unpack[PosArgT],\n        name: object = None,\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_nice_error_on_bad_calls_to_run_or_spawn() -> None:\n    def bad_call_run(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        _core.run(func, *args)\n\n    def bad_call_spawn(\n        func: Callable[..., Awaitable[object]],\n        *args: tuple[object, ...],\n    ) -> None:\n        async def main() -> None:\n            async with _core.open_nursery() as nursery:\n                nursery.start_soon(func, *args)\n\n        _core.run(main)\n\n    async def f() -> None:  # pragma: no cover\n        pass\n\n    async def async_gen(arg: T) -> AsyncGenerator[T, None]:  # pragma: no cover\n        yield arg\n\n    # If/when RaisesGroup/Matcher is added to pytest in some form this test can be\n    # rewritten to use a loop again, and avoid specifying the exceptions twice in\n    # different ways\n    with pytest.raises(\n        TypeError,\n        match=\"^Trio was expecting an async function, but instead it got a coroutine object <.*>\",\n    ):\n        bad_call_run(f())  # type: ignore[arg-type]\n    with pytest.raises(\n        TypeError, match=\"expected an async function but got an async generator\"\n    ):\n        bad_call_run(async_gen, 0)  # type: ignore\n\n    # bad_call_spawn calls the function inside a nursery, so the exception will be\n    # wrapped in an exceptiongroup\n    with RaisesGroup(Matcher(TypeError, \"expecting an async function\")):\n        bad_call_spawn(f())  # type: ignore[arg-type]\n\n    with RaisesGroup(\n        Matcher(TypeError, \"expected an async function but got an async generator\")\n    ):\n        bad_call_spawn(async_gen, 0)"
}