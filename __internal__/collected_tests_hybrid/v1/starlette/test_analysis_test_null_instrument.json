{
  "test_name": "test_null_instrument",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_instrumentation.py",
  "static_methods": [
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "_core.checkpoint",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NullInstrument",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_null_instrument",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "_core.checkpoint",
      "filename": "",
      "line": 0,
      "caller": "test_null_instrument",
      "source_code": ""
    },
    {
      "function": "NullInstrument",
      "filename": "",
      "line": 0,
      "caller": "test_null_instrument",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_null_instrument() -> None:\n    # undefined instrument methods are skipped\n    class NullInstrument(_abc.Instrument):\n        def something_unrelated(self) -> None:\n            pass  # pragma: no cover\n\n    async def main() -> None:\n        await _core.checkpoint()\n\n    _core.run(main, instruments=[NullInstrument()])"
}