{
  "test_name": "test_pr_1519_comment_1236166180_example",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_base.py",
  "static_methods": [
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "replace_body_middleware",
      "source_code": "    def replace_body_middleware(app: ASGIApp) -> ASGIApp:\n        async def wrapped_app(scope: Scope, receive: Receive, send: Send) -> None:\n            async def wrapped_rcv() -> Message:\n                msg = await receive()\n                msg[\"body\"] += b\"-foo\"\n                return msg",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_base.py",
      "line_number": 975
    },
    {
      "name": "LogRequestBodySize",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "TestClient",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line_number": 310
    },
    {
      "name": "resp.raise_for_status",
      "source_code": "    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line_number": 994
    },
    {
      "name": "bodies.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "request.body",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line_number": 482
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "call_next",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app",
      "source_code": "    def app(self) -> typing.Any:\n        return self.scope[\"app\"]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line_number": 96
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receive",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line_number": 158
    },
    {
      "name": "request.body",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line_number": 482
    }
  ],
  "dynamic_methods": [
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "replace_body_middleware",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_base.py",
      "line": 975,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def replace_body_middleware(app: ASGIApp) -> ASGIApp:\n        async def wrapped_app(scope: Scope, receive: Receive, send: Send) -> None:\n            async def wrapped_rcv() -> Message:\n                msg = await receive()\n                msg[\"body\"] += b\"-foo\"\n                return msg\n\n            await app(scope, wrapped_rcv, send)\n\n        return wrapped_app\n\n"
    },
    {
      "function": "LogRequestBodySize",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "TestClient",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line": 310,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    @property\n    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.\n\n        >>> print(Version(\"1.2.3\").post)\n        None\n        >>> Version(\"1.2.3.post1\").post\n        1\n        \"\"\"\n        return self._version.post[1] if self._version.post else None\n\n"
    },
    {
      "function": "resp.raise_for_status",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/models.py",
      "line": 994,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def raise_for_status(self):\n        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n\n        http_error_msg = \"\"\n        if isinstance(self.reason, bytes):\n            # We attempt to decode utf-8 first because some servers\n            # choose to localize their reason strings. If the string\n            # isn't utf-8, we fall back to iso-8859-1 for all other\n            # encodings. (See PR #3538)\n            try:\n                reason = self.reason.decode(\"utf-8\")\n            except UnicodeDecodeError:\n                reason = self.reason.decode(\"iso-8859-1\")\n        else:\n            reason = self.reason\n\n        if 400 <= self.status_code < 500:\n            http_error_msg = (\n                f\"{self.status_code} Client Error: {reason} for url: {self.url}\"\n            )\n\n        elif 500 <= self.status_code < 600:\n            http_error_msg = (\n                f\"{self.status_code} Server Error: {reason} for url: {self.url}\"\n            )\n\n        if http_error_msg:\n            raise HTTPError(http_error_msg, response=self)\n\n"
    },
    {
      "function": "bodies.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "request.body",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line": 482,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.\n\n        This default implementation simply prints a description of the\n        triggering requirement.\n\n        :param req: The InstallRequirement that provoked this error, with\n            its link already populated by the resolver's _populate_link().\n\n        \"\"\"\n        return f\"    {self._requirement_name()}\"\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "call_next",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line": 96,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    @property\n    def app(self) -> typing.Any:\n        return self.scope[\"app\"]\n\n"
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": ""
    },
    {
      "function": "receive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line": 158,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection\n\n        If the data is ready, this will return immediately, even if timeout<=0.\n        Otherwise, it will wait for up to timeout seconds, or indefinitely if\n        timeout is None. If no message comes in time, it raises TimeoutError.\n        \"\"\"\n        return self._receive(timeout_to_deadline(timeout))\n\n"
    },
    {
      "function": "request.body",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line": 482,
      "caller": "test_pr_1519_comment_1236166180_example",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.\n\n        This default implementation simply prints a description of the\n        triggering requirement.\n\n        :param req: The InstallRequirement that provoked this error, with\n            its link already populated by the resolver's _populate_link().\n\n        \"\"\"\n        return f\"    {self._requirement_name()}\"\n\n"
    }
  ],
  "assertions": [
    "assert bodies == [b'Hello, World!-foo']"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_pr_1519_comment_1236166180_example() -> None:\n    \"\"\"\n    https://github.com/encode/starlette/pull/1519#issuecomment-1236166180\n    \"\"\"\n    bodies: list[bytes] = []\n\n    class LogRequestBodySize(BaseHTTPMiddleware):\n        async def dispatch(\n            self,\n            request: Request,\n            call_next: RequestResponseEndpoint,\n        ) -> Response:\n            print(len(await request.body()))\n            return await call_next(request)\n\n    def replace_body_middleware(app: ASGIApp) -> ASGIApp:\n        async def wrapped_app(scope: Scope, receive: Receive, send: Send) -> None:\n            async def wrapped_rcv() -> Message:\n                msg = await receive()\n                msg[\"body\"] += b\"-foo\"\n                return msg\n\n            await app(scope, wrapped_rcv, send)\n\n        return wrapped_app\n\n    async def endpoint(request: Request) -> Response:\n        body = await request.body()\n        bodies.append(body)\n        return Response()\n\n    app: ASGIApp = Starlette(routes=[Route(\"/\", endpoint, methods=[\"POST\"])])\n    app = replace_body_middleware(app)\n    app = LogRequestBodySize(app)\n\n    client = TestClient(app)\n    resp = client.post(\"/\", content=b\"Hello, World!\")\n    resp.raise_for_status()\n\n    assert bodies == [b\"Hello, World!-foo\"]"
}