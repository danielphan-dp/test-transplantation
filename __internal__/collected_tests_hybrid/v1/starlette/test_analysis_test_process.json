{
  "test_name": "test_process",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/tools/test_gen_exports.py",
  "static_methods": [
    {
      "name": "modpath.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "File",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line_number": 283
    },
    {
      "name": "genpath.exists",
      "source_code": "    def exists(self):\n        return self._stat()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 126
    },
    {
      "name": "process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line_number": 283
    },
    {
      "name": "genpath.exists",
      "source_code": "    def exists(self):\n        return self._stat()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 126
    },
    {
      "name": "process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line_number": 283
    },
    {
      "name": "process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line_number": 283
    },
    {
      "name": "process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line_number": 283
    },
    {
      "name": "skip_if_optional_else_raise",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line_number": 50
    },
    {
      "name": "File",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "File",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "skip_lints",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "modpath.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_process",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "File",
      "filename": "",
      "line": 0,
      "caller": "test_process",
      "source_code": ""
    },
    {
      "function": "process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line": 283,
      "caller": "test_process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")\n\n\n"
    },
    {
      "function": "genpath.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 126,
      "caller": "test_process",
      "source_code": "    def exists(self):\n        return self._stat()\n\n"
    },
    {
      "function": "process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line": 283,
      "caller": "test_process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")\n\n\n"
    },
    {
      "function": "genpath.exists",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 126,
      "caller": "test_process",
      "source_code": "    def exists(self):\n        return self._stat()\n\n"
    },
    {
      "function": "process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line": 283,
      "caller": "test_process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")\n\n\n"
    },
    {
      "function": "process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line": 283,
      "caller": "test_process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")\n\n\n"
    },
    {
      "function": "process",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tools/gen_exports.py",
      "line": 283,
      "caller": "test_process",
      "source_code": "def process(files: Iterable[File], *, do_test: bool) -> None:\n    new_files = {}\n    for file in files:\n        print(\"Scanning:\", file.path)\n        new_source = gen_public_wrappers_source(file)\n        new_source = run_linters(file, new_source)\n        dirname, basename = os.path.split(file.path)\n        new_path = os.path.join(dirname, PREFIX + basename)\n        new_files[new_path] = new_source\n    if do_test:\n        if not matches_disk_files(new_files):\n            print(\"Generated sources are outdated. Please regenerate.\")\n            sys.exit(1)\n        else:\n            print(\"Generated sources are up to date.\")\n    else:\n        for new_path, new_source in new_files.items():\n            with open(new_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(new_source)\n        print(\"Regenerated sources successfully.\")\n\n\n"
    },
    {
      "function": "skip_if_optional_else_raise",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/pytest_plugin.py",
      "line": 50,
      "caller": "test_process",
      "source_code": "def skip_if_optional_else_raise(error: ImportError) -> NoReturn:\n    if SKIP_OPTIONAL_IMPORTS:\n        pytest.skip(error.msg, allow_module_level=True)\n    else:  # pragma: no cover\n        raise error\n"
    },
    {
      "function": "File",
      "filename": "",
      "line": 0,
      "caller": "test_process",
      "source_code": ""
    },
    {
      "function": "File",
      "filename": "",
      "line": 0,
      "caller": "test_process",
      "source_code": ""
    },
    {
      "function": "skip_lints",
      "filename": "",
      "line": 0,
      "caller": "test_process",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert not genpath.exists()",
    "assert excinfo.value.code == 1",
    "assert genpath.exists()",
    "assert excinfo.value.code == 1",
    "assert excinfo.value.code == 1"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_process(tmp_path: Path, imports: str) -> None:\n    try:\n        import black  # noqa: F401\n    # there's no dedicated CI run that has astor+isort, but lacks black.\n    except ImportError as error:  # pragma: no cover\n        skip_if_optional_else_raise(error)\n\n    modpath = tmp_path / \"_module.py\"\n    genpath = tmp_path / \"_generated_module.py\"\n    modpath.write_text(SOURCE, encoding=\"utf-8\")\n    file = File(modpath, \"runner\", platform=\"linux\", imports=imports)\n    assert not genpath.exists()\n    with pytest.raises(SystemExit) as excinfo:\n        process([file], do_test=True)\n    assert excinfo.value.code == 1\n    process([file], do_test=False)\n    assert genpath.exists()\n    process([file], do_test=True)\n    # But if we change the lookup path it notices\n    with pytest.raises(SystemExit) as excinfo:\n        process(\n            [File(modpath, \"runner.io_manager\", platform=\"linux\", imports=imports)],\n            do_test=True,\n        )\n    assert excinfo.value.code == 1\n    # Also if the platform is changed.\n    with pytest.raises(SystemExit) as excinfo:\n        process([File(modpath, \"runner\", imports=imports)], do_test=True)\n    assert excinfo.value.code == 1"
}