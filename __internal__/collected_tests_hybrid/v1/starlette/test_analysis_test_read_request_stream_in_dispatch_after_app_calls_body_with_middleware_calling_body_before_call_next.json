{
  "test_name": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/middleware/test_base.py",
  "static_methods": [
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.post",
      "source_code": "    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line_number": 310
    },
    {
      "name": "PlainTextResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.stream",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line_number": 601
    },
    {
      "name": "request.body",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line_number": 482
    },
    {
      "name": "call_next",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Middleware",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.body",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line_number": 482
    }
  ],
  "dynamic_methods": [
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.post",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/packaging/version.py",
      "line": 310,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": "    @property\n    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.\n\n        >>> print(Version(\"1.2.3\").post)\n        None\n        >>> Version(\"1.2.3.post1\").post\n        1\n        \"\"\"\n        return self._version.post[1] if self._version.post else None\n\n"
    },
    {
      "function": "PlainTextResponse",
      "filename": "",
      "line": 0,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": ""
    },
    {
      "function": "request.stream",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/response.py",
      "line": 601,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": "    def stream(self, amt=2 ** 16, decode_content=None):\n        \"\"\"\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.\n\n        :param amt:\n            How much of the content to read. The generator will return up to\n            much data per iteration, but may return less. This is particularly\n            likely when using compressed data. However, the empty string will\n            never be returned.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n        \"\"\"\n        if self.chunked and self.supports_chunked_reads():\n            for line in self.read_chunked(amt, decode_content=decode_content):\n                yield line\n        else:\n            while not is_fp_closed(self._fp):\n                data = self.read(amt=amt, decode_content=decode_content)\n\n                if data:\n                    yield data\n\n"
    },
    {
      "function": "request.body",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line": 482,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.\n\n        This default implementation simply prints a description of the\n        triggering requirement.\n\n        :param req: The InstallRequirement that provoked this error, with\n            its link already populated by the resolver's _populate_link().\n\n        \"\"\"\n        return f\"    {self._requirement_name()}\"\n\n"
    },
    {
      "function": "call_next",
      "filename": "",
      "line": 0,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": ""
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": ""
    },
    {
      "function": "Middleware",
      "filename": "",
      "line": 0,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": ""
    },
    {
      "function": "request.body",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_internal/exceptions.py",
      "line": 482,
      "caller": "test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next",
      "source_code": "    def body(self) -> str:\n        \"\"\"Return a summary of me for display under the heading.\n\n        This default implementation simply prints a description of the\n        triggering requirement.\n\n        :param req: The InstallRequirement that provoked this error, with\n            its link already populated by the resolver's _populate_link().\n\n        \"\"\"\n        return f\"    {self._requirement_name()}\"\n\n"
    }
  ],
  "assertions": [
    "assert response.status_code == 200",
    "assert await request.body() == b'a'",
    "assert await request.body() == b'a'",
    "assert chunk == b'a'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_read_request_stream_in_dispatch_after_app_calls_body_with_middleware_calling_body_before_call_next(\n    test_client_factory: TestClientFactory,\n) -> None:\n    async def homepage(request: Request) -> PlainTextResponse:\n        assert await request.body() == b\"a\"\n        return PlainTextResponse(\"Homepage\")\n\n    class ConsumingMiddleware(BaseHTTPMiddleware):\n        async def dispatch(\n            self,\n            request: Request,\n            call_next: RequestResponseEndpoint,\n        ) -> Response:\n            assert await request.body() == b\"a\"  # this buffers the request body in memory\n            resp = await call_next(request)\n            async for chunk in request.stream():\n                if chunk:\n                    assert chunk == b\"a\"\n            return resp\n\n    app = Starlette(\n        routes=[Route(\"/\", homepage, methods=[\"POST\"])],\n        middleware=[Middleware(ConsumingMiddleware)],\n    )\n\n    client: TestClient = test_client_factory(app)\n    response = client.post(\"/\", content=b\"a\")\n    assert response.status_code == 200"
}