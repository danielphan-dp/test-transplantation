{
  "test_name": "test_receivebuffer_for_invalid_delimiter",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_receivebuffer.py",
  "static_methods": [
    {
      "name": "ReceiveBuffer",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "b.maybe_extract_lines",
      "source_code": "    def maybe_extract_lines(self) -> Optional[List[bytearray]]:\n        \"\"\"\n        Extract everything up to the first blank line, and return a list of lines.\n        \"\"\"\n        # Handle the case where we have an immediate empty line.\n        if self._data[:1] == b\"\\n\":\n            self._extract(1)\n            return []",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_receivebuffer.py",
      "line_number": 104
    },
    {
      "name": "bytes",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "ReceiveBuffer",
      "filename": "",
      "line": 0,
      "caller": "test_receivebuffer_for_invalid_delimiter",
      "source_code": ""
    },
    {
      "function": "b.maybe_extract_lines",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_receivebuffer.py",
      "line": 104,
      "caller": "test_receivebuffer_for_invalid_delimiter",
      "source_code": "    def maybe_extract_lines(self) -> Optional[List[bytearray]]:\n        \"\"\"\n        Extract everything up to the first blank line, and return a list of lines.\n        \"\"\"\n        # Handle the case where we have an immediate empty line.\n        if self._data[:1] == b\"\\n\":\n            self._extract(1)\n            return []\n\n        if self._data[:2] == b\"\\r\\n\":\n            self._extract(2)\n            return []\n\n        # Only search in buffer space that we've not already looked at.\n        match = blank_line_regex.search(self._data, self._multiple_lines_search)\n        if match is None:\n            self._multiple_lines_search = max(0, len(self._data) - 2)\n            return None\n\n        # Truncate the buffer and return it.\n        idx = match.span(0)[-1]\n        out = self._extract(idx)\n        lines = out.split(b\"\\n\")\n\n        for line in lines:\n            if line.endswith(b\"\\r\"):\n                del line[-1]\n\n        assert lines[-2] == lines[-1] == b\"\"\n\n        del lines[-2:]\n\n        return lines\n\n"
    },
    {
      "function": "bytes",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_receivebuffer_for_invalid_delimiter",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert lines == [b'HTTP/1.1 200 OK', b'Content-type: text/plain', b'Connection: close']",
    "assert bytes(b) == b'Some body'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_receivebuffer_for_invalid_delimiter(data: Tuple[bytes]) -> None:\n    b = ReceiveBuffer()\n\n    for line in data:\n        b += line\n\n    lines = b.maybe_extract_lines()\n\n    assert lines == [\n        b\"HTTP/1.1 200 OK\",\n        b\"Content-type: text/plain\",\n        b\"Connection: close\",\n    ]\n    assert bytes(b) == b\"Some body\""
}