{
  "test_name": "test_register",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/test/test_emitfunc.py",
  "static_methods": [
    {
      "name": "Register",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Assign",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.block.ops.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "self.block.ops.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "FuncIR",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "generate_names_for_ir",
      "source_code": "def generate_names_for_ir(args: list[Register], blocks: list[BasicBlock]) -> dict[Value, str]:\n    \"\"\"Generate unique names for IR values.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/ir/pprint.py",
      "line_number": 462
    },
    {
      "name": "Emitter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "generate_native_function",
      "source_code": "def generate_native_function(\n    fn: FuncIR, emitter: Emitter, source_path: str, module_name: str",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/emitfunc.py",
      "line_number": 104
    },
    {
      "name": "assert_string_arrays_equal",
      "source_code": "def assert_string_arrays_equal(\n    expected: list[str], actual: list[str], msg: str, *, traceback: bool = False",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/test/helpers.py",
      "line_number": 107
    },
    {
      "name": "Integer",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Unreachable",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FuncDecl",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EmitterContext",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "FuncSignature",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "NameGenerator",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Register",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "Assign",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "self.block.ops.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_register",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "self.block.ops.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_register",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "FuncIR",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "generate_names_for_ir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/ir/pprint.py",
      "line": 462,
      "caller": "test_register",
      "source_code": "def generate_names_for_ir(args: list[Register], blocks: list[BasicBlock]) -> dict[Value, str]:\n    \"\"\"Generate unique names for IR values.\n\n    Give names such as 'r5' to temp values in IR which are useful when\n    pretty-printing or generating C. Ensure generated names are unique.\n    \"\"\"\n    names: dict[Value, str] = {}\n    used_names = set()\n\n    temp_index = 0\n\n    for arg in args:\n        names[arg] = arg.name\n        used_names.add(arg.name)\n\n    for block in blocks:\n        for op in block.ops:\n            values = []\n\n            for source in op.sources():\n                if source not in names:\n                    values.append(source)\n\n            if isinstance(op, (Assign, AssignMulti)):\n                values.append(op.dest)\n            elif isinstance(op, ControlOp) or op.is_void:\n                continue\n            elif op not in names:\n                values.append(op)\n\n            for value in values:\n                if value in names:\n                    continue\n                if isinstance(value, Register) and value.name:\n                    name = value.name\n                elif isinstance(value, (Integer, Float)):\n                    continue\n                else:\n                    name = \"r%d\" % temp_index\n                    temp_index += 1\n\n                # Append _2, _3, ... if needed to make the name unique.\n                if name in used_names:\n                    n = 2\n                    while True:\n                        candidate = \"%s_%d\" % (name, n)\n                        if candidate not in used_names:\n                            name = candidate\n                            break\n                        n += 1\n\n                names[value] = name\n                used_names.add(name)\n\n    return names\n"
    },
    {
      "function": "Emitter",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "generate_native_function",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypyc/codegen/emitfunc.py",
      "line": 104,
      "caller": "test_register",
      "source_code": "def generate_native_function(\n    fn: FuncIR, emitter: Emitter, source_path: str, module_name: str\n"
    },
    {
      "function": "assert_string_arrays_equal",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/mypy/test/helpers.py",
      "line": 107,
      "caller": "test_register",
      "source_code": "def assert_string_arrays_equal(\n    expected: list[str], actual: list[str], msg: str, *, traceback: bool = False\n"
    },
    {
      "function": "Integer",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "Unreachable",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "FuncDecl",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "EmitterContext",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "FuncSignature",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    },
    {
      "function": "NameGenerator",
      "filename": "",
      "line": 0,
      "caller": "test_register",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert_string_arrays_equal(['PyObject *CPyDef_myfunc(CPyTagged cpy_r_arg) {\\n', '    CPyTagged cpy_r_r0;\\n', '    cpy_r_r0 = 10;\\n', '    CPy_Unreachable();\\n', '}\\n'], result, msg='Generated code invalid')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_register(self) -> None:\n        reg = Register(int_rprimitive)\n        op = Assign(reg, Integer(5))\n        self.block.ops.append(op)\n        self.block.ops.append(Unreachable())\n        fn = FuncIR(\n            FuncDecl(\"myfunc\", None, \"mod\", FuncSignature([self.arg], list_rprimitive)),\n            [self.reg],\n            [self.block],\n        )\n        value_names = generate_names_for_ir(fn.arg_regs, fn.blocks)\n        emitter = Emitter(EmitterContext(NameGenerator([[\"mod\"]])), value_names)\n        generate_native_function(fn, emitter, \"prog.py\", \"prog\")\n        result = emitter.fragments\n        assert_string_arrays_equal(\n            [\n                \"PyObject *CPyDef_myfunc(CPyTagged cpy_r_arg) {\\n\",\n                \"    CPyTagged cpy_r_r0;\\n\",\n                \"    cpy_r_r0 = 10;\\n\",\n                \"    CPy_Unreachable();\\n\",\n                \"}\\n\",\n            ],\n            result,\n            msg=\"Generated code invalid\",\n        )"
}