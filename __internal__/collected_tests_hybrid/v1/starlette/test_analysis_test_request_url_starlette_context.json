{
  "test_name": "test_request_url_starlette_context",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_requests.py",
  "static_methods": [
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "PlainTextResponse",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "request.url_for",
      "source_code": "        def url_for(\n            context: dict[str, typing.Any],\n            name: str,\n            /,\n            **path_params: typing.Any,\n        ) -> URL:\n            request: Request = context[\"request\"]\n            return request.url_for(name, **path_params)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line_number": 119
    },
    {
      "name": "self.app",
      "source_code": "    def app(self) -> typing.Any:\n        return self.scope[\"app\"]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line_number": 96
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Middleware",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_request_url_starlette_context",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_request_url_starlette_context",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "PlainTextResponse",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    },
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    },
    {
      "function": "request.url_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line": 119,
      "caller": "test_request_url_starlette_context",
      "source_code": "        @pass_context\n        def url_for(\n            context: dict[str, typing.Any],\n            name: str,\n            /,\n            **path_params: typing.Any,\n"
    },
    {
      "function": "self.app",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/requests.py",
      "line": 96,
      "caller": "test_request_url_starlette_context",
      "source_code": "    @property\n    def app(self) -> typing.Any:\n        return self.scope[\"app\"]\n\n"
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    },
    {
      "function": "Middleware",
      "filename": "",
      "line": 0,
      "caller": "test_request_url_starlette_context",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert url_for == URL('http://testserver/home')"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_request_url_starlette_context(test_client_factory: TestClientFactory) -> None:\n    from starlette.applications import Starlette\n    from starlette.middleware import Middleware\n    from starlette.routing import Route\n    from starlette.types import ASGIApp\n\n    url_for = None\n\n    async def homepage(request: Request) -> Response:\n        return PlainTextResponse(\"Hello, world!\")\n\n    class CustomMiddleware:\n        def __init__(self, app: ASGIApp) -> None:\n            self.app = app\n\n        async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n            nonlocal url_for\n            request = Request(scope, receive)\n            url_for = request.url_for(\"homepage\")\n            await self.app(scope, receive, send)\n\n    app = Starlette(routes=[Route(\"/home\", homepage)], middleware=[Middleware(CustomMiddleware)])\n\n    client = test_client_factory(app)\n    client.get(\"/home\")\n    assert url_for == URL(\"http://testserver/home\")"
}