{
  "test_name": "test_runvar_resetting",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_local.py",
  "static_methods": [
    {
      "name": "RunVar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RunVar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RunVar",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "t1.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "t1.reset",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 388
    },
    {
      "name": "t2.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "t2.reset",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 388
    },
    {
      "name": "t3.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "t1.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "t1.reset",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 388
    },
    {
      "name": "t1.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "t2.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "t2.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "t2.reset",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 388
    },
    {
      "name": "t3.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "t1.reset",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line_number": 388
    }
  ],
  "dynamic_methods": [
    {
      "function": "RunVar",
      "filename": "",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "RunVar",
      "filename": "",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "RunVar",
      "filename": "",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_runvar_resetting",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "t1.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "t1.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 388,
      "caller": "test_runvar_resetting",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n"
    },
    {
      "function": "t2.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "t2.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 388,
      "caller": "test_runvar_resetting",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n"
    },
    {
      "function": "t3.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_runvar_resetting",
      "source_code": ""
    },
    {
      "function": "t1.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_runvar_resetting",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "t1.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 388,
      "caller": "test_runvar_resetting",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n"
    },
    {
      "function": "t1.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_runvar_resetting",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "t2.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_runvar_resetting",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "t2.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_runvar_resetting",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "t2.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 388,
      "caller": "test_runvar_resetting",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n"
    },
    {
      "function": "t3.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_runvar_resetting",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "t1.reset",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/logging.py",
      "line": 388,
      "caller": "test_runvar_resetting",
      "source_code": "    def reset(self) -> None:\n        self.records = []\n        self.stream = StringIO()\n\n"
    }
  ],
  "assertions": [
    "assert t1.get() == 'moonfish'",
    "assert t2.get() == 'catdogfish'",
    "assert t2.get() == 'dogfish'",
    "assert t3.get() == 'basculin'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_runvar_resetting() -> None:\n    t1 = RunVar[str](\"test1\")\n    t2 = RunVar[str](\"test2\", default=\"dogfish\")\n    t3 = RunVar[str](\"test3\")\n\n    async def reset_check() -> None:\n        token = t1.set(\"moonfish\")\n        assert t1.get() == \"moonfish\"\n        t1.reset(token)\n\n        with pytest.raises(TypeError):\n            t1.reset(None)  # type: ignore[arg-type]\n\n        with pytest.raises(LookupError):\n            t1.get()\n\n        token2 = t2.set(\"catdogfish\")\n        assert t2.get() == \"catdogfish\"\n        t2.reset(token2)\n        assert t2.get() == \"dogfish\"\n\n        with pytest.raises(ValueError, match=\"^token has already been used$\"):\n            t2.reset(token2)\n\n        token3 = t3.set(\"basculin\")\n        assert t3.get() == \"basculin\"\n\n        with pytest.raises(ValueError, match=\"^token is not for us$\"):\n            t1.reset(token3)\n\n    run(reset_check)"
}