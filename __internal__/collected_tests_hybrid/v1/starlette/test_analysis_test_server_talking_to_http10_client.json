{
  "test_name": "test_server_talking_to_http10_client",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/test_connection.py",
  "static_methods": [
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Connection",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "c.send",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 491
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "receive_and_get",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line_number": 35
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Response",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Request",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Data",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "EndOfMessage",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ConnectionClosed",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Connection",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "c.send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 491,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "    def send(self, event: Event) -> Optional[bytes]:\n        \"\"\"Convert a high-level event into bytes that can be sent to the peer,\n        while updating our internal state machine.\n\n        Args:\n            event: The :ref:`event <events>` to send.\n\n        Returns:\n            If ``type(event) is ConnectionClosed``, then returns\n            ``None``. Otherwise, returns a :term:`bytes-like object`.\n\n        Raises:\n            LocalProtocolError:\n                Sending this event at this time would violate our\n                understanding of the HTTP/1.1 protocol.\n\n        If this method raises any exception then it also sets\n        :attr:`Connection.our_state` to :data:`ERROR` -- see\n        :ref:`error-handling` for discussion.\n\n        \"\"\"\n        data_list = self.send_with_data_passthrough(event)\n        if data_list is None:\n            return None\n        else:\n            return b\"\".join(data_list)\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "receive_and_get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/h11/tests/helpers.py",
      "line": 35,
      "caller": "test_server_talking_to_http10_client",
      "source_code": "def receive_and_get(conn: Connection, data: bytes) -> List[Event]:\n    conn.receive_data(data)\n    return get_all_events(conn)\n\n\n"
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Response",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Request",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "Data",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "EndOfMessage",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    },
    {
      "function": "ConnectionClosed",
      "filename": "",
      "line": 0,
      "caller": "test_server_talking_to_http10_client",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert receive_and_get(c, b'GET / HTTP/1.0\\r\\n\\r\\n') == [Request(method='GET', target='/', headers=[], http_version='1.0'), EndOfMessage()]",
    "assert c.their_state is MUST_CLOSE",
    "assert c.send(Response(status_code=200, headers=[])) == b'HTTP/1.1 200 \\r\\nConnection: close\\r\\n\\r\\n'",
    "assert c.send(Data(data=b'12345')) == b'12345'",
    "assert c.send(EndOfMessage()) == b''",
    "assert c.our_state is MUST_CLOSE",
    "assert receive_and_get(c, b'POST / HTTP/1.0\\r\\nContent-Length: 10\\r\\n\\r\\n1') == [Request(method='POST', target='/', headers=[('Content-Length', '10')], http_version='1.0'), Data(data=b'1')]",
    "assert receive_and_get(c, b'234567890') == [Data(data=b'234567890'), EndOfMessage()]",
    "assert c.their_state is MUST_CLOSE",
    "assert receive_and_get(c, b'') == [ConnectionClosed()]"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_server_talking_to_http10_client() -> None:\n    c = Connection(SERVER)\n    # No content-length, so no body\n    # NB: no host header\n    assert receive_and_get(c, b\"GET / HTTP/1.0\\r\\n\\r\\n\") == [\n        Request(method=\"GET\", target=\"/\", headers=[], http_version=\"1.0\"),  # type: ignore[arg-type]\n        EndOfMessage(),\n    ]\n    assert c.their_state is MUST_CLOSE\n\n    # We automatically Connection: close back at them\n    assert (\n        c.send(Response(status_code=200, headers=[]))  # type: ignore[arg-type]\n        == b\"HTTP/1.1 200 \\r\\nConnection: close\\r\\n\\r\\n\"\n    )\n\n    assert c.send(Data(data=b\"12345\")) == b\"12345\"\n    assert c.send(EndOfMessage()) == b\"\"\n    assert c.our_state is MUST_CLOSE\n\n    # Check that it works if they do send Content-Length\n    c = Connection(SERVER)\n    # NB: no host header\n    assert receive_and_get(c, b\"POST / HTTP/1.0\\r\\nContent-Length: 10\\r\\n\\r\\n1\") == [\n        Request(\n            method=\"POST\",\n            target=\"/\",\n            headers=[(\"Content-Length\", \"10\")],\n            http_version=\"1.0\",\n        ),\n        Data(data=b\"1\"),\n    ]\n    assert receive_and_get(c, b\"234567890\") == [Data(data=b\"234567890\"), EndOfMessage()]\n    assert c.their_state is MUST_CLOSE\n    assert receive_and_get(c, b\"\") == [ConnectionClosed()]"
}