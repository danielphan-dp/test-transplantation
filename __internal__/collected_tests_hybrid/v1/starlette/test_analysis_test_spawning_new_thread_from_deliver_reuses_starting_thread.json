{
  "test_name": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_thread_cache.py",
  "static_methods": [
    {
      "name": "Queue",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "start_thread_soon",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line_number": 227
    },
    {
      "name": "done.wait",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line_number": 287
    },
    {
      "name": "start_thread_soon",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line_number": 227
    },
    {
      "name": "q.get.unwrap",
      "source_code": "    def unwrap(self):\n        self._ssl_io_loop(self.sslobj.unwrap)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
      "line_number": 150
    },
    {
      "name": "print",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "seen_threads.add",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line_number": 31
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "done.set",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "start_thread_soon",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line_number": 227
    },
    {
      "name": "deliver",
      "source_code": "            def deliver(events_outcome: Outcome[EventResult]) -> None:\n                def in_main_thread() -> None:\n                    self.unrolled_run_next_send = events_outcome\n                    self.runner.guest_tick_scheduled = True\n                    self.guest_tick()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1574
    },
    {
      "name": "q.put",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 637
    },
    {
      "name": "q.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "deliver",
      "source_code": "            def deliver(events_outcome: Outcome[EventResult]) -> None:\n                def in_main_thread() -> None:\n                    self.unrolled_run_next_send = events_outcome\n                    self.runner.guest_tick_scheduled = True\n                    self.guest_tick()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 1574
    },
    {
      "name": "slow",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Queue",
      "filename": "",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "start_thread_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line": 227,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,\n"
    },
    {
      "function": "done.wait",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/httpcore/_synchronization.py",
      "line": 287,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "    def wait(self, timeout: float | None = None) -> None:\n        if timeout == float(\"inf\"):  # pragma: no cover\n            timeout = None\n        if not self._event.wait(timeout=timeout):\n            raise PoolTimeout()  # pragma: nocover\n\n\n"
    },
    {
      "function": "start_thread_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line": 227,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,\n"
    },
    {
      "function": "q.get.unwrap",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
      "line": 150,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "    def unwrap(self):\n        self._ssl_io_loop(self.sslobj.unwrap)\n\n"
    },
    {
      "function": "print",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "seen_threads.add",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/resolvelib/structs.py",
      "line": 31,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "    def add(self, key):\n        \"\"\"Add a new vertex to the graph.\"\"\"\n        if key in self._vertices:\n            raise ValueError(\"vertex exists\")\n        self._vertices.add(key)\n        self._forwards[key] = set()\n        self._backwards[key] = set()\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "done.set",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    },
    {
      "function": "start_thread_soon",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_thread_cache.py",
      "line": 227,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "def start_thread_soon(\n    fn: Callable[[], RetT],\n    deliver: Callable[[outcome.Outcome[RetT]], object],\n    name: str | None = None,\n"
    },
    {
      "function": "deliver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1574,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "            def deliver(events_outcome: Outcome[EventResult]) -> None:\n                def in_main_thread() -> None:\n                    self.unrolled_run_next_send = events_outcome\n                    self.runner.guest_tick_scheduled = True\n                    self.guest_tick()\n\n                self.run_sync_soon_threadsafe(in_main_thread)\n\n"
    },
    {
      "function": "q.put",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 637,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PUT\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "q.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "deliver",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 1574,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": "            def deliver(events_outcome: Outcome[EventResult]) -> None:\n                def in_main_thread() -> None:\n                    self.unrolled_run_next_send = events_outcome\n                    self.runner.guest_tick_scheduled = True\n                    self.guest_tick()\n\n                self.run_sync_soon_threadsafe(in_main_thread)\n\n"
    },
    {
      "function": "slow",
      "filename": "",
      "line": 0,
      "caller": "test_spawning_new_thread_from_deliver_reuses_starting_thread",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(seen_threads) == 1"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_spawning_new_thread_from_deliver_reuses_starting_thread() -> None:\n    # We know that no-one else is using the thread cache, so if we keep\n    # submitting new jobs the instant the previous one is finished, we should\n    # keep getting the same thread over and over. This tests both that the\n    # thread cache is LIFO, and that threads can be assigned new work *before*\n    # deliver exits.\n\n    # Make sure there are a few threads running, so if we weren't LIFO then we\n    # could grab the wrong one.\n    q: Queue[Outcome[object]] = Queue()\n    COUNT = 5\n    for _ in range(COUNT):\n        start_thread_soon(lambda: time.sleep(1), lambda result: q.put(result))\n    for _ in range(COUNT):\n        q.get().unwrap()\n\n    seen_threads = set()\n    done = threading.Event()\n\n    def deliver(n: int, _: object) -> None:\n        print(n)\n        seen_threads.add(threading.current_thread())\n        if n == 0:\n            done.set()\n        else:\n            start_thread_soon(lambda: None, lambda _: deliver(n - 1, _))\n\n    start_thread_soon(lambda: None, lambda _: deliver(5, _))\n\n    done.wait()\n\n    assert len(seen_threads) == 1"
}