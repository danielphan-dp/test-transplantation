{
  "test_name": "test_staticfiles_with_invalid_dir_permissions_returns_401",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_staticfiles.py",
  "static_methods": [
    {
      "name": "write_bytes",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "tmp_path.chmod",
      "source_code": "    def chmod(self, mode, rec=0):\n        \"\"\"Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(f\"mode {mode!r} must be an integer\")\n        if rec:\n            for x in self.visit(rec=rec):\n                error.checked_call(os.chmod, str(x), mode)\n        error.checked_call(os.chmod, self.strpath, mode)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 1033
    },
    {
      "name": "tmp_path.stat",
      "source_code": "    def stat(self, raising: Literal[True] = ...) -> Stat: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 962
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "tmp_path.chmod",
      "source_code": "    def chmod(self, mode, rec=0):\n        \"\"\"Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(f\"mode {mode!r} must be an integer\")\n        if rec:\n            for x in self.visit(rec=rec):\n                error.checked_call(os.chmod, str(x), mode)\n        error.checked_call(os.chmod, self.strpath, mode)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 1033
    },
    {
      "name": "Mount",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "StaticFiles",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "write_bytes",
      "filename": "",
      "line": 0,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": ""
    },
    {
      "function": "tmp_path.chmod",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 1033,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": "    def chmod(self, mode, rec=0):\n        \"\"\"Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(f\"mode {mode!r} must be an integer\")\n        if rec:\n            for x in self.visit(rec=rec):\n                error.checked_call(os.chmod, str(x), mode)\n        error.checked_call(os.chmod, self.strpath, mode)\n\n"
    },
    {
      "function": "tmp_path.stat",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 962,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": "    @overload\n    def stat(self, raising: Literal[True] = ...) -> Stat: ...\n\n"
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "tmp_path.chmod",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 1033,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": "    def chmod(self, mode, rec=0):\n        \"\"\"Change permissions to the given mode. If mode is an\n        integer it directly encodes the os-specific modes.\n        if rec is True perform recursively.\n        \"\"\"\n        if not isinstance(mode, int):\n            raise TypeError(f\"mode {mode!r} must be an integer\")\n        if rec:\n            for x in self.visit(rec=rec):\n                error.checked_call(os.chmod, str(x), mode)\n        error.checked_call(os.chmod, self.strpath, mode)\n\n"
    },
    {
      "function": "Mount",
      "filename": "",
      "line": 0,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": ""
    },
    {
      "function": "StaticFiles",
      "filename": "",
      "line": 0,
      "caller": "test_staticfiles_with_invalid_dir_permissions_returns_401",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.status_code == 401",
    "assert response.text == 'Unauthorized'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_staticfiles_with_invalid_dir_permissions_returns_401(\n    tmp_path: Path, test_client_factory: TestClientFactory\n) -> None:\n    (tmp_path / \"example.txt\").write_bytes(b\"<file content>\")\n\n    original_mode = tmp_path.stat().st_mode\n    tmp_path.chmod(stat.S_IRWXO)\n    try:\n        routes = [\n            Mount(\n                \"/\",\n                app=StaticFiles(directory=os.fsdecode(tmp_path)),\n                name=\"static\",\n            )\n        ]\n        app = Starlette(routes=routes)\n        client = test_client_factory(app)\n\n        response = client.get(\"/example.txt\")\n        assert response.status_code == 401\n        assert response.text == \"Unauthorized\"\n    finally:\n        tmp_path.chmod(original_mode)"
}