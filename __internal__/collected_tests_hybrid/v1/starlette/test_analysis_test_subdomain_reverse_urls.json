{
  "test_name": "test_subdomain_reverse_urls",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_routing.py",
  "static_methods": [
    {
      "name": "subdomain_router.url_path_for.make_absolute_url",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 184
    },
    {
      "name": "subdomain_router.url_path_for",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line_number": 182
    }
  ],
  "dynamic_methods": [
    {
      "function": "subdomain_router.url_path_for.make_absolute_url",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 184,
      "caller": "test_subdomain_reverse_urls",
      "source_code": "    def make_absolute_url(self, base_url: str | URL) -> URL:\n        if isinstance(base_url, str):\n            base_url = URL(base_url)\n        if self.protocol:\n            scheme = {\n                \"http\": {True: \"https\", False: \"http\"},\n                \"websocket\": {True: \"wss\", False: \"ws\"},\n            }[self.protocol][base_url.is_secure]\n        else:\n            scheme = base_url.scheme\n\n        netloc = self.host or base_url.netloc\n        path = base_url.path.rstrip(\"/\") + str(self)\n        return URL(scheme=scheme, netloc=netloc, path=path)\n\n\n"
    },
    {
      "function": "subdomain_router.url_path_for",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/routing.py",
      "line": 182,
      "caller": "test_subdomain_reverse_urls",
      "source_code": "    def url_path_for(self, name: str, /, **path_params: typing.Any) -> URLPath:\n        raise NotImplementedError()  # pragma: no cover\n\n"
    }
  ],
  "assertions": [
    "assert subdomain_router.url_path_for('subdomains', subdomain='foo', path='/homepage').make_absolute_url('https://whatever') == 'https://foo.example.org/homepage'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_subdomain_reverse_urls() -> None:\n    assert (\n        subdomain_router.url_path_for(\"subdomains\", subdomain=\"foo\", path=\"/homepage\").make_absolute_url(\n            \"https://whatever\"\n        )\n        == \"https://foo.example.org/homepage\"\n    )"
}