{
  "test_name": "test_templates_with_kwargs_only",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_templates.py",
  "static_methods": [
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "Jinja2Templates",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.MagicMock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Starlette",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "test_client_factory",
      "source_code": "def test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line_number": 13
    },
    {
      "name": "client.get",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 153
    },
    {
      "name": "spy.assert_called",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "open",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "file.write",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line_number": 36
    },
    {
      "name": "templates.TemplateResponse",
      "source_code": "    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n    ) -> _TemplateResponse: ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line_number": 134
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "BackgroundTask",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Route",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "Jinja2Templates",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "mock.MagicMock",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "Starlette",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "test_client_factory",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/conftest.py",
      "line": 13,
      "caller": "test_templates_with_kwargs_only",
      "source_code": "@pytest.fixture\ndef test_client_factory(\n    anyio_backend_name: Literal[\"asyncio\", \"trio\"],\n    anyio_backend_options: dict[str, Any],\n"
    },
    {
      "function": "client.get",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 153,
      "caller": "test_templates_with_kwargs_only",
      "source_code": "    def get(self, key: str, default):\n        \"\"\"Return the cached value for the given key.\n\n        If no value was yet cached or the value cannot be read, the specified\n        default is returned.\n\n        :param key:\n            Must be a ``/`` separated value. Usually the first\n            name is the name of your plugin or your application.\n        :param default:\n            The value to return in case of a cache-miss or invalid cache value.\n        \"\"\"\n        path = self._getvaluepath(key)\n        try:\n            with path.open(\"r\", encoding=\"UTF-8\") as f:\n                return json.load(f)\n        except (ValueError, OSError):\n            return default\n\n"
    },
    {
      "function": "spy.assert_called",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "open",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "file.write",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/ghp_import.py",
      "line": 36,
      "caller": "test_templates_with_kwargs_only",
      "source_code": "    def write(pipe, data):\n        try:\n            pipe.stdin.write(data)\n        except IOError as e:\n            if e.errno != errno.EPIPE:\n                raise\n"
    },
    {
      "function": "templates.TemplateResponse",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/templating.py",
      "line": 134,
      "caller": "test_templates_with_kwargs_only",
      "source_code": "    @typing.overload\n    def TemplateResponse(\n        self,\n        request: Request,\n        name: str,\n        context: dict[str, typing.Any] | None = None,\n        status_code: int = 200,\n        headers: typing.Mapping[str, str] | None = None,\n        media_type: str | None = None,\n        background: BackgroundTask | None = None,\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "BackgroundTask",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    },
    {
      "function": "Route",
      "filename": "",
      "line": 0,
      "caller": "test_templates_with_kwargs_only",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert response.text == 'value: b'",
    "assert response.status_code == 201",
    "assert response.headers['x-key'] == 'value'",
    "assert response.headers['content-type'] == 'text/plain; charset=utf-8'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_templates_with_kwargs_only(tmpdir: Path, test_client_factory: TestClientFactory) -> None:\n    # MAINTAINERS: remove after 1.0\n    path = os.path.join(tmpdir, \"index.html\")\n    with open(path, \"w\") as file:\n        file.write(\"value: {{ a }}\")\n    templates = Jinja2Templates(directory=str(tmpdir))\n\n    spy = mock.MagicMock()\n\n    def page(request: Request) -> Response:\n        return templates.TemplateResponse(\n            request=request,\n            name=\"index.html\",\n            context={\"a\": \"b\"},\n            status_code=201,\n            headers={\"x-key\": \"value\"},\n            media_type=\"text/plain\",\n            background=BackgroundTask(func=spy),\n        )\n\n    app = Starlette(routes=[Route(\"/\", page)])\n    client = test_client_factory(app)\n    response = client.get(\"/\")\n\n    assert response.text == \"value: b\"  # context was rendered\n    assert response.status_code == 201\n    assert response.headers[\"x-key\"] == \"value\"\n    assert response.headers[\"content-type\"] == \"text/plain; charset=utf-8\"\n    spy.assert_called()"
}