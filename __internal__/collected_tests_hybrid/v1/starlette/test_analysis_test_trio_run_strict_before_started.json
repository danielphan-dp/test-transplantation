{
  "test_name": "test_trio_run_strict_before_started",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_run.py",
  "static_methods": [
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.run",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n    ) -> RunResult:\n        \"\"\"Run a command with arguments.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line_number": 1363
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "task_status.started",
      "source_code": "    def started(self) -> bool:\n        \"\"\"bool: Check if the task as started.\"\"\"\n        return self.start_time is not None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line_number": 977
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "type",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "_core.open_nursery",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line_number": 985
    },
    {
      "name": "nursery.start",
      "source_code": "    def start(self) -> None:\n        raise NotImplementedError()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line_number": 290
    },
    {
      "name": "BaseExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "_core.run",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/pytester.py",
      "line": 1363,
      "caller": "test_trio_run_strict_before_started",
      "source_code": "    def run(\n        self,\n        *cmdargs: str | os.PathLike[str],\n        timeout: float | None = None,\n        stdin: NotSetType | bytes | IO[Any] | int = CLOSE_STDIN,\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "task_status.started",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/pip/_vendor/rich/progress.py",
      "line": 977,
      "caller": "test_trio_run_strict_before_started",
      "source_code": "    @property\n    def started(self) -> bool:\n        \"\"\"bool: Check if the task as started.\"\"\"\n        return self.start_time is not None\n\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "type",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    },
    {
      "function": "_core.open_nursery",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_run.py",
      "line": 985,
      "caller": "test_trio_run_strict_before_started",
      "source_code": "def open_nursery(\n    strict_exception_groups: bool | None = None,\n"
    },
    {
      "function": "nursery.start",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/capture.py",
      "line": 290,
      "caller": "test_trio_run_strict_before_started",
      "source_code": "    @abc.abstractmethod\n    def start(self) -> None:\n        raise NotImplementedError()\n\n"
    },
    {
      "function": "BaseExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_trio_run_strict_before_started",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert isinstance(exc_info.value, BaseExceptionGroup)",
    "assert len(exc_info.value.exceptions) == 1",
    "assert should_be_raiser_exc is raiser_exc",
    "assert type(should_be_raiser_exc) is type(raiser_exc)",
    "assert should_be_raiser_exc.message == raiser_exc.message",
    "assert should_be_raiser_exc.exceptions == raiser_exc.exceptions",
    "assert exc_info.value.message == 'start_raiser nursery custom message'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_trio_run_strict_before_started(\n    run_strict: bool,\n    start_raiser_strict: bool | None,\n    raise_after_started: bool,\n    raise_custom_exc_grp: bool,\n) -> None:\n    \"\"\"\n    Regression tests for #2611, where exceptions raised before\n    `TaskStatus.started()` caused `Nursery.start()` to wrap them in an\n    ExceptionGroup when using `run(..., strict_exception_groups=True)`.\n\n    Regression tests for #2844, where #2611 was initially fixed in a way that\n    had unintended side effects.\n    \"\"\"\n\n    raiser_exc: ValueError | ExceptionGroup[ValueError]\n    if raise_custom_exc_grp:\n        raiser_exc = ExceptionGroup(\"my group\", [ValueError()])\n    else:\n        raiser_exc = ValueError()\n\n    async def raiser(*, task_status: _core.TaskStatus[None]) -> None:\n        if raise_after_started:\n            task_status.started()\n        raise raiser_exc\n\n    async def start_raiser() -> None:\n        try:\n            async with _core.open_nursery(\n                strict_exception_groups=start_raiser_strict\n            ) as nursery:\n                await nursery.start(raiser)\n        except BaseExceptionGroup as exc_group:\n            if start_raiser_strict:\n                # Iff the code using the nursery *forced* it to be strict\n                # (overriding the runner setting) then it may replace the bland\n                # exception group raised by trio with a more specific one (subtype,\n                # different message, etc.).\n                raise BaseExceptionGroup(\n                    \"start_raiser nursery custom message\", exc_group.exceptions\n                ) from None\n            raise\n\n    with pytest.raises(BaseException) as exc_info:  # noqa: PT011  # no `match`\n        _core.run(start_raiser, strict_exception_groups=run_strict)\n\n    if start_raiser_strict or (run_strict and start_raiser_strict is None):\n        # start_raiser's nursery was strict.\n        assert isinstance(exc_info.value, BaseExceptionGroup)\n        if start_raiser_strict:\n            # start_raiser didn't unknowingly inherit its nursery strictness\n            # from `run`---it explicitly chose for its nursery to be strict.\n            assert exc_info.value.message == \"start_raiser nursery custom message\"\n        assert len(exc_info.value.exceptions) == 1\n        should_be_raiser_exc = exc_info.value.exceptions[0]\n    else:\n        # start_raiser's nursery was not strict.\n        should_be_raiser_exc = exc_info.value\n    if isinstance(raiser_exc, ValueError):\n        assert should_be_raiser_exc is raiser_exc\n    else:\n        # Check attributes, not identity, because should_be_raiser_exc may be a\n        # copy of raiser_exc rather than raiser_exc by identity.\n        assert type(should_be_raiser_exc) is type(raiser_exc)\n        assert should_be_raiser_exc.message == raiser_exc.message\n        assert should_be_raiser_exc.exceptions == raiser_exc.exceptions"
}