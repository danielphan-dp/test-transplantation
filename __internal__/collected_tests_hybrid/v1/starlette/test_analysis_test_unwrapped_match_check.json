{
  "test_name": "test_unwrapped_match_check",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_testing_raisesgroup.py",
  "static_methods": [
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Matcher",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "ExceptionGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RaisesGroup.matches",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 285
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "ValueError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "RaisesGroup",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "Matcher",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "ExceptionGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup.matches",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 285,
      "caller": "test_unwrapped_match_check",
      "source_code": "    def matches(self, warning: warnings.WarningMessage) -> bool:\n        assert self.expected_warning is not None\n        return issubclass(warning.category, self.expected_warning) and bool(\n            self.match_expr is None or re.search(self.match_expr, str(warning.message))\n        )\n\n"
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "ValueError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    },
    {
      "function": "RaisesGroup",
      "filename": "",
      "line": 0,
      "caller": "test_unwrapped_match_check",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert RaisesGroup(ValueError, match='bar').matches(exc.value)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_unwrapped_match_check() -> None:\n    def my_check(e: object) -> bool:  # pragma: no cover\n        return True\n\n    msg = (\n        \"`allow_unwrapped=True` bypasses the `match` and `check` parameters\"\n        \" if the exception is unwrapped. If you intended to match/check the\"\n        \" exception you should use a `Matcher` object. If you want to match/check\"\n        \" the exceptiongroup when the exception *is* wrapped you need to\"\n        \" do e.g. `if isinstance(exc.value, ExceptionGroup):\"\n        \" assert RaisesGroup(...).matches(exc.value)` afterwards.\"\n    )\n    with pytest.raises(ValueError, match=re.escape(msg)):\n        RaisesGroup(ValueError, allow_unwrapped=True, match=\"foo\")  # type: ignore[call-overload]\n    with pytest.raises(ValueError, match=re.escape(msg)):\n        RaisesGroup(ValueError, allow_unwrapped=True, check=my_check)  # type: ignore[call-overload]\n\n    # Users should instead use a Matcher\n    rg = RaisesGroup(Matcher(ValueError, match=\"^foo$\"), allow_unwrapped=True)\n    with rg:\n        raise ValueError(\"foo\")\n    with rg:\n        raise ExceptionGroup(\"\", [ValueError(\"foo\")])\n\n    # or if they wanted to match/check the group, do a conditional `.matches()`\n    with RaisesGroup(ValueError, allow_unwrapped=True) as exc:\n        raise ExceptionGroup(\"bar\", [ValueError(\"foo\")])\n    if isinstance(exc.value, ExceptionGroup):  # pragma: no branch\n        assert RaisesGroup(ValueError, match=\"bar\").matches(exc.value)"
}