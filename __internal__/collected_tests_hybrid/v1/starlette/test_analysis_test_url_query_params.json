{
  "test_name": "test_url_query_params",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_datastructures.py",
  "static_methods": [
    {
      "name": "URL",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "u.include_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 138
    },
    {
      "name": "u.include_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 138
    },
    {
      "name": "u.replace_query_params",
      "source_code": "    def replace_query_params(self, **kwargs: typing.Any) -> URL:\n        query = urlencode([(str(key), str(value)) for key, value in kwargs.items()])\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 144
    },
    {
      "name": "u.remove_query_params",
      "source_code": "    def remove_query_params(self, keys: str | typing.Sequence[str]) -> URL:\n        if isinstance(keys, str):\n            keys = [keys]\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        for key in keys:\n            params.pop(key, None)\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 148
    },
    {
      "name": "u.include_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 138
    },
    {
      "name": "u.remove_query_params",
      "source_code": "    def remove_query_params(self, keys: str | typing.Sequence[str]) -> URL:\n        if isinstance(keys, str):\n            keys = [keys]\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        for key in keys:\n            params.pop(key, None)\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line_number": 148
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "URL",
      "filename": "",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "u.include_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 138,
      "caller": "test_url_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "u.include_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 138,
      "caller": "test_url_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "u.replace_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 144,
      "caller": "test_url_query_params",
      "source_code": "    def replace_query_params(self, **kwargs: typing.Any) -> URL:\n        query = urlencode([(str(key), str(value)) for key, value in kwargs.items()])\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "u.remove_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 148,
      "caller": "test_url_query_params",
      "source_code": "    def remove_query_params(self, keys: str | typing.Sequence[str]) -> URL:\n        if isinstance(keys, str):\n            keys = [keys]\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        for key in keys:\n            params.pop(key, None)\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "u.include_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 138,
      "caller": "test_url_query_params",
      "source_code": "    def include_query_params(self, **kwargs: typing.Any) -> URL:\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        params.update({str(key): str(value) for key, value in kwargs.items()})\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "u.remove_query_params",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/starlette/datastructures.py",
      "line": 148,
      "caller": "test_url_query_params",
      "source_code": "    def remove_query_params(self, keys: str | typing.Sequence[str]) -> URL:\n        if isinstance(keys, str):\n            keys = [keys]\n        params = MultiDict(parse_qsl(self.query, keep_blank_values=True))\n        for key in keys:\n            params.pop(key, None)\n        query = urlencode(params.multi_items())\n        return self.replace(query=query)\n\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_url_query_params",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert u.query == 'page=3'",
    "assert str(u) == 'https://example.org/path/?page=4'",
    "assert str(u) == 'https://example.org/path/?page=4&search=testing'",
    "assert str(u) == 'https://example.org/path/?order=name'",
    "assert str(u) == 'https://example.org/path/'",
    "assert str(u) == 'https://example.org/path/?page=4&search=testing'",
    "assert str(u) == 'https://example.org/path/'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_url_query_params() -> None:\n    u = URL(\"https://example.org/path/?page=3\")\n    assert u.query == \"page=3\"\n    u = u.include_query_params(page=4)\n    assert str(u) == \"https://example.org/path/?page=4\"\n    u = u.include_query_params(search=\"testing\")\n    assert str(u) == \"https://example.org/path/?page=4&search=testing\"\n    u = u.replace_query_params(order=\"name\")\n    assert str(u) == \"https://example.org/path/?order=name\"\n    u = u.remove_query_params(\"order\")\n    assert str(u) == \"https://example.org/path/\"\n    u = u.include_query_params(page=4, search=\"testing\")\n    assert str(u) == \"https://example.org/path/?page=4&search=testing\"\n    u = u.remove_query_params([\"page\", \"search\"])\n    assert str(u) == \"https://example.org/path/\""
}