{
  "test_name": "test_warn_deprecated",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
  "static_methods": [
    {
      "name": "deprecated_thing",
      "source_code": "    def deprecated_thing() -> None:\n        warn_deprecated(\"ice\", \"1.2\", issue=1, instead=\"water\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
      "line_number": 35
    },
    {
      "name": "_here",
      "source_code": "def _here() -> tuple[str, int]:\n    frame = inspect.currentframe()\n    assert frame is not None\n    assert frame.f_back is not None\n    info = inspect.getframeinfo(frame.f_back)\n    return (info.filename, info.lineno)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
      "line_number": 26
    },
    {
      "name": "recwarn_always.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "isinstance",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "warn_deprecated",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line_number": 54
    },
    {
      "name": "len",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "deprecated_thing",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
      "line": 35,
      "caller": "test_warn_deprecated",
      "source_code": "    def deprecated_thing() -> None:\n        warn_deprecated(\"ice\", \"1.2\", issue=1, instead=\"water\")\n\n"
    },
    {
      "function": "_here",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_tests/test_deprecate.py",
      "line": 26,
      "caller": "test_warn_deprecated",
      "source_code": "def _here() -> tuple[str, int]:\n    frame = inspect.currentframe()\n    assert frame is not None\n    assert frame.f_back is not None\n    info = inspect.getframeinfo(frame.f_back)\n    return (info.filename, info.lineno)\n\n\n"
    },
    {
      "function": "recwarn_always.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_warn_deprecated",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "isinstance",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_warn_deprecated",
      "source_code": ""
    },
    {
      "function": "warn_deprecated",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_deprecate.py",
      "line": 54,
      "caller": "test_warn_deprecated",
      "source_code": "def warn_deprecated(\n    thing: object,\n    version: str,\n    *,\n    issue: int | None,\n    instead: object,\n    stacklevel: int = 2,\n    use_triodeprecationwarning: bool = False,\n"
    },
    {
      "function": "len",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_warn_deprecated",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert len(recwarn_always) == 1",
    "assert isinstance(got.message, Warning)",
    "assert 'ice is deprecated' in got.message.args[0]",
    "assert 'Trio 1.2' in got.message.args[0]",
    "assert 'water instead' in got.message.args[0]",
    "assert '/issues/1' in got.message.args[0]",
    "assert got.filename == filename",
    "assert got.lineno == lineno - 1"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_warn_deprecated(recwarn_always: pytest.WarningsRecorder) -> None:\n    def deprecated_thing() -> None:\n        warn_deprecated(\"ice\", \"1.2\", issue=1, instead=\"water\")\n\n    deprecated_thing()\n    filename, lineno = _here()\n    assert len(recwarn_always) == 1\n    got = recwarn_always.pop(DeprecationWarning)\n    assert isinstance(got.message, Warning)\n    assert \"ice is deprecated\" in got.message.args[0]\n    assert \"Trio 1.2\" in got.message.args[0]\n    assert \"water instead\" in got.message.args[0]\n    assert \"/issues/1\" in got.message.args[0]\n    assert got.filename == filename\n    assert got.lineno == lineno - 1"
}