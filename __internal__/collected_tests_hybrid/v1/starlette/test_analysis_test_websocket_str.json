{
  "test_name": "test_websocket_str",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/tests/test_exceptions.py",
  "static_methods": [
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "WebSocketException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "WebSocketException",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_websocket_str",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_websocket_str",
      "source_code": ""
    },
    {
      "function": "WebSocketException",
      "filename": "",
      "line": 0,
      "caller": "test_websocket_str",
      "source_code": ""
    },
    {
      "function": "WebSocketException",
      "filename": "",
      "line": 0,
      "caller": "test_websocket_str",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert str(WebSocketException(1008)) == '1008: '",
    "assert str(WebSocketException(1008, 'Policy Violation')) == '1008: Policy Violation'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_websocket_str() -> None:\n    assert str(WebSocketException(1008)) == \"1008: \"\n    assert str(WebSocketException(1008, \"Policy Violation\")) == \"1008: Policy Violation\""
}