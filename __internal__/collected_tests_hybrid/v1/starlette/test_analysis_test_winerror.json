{
  "test_name": "test_winerror",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_tests/test_windows.py",
  "static_methods": [
    {
      "name": "create_autospec",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "monkeypatch.setattr",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "mock.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.reset_mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.reset_mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.reset_mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock.reset_mock",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "raise_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line_number": 496
    },
    {
      "name": "raise_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line_number": 496
    },
    {
      "name": "raise_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line_number": 496
    },
    {
      "name": "raise_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line_number": 496
    }
  ],
  "dynamic_methods": [
    {
      "function": "create_autospec",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "monkeypatch.setattr",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.reset_mock",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.reset_mock",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.reset_mock",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "mock.reset_mock",
      "filename": "",
      "line": 0,
      "caller": "test_winerror",
      "source_code": ""
    },
    {
      "function": "raise_winerror",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line": 496,
      "caller": "test_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,\n"
    },
    {
      "function": "raise_winerror",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line": 496,
      "caller": "test_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,\n"
    },
    {
      "function": "raise_winerror",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line": 496,
      "caller": "test_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,\n"
    },
    {
      "function": "raise_winerror",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/starlette/venv/lib/python3.9/site-packages/trio/_core/_windows_cffi.py",
      "line": 496,
      "caller": "test_winerror",
      "source_code": "def raise_winerror(\n    winerror: int | None = None,\n    *,\n    filename: str | None = None,\n    filename2: str | None = None,\n"
    }
  ],
  "assertions": [
    "assert exc.value.winerror == 12",
    "assert exc.value.strerror == 'test error'",
    "assert exc.value.filename == 'file_1'",
    "assert exc.value.filename2 == 'file_2'",
    "assert exc.value.winerror == 18",
    "assert exc.value.strerror == 'test error'",
    "assert exc.value.filename == 'a/file'",
    "assert exc.value.filename2 == 'b/file'"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_winerror(monkeypatch: pytest.MonkeyPatch) -> None:\n    mock = create_autospec(ffi.getwinerror)\n    monkeypatch.setattr(ffi, \"getwinerror\", mock)\n\n    # Returning none = no error, should not happen.\n    mock.return_value = None\n    with pytest.raises(RuntimeError, match=r\"^No error set\\?$\"):\n        raise_winerror()\n    mock.assert_called_once_with()\n    mock.reset_mock()\n\n    with pytest.raises(RuntimeError, match=r\"^No error set\\?$\"):\n        raise_winerror(38)\n    mock.assert_called_once_with(38)\n    mock.reset_mock()\n\n    mock.return_value = (12, \"test error\")\n    with pytest.raises(\n        OSError, match=r\"^\\[WinError 12\\] test error: 'file_1' -> 'file_2'$\"\n    ) as exc:\n        raise_winerror(filename=\"file_1\", filename2=\"file_2\")\n    mock.assert_called_once_with()\n    mock.reset_mock()\n    assert exc.value.winerror == 12\n    assert exc.value.strerror == \"test error\"\n    assert exc.value.filename == \"file_1\"\n    assert exc.value.filename2 == \"file_2\"\n\n    # With an explicit number passed in, it overrides what getwinerror() returns.\n    with pytest.raises(\n        OSError, match=r\"^\\[WinError 18\\] test error: 'a/file' -> 'b/file'$\"\n    ) as exc:\n        raise_winerror(18, filename=\"a/file\", filename2=\"b/file\")\n    mock.assert_called_once_with(18)\n    mock.reset_mock()\n    assert exc.value.winerror == 18\n    assert exc.value.strerror == \"test error\"\n    assert exc.value.filename == \"a/file\"\n    assert exc.value.filename2 == \"b/file\""
}