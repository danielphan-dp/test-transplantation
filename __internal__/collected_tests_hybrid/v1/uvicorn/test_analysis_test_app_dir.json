{
  "test_name": "test_app_dir",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_cli.py",
  "static_methods": [
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "app_dir.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "app_file.touch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "app_file.write_text",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 901
    },
    {
      "name": "CliRunner",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mock_run.assert_called_once",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "dedent",
      "source_code": "    def dedent(self) -> None:\n        self._indent -= 4\n        assert self._indent >= 0",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emit.py",
      "line_number": 184
    },
    {
      "name": "mock.patch.object",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "runner.invoke",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n    ) -> Result:\n        \"\"\"Invokes a command in an isolated environment.  The arguments are\n        forwarded directly to the command line script, the `extra` keyword\n        arguments are passed to the :meth:`~clickpkg.Command.main` function of\n        the command.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/click/testing.py",
      "line_number": 349
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "str",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "app_dir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_app_dir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "app_file.touch",
      "filename": "",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "app_file.write_text",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 901,
      "caller": "test_app_dir",
      "source_code": "    def write_text(self, data, encoding, ensure=False):\n        \"\"\"Write text data into path using the specified encoding.\n        If ensure is True create missing parent directories.\n        \"\"\"\n        if ensure:\n            self.dirpath().ensure(dir=1)\n        with self.open(\"w\", encoding=encoding) as f:\n            f.write(data)\n\n"
    },
    {
      "function": "CliRunner",
      "filename": "",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "mock_run.assert_called_once",
      "filename": "",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "dedent",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emit.py",
      "line": 184,
      "caller": "test_app_dir",
      "source_code": "    def dedent(self) -> None:\n        self._indent -= 4\n        assert self._indent >= 0\n\n"
    },
    {
      "function": "mock.patch.object",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "runner.invoke",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/click/testing.py",
      "line": 349,
      "caller": "test_app_dir",
      "source_code": "    def invoke(\n        self,\n        cli: \"BaseCommand\",\n        args: t.Optional[t.Union[str, t.Sequence[str]]] = None,\n        input: t.Optional[t.Union[str, bytes, t.IO[t.Any]]] = None,\n        env: t.Optional[t.Mapping[str, t.Optional[str]]] = None,\n        catch_exceptions: bool = True,\n        color: bool = False,\n        **extra: t.Any,\n"
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    },
    {
      "function": "str",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_app_dir",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert result.exit_code == 3",
    "assert sys.path[0] == str(app_dir)"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_app_dir(tmp_path: Path, caplog: pytest.LogCaptureFixture) -> None:\n    app_dir = tmp_path / \"dir\" / \"app_dir\"\n    app_file = app_dir / \"main.py\"\n    app_dir.mkdir(parents=True)\n    app_file.touch()\n    app_file.write_text(\n        dedent(\n            \"\"\"\n            async def app(scope, receive, send):\n                ...\n            \"\"\"\n        )\n    )\n    runner = CliRunner()\n    with mock.patch.object(Server, \"run\") as mock_run:\n        result = runner.invoke(cli, [\"main:app\", \"--app-dir\", f\"{str(app_dir)}\"])\n\n    assert result.exit_code == 3\n    mock_run.assert_called_once()\n    assert sys.path[0] == str(app_dir)"
}