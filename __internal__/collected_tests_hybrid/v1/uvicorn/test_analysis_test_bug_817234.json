{
  "test_name": "test_bug_817234",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "regex.finditer",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 340
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertRaises",
      "source_code": "def assertRaises(typ: type, msg: str = '') -> Iterator[None]:\n    try:\n        yield\n    except Exception as e:\n        assert isinstance(e, typ), f\"{e!r} is not a {typ.__name__}\"\n        assert msg in str(e), f'Message \"{e}\" does not match \"{msg}\"'\n    else:\n        assert False, f\"Expected {typ.__name__} but got no exception\"",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/testutil.py",
      "line_number": 44
    },
    {
      "name": "next.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "next.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "next",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "regex.finditer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 340,
      "caller": "test_bug_817234",
      "source_code": "def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,\n  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Return an iterator over all matches in the string. The matches may be\n    overlapped if overlapped is True. For each match, the iterator returns a\n    match object. Empty matches are included in the result.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.finditer(string, pos, endpos, overlapped, concurrent, partial,\n      timeout)\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_817234",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_bug_817234",
      "source_code": ""
    },
    {
      "function": "self.assertRaises",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test-data/fixtures/testutil.py",
      "line": 44,
      "caller": "test_bug_817234",
      "source_code": "@contextmanager\ndef assertRaises(typ: type, msg: str = '') -> Iterator[None]:\n    try:\n        yield\n    except Exception as e:\n        assert isinstance(e, typ), f\"{e!r} is not a {typ.__name__}\"\n        assert msg in str(e), f'Message \"{e}\" does not match \"{msg}\"'\n    else:\n        assert False, f\"Expected {typ.__name__} but got no exception\"\n\n"
    },
    {
      "function": "next.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_bug_817234",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "next.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_bug_817234",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_817234",
      "source_code": ""
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_817234",
      "source_code": ""
    },
    {
      "function": "next",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_bug_817234",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_bug_817234(self):\n        it = regex.finditer(r\".*\", \"asdf\")\n        self.assertEqual(next(it).span(), (0, 4))\n        self.assertEqual(next(it).span(), (4, 4))\n        self.assertRaises(StopIteration, lambda: next(it))"
}