{
  "test_name": "test_build_environ_encoding",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/middleware/test_wsgi.py",
  "static_methods": [
    {
      "name": "wsgi.build_environ",
      "source_code": "def build_environ(scope: HTTPScope, body: Body) -> Environ:\n    \"\"\"\n    Builds a scope and request body into a WSGI environ object.\n    \"\"\"\n    script_name = scope.get(\"root_path\", \"\").encode(\"utf8\").decode(\"latin1\")\n    path_info = scope[\"path\"].encode(\"utf8\").decode(\"latin1\")\n    if path_info.startswith(script_name):\n        path_info = path_info[len(script_name) :]",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/a2wsgi/wsgi.py",
      "line_number": 90
    },
    {
      "name": "encode.decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "decode",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line_number": 122
    },
    {
      "name": "encode",
      "source_code": "    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line_number": 103
    }
  ],
  "dynamic_methods": [
    {
      "function": "wsgi.build_environ",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/a2wsgi/wsgi.py",
      "line": 90,
      "caller": "test_build_environ_encoding",
      "source_code": "def build_environ(scope: HTTPScope, body: Body) -> Environ:\n    \"\"\"\n    Builds a scope and request body into a WSGI environ object.\n    \"\"\"\n    script_name = scope.get(\"root_path\", \"\").encode(\"utf8\").decode(\"latin1\")\n    path_info = scope[\"path\"].encode(\"utf8\").decode(\"latin1\")\n    if path_info.startswith(script_name):\n        path_info = path_info[len(script_name) :]\n\n    script_name_environ_var = os.environ.get(\"SCRIPT_NAME\", \"\")\n    if script_name_environ_var:\n        script_name = unicode_to_wsgi(script_name_environ_var)\n\n    environ: Environ = {\n        \"asgi.scope\": scope,  # type: ignore a2wsgi\n        \"REQUEST_METHOD\": scope[\"method\"],\n        \"SCRIPT_NAME\": script_name,\n        \"PATH_INFO\": path_info,\n        \"QUERY_STRING\": scope[\"query_string\"].decode(\"ascii\"),\n        \"SERVER_PROTOCOL\": f\"HTTP/{scope['http_version']}\",\n        \"wsgi.version\": (1, 0),\n        \"wsgi.url_scheme\": scope.get(\"scheme\", \"http\"),\n        \"wsgi.input\": body,\n        \"wsgi.errors\": sys.stdout,\n        \"wsgi.multithread\": True,\n        \"wsgi.multiprocess\": True,\n        \"wsgi.run_once\": False,\n    }\n\n    # Get server name and port - required in WSGI, not in ASGI\n    server_addr, server_port = scope.get(\"server\") or (\"localhost\", 80)\n    environ[\"SERVER_NAME\"] = server_addr\n    environ[\"SERVER_PORT\"] = str(server_port or 0)\n\n    # Get client IP address\n    client = scope.get(\"client\")\n    if client is not None:\n        addr, port = client\n        environ[\"REMOTE_ADDR\"] = addr\n        environ[\"REMOTE_PORT\"] = str(port)\n\n    # Go through headers and make them into environ entries\n    for name, value in scope.get(\"headers\", []):\n        name = name.decode(\"latin1\")\n        if name == \"content-length\":\n            corrected_name = \"CONTENT_LENGTH\"\n        elif name == \"content-type\":\n            corrected_name = \"CONTENT_TYPE\"\n        else:\n            corrected_name = f\"HTTP_{name}\".upper().replace(\"-\", \"_\")\n        # HTTPbis say only ASCII chars are allowed in headers, but we latin1 just in case\n        value = value.decode(\"latin1\")\n        if corrected_name in environ:\n            value = environ[corrected_name] + \",\" + value\n        environ[corrected_name] = value\n    return environ\n\n\n"
    },
    {
      "function": "encode.decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_build_environ_encoding",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "decode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/ansi.py",
      "line": 122,
      "caller": "test_build_environ_encoding",
      "source_code": "    def decode(self, terminal_text: str) -> Iterable[Text]:\n        \"\"\"Decode ANSI codes in an iterable of lines.\n\n        Args:\n            lines (Iterable[str]): An iterable of lines of terminal output.\n\n        Yields:\n            Text: Marked up Text.\n        \"\"\"\n        for line in terminal_text.splitlines():\n            yield self.decode_line(line)\n\n"
    },
    {
      "function": "encode",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py",
      "line": 103,
      "caller": "test_build_environ_encoding",
      "source_code": "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n"
    }
  ],
  "assertions": [
    "assert environ['SCRIPT_NAME'] == '/\u6587'.encode().decode('latin-1')",
    "assert environ['PATH_INFO'] == b'/all'.decode('latin-1')",
    "assert environ['HTTP_KEY'] == 'value1,value2'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_build_environ_encoding() -> None:\n    scope: HTTPScope = {\n        \"asgi\": {\"version\": \"3.0\", \"spec_version\": \"2.0\"},\n        \"scheme\": \"http\",\n        \"raw_path\": b\"/\\xe6\\x96\\x87%2Fall\",\n        \"type\": \"http\",\n        \"http_version\": \"1.1\",\n        \"method\": \"GET\",\n        \"path\": \"/\u6587/all\",\n        \"root_path\": \"/\u6587\",\n        \"client\": None,\n        \"server\": None,\n        \"query_string\": b\"a=123&b=456\",\n        \"headers\": [(b\"key\", b\"value1\"), (b\"key\", b\"value2\")],\n        \"extensions\": {},\n    }\n    message: HTTPRequestEvent = {\n        \"type\": \"http.request\",\n        \"body\": b\"\",\n        \"more_body\": False,\n    }\n    environ = wsgi.build_environ(scope, message, io.BytesIO(b\"\"))\n    assert environ[\"SCRIPT_NAME\"] == \"/\u6587\".encode().decode(\"latin-1\")\n    assert environ[\"PATH_INFO\"] == b\"/all\".decode(\"latin-1\")\n    assert environ[\"HTTP_KEY\"] == \"value1,value2\""
}