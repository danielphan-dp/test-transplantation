{
  "test_name": "test_emit_line",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_emit.py",
  "static_methods": [
    {
      "name": "Emitter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "Emitter",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "emitter.emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line_number": 233
    },
    {
      "name": "list",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "range",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Emitter",
      "filename": "",
      "line": 0,
      "caller": "test_emit_line",
      "source_code": ""
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "Emitter",
      "filename": "",
      "line": 0,
      "caller": "test_emit_line",
      "source_code": ""
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "emitter.emit_line",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/emitclass.py",
      "line": 233,
      "caller": "test_emit_line",
      "source_code": "    def emit_line() -> None:\n        emitter.emit_line()\n\n"
    },
    {
      "function": "list",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_emit_line",
      "source_code": ""
    },
    {
      "function": "range",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_emit_line",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert emitter.fragments == ['line;\\n', 'a {\\n', '    f();\\n', '}\\n']",
    "assert emitter.fragments[0] == \"CPyStatics[0]; /* 'hello, world' */\\n\"",
    "assert emitter.fragments[1] == 'CPyStatics[1]; /* [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\\n                  21, 22, 23, 24, 25, 26, 27, 28, 29] */\\n'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_emit_line(self) -> None:\n        emitter = Emitter(self.context, {})\n        emitter.emit_line(\"line;\")\n        emitter.emit_line(\"a {\")\n        emitter.emit_line(\"f();\")\n        emitter.emit_line(\"}\")\n        assert emitter.fragments == [\"line;\\n\", \"a {\\n\", \"    f();\\n\", \"}\\n\"]\n        emitter = Emitter(self.context, {})\n        emitter.emit_line(\"CPyStatics[0];\", ann=\"hello, world\")\n        emitter.emit_line(\"CPyStatics[1];\", ann=list(range(30)))\n        assert emitter.fragments[0] == \"CPyStatics[0]; /* 'hello, world' */\\n\"\n        assert (\n            emitter.fragments[1]\n            == \"\"\"\\\nCPyStatics[1]; /* [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n                  21, 22, 23, 24, 25, 26, 27, 28, 29] */\\n\"\"\"\n        )"
}