{
  "test_name": "test_encode_str_values",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_literals.py",
  "static_methods": [
    {
      "name": "_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 175
    },
    {
      "name": "_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 175
    },
    {
      "name": "_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 175
    },
    {
      "name": "_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 175
    },
    {
      "name": "_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line_number": 175
    },
    {
      "name": "bytes",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bytes",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "_encode_str_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 175,
      "caller": "test_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_str_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 175,
      "caller": "test_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_str_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 175,
      "caller": "test_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_str_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 175,
      "caller": "test_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "_encode_str_values",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/codegen/literals.py",
      "line": 175,
      "caller": "test_encode_str_values",
      "source_code": "def _encode_str_values(values: dict[str, int]) -> list[bytes]:\n    value_by_index = {index: value for value, index in values.items()}\n    result = []\n    line: list[bytes] = []\n    line_len = 0\n    for i in range(len(values)):\n        value = value_by_index[i]\n        c_literal = format_str_literal(value)\n        c_len = len(c_literal)\n        if line_len > 0 and line_len + c_len > 70:\n            result.append(format_int(len(line)) + b\"\".join(line))\n            line = []\n            line_len = 0\n        line.append(c_literal)\n        line_len += c_len\n    if line:\n        result.append(format_int(len(line)) + b\"\".join(line))\n    result.append(b\"\")\n    return result\n\n\n"
    },
    {
      "function": "bytes",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_encode_str_values",
      "source_code": ""
    },
    {
      "function": "bytes",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_encode_str_values",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert _encode_str_values({}) == [b'']",
    "assert _encode_str_values({'foo': 0}) == [b'\\x01\\x03foo', b'']",
    "assert _encode_str_values({'foo': 0, 'b': 1}) == [b'\\x02\\x03foo\\x01b', b'']",
    "assert _encode_str_values({'foo': 0, 'x' * 70: 1}) == [b'\\x01\\x03foo', bytes([1, 70]) + b'x' * 70, b'']",
    "assert _encode_str_values({'y' * 100: 0}) == [bytes([1, 100]) + b'y' * 100, b'']"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_encode_str_values(self) -> None:\n        assert _encode_str_values({}) == [b\"\"]\n        assert _encode_str_values({\"foo\": 0}) == [b\"\\x01\\x03foo\", b\"\"]\n        assert _encode_str_values({\"foo\": 0, \"b\": 1}) == [b\"\\x02\\x03foo\\x01b\", b\"\"]\n        assert _encode_str_values({\"foo\": 0, \"x\" * 70: 1}) == [\n            b\"\\x01\\x03foo\",\n            bytes([1, 70]) + b\"x\" * 70,\n            b\"\",\n        ]\n        assert _encode_str_values({\"y\" * 100: 0}) == [bytes([1, 100]) + b\"y\" * 100, b\"\"]"
}