{
  "test_name": "test_fullmatch",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    },
    {
      "name": "regex.fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 256
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_fullmatch",
      "source_code": ""
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    },
    {
      "function": "regex.fullmatch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 256,
      "caller": "test_fullmatch",
      "source_code": "def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,\n  concurrent=None, timeout=None, ignore_unused=False, **kwargs):\n    \"\"\"Try to apply the pattern against all of the string, returning a match\n    object, or None if no match was found.\"\"\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.fullmatch(string, pos, endpos, concurrent, partial, timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_fullmatch(self):\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"abc\")), True)\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"abcx\")), False)\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"abcx\", endpos=3)), True)\n\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"xabc\", pos=1)), True)\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"xabcy\", pos=1)), False)\n        self.assertEqual(bool(regex.fullmatch(r\"abc\", \"xabcy\", pos=1,\n          endpos=4)), True)\n\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"abc\")), True)\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"abcx\")), False)\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"abcx\", endpos=3)),\n          True)\n\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"xabc\", pos=1)),\n          True)\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"xabcy\", pos=1)),\n          False)\n        self.assertEqual(bool(regex.fullmatch(r\"(?r)abc\", \"xabcy\", pos=1,\n          endpos=4)), True)"
}