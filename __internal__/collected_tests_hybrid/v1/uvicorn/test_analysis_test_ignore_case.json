{
  "test_name": "test_ignore_case",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.match.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "regex.match.span",
      "source_code": "    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line_number": 20
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "bool",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    },
    {
      "name": "regex.match",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line_number": 711
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "regex.match.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_ignore_case",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "regex.match.span",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/rich/measure.py",
      "line": 20,
      "caller": "test_ignore_case",
      "source_code": "    @property\n    def span(self) -> int:\n        \"\"\"Get difference between maximum and minimum.\"\"\"\n        return self.maximum - self.minimum\n\n"
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "bool",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_ignore_case",
      "source_code": ""
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    },
    {
      "function": "regex.match",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_code/code.py",
      "line": 711,
      "caller": "test_ignore_case",
      "source_code": "    def match(self, regexp: str | Pattern[str]) -> Literal[True]:\n        \"\"\"Check whether the regular expression `regexp` matches the string\n        representation of the exception using :func:`python:re.search`.\n\n        If it matches `True` is returned, otherwise an `AssertionError` is raised.\n        \"\"\"\n        __tracebackhide__ = True\n        value = self._stringify_exception(self.value)\n        msg = f\"Regex pattern did not match.\\n Regex: {regexp!r}\\n Input: {value!r}\"\n        if regexp == value:\n            msg += \"\\n Did you mean to `re.escape()` the regex?\"\n        assert re.search(regexp, value), msg\n        # Return True to allow for \"assert excinfo.match()\".\n        return True\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_ignore_case(self):\n        self.assertEqual(regex.match(\"abc\", \"ABC\", regex.I)[0], 'ABC')\n        self.assertEqual(regex.match(b\"abc\", b\"ABC\", regex.I)[0], b'ABC')\n\n        self.assertEqual(regex.match(r\"(a\\s[^a]*)\", \"a bb\", regex.I)[1],\n          'a bb')\n        self.assertEqual(regex.match(r\"(a\\s[abc])\", \"a b\", regex.I)[1], 'a b')\n        self.assertEqual(regex.match(r\"(a\\s[abc]*)\", \"a bb\", regex.I)[1],\n          'a bb')\n        self.assertEqual(regex.match(r\"((a)\\s\\2)\", \"a a\", regex.I)[1], 'a a')\n        self.assertEqual(regex.match(r\"((a)\\s\\2*)\", \"a aa\", regex.I)[1],\n          'a aa')\n        self.assertEqual(regex.match(r\"((a)\\s(abc|a))\", \"a a\", regex.I)[1],\n          'a a')\n        self.assertEqual(regex.match(r\"((a)\\s(abc|a)*)\", \"a aa\", regex.I)[1],\n          'a aa')\n\n        # Issue 3511.\n        self.assertEqual(regex.match(r\"[Z-a]\", \"_\").span(), (0, 1))\n        self.assertEqual(regex.match(r\"(?i)[Z-a]\", \"_\").span(), (0, 1))\n\n        self.assertEqual(bool(regex.match(r\"(?i)nao\", \"nAo\")), True)\n        self.assertEqual(bool(regex.match(r\"(?i)n\\xE3o\", \"n\\xC3o\")), True)\n        self.assertEqual(bool(regex.match(r\"(?i)n\\xE3o\", \"N\\xC3O\")), True)\n        self.assertEqual(bool(regex.match(r\"(?i)s\", \"\\u017F\")), True)"
}