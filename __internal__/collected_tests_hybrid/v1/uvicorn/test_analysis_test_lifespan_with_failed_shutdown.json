{
  "test_name": "test_lifespan_with_failed_shutdown",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_lifespan.py",
  "static_methods": [
    {
      "name": "loop.run_until_complete",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "loop.close",
      "source_code": "    def close(self) -> None:\n        self.session.close()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/twine/repository.py",
      "line_number": 89
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "LifespanOn",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "error_messages.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "error_messages.pop",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line_number": 206
    },
    {
      "name": "receive",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line_number": 158
    },
    {
      "name": "send",
      "source_code": "    def send(self, event: ConnectionClosed) -> None:\n        ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 504
    },
    {
      "name": "receive",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line_number": 158
    },
    {
      "name": "send",
      "source_code": "    def send(self, event: ConnectionClosed) -> None:\n        ...",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line_number": 504
    },
    {
      "name": "RuntimeError",
      "source_code": "",
      "file_path": "<built-in>",
      "line_number": 0
    },
    {
      "name": "lifespan.startup",
      "source_code": "        def startup(self):\n            calls.append(\"startup\")",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line_number": 388
    },
    {
      "name": "lifespan.shutdown",
      "source_code": "    def shutdown(self):\n        with self._raise_on_error():\n            Security.SSLClose(self.context)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 655
    }
  ],
  "dynamic_methods": [
    {
      "function": "loop.run_until_complete",
      "filename": "",
      "line": 0,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": ""
    },
    {
      "function": "loop.close",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/twine/repository.py",
      "line": 89,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def close(self) -> None:\n        self.session.close()\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": ""
    },
    {
      "function": "LifespanOn",
      "filename": "",
      "line": 0,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": ""
    },
    {
      "function": "error_messages.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "error_messages.pop",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/recwarn.py",
      "line": 206,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def pop(self, cls: type[Warning] = Warning) -> warnings.WarningMessage:\n        \"\"\"Pop the first recorded warning which is an instance of ``cls``,\n        but not an instance of a child class of any other match.\n        Raises ``AssertionError`` if there is no match.\n        \"\"\"\n        best_idx: int | None = None\n        for i, w in enumerate(self._list):\n            if w.category == cls:\n                return self._list.pop(i)  # exact match, stop looking\n            if issubclass(w.category, cls) and (\n                best_idx is None\n                or not issubclass(w.category, self._list[best_idx].category)\n            ):\n                best_idx = i\n        if best_idx is not None:\n            return self._list.pop(best_idx)\n        __tracebackhide__ = True\n        raise AssertionError(f\"{cls!r} not found in warning list\")\n\n"
    },
    {
      "function": "receive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line": 158,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection\n\n        If the data is ready, this will return immediately, even if timeout<=0.\n        Otherwise, it will wait for up to timeout seconds, or indefinitely if\n        timeout is None. If no message comes in time, it raises TimeoutError.\n        \"\"\"\n        return self._receive(timeout_to_deadline(timeout))\n\n"
    },
    {
      "function": "send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 504,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    @overload\n    def send(self, event: ConnectionClosed) -> None:\n        ...\n\n"
    },
    {
      "function": "receive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/jeepney/io/blocking.py",
      "line": 158,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def receive(self, *, timeout=None) -> Message:\n        \"\"\"Return the next available message from the connection\n\n        If the data is ready, this will return immediately, even if timeout<=0.\n        Otherwise, it will wait for up to timeout seconds, or indefinitely if\n        timeout is None. If no message comes in time, it raises TimeoutError.\n        \"\"\"\n        return self._receive(timeout_to_deadline(timeout))\n\n"
    },
    {
      "function": "send",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/h11/_connection.py",
      "line": 504,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    @overload\n    def send(self, event: ConnectionClosed) -> None:\n        ...\n\n"
    },
    {
      "function": "RuntimeError",
      "filename": "<built-in>",
      "line": 0,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": ""
    },
    {
      "function": "lifespan.startup",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line": 388,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "        def startup(self):\n            calls.append(\"startup\")\n\n"
    },
    {
      "function": "lifespan.shutdown",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 655,
      "caller": "test_lifespan_with_failed_shutdown",
      "source_code": "    def shutdown(self):\n        with self._raise_on_error():\n            Security.SSLClose(self.context)\n\n"
    }
  ],
  "assertions": [
    "assert 'the lifespan event failed' in error_messages.pop(0)",
    "assert 'Application shutdown failed. Exiting.' in error_messages.pop(0)",
    "assert message['type'] == 'lifespan.startup'",
    "assert message['type'] == 'lifespan.shutdown'",
    "assert not lifespan.startup_failed",
    "assert lifespan.shutdown_failed",
    "assert lifespan.error_occured is raise_exception",
    "assert lifespan.should_exit"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_lifespan_with_failed_shutdown(mode, raise_exception, caplog):\n    async def app(scope, receive, send):\n        message = await receive()\n        assert message[\"type\"] == \"lifespan.startup\"\n        await send({\"type\": \"lifespan.startup.complete\"})\n        message = await receive()\n        assert message[\"type\"] == \"lifespan.shutdown\"\n        await send({\"type\": \"lifespan.shutdown.failed\", \"message\": \"the lifespan event failed\"})\n\n        if raise_exception:\n            # App should be able to re-raise an exception if startup failed.\n            raise RuntimeError()\n\n    async def test():\n        config = Config(app=app, lifespan=mode)\n        lifespan = LifespanOn(config)\n\n        await lifespan.startup()\n        assert not lifespan.startup_failed\n        await lifespan.shutdown()\n        assert lifespan.shutdown_failed\n        assert lifespan.error_occured is raise_exception\n        assert lifespan.should_exit\n\n    loop = asyncio.new_event_loop()\n    loop.run_until_complete(test())\n    error_messages = [\n        record.message for record in caplog.records if record.name == \"uvicorn.error\" and record.levelname == \"ERROR\"\n    ]\n    assert \"the lifespan event failed\" in error_messages.pop(0)\n    assert \"Application shutdown failed. Exiting.\" in error_messages.pop(0)\n    loop.close()"
}