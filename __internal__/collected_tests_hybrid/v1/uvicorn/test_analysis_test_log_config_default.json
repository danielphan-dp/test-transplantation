{
  "test_name": "test_log_config_default",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    },
    {
      "name": "mocked_logging_config_module.dictConfig.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_default",
      "source_code": ""
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_log_config_default",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    },
    {
      "function": "mocked_logging_config_module.dictConfig.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_default",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert provided_dict_config['formatters']['default']['use_colors'] == expected"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_log_config_default(\n    mocked_logging_config_module: MagicMock,\n    use_colors: bool | None,\n    expected: bool | None,\n    logging_config: dict[str, Any],\n) -> None:\n    \"\"\"\n    Test that one can specify the use_colors option when using the default logging\n    config.\n    \"\"\"\n    config = Config(app=asgi_app, use_colors=use_colors, log_config=logging_config)\n    config.load()\n\n    mocked_logging_config_module.dictConfig.assert_called_once_with(logging_config)\n\n    (provided_dict_config,), _ = mocked_logging_config_module.dictConfig.call_args\n    assert provided_dict_config[\"formatters\"][\"default\"][\"use_colors\"] == expected"
}