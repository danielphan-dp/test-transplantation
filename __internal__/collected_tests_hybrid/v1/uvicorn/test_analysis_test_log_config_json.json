{
  "test_name": "test_log_config_json",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/test_config.py",
  "static_methods": [
    {
      "name": "mocker.patch",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line_number": 649
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "config.load",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line_number": 74
    },
    {
      "name": "mocked_open.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mocked_logging_config_module.dictConfig.assert_called_once_with",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "mocker.mock_open",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "mocker.patch",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/requests/sessions.py",
      "line": 649,
      "caller": "test_log_config_json",
      "source_code": "    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_json",
      "source_code": ""
    },
    {
      "function": "config.load",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/yaml/__init__.py",
      "line": 74,
      "caller": "test_log_config_json",
      "source_code": "def load(stream, Loader):\n    \"\"\"\n    Parse the first YAML document in a stream\n    and produce the corresponding Python object.\n    \"\"\"\n    loader = Loader(stream)\n    try:\n        return loader.get_single_data()\n    finally:\n        loader.dispose()\n\n"
    },
    {
      "function": "mocked_open.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_json",
      "source_code": ""
    },
    {
      "function": "mocked_logging_config_module.dictConfig.assert_called_once_with",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_json",
      "source_code": ""
    },
    {
      "function": "mocker.mock_open",
      "filename": "",
      "line": 0,
      "caller": "test_log_config_json",
      "source_code": ""
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_log_config_json(\n    mocked_logging_config_module: MagicMock,\n    logging_config: dict[str, Any],\n    json_logging_config: str,\n    mocker: MockerFixture,\n) -> None:\n    \"\"\"\n    Test that one can load a json config from disk.\n    \"\"\"\n    mocked_open = mocker.patch(\"uvicorn.config.open\", mocker.mock_open(read_data=json_logging_config))\n\n    config = Config(app=asgi_app, log_config=\"log_config.json\")\n    config.load()\n\n    mocked_open.assert_called_once_with(\"log_config.json\")\n    mocked_logging_config_module.dictConfig.assert_called_once_with(logging_config)"
}