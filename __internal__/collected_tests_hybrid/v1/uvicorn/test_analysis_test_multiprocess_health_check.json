{
  "test_name": "test_multiprocess_health_check",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_multiprocess.py",
  "static_methods": [
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "Multiprocess",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "process.kill",
      "source_code": "    def kill(self) -> None:\n        \"\"\"\n        Kills the process.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/anyio/abc/_subprocesses.py",
      "line_number": 33
    },
    {
      "name": "supervisor.signal_queue.append",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line_number": 100
    },
    {
      "name": "supervisor.join_all",
      "source_code": "    def join_all(self):\n        \"\"\"Join all the threads to the master thread.\"\"\"\n        for session_thread in self._pool:\n            session_thread.join()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/requests_toolbelt/threaded/pool.py",
      "line_number": 144
    },
    {
      "name": "process.is_alive",
      "source_code": "    def is_alive(self) -> bool:\n        if isinstance(self._p, SpawnProcess):\n            return self._p.is_alive()\n        else:\n            return self._p.poll() is None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/run.py",
      "line_number": 346
    },
    {
      "name": "p.is_alive",
      "source_code": "    def is_alive(self) -> bool:\n        if isinstance(self._p, SpawnProcess):\n            return self._p.is_alive()\n        else:\n            return self._p.poll() is None",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/run.py",
      "line_number": 346
    },
    {
      "name": "new_console_in_windows",
      "source_code": "def new_console_in_windows(test_function: Callable[[], Any]) -> Callable[[], Any]:  # pragma: no cover\n    if os.name != \"nt\":\n        return test_function",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_multiprocess.py",
      "line_number": 19
    }
  ],
  "dynamic_methods": [
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_multiprocess_health_check",
      "source_code": ""
    },
    {
      "function": "Multiprocess",
      "filename": "",
      "line": 0,
      "caller": "test_multiprocess_health_check",
      "source_code": ""
    },
    {
      "function": "process.kill",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/anyio/abc/_subprocesses.py",
      "line": 33,
      "caller": "test_multiprocess_health_check",
      "source_code": "    @abstractmethod\n    def kill(self) -> None:\n        \"\"\"\n        Kills the process.\n\n        On Windows, this calls ``TerminateProcess()``.\n        On POSIX systems, this sends ``SIGKILL`` to the process.\n\n        .. seealso:: :meth:`subprocess.Popen.kill`\n        \"\"\"\n\n"
    },
    {
      "function": "supervisor.signal_queue.append",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/junitxml.py",
      "line": 100,
      "caller": "test_multiprocess_health_check",
      "source_code": "    def append(self, node: ET.Element) -> None:\n        self.xml.add_stats(node.tag)\n        self.nodes.append(node)\n\n"
    },
    {
      "function": "supervisor.join_all",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/requests_toolbelt/threaded/pool.py",
      "line": 144,
      "caller": "test_multiprocess_health_check",
      "source_code": "    def join_all(self):\n        \"\"\"Join all the threads to the master thread.\"\"\"\n        for session_thread in self._pool:\n            session_thread.join()\n\n\n"
    },
    {
      "function": "process.is_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/run.py",
      "line": 346,
      "caller": "test_multiprocess_health_check",
      "source_code": "    def is_alive(self) -> bool:\n        if isinstance(self._p, SpawnProcess):\n            return self._p.is_alive()\n        else:\n            return self._p.poll() is None\n\n"
    },
    {
      "function": "p.is_alive",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/watchfiles/run.py",
      "line": 346,
      "caller": "test_multiprocess_health_check",
      "source_code": "    def is_alive(self) -> bool:\n        if isinstance(self._p, SpawnProcess):\n            return self._p.is_alive()\n        else:\n            return self._p.poll() is None\n\n"
    },
    {
      "function": "new_console_in_windows",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_multiprocess.py",
      "line": 19,
      "caller": "test_multiprocess_health_check",
      "source_code": "def new_console_in_windows(test_function: Callable[[], Any]) -> Callable[[], Any]:  # pragma: no cover\n    if os.name != \"nt\":\n        return test_function\n\n    @functools.wraps(test_function)\n    def new_function():\n        import subprocess\n        import sys\n\n        module = test_function.__module__\n        name = test_function.__name__\n\n        subprocess.check_call(\n            [\n                sys.executable,\n                \"-c\",\n                f\"from {module} import {name}; {name}.__wrapped__()\",\n            ],\n            creationflags=subprocess.CREATE_NO_WINDOW,  # type: ignore[attr-defined]\n        )\n\n    return new_function\n\n\n"
    }
  ],
  "assertions": [
    "assert not process.is_alive()",
    "assert p.is_alive()"
  ],
  "mocks": [],
  "success": true,
  "test_source_code": "def test_multiprocess_health_check() -> None:\n    \"\"\"\n    Ensure that the health check works as expected.\n    \"\"\"\n    config = Config(app=app, workers=2)\n    supervisor = Multiprocess(config, target=run, sockets=[])\n    threading.Thread(target=supervisor.run, daemon=True).start()\n    time.sleep(1)\n    process = supervisor.processes[0]\n    process.kill()\n    assert not process.is_alive()\n    time.sleep(1)\n    for p in supervisor.processes:\n        assert p.is_alive()\n    supervisor.signal_queue.append(signal.SIGINT)\n    supervisor.join_all()"
}