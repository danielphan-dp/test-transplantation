{
  "test_name": "test_names",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mypyc/test/test_tuplename.py",
  "static_methods": [
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RTuple",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "RUnion",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    }
  ],
  "dynamic_methods": [
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RTuple",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    },
    {
      "function": "RUnion",
      "filename": "",
      "line": 0,
      "caller": "test_names",
      "source_code": ""
    }
  ],
  "assertions": [
    "assert RTuple([int_rprimitive, int_rprimitive]).unique_id == 'T2II'",
    "assert RTuple([list_rprimitive, object_rprimitive, self.inst_a]).unique_id == 'T3OOO'",
    "assert RTuple([list_rprimitive, object_rprimitive, self.inst_b]).unique_id == 'T3OOO'",
    "assert RTuple([]).unique_id == 'T0'",
    "assert RTuple([RTuple([]), RTuple([int_rprimitive, int_rprimitive])]).unique_id == 'T2T0T2II'",
    "assert RTuple([bool_rprimitive, RUnion([bool_rprimitive, int_rprimitive])]).unique_id == 'T2CO'"
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_names(self) -> None:\n        assert RTuple([int_rprimitive, int_rprimitive]).unique_id == \"T2II\"\n        assert RTuple([list_rprimitive, object_rprimitive, self.inst_a]).unique_id == \"T3OOO\"\n        assert RTuple([list_rprimitive, object_rprimitive, self.inst_b]).unique_id == \"T3OOO\"\n        assert RTuple([]).unique_id == \"T0\"\n        assert (\n            RTuple([RTuple([]), RTuple([int_rprimitive, int_rprimitive])]).unique_id == \"T2T0T2II\"\n        )\n        assert (\n            RTuple([bool_rprimitive, RUnion([bool_rprimitive, int_rprimitive])]).unique_id\n            == \"T2CO\"\n        )"
}