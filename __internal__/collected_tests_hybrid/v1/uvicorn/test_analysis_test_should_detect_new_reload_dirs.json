{
  "test_name": "test_should_detect_new_reload_dirs",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
  "static_methods": [
    {
      "name": "as_cwd",
      "source_code": "    def as_cwd(self):\n        \"\"\"\n        Return a context manager, which changes to the path's dir during the\n        managed \"with\" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        \"\"\"\n        old = self.chdir()\n        try:\n            yield old\n        finally:\n            if old is not None:\n                old.chdir()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 1005
    },
    {
      "name": "app_dir.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "app_file.touch",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "as_cwd",
      "source_code": "    def as_cwd(self):\n        \"\"\"\n        Return a context manager, which changes to the path's dir during the\n        managed \"with\" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        \"\"\"\n        old = self.chdir()\n        try:\n            yield old\n        finally:\n            if old is not None:\n                old.chdir()",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line_number": 1005
    },
    {
      "name": "Config",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self._setup_reloader",
      "source_code": "    def _setup_reloader(self, config: Config) -> BaseReload:\n        config.reload_delay = 0  # save time",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line_number": 52
    },
    {
      "name": "self._reload_tester",
      "source_code": "    def _reload_tester(self, touch_soon, reloader: BaseReload, *files: Path) -> list[Path] | None:\n        reloader.restart()\n        if WatchFilesReload is not None and isinstance(reloader, WatchFilesReload):\n            touch_soon(*files)\n        else:\n            assert not next(reloader)\n            sleep(0.1)\n            for file in files:\n                file.touch()\n        return next(reloader)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line_number": 65
    },
    {
      "name": "app_first_dir.mkdir",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line_number": 129
    },
    {
      "name": "self._reload_tester",
      "source_code": "    def _reload_tester(self, touch_soon, reloader: BaseReload, *files: Path) -> list[Path] | None:\n        reloader.restart()\n        if WatchFilesReload is not None and isinstance(reloader, WatchFilesReload):\n            touch_soon(*files)\n        else:\n            assert not next(reloader)\n            sleep(0.1)\n            for file in files:\n                file.touch()\n        return next(reloader)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line_number": 65
    },
    {
      "name": "reloader.shutdown",
      "source_code": "    def shutdown(self):\n        with self._raise_on_error():\n            Security.SSLClose(self.context)",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line_number": 655
    }
  ],
  "dynamic_methods": [
    {
      "function": "as_cwd",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 1005,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    @contextmanager\n    def as_cwd(self):\n        \"\"\"\n        Return a context manager, which changes to the path's dir during the\n        managed \"with\" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        \"\"\"\n        old = self.chdir()\n        try:\n            yield old\n        finally:\n            if old is not None:\n                old.chdir()\n\n"
    },
    {
      "function": "app_dir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "app_file.touch",
      "filename": "",
      "line": 0,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": ""
    },
    {
      "function": "as_cwd",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/_py/path.py",
      "line": 1005,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    @contextmanager\n    def as_cwd(self):\n        \"\"\"\n        Return a context manager, which changes to the path's dir during the\n        managed \"with\" context.\n        On __enter__ it returns the old dir, which might be ``None``.\n        \"\"\"\n        old = self.chdir()\n        try:\n            yield old\n        finally:\n            if old is not None:\n                old.chdir()\n\n"
    },
    {
      "function": "Config",
      "filename": "",
      "line": 0,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": ""
    },
    {
      "function": "self._setup_reloader",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line": 52,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def _setup_reloader(self, config: Config) -> BaseReload:\n        config.reload_delay = 0  # save time\n\n        if self.reloader_class is WatchGodReload:\n            with pytest.deprecated_call():\n                reloader = self.reloader_class(config, target=run, sockets=[])\n        else:\n            reloader = self.reloader_class(config, target=run, sockets=[])\n\n        assert config.should_reload\n        reloader.startup()\n        return reloader\n\n"
    },
    {
      "function": "self._reload_tester",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line": 65,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def _reload_tester(self, touch_soon, reloader: BaseReload, *files: Path) -> list[Path] | None:\n        reloader.restart()\n        if WatchFilesReload is not None and isinstance(reloader, WatchFilesReload):\n            touch_soon(*files)\n        else:\n            assert not next(reloader)\n            sleep(0.1)\n            for file in files:\n                file.touch()\n        return next(reloader)\n\n"
    },
    {
      "function": "app_first_dir.mkdir",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/_pytest/cacheprovider.py",
      "line": 129,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def mkdir(self, name: str) -> Path:\n        \"\"\"Return a directory path object with the given name.\n\n        If the directory does not yet exist, it will be created. You can use\n        it to manage files to e.g. store/retrieve database dumps across test\n        sessions.\n\n        .. versionadded:: 7.0\n\n        :param name:\n            Must be a string not containing a ``/`` separator.\n            Make sure the name contains your plugin or application\n            identifiers to prevent clashes with other cache users.\n        \"\"\"\n        path = Path(name)\n        if len(path.parts) > 1:\n            raise ValueError(\"name is not allowed to contain path separators\")\n        res = self._cachedir.joinpath(self._CACHE_PREFIX_DIRS, path)\n        self._mkdir(res)\n        return res\n\n"
    },
    {
      "function": "self._reload_tester",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/tests/supervisors/test_reload.py",
      "line": 65,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def _reload_tester(self, touch_soon, reloader: BaseReload, *files: Path) -> list[Path] | None:\n        reloader.restart()\n        if WatchFilesReload is not None and isinstance(reloader, WatchFilesReload):\n            touch_soon(*files)\n        else:\n            assert not next(reloader)\n            sleep(0.1)\n            for file in files:\n                file.touch()\n        return next(reloader)\n\n"
    },
    {
      "function": "reloader.shutdown",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
      "line": 655,
      "caller": "test_should_detect_new_reload_dirs",
      "source_code": "    def shutdown(self):\n        with self._raise_on_error():\n            Security.SSLClose(self.context)\n\n"
    }
  ],
  "assertions": [
    "assert self._reload_tester(touch_soon, reloader, app_file)",
    "assert self._reload_tester(touch_soon, reloader, app_first_file)",
    "assert caplog.records[-2].levelno == logging.INFO",
    "assert caplog.records[-1].message == f\"WatchGodReload detected a new reload dir '{app_first_dir.name}' in '{tmp_path}'; Adding to watch list.\""
  ],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_should_detect_new_reload_dirs(self, touch_soon, caplog: pytest.LogCaptureFixture, tmp_path: Path) -> None:\n        app_dir = tmp_path / \"app\"\n        app_file = app_dir / \"file.py\"\n        app_dir.mkdir()\n        app_file.touch()\n        app_first_dir = tmp_path / \"app_first\"\n        app_first_file = app_first_dir / \"file.py\"\n\n        with as_cwd(tmp_path):\n            config = Config(app=\"tests.test_config:asgi_app\", reload=True, reload_includes=[\"app*\"])\n            reloader = self._setup_reloader(config)\n            assert self._reload_tester(touch_soon, reloader, app_file)\n\n            app_first_dir.mkdir()\n            assert self._reload_tester(touch_soon, reloader, app_first_file)\n            assert caplog.records[-2].levelno == logging.INFO\n            assert (\n                caplog.records[-1].message == \"WatchGodReload detected a new reload \"\n                f\"dir '{app_first_dir.name}' in '{tmp_path}'; Adding to watch list.\"\n            )\n\n            reloader.shutdown()"
}