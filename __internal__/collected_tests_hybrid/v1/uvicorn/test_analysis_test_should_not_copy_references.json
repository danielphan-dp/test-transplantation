{
  "test_name": "test_should_not_copy_references",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/mergedeep/test_mergedeep.py",
  "static_methods": [
    {
      "name": "merge",
      "source_code": "    def merge(self, params: QueryParamTypes | None = None) -> QueryParams:\n        \"\"\"\n        Return a new QueryParams instance, updated with.",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/httpx/_urls.py",
      "line_number": 582
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "deepcopy",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line_number": 96
    },
    {
      "name": "deepcopy",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line_number": 96
    }
  ],
  "dynamic_methods": [
    {
      "function": "merge",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/httpx/_urls.py",
      "line": 582,
      "caller": "test_should_not_copy_references",
      "source_code": "    def merge(self, params: QueryParamTypes | None = None) -> QueryParams:\n        \"\"\"\n        Return a new QueryParams instance, updated with.\n\n        Usage:\n\n        q = httpx.QueryParams(\"a=123\")\n        q = q.merge({\"b\": \"456\"})\n        assert q == httpx.QueryParams(\"a=123&b=456\")\n\n        q = httpx.QueryParams(\"a=123\")\n        q = q.merge({\"a\": \"456\", \"b\": \"789\"})\n        assert q == httpx.QueryParams(\"a=456&b=789\")\n        \"\"\"\n        q = QueryParams(params)\n        q._dict = {**self._dict, **q._dict}\n        return q\n\n"
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_should_not_copy_references",
      "source_code": ""
    },
    {
      "function": "deepcopy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line": 96,
      "caller": "test_should_not_copy_references",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError\n\n"
    },
    {
      "function": "deepcopy",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/docutils/nodes.py",
      "line": 96,
      "caller": "test_should_not_copy_references",
      "source_code": "    def deepcopy(self):\n        \"\"\"Return a deep copy of self (also copying children).\"\"\"\n        raise NotImplementedError\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_should_not_copy_references(self):\n        before = 1\n        after = 99\n\n        o1 = {\"key1\": before}\n        o2 = {\"key2\": before}\n\n        expected = {\"list\": deepcopy([o1, o2]), \"tuple\": deepcopy((o1, o2))}\n\n        a = {\"list\": [o1], \"tuple\": (o1,)}\n        b = {\"list\": [o2], \"tuple\": (o2,)}\n\n        actual = merge({}, a, b, strategy=Strategy.ADDITIVE)\n\n        o1[\"key1\"] = after\n        o2[\"key2\"] = after\n\n        self.assertEqual(actual, expected)\n\n        # Copied dicts should `not` mutate\n        self.assertEqual(actual[\"list\"][0][\"key1\"], before)\n        self.assertEqual(actual[\"list\"][1][\"key2\"], before)\n        self.assertEqual(actual[\"tuple\"][0][\"key1\"], before)\n        self.assertEqual(actual[\"tuple\"][1][\"key2\"], before)\n\n        # Non-copied dicts should mutate\n        self.assertEqual(a[\"list\"][0][\"key1\"], after)\n        self.assertEqual(b[\"list\"][0][\"key2\"], after)\n        self.assertEqual(a[\"tuple\"][0][\"key1\"], after)\n        self.assertEqual(b[\"tuple\"][0][\"key2\"], after)"
}