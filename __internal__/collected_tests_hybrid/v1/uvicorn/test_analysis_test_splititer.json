{
  "test_name": "test_splititer",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.splititer",
      "source_code": "def splititer(pattern, string, maxsplit=0, flags=0, concurrent=None,",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line_number": 325
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_splititer",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_splititer",
      "source_code": ""
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_splititer",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.splititer",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/regex.py",
      "line": 325,
      "caller": "test_splititer",
      "source_code": "def splititer(pattern, string, maxsplit=0, flags=0, concurrent=None,\n  timeout=None, ignore_unused=False, **kwargs):\n    \"Return an iterator yielding the parts of a split string.\"\n    pat = _compile(pattern, flags, ignore_unused, kwargs, True)\n    return pat.splititer(string, maxsplit, concurrent, timeout)\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_splititer(self):\n        self.assertEqual(regex.split(r\",\", \"a,b,,c,\"), ['a', 'b', '', 'c', ''])\n        self.assertEqual([m for m in regex.splititer(r\",\", \"a,b,,c,\")], ['a',\n          'b', '', 'c', ''])"
}