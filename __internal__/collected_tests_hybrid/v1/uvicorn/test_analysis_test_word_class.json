{
  "test_name": "test_word_class",
  "test_file": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/regex/test_regex.py",
  "static_methods": [
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "self.assertEqual",
      "source_code": "",
      "file_path": "",
      "line_number": 0
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.findall",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line_number": 57
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    },
    {
      "name": "regex.split",
      "source_code": "    def split(cls, s):\n        return list(cls(s))",
      "file_path": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line_number": 200
    }
  ],
  "dynamic_methods": [
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_class",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_class",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_class",
      "source_code": ""
    },
    {
      "function": "self.assertEqual",
      "filename": "",
      "line": 0,
      "caller": "test_word_class",
      "source_code": ""
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_word_class",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.findall",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/pip/_vendor/distlib/manifest.py",
      "line": 57,
      "caller": "test_word_class",
      "source_code": "    def findall(self):\n        \"\"\"Find all files under the base and set ``allfiles`` to the absolute\n        pathnames of files found.\n        \"\"\"\n        from stat import S_ISREG, S_ISDIR, S_ISLNK\n\n        self.allfiles = allfiles = []\n        root = self.base\n        stack = [root]\n        pop = stack.pop\n        push = stack.append\n\n        while stack:\n            root = pop()\n            names = os.listdir(root)\n\n            for name in names:\n                fullname = os.path.join(root, name)\n\n                # Avoid excess stat calls -- just one will do, thank you!\n                stat = os.stat(fullname)\n                mode = stat.st_mode\n                if S_ISREG(mode):\n                    allfiles.append(fsdecode(fullname))\n                elif S_ISDIR(mode) and not S_ISLNK(mode):\n                    push(fullname)\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_class",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    },
    {
      "function": "regex.split",
      "filename": "/home/quark-ubuntu-wsl/test_transplantation_cs846_f24/test-transplantation/__internal__/_data/uvicorn/venv/lib/python3.9/site-packages/dateutil/parser/_parser.py",
      "line": 200,
      "caller": "test_word_class",
      "source_code": "    @classmethod\n    def split(cls, s):\n        return list(cls(s))\n\n"
    }
  ],
  "assertions": [],
  "mocks": [],
  "success": false,
  "test_source_code": "def test_word_class(self):\n        self.assertEqual(regex.findall(r\"\\w+\",\n          \" \\u0939\\u093f\\u0928\\u094d\\u0926\\u0940,\"),\n          ['\\u0939\\u093f\\u0928\\u094d\\u0926\\u0940'])\n        self.assertEqual(regex.findall(r\"\\W+\",\n          \" \\u0939\\u093f\\u0928\\u094d\\u0926\\u0940,\"), [' ', ','])\n        self.assertEqual(regex.split(r\"(?V1)\\b\",\n          \" \\u0939\\u093f\\u0928\\u094d\\u0926\\u0940,\"), [' ',\n          '\\u0939\\u093f\\u0928\\u094d\\u0926\\u0940', ','])\n        self.assertEqual(regex.split(r\"(?V1)\\B\",\n          \" \\u0939\\u093f\\u0928\\u094d\\u0926\\u0940,\"), ['', ' \\u0939',\n          '\\u093f', '\\u0928', '\\u094d', '\\u0926', '\\u0940,', ''])"
}