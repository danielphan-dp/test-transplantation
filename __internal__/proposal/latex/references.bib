@misc{souza2023_softwareproductlineengineering,
    title={Software Product Line Engineering via Software Transplantation}, 
    author={Leandro O. Souza and Earl T. Barr and Justyna Petke and Eduardo S. Almeida and Paulo Anselmo M. S. Neto},
    year={2023},
    eprint={2307.10896},
    archivePrefix={arXiv},
    primaryClass={cs.SE},
    url={https://arxiv.org/abs/2307.10896}, 
}

@misc{fan2023_largelanguagemodelssoftware,
      title={Large Language Models for Software Engineering: Survey and Open Problems}, 
      author={Angela Fan and Beliz Gokkaya and Mark Harman and Mitya Lyubarskiy and Shubho Sengupta and Shin Yoo and Jie M. Zhang},
      year={2023},
      eprint={2310.03533},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2310.03533}, 
}

@inproceedings{alshahwan2023_softwaretestingchallenges,
  author={Alshahwan, Nadia and Harman, Mark and Marginean, Alexandru},
  booktitle={2023 IEEE Conference on Software Testing, Verification and Validation (ICST)}, 
  title={Software Testing Research Challenges: An Industrial Perspective},
  publisher = {Association for Computing Machinery},
  year={2023},
  volume={},
  number={},
  pages={1-10},
  keywords={Software testing;Maintenance engineering;Software;Artificial intelligence;Research and development;Automated Software Engineering;Software Testing;Automated Program Repair;Artificial Intelligence;Genetic Improvement;Automated Remediation},
  doi={10.1109/ICST57152.2023.00008}
}

@inproceedings{barr2015_automatedsoftwaretransplantation,
  author = {Barr, Earl T. and Harman, Mark and Jia, Yue and Marginean, Alexandru and Petke, Justyna},
  title = {Automated software transplantation},
  year = {2015},
  isbn = {9781450336208},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/2771783.2771796},
  doi = {10.1145/2771783.2771796},
  abstract = {Automated transplantation would open many exciting avenues for software development: suppose we could autotransplant code from one system into another, entirely unrelated, system. This paper introduces a theory, an algorithm, and a tool that achieve this. Leveraging lightweight annotation, program analysis identifies an organ (interesting behavior to transplant); testing validates that the organ exhibits the desired behavior during its extraction and after its implantation into a host. While we do not claim automated transplantation is now a solved problem, our results are encouraging: we report that in 12 of 15 experiments, involving 5 donors and 3 hosts (all popular real-world systems), we successfully autotransplanted new functionality and passed all regression tests. Autotransplantation is also already useful: in 26 hours computation time we successfully autotransplanted the H.264 video encoding functionality from the x264 system to the VLC media player; compare this to upgrading x264 within VLC, a task that we estimate, from VLC's version history, took human programmers an average of 20 days of elapsed, as opposed to dedicated, time.},
  booktitle = {Proceedings of the 2015 International Symposium on Software Testing and Analysis},
  pages = {257–269},
  numpages = {13},
  keywords = {Automated software transplantation, autotransplantation, genetic improvement},
  location = {Baltimore, MD, USA},
  series = {ISSTA 2015}
}

@INPROCEEDINGS{zhang2017_automatedtransplantation_and_differentialtesting,
  author={Zhang, Tianyi and Kim, Miryung},
  booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering (ICSE)}, 
  title={Automated Transplantation and Differential Testing for Clones}, 
  year={2017},
  volume={},
  number={},
  pages={665-676},
  keywords={Cloning;Computer bugs;Testing;Runtime;Software;Safety;Java;Test Reuse;Code Transplantation;Differential Testing;Code Clones},
  doi={10.1109/ICSE.2017.67}
}

@InProceedings{sodhi2024_extractingrelevantfeatures_for_softwaretransplantation,
  author="Sodhi, Gurjot Singh
  and Rattan, Dhavleesh",
  editor="Shukla, Balvinder
  and Murthy, B. K.
  and Hasteer, Nitasha
  and Kaur, Harpreet
  and Van  Belle, Jean-Paul",
  title="Extracting Relevant Features for Software Transplantation",
  booktitle="Intelligent IT Solutions for Sustainability in Industry 5.0 Paradigm",
  year="2024",
  publisher="Springer Nature Singapore",
  address="Singapore",
  pages="151--162",
  abstract="The creation of intelligent software depends on the ability to transfer software without any restrictions. In this article, a crucial stage in software engineering, the feature extraction technique for effective software transplantation, is discussed. As hardware, operating systems, or other factors change, it is commonly necessary to move software from one environment to another. This process is known as ``software transplanting.'' It is vital to identify and extract the relevant software characteristics, which might be challenging given how complex software is, in order to carry out efficient software transplanting. On the other hand, the procedure to extract these attributes from the software might be time-consuming and need extensive understanding. We provide a feature extraction method that makes use of machine learning methods to extract beneficial components from software in order to tackle this problem. Our approach includes identifying essential software components, including variables, functions, and other elements. We next use these components to train our machine learning model to separate significant properties. We use a dataset of software applications to compare the results of our strategy to those obtained using manual feature extraction methods. Our results demonstrate that our technique effectively extracts crucial traits and can significantly reduce the time and effort required for successful software transplanting. Thus, by making software transplantation more effective and successful, the recommended feature extraction approach greatly advances the field of software engineering.",
  isbn="978-981-97-1682-1"
}

@article{shariffdeen2021_automatedpatchtransplantation,
  author = {Shariffdeen, Ridwan Salihin and Tan, Shin Hwei and Gao, Mingyuan and Roychoudhury, Abhik},
  title = {Automated Patch Transplantation},
  year = {2021},
  issue_date = {January 2021},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {30},
  number = {1},
  issn = {1049-331X},
  url = {https://doi.org/10.1145/3412376},
  doi = {10.1145/3412376},
  abstract = {Automated program repair is an emerging area that attempts to patch software errors and vulnerabilities. In this article, we formulate and study a problem related to automated repair, namely automated patch transplantation. A patch for an error in a donor program is automatically adapted and inserted into a “similar” target program. We observe that despite standard procedures for vulnerability disclosures and publishing of patches, many un-patched occurrences remain in the wild. One of the main reasons is the fact that various implementations of the same functionality may exist and, hence, published patches need to be modified and adapted. In this article, we therefore propose and implement a workflow for transplanting patches. Our approach centers on identifying patch insertion points, as well as namespaces translation across programs via symbolic execution. Experimental results to eliminate five classes of errors highlight our ability to fix recurring vulnerabilities across various programs through transplantation. We report that in 20 of 24 fixing tasks involving eight application subjects mostly involving file processing programs, we successfully transplanted the patch and validated the transplantation through differential testing. Since the publication of patches make an un-patched implementation more vulnerable, our proposed techniques should serve a long-standing need in practice.},
  journal = {ACM Trans. Softw. Eng. Methodol.},
  month = dec,
  articleno = {6},
  numpages = {36},
  keywords = {Program repair, code transplantation, dynamic program analysis, patch transplantation}
}

@article{sodhi2021_an_insight_on_software_features_supporting_transplantation__a_systematic_review,
  title={An Insight on Software Features Supporting Software Transplantation: A Systematic Review},
  author={Gurjot Singh Sodhi and Dhavleesh Rattan},
  journal={Archives of Computational Methods in Engineering},
  year={2021},
  volume={29},
  pages={275 - 312},
  url={https://api.semanticscholar.org/CorpusID:236234573}
}

