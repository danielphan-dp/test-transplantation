# This test file was generated by adapting tests from tests/test_basic.py
# to test the functionality in src/flask/app.py through test transplantation.

import pytest
from flask import Flask, jsonify, request, Response, url_for
from werkzeug.exceptions import HTTPException

@pytest.fixture
def app() -> Flask:
    app = Flask(__name__)

    @app.route("/")
    def index() -> str:
        return "index"

    @app.route("/json/", methods=["POST"])
    def json() -> Response:
        data = request.get_json()
        return jsonify(data)

    @app.route("/error/")
    def error() -> str:
        raise HTTPException(description="Something Unique", response=Response(status=409))

    @app.route("/param/<value>")
    def param(value: str) -> str:
        return value

    @app.errorhandler(HTTPException)
    def handle_http_exception(e: HTTPException) -> Response:
        return Response(e.description, status=e.code)

    return app

@pytest.mark.parametrize("path", ["/"])
def test_index(path: str, app: Flask) -> None:
    test_client = app.test_client()
    response = test_client.get(path)
    assert response.status_code == 200
    assert b"index" in response.data

def test_json(app: Flask) -> None:
    test_client = app.test_client()
    response = test_client.post("/json/", json={"value": "json"})
    assert response.status_code == 200
    assert b'{"value":"json"}\n' == response.data

def test_generic_error(app: Flask) -> None:
    test_client = app.test_client()
    response = test_client.get("/error/")
    assert response.status_code == 409
    assert b"Something Unique" in response.data

def test_url_defaults(app: Flask) -> None:
    @app.url_defaults
    def defaults(endpoint: str, values: dict) -> None:
        if endpoint == 'param':
            values.setdefault('value', 'hello')

    with app.test_request_context("/"):
        assert url_for("param") == "/param/hello"

def test_not_found_error(app: Flask) -> None:
    test_client = app.test_client()
    response = test_client.get("/not_found/")
    assert response.status_code == 404
    assert b"Not Found" in response.data

def test_make_response_str(app: Flask) -> None:
    response = app.make_response("Result")
    assert response.status_code == 200
    assert response.data == b"Result"

    response = app.make_response(("Result", 200))
    assert response.status_code == 200
    assert response.data == b"Result"

    response = app.make_response(("Result", {"name": "value"}))
    assert response.status_code == 200
    assert response.data == b"Result"
    assert response.headers["name"] == "value"

    response = app.make_response(("Result", 404, {"name": "value"}))
    assert response.status_code == 404
    assert response.data == b"Result"
    assert response.headers["name"] == "value"

def test_make_response_errors(app: Flask) -> None:
    with pytest.raises(TypeError):
        app.make_response(("Result", {"name": "value"}, 200))
    with pytest.raises(TypeError):
        app.make_response(("Result", {"name": "value"}, 200, "a"))
    with pytest.raises(TypeError):
        app.make_response(("Result",))