# This test file was generated by adapting tests from tests/test_basic.py
# to test the functionality in src/quart/app.py through test transplantation.

import pytest
from quart import Quart, jsonify, request, session, g, url_for
from quart.wrappers import Response
from werkzeug.exceptions import BadRequest, Forbidden, NotFound
from werkzeug.routing import BuildError

@pytest.fixture
def app():
    app = Quart(__name__)
    app.secret_key = 'test_key'
    return app

@pytest.fixture
def client(app):
    return app.test_client()

def test_options_work(app, client):
    @app.route("/", methods=["GET", "POST"])
    async def index():
        return "Hello World"

    rv = client.options("/")
    assert sorted(rv.headers["Allow"].split(", ")) == ["GET", "HEAD", "OPTIONS", "POST"]
    assert rv.data == b""

def test_method_route(app, client):
    @app.get("/")
    async def hello():
        return "Hello"

    response = client.get("/")
    assert response.data == b"Hello"

def test_provide_automatic_options_attr(app):
    async def index():
        return "Hello World!"

    index.provide_automatic_options = False
    app.route("/")(index)
    rv = client.options("/")
    assert rv.status_code == 405

def test_request_dispatching(app, client):
    @app.route("/")
    async def index():
        return request.method

    @app.route("/more", methods=["GET", "POST"])
    async def more():
        return request.method

    response = client.get("/")
    assert response.data == b"GET"
    rv = client.post("/")
    assert rv.status_code == 405
    assert sorted(rv.headers["Allow"].split(", ")) == ["GET", "HEAD", "OPTIONS"]
    rv = client.head("/")
    assert rv.status_code == 200
    assert not rv.data  # head truncates
    assert client.post("/more").data == b"POST"
    assert client.get("/more").data == b"GET"
    rv = client.delete("/more")
    assert rv.status_code == 405
    assert sorted(rv.headers["Allow"].split(", ")) == ["GET", "HEAD", "OPTIONS", "POST"]

def test_session(app, client):
    @app.route("/set", methods=["POST"])
    async def set_value():
        session["value"] = (await request.form)["value"]
        return "value set"

    @app.route("/get")
    async def get_value():
        return session.get("value", "None")

    assert client.post("/set", data={"value": "42"}).data == b"value set"
    assert client.get("/get").data == b"42"

def test_flashes(app, client):
    @app.route("/flash")
    async def flash_message():
        session.modified = False
        session["message"] = "Hello"
        return ""

    @app.route("/get_flash")
    async def get_flash():
        return session.get("message", "")

    client.get("/flash")
    assert client.get("/get_flash").data == b"Hello"

def test_error_handling(app, client):
    @app.errorhandler(404)
    async def not_found(e):
        return "not found", 404

    @app.errorhandler(500)
    async def internal_server_error(e):
        return "internal server error", 500

    @app.errorhandler(Forbidden)
    async def forbidden(e):
        return "forbidden", 403

    @app.route("/")
    async def index():
        raise NotFound()

    @app.route("/error")
    async def error():
        raise ZeroDivisionError

    @app.route("/forbidden")
    async def error2():
        raise Forbidden()

    rv = client.get("/")
    assert rv.status_code == 404
    assert rv.data == b"not found"
    rv = client.get("/error")
    assert rv.status_code == 500
    assert b"internal server error" == rv.data
    rv = client.get("/forbidden")
    assert rv.status_code == 403
    assert b"forbidden" == rv.data

def test_url_generation(app):
    @app.route("/hello/<name>", methods=["POST"])
    async def hello(name):
        return f"Hello {name}"

    with app.test_request_context():
        assert url_for("hello", name="test x") == "/hello/test%20x"
        assert url_for("hello", name="test x", _external=True) == "http://localhost/hello/test%20x"

def test_static_files(app, client):
    app.static_folder = "static"
    rv = client.get("/static/index.html")
    assert rv.status_code == 200
    assert rv.data.strip() == b"<h1>Hello World!</h1>"
    with app.test_request_context():
        assert url_for("static", filename="index.html") == "/static/index.html"
    rv.close()