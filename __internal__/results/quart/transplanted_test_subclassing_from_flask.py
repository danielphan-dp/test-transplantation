# This test file was generated by transplanting tests from tests/test_subclassing.py
# to test the functionality in src/quart/app.py

from io import StringIO
import asyncio
import pytest
from quart import Quart

# Define a subclass of Quart to suppress exception logging
class SuppressedQuart(Quart):
    def log_exception(self, exc_info):
        pass

@pytest.fixture
def app():
    # Create an instance of the SuppressedQuart app
    app = SuppressedQuart(__name__)

    # Define a route that raises an exception
    @app.route("/")
    async def index():
        raise Exception("test")

    return app

@pytest.mark.asyncio
async def test_suppressed_exception_logging(app):
    # Create a StringIO object to capture output
    out = StringIO()

    # Use the test client to make a request to the route that raises an exception
    async with app.test_client() as client:
        response = await client.get("/", errors_stream=out)

    # Assert that the status code is 500, indicating an internal server error
    assert response.status_code == 500

    # Assert that the response data contains "Internal Server Error"
    assert b"Internal Server Error" in (await response.get_data())

    # Assert that no exception details were logged to the output
    assert not out.getvalue()