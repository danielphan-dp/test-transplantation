# This test file was generated by adapting tests from tests/test_tasks.py in the donor code
# to test the functionality in src/quart/app.py in the host code through test transplantation.

import asyncio
from asyncio.tasks import Task
from unittest.mock import Mock, call

import pytest

from quart.app import Quart
from quart.testing import TestClientProtocol

try:
    from unittest.mock import AsyncMock
except ImportError:
    from tests.asyncmock import AsyncMock  # type: ignore

pytestmark = pytest.mark.asyncio

# Dummy async function to simulate background tasks
async def dummy(n=0):
    for _ in range(n):
        await asyncio.sleep(1)
    return True

# Fixture to create a Quart app instance for testing
@pytest.fixture
def app():
    app = Quart(__name__)
    return app

# Test to ensure that adding a task returns a Task instance
async def test_add_task_returns_task(app: Quart):
    task = app.add_background_task(dummy)

    assert isinstance(task, Task)
    assert len(app.background_tasks) == 1

# Test to ensure that adding a named task registers it correctly
async def test_add_task_with_name(app: Quart):
    task = app.add_background_task(dummy, name="dummy")

    assert isinstance(task, Task)
    assert len(app.background_tasks) == 1
    assert task in app.background_tasks

# Test to ensure that a task can be cancelled
async def test_cancel_task(app: Quart):
    task = app.add_background_task(dummy, name="dummy")

    assert task
    assert not task.done()
    assert not task.cancelled()

    await asyncio.sleep(0.1)

    assert not task.done()
    assert not task.cancelled()

    task.cancel()

    assert task.cancelled()

# Test to ensure that completed tasks are purged from the registry
async def test_purge_tasks(app: Quart):
    task = app.add_background_task(dummy, name="dummy")

    task.cancel()

    assert len(app.background_tasks) == 1

    app.background_tasks.discard(task)

    assert len(app.background_tasks) == 0

# Test to ensure that tasks are shut down properly when the app stops
def test_shutdown_tasks_on_app_stop():
    class TestQuart(Quart):
        shutdown_tasks = Mock()

    app = TestQuart(__name__)

    @app.route("/")
    async def handler():
        return "Hello, World!"

    client: TestClientProtocol = app.test_client()
    client.get("/")

    app.shutdown_tasks.call_args == [
        call(timeout=0),
        call(15.0),
    ]