{
  "meta": {
    "description": "Sanic Test-Code File-Level Alignment",
    "num_test_files": 92,
    "num_code_files": 0
  },
  "aligned_tc": [
    {
      "test": "tests/benchmark/test_route_resolution_benchmark.py",
      "code": "sanic/router.py",
      "comments": [
        "integration test(s)",
        "integration of route resolution"
      ]
    },
    {
      "test": "tests/http3/test_server.py",
      "code": "sanic/http3/server.py",
      "comments": [
        "integration test(s)",
        "from sanic import Sanic",
        "from sanic.http.constants import HTTP"
      ]
    },
    {
      "test": "tests/test_app.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_asgi.py",
      "code": "sanic/asgi.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_bad_request.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "test app.run(...) on bad request"
      ]
    },
    {
      "test": "tests/test_base.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "basic funcionality of the app"
      ]
    },
    {
      "test": "tests/test_blueprint_copy.py",
      "code": "sanic/blueprints.py",
      "comments": [
        "unit test(s)",
        "test Blueprint.copy() method",
        "check route handling and context copying"
      ]
    },
    {
      "test": "tests/test_blueprint_group.py",
      "code": "sanic/blueprint_group.py",
      "comments": [
        "unit test(s)",
        "test BlueprintGroup functionalities",
        "check blueprint group operations and middleware handling"
      ]
    },
    {
      "test": "tests/test_blueprints.py",
      "code": "sanic/blueprints.py",
      "comments": [
        "unit test(s)",
        "test Blueprint functionalities"
      ]
    },
    {
      "test": "tests/test_cancellederror.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "test error handling for cancelled requests"
      ]
    },
    {
      "test": "tests/test_cli.py",
      "code": "sanic/cli/inspector_client.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_coffee.py",
      "code": "sanic/application/logo.py",
      "comments": [
        "unit test(s)",
        "basic tests for logo generation"
      ]
    },
    {
      "test": "tests/test_config.py",
      "code": "sanic/config.py",
      "comments": [
        "unit test(s)",
        "test various config handling scenarios"
      ]
    },
    {
      "test": "tests/test_constants.py",
      "code": "sanic/application/constants.py",
      "comments": [
        "unit test(s)",
        "test constants and their compatibility with string representation"
      ]
    },
    {
      "test": "tests/test_cookies.py",
      "code": "sanic/cookies/__init__.py",
      "comments": [
        "unit test(s)",
        "basic cookies handling"
      ]
    },
    {
      "test": "tests/test_create_task.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "test task creation and handling in Sanic"
      ]
    },
    {
      "test": "tests/test_custom_request.py",
      "code": "sanic/request/__init__.py",
      "comments": [
        "unit test(s)",
        "various scenarios inside the folder"
      ]
    },
    {
      "test": "tests/test_deprecation.py",
      "code": "sanic/logging/deprecation.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_dynamic_routes.py",
      "code": "sanic/response/__init__.py",
      "comments": [
        "unit test(s)",
        "various scenarios inside the folder"
      ]
    },
    {
      "test": "tests/test_errorpages.py",
      "code": "sanic/errorpages.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_exceptions.py",
      "code": "sanic/exceptions.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_exceptions_handler.py",
      "code": "sanic/exceptions.py",
      "comments": [
        "unit test(s)",
        "test exception handling in Sanic"
      ]
    },
    {
      "test": "tests/test_ext_integration.py",
      "code": "sanic/app.py",
      "comments": [
        "integration test(s)",
        "testing the app with ext modules"
      ]
    },
    {
      "test": "tests/test_graceful_shutdown.py",
      "code": "sanic/app.py",
      "comments": [
        "integration test(s)",
        "test app graceful shutdown process"
      ]
    },
    {
      "test": "tests/test_handler.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "various scenarios inside the folder"
      ]
    },
    {
      "test": "tests/test_handler_annotations.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "test app decorators and annotations"
      ]
    },
    {
      "test": "tests/test_headers.py",
      "code": "sanic/headers.py",
      "comments": [
        "unit test(s)",
        "test headers handling and parsing"
      ]
    },
    {
      "test": "tests/test_helpers.py",
      "code": "sanic/helpers.py",
      "comments": [
        "unit test(s)",
        "test basic helper functions and utilities"
      ]
    },
    {
      "test": "tests/test_http.py",
      "code": "sanic/app.py",
      "comments": [
        "integration test(s)",
        "test app integration with HTTP"
      ]
    },
    {
      "test": "tests/test_http_alt_svc.py",
      "code": [
        "sanic/app.py",
        "sanic/response/__init__.py",
        "tests/client.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_init.py",
      "code": "sanic/__init__.py",
      "comments": [
        "unit test(s)",
        "test imports of various sanic components"
      ]
    },
    {
      "test": "tests/test_json_decoding.py",
      "code": "sanic/request/__init__.py",
      "comments": [
        "unit test(s)",
        "entire folder can be considered as code under test",
        "test JSON decoding and parsing"
      ]
    },
    {
      "test": "tests/test_json_encoding.py",
      "code": "sanic/response/__init__.py",
      "comments": [
        "unit test(s)",
        "test JSON decoding and parsing"
      ]
    },
    {
      "test": "tests/test_keep_alive_timeout.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "test keep-alive timeout handling"
      ]
    },
    {
      "test": "tests/test_late_adds.py",
      "code": "sanic/app.py",
      "comments": [
        "unit test(s)",
        "test routes add to the app"
      ]
    },
    {
      "test": "tests/test_logging.py",
      "code": [
        "sanic/log.py",
        "sanic/logging/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "edge case",
        "consider the entire sanic/logging",
        "test logging functionalities"
      ]
    },
    {
      "test": "tests/test_logo.py",
      "code": "sanic/application/logo.py",
      "comments": [
        "unit test(s)",
        "test app logo"
      ]
    },
    {
      "test": "tests/test_middleware.py",
      "code": "sanic/middleware.py",
      "comments": [
        "unit test(s)",
        "test basic middleware functionalities"
      ]
    },
    {
      "test": "tests/test_middleware_priority.py",
      "code": "sanic/middleware.py",
      "comments": [
        "unit test(s)",
        "test middleware registration and priority handling"
      ]
    },
    {
      "test": "tests/test_motd.py",
      "code": "sanic/application/motd.py",
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_multiprocessing.py",
      "code": "sanic/multiprocessing.py",
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "test multiprocessing features"
      ]
    },
    {
      "test": "tests/test_named_routes.py",
      "code": "sanic/router.py",
      "comments": [
        "unit test(s)",
        "test named routes functionalities"
      ]
    },
    {
      "test": "tests/test_naming.py",
      "code": [
        "sanic/app.py",
        "sanic/blueprints.py"
      ],
      "comments": [
        "unit test(s)",
        "test app and blueprint naming"
      ]
    },
    {
      "test": "tests/test_payload_too_large.py",
      "code": [
        "sanic/exceptions.py",
        "sanic/request/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "test payload size handling"
      ]
    },
    {
      "test": "tests/test_pipelining.py",
      "code": "sanic/response/__init__.py",
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "consider entire response folder",
        "edge case"
      ]
    },
    {
      "test": "tests/test_prepare.py",
      "code": [
        "sanic/app.py",
        "sanic/application/state.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "test app preparation and state management"
      ]
    },
    {
      "test": "tests/test_redirect.py",
      "code": "sanic/response/__init__.py",
      "comments": [
        "unit test(s)",
        "test redirections and response handling",
        "consider entire response folder"
      ]
    },
    {
      "test": "tests/test_request.py",
      "code": "TODO",
      "comments": [
        "TODO"
      ]
    },
    {
      "test": "tests/test_request_cancel.py",
      "code": [
        "sanic/request/__init__.py",
        "sanic/server.py/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "various functionalities inside the folder",
        "test request cancellation and handling",
        "edge case"
      ]
    },
    {
      "test": "tests/test_request_data.py",
      "code": [
        "sanic/request/__init__.py",
        "sanic/app.py",
        "sanic/middleware.py"
      ],
      "comments": [
        "integration test(s)",
        "integration across various components of the apps"
      ]
    },
    {
      "test": "tests/test_request_stream.py",
      "code": [
        "sanic/request/__init__.py",
        "sanic/response/__init__.py",
        "sanic/app.py",
        "sanic/views.py",
        "sanic/blueprints.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_requests.py",
      "code": [
        "sanic/request/__init__.py",
        "sanic/response/__init__.py",
        "sanic/app.py",
        "sanic/constants.py",
        "sanic/blueprints.py",
        "sanic/exceptions.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_response.py",
      "code": [
        "sanic/response/__init__.py",
        "sanic/app.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_response_file.py",
      "code": [
        "sanic/response/convenience.py"
      ],
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_response_json.py",
      "code": [
        "sanic/response/__init__.py",
        "sanic/exceptions.py",
        "sanic/app.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_response_timeout.py",
      "code": [
        "sanic/app.py",
        "sanic/response/__init__.py",
        "sanic/exceptions.py",
        "sanic/log.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_routes.py",
      "code": [
        "sanic/app.py",
        "sanic/blueprints.py",
        "sanic/routing.py",
        "sanic/request/__init__.py",
        "sanic/response/__init__.py",
        "sanic/exceptions.py",
        "sanic/constants.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_server_events.py",
      "code": [
        "sanic/app.py",
        "sanic/blueprints.py",
        "sanic/server.py",
        "sanic/exceptions.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_server_loop.py",
      "code": [
        "sanic/server/loop.py",
        "sanic/compat.py"
      ],
      "comments": [
        "unit test(s)",
        "main file is sanic/server/loop.py"
      ]
    },
    {
      "test": "tests/test_signal_handlers.py",
      "code": [
        "sanic/app.py",
        "sanic/server.py",
        "sanic/blueprints.py",
        "sanic/exceptions.py",
        "sanic/response/__init__.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_signals.py",
      "code": [
        "sanic/signals.py",
        "sanic/app.py",
        "sanic/blueprints.py",
        "sanic/exceptions.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "test signal handling and integration with the app",
        "main file is sanic/signals.py"
      ]
    },
    {
      "test": "tests/test_static.py",
      "code": [
        "sanic/app.py",
        "sanic/request/__init__.py",
        "sanic/response/__init__.py",
        "sanic/exceptions.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_static_directory.py",
      "code": [
        "sanic/app.py",
        "sanic/request/__init__.py",
        "sanic/response/__init__.py",
        "sanic/handlers/directory.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_tasks.py",
      "code": [
        "sanic/app.py",
        "sanic/application/state.py"
      ],
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/test_test_client_port.py",
      "code": [
        "sanic/app.py",
        "sanic/response/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "edge case, hard to tell, consider all files"
      ]
    },
    {
      "test": "tests/test_timeout_logic.py",
      "code": [
        "sanic/server/protocols/http_protocol.py"
      ],
      "comments": [
        "unit test(s)",
        "class under test sanic.server.HTTPProtocol"
      ]
    },
    {
      "test": "tests/test_tls.py",
      "code": [
        "sanic/http/tls/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "consider the whole folder"
      ]
    },
    {
      "test": "tests/test_touchup.py",
      "code": [
        "sanic/touchup/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "focal class sanic.touchup.Touchup"
      ]
    },
    {
      "test": "tests/test_unix_socket.py",
      "code": [
        "sanic/__init__.py",
        "sanic/app.py"
      ],
      "comments": [
        "unit test(s)",
        "testing bevavior of app when working it unix socket"
      ]
    },
    {
      "test": "tests/test_url_building.py",
      "code": [
        "sanic/__init__.py",
        "sanic/app.py",
        "sanic/blueprints.py",
        "sanic/views.py"
      ],
      "comments": [
        "unit test(s)",
        "focal class sanic.Sanic"
      ]
    },
    {
      "test": "tests/test_url_for.py",
      "code": [
        "sanic/__init__.py",
        "sanic/app.py",
        "sanic/blueprints.py"
      ],
      "comments": [
        "integration test(s)",
        "integration between sanic.Sanic and sanic.Blueprint"
      ]
    },
    {
      "test": "tests/test_url_for_static.py",
      "code": [
        "sanic/__init__.py",
        "sanic/app.py",
        "sanic/blueprints.py"
      ],
      "comments": [
        "integration test(s)",
        "focal classes sanic.Sanic and sanic.Blueprint"
      ]
    },
    {
      "test": "tests/test_utf8.py",
      "code": [
        "sanic/response/__init__.py"
      ],
      "comments": [
        "unit test(s)",
        "sanic.response.text utf8 functionality"
      ]
    },
    {
      "test": "tests/test_utils.py",
      "code": [
        "sanic/utils.py"
      ],
      "comments": [
        "unit test(s)",
        "focal method sanic.utils.load_module_from_file_location",
        "sanic.exception is more like utility"
      ]
    },
    {
      "test": "tests/test_versioning.py",
      "code": [
        "sanic/__init__.py",
        "sanic/app.py",
        "sanic/blueprints.py",
        "sanic/response/__init__.py"
      ],
      "comments": [
        "integration test(s)",
        "sanic.Sanic and sanic.Blueprint"
      ]
    },
    {
      "test": "tests/test_vhosts.py",
      "code": [
        "sanic/app.py",
        "sanic/response/__init__.py"
      ],
      "comments": [
        "integration test(s)"
      ]
    },
    {
      "test": "tests/test_views.py",
      "code": [
        "sanic/views.py"
      ],
      "comments": [
        "unit test(s)",
        "focal class sanic.views.HTTPMethodView"
      ]
    },
    {
      "test": "tests/test_websockets.py",
      "code": [
        "sanic/server/websockets/frame.py"
      ],
      "comments": [
        "unit test(s)",
        "focal class sanic.server.websockets.frame.WebsocketFrameAssembler"
      ]
    },
    {
      "test": "tests/test_ws_handlers.py",
      "code": [
        "sanic/app.py",
        "sanic/__init__.py",
        "sanic/request/__init__.py",
        "sanic/server/websockets/__init__.py"
      ],
      "comments": [
        "integration test(s)",
        "consider the whole folders"
      ]
    },
    {
      "test": "tests/typing/test_typing.py",
      "code": "NONE",
      "comments": [
        "no clear mapping with application code"
      ]
    },
    {
      "test": "tests/worker/test_inspector.py",
      "code": [
        "sanic/cli/inspector_client.py",
        "sanic/helpers.py",
        "sanic/log.py",
        "sanic/worker/inspector.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_loader.py",
      "code": [
        "sanic/app.py",
        "sanic/worker/loader.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_manager.py",
      "code": [
        "sanic/worker/manager.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_multiplexer.py",
      "code": [
        "sanic/worker/multiplexer.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)",
        "focal class sanic.worker.multiplexer.Multiplexer",
        "focal class sanic.worker.state.WorkerState"
      ]
    },
    {
      "test": "tests/worker/test_reloader.py",
      "code": [
        "sanic/worker/reloader.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_restarter.py",
      "code": [
        "sanic/worker/restarter.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_runner.py",
      "code": [
        "sanic/server/runners.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_shared_ctx.py",
      "code": [
        "sanic/types/shared_ctx.py"
      ],
      "comments": [
        "unit test(s)",
        "integration test(s)"
      ]
    },
    {
      "test": "tests/worker/test_socket.py",
      "code": [
        "sanic/server/socket.py"
      ],
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/worker/test_startup.py",
      "code": [
        "sanic/app.py"
      ],
      "comments": [
        "unit test(s)"
      ]
    },
    {
      "test": "tests/worker/test_state.py",
      "code": [
        "sanic/worker/state.py"
      ],
      "comments": [
        "unit test(s)",
        "focal class sanic.worker.state.WorkerState"
      ]
    },
    {
      "test": "tests/worker/test_worker_serve.py",
      "code": [
        "sanic/worker/serve.py"
      ],
      "comments": [
        "unit test(s)",
        "focal method sanic.worker.server.worker_serve"
      ]
    }
  ]
}