def generate_transplant_analysis_prompt(host_code_files, host_code, donor_code_files, donor_code, donor_test_file, donor_test):
    """
    Generate a prompt to analyze if test methods can be transplanted from donor to host
    
    Parameters:
    - host_code_files: string or list of file names
    - host_code: string or list of code contents
    - donor_code_files: string or list of file names
    - donor_code: string or list of code contents
    - donor_test_file: string (test file name)
    - donor_test: string (test file content)
    """
    # Format host code files and content
    host_files_content = ""
    if isinstance(host_code_files, list):
        for i, (file_name, code_content) in enumerate(zip(host_code_files, host_code if isinstance(host_code, list) else [host_code] * len(host_code_files))):
            host_files_content += f"\nHost code file {i+1}: {file_name}\n```python\n{code_content}\n```\n"
    else:
        host_files_content = f"Host code file: {host_code_files}\n```python\n{host_code}\n```"
    
    # Format donor code files and content
    donor_files_content = ""
    if isinstance(donor_code_files, list):
        for i, (file_name, code_content) in enumerate(zip(donor_code_files, donor_code if isinstance(donor_code, list) else [donor_code] * len(donor_code_files))):
            donor_files_content += f"\nDonor code file {i+1}: {file_name}\n```python\n{code_content}\n```\n"
    else:
        donor_files_content = f"Donor code file: {donor_code_files}\n```python\n{donor_code}\n```"
    
    prompt = f"""
    You are an expert code analyzer specializing in test transplantation. I'm going to provide you with:
    
    1. Host code file(s) that need tests
    2. Donor code file(s) that have existing tests
    3. Donor test file that we want to transplant from
    
    Your task is to analyze whether and how specific test methods from the donor test can be transplanted to create effective tests for the host code.
    
    Important: The relevant pairs were retrieved by comparing embedding similarity between code summaries generated by another LLM. This means they might not be truly similar in functionality or purpose.
    
    {host_files_content}
    
    {donor_files_content}
    
    Donor test file: {donor_test_file}
    ```python
    {donor_test}
    ```
    
    Output a dictionary where:
    - Keys are the names of donor test methods that could be transplanted
    - Values are detailed plans explaining how to transplant each method
    - If nothing can be transplanted, output "None"
    
    For each transplantable test method, explain:
    1. What functionality it tests
    2. How it relates to the host code
    3. What modifications would be needed
    4. Any dependencies or fixtures that would need to be adapted
    
    Example output format:
    {{
        "test_something": "Plan for transplanting test_something...",
        "test_another_thing": "Plan for transplanting test_another_thing..."
    }}
    
    Or simply: "None" if nothing can be transplanted.
    
    Please return a valid output without any additional text.
    """
    return prompt


def generate_additional_files_prompt(host_code_files, transplant_analysis_result):
    """
    Generate a prompt to identify additional files needed for test generation
    
    Parameters:
    - host_code_files: string or list of file names
    - transplant_analysis_result: dict or string with analysis results
    """
    host_files_str = host_code_files
    if isinstance(host_code_files, list):
        host_files_str = ", ".join(host_code_files)
    
    prompt = f"""
    Based on our previous analysis of test transplantation potential, I need to identify additional files needed for successful test transplantation.

    Current host code file(s): {host_files_str}
    
    Our previous analysis of test transplantation potential:
    ```json
    {transplant_analysis_result}
    ```
    
    Please identify any additional files we might need to retrieve to successfully transplant and adapt the tests.
    
    Output two JSON lists:
    1. Files needed from the host code repository (Flask)
    2. Files needed from the donor code repository
    
    For each list, provide the file paths and a brief explanation of why each file is needed.
    If no additional files are needed for a repository, output "None" for that list.
    
    Format:
    {{
        "host_files_needed": [
            {{"file_path": "path/to/file.py", "reason": "explanation"}}
        ] or "None",
        "donor_files_needed": [
            {{"file_path": "path/to/file.py", "reason": "explanation"}}
        ] or "None"
    }}
    
    Please return a valid JSON object without any additional text.
    """
    return prompt


def generate_test_creation_prompt(host_code_files, host_code, donor_code_files, donor_code, 
                                 donor_test_file, donor_test, transplant_analysis_result,
                                 additional_files_info, host_files=None, donor_files=None):
    """
    Generate a prompt to create the transplanted test file
    
    Parameters:
    - host_code_files: string or list of file names
    - host_code: string or list of code contents
    - donor_code_files: string or list of file names
    - donor_code: string or list of code contents
    - donor_test_file: string (test file name)
    - donor_test: string (test file content)
    - transplant_analysis_result: dict or string with analysis results
    - additional_files_info: dict with additional files information
    - host_files: list of dicts with file paths and content
    - donor_files: list of dicts with file paths and content
    """
    # Format host code files and content
    host_files_content = ""
    if isinstance(host_code_files, list):
        for i, (file_name, code_content) in enumerate(zip(host_code_files, host_code if isinstance(host_code, list) else [host_code] * len(host_code_files))):
            host_files_content += f"\nHost code file {i+1}: {file_name}\n```python\n{code_content}\n```\n"
    else:
        host_files_content = f"Host code file: {host_code_files}\n```python\n{host_code}\n```"
    
    # Format donor code files and content
    donor_files_content = ""
    if isinstance(donor_code_files, list):
        for i, (file_name, code_content) in enumerate(zip(donor_code_files, donor_code if isinstance(donor_code, list) else [donor_code] * len(donor_code_files))):
            donor_files_content += f"\nDonor code file {i+1}: {file_name}\n```python\n{code_content}\n```\n"
    else:
        donor_files_content = f"Donor code file: {donor_code_files}\n```python\n{donor_code}\n```"
    
    # Format additional host files
    additional_host_files_str = ""
    if host_files:
        for file_info in host_files:
            additional_host_files_str += f"\nAdditional host file: {file_info['file_path']}\n```python\n{file_info['content']}\n```\n"
    
    # Format additional donor files
    additional_donor_files_str = ""
    if donor_files:
        for file_info in donor_files:
            additional_donor_files_str += f"\nAdditional donor file: {file_info['file_path']}\n```python\n{file_info['content']}\n```\n"
    
    prompt = f"""
    You are an expert test engineer specializing in test transplantation. Your task is to create a test file for the host code by adapting and transplanting tests from a donor test file.
    
    {host_files_content}
    
    {donor_files_content}
    
    Donor test file: {donor_test_file}
    ```python
    {donor_test}
    ```
    
    Transplantation analysis:
    ```json
    {transplant_analysis_result}
    ```
    
    Additional files information:
    ```json
    {additional_files_info}
    ```
    
    {additional_host_files_str}
    {additional_donor_files_str}
    
    Please create a complete Python test file that:
    1. Tests the functionality in the host code
    2. Is adapted from the donor test
    3. Follows best practices for the testing framework used (likely pytest)
    4. Includes appropriate imports, fixtures, and test methods
    5. Contains clear comments explaining what is being tested
    
    The output should be a complete, runnable Python test file that has been adapted to work with the host code. 
    Include a comment at the top of the file indicating it was generated through test transplantation.
    
    Please output only the Python code without any additional explanation or markdown formatting.
    """
    return prompt