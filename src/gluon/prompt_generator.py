def generate_transplant_analysis_prompt(host_code_file, host_code, donor_code_file, donor_code, donor_test_file, donor_test):
    """
    Generate a prompt to analyze if test methods can be transplanted from donor to host
    """
    prompt = f"""
    You are an expert code analyzer specializing in test transplantation. I'm going to provide you with:
    
    1. Host code file name: {host_code_file}
    2. Host code content that needs tests
    3. Donor code file name: {donor_code_file}
    4. Donor code content that has existing tests
    5. Donor test file name: {donor_test_file}
    6. Donor test content that we want to transplant from
    
    Your task is to analyze whether and how specific test methods from the donor test can be transplanted to create effective tests for the host code.
    
    Important: The relevant pairs were retrieved by comparing embedding similarity between code summaries generated by another LLM. This means they might not be truly similar in functionality or purpose.
    
    Host code file: {host_code_file}
    ```python
    {host_code}
    ```
    
    Donor code file: {donor_code_file}
    ```python
    {donor_code}
    ```
    
    Donor test file: {donor_test_file}
    ```python
    {donor_test}
    ```
    
    Output a dictionary where:
    - Keys are the names of donor test methods that could be transplanted
    - Values are detailed plans explaining how to transplant each method
    - If nothing can be transplanted, output "None"
    
    For each transplantable test method, explain:
    1. What functionality it tests
    2. How it relates to the host code
    3. What modifications would be needed
    4. Any dependencies or fixtures that would need to be adapted
    
    Example output format:
    {{
        "test_something": "Plan for transplanting test_something...",
        "test_another_thing": "Plan for transplanting test_another_thing..."
    }}
    
    Or simply: "None" if nothing can be transplanted.
    
    Please return a valid output without any additional text.
    """
    return prompt

def generate_additional_files_prompt(host_code_file, transplant_analysis_result):
    """
    Generate a prompt to identify additional files needed for test generation
    """
    prompt = f"""
    Based on the previous analysis of test transplantation potential:
    
    Host code file: {host_code_file}
    
    Transplantation analysis:
    ```json
    {transplant_analysis_result}
    ```
    
    Please identify any additional files we might need to retrieve to successfully transplant and adapt the tests.
    
    Output two JSON lists:
    1. Files needed from the host code repository (Flask)
    2. Files needed from the donor code repository
    
    For each list, provide the file paths and a brief explanation of why each file is needed.
    If no additional files are needed for a repository, output "None" for that list.
    
    Format:
    {{
        "host_files_needed": [
            {{"file_path": "path/to/file.py", "reason": "explanation"}}
        ] or "None",
        "donor_files_needed": [
            {{"file_path": "path/to/file.py", "reason": "explanation"}}
        ] or "None"
    }}
    
    Please return a valid JSON object without any additional text.
    """
    return prompt

def generate_test_creation_prompt(host_code_file, host_code, donor_code_file, donor_code, 
                                 donor_test_file, donor_test, transplant_analysis_result,
                                 additional_files_info, host_files=None, donor_files=None):
    """
    Generate a prompt to create the transplanted test file
    """
    additional_host_files_str = ""
    if host_files:
        for file_info in host_files:
            additional_host_files_str += f"\nHost file: {file_info['file_path']}\n```python\n{file_info['content']}\n```\n"
    
    additional_donor_files_str = ""
    if donor_files:
        for file_info in donor_files:
            additional_donor_files_str += f"\nDonor file: {file_info['file_path']}\n```python\n{file_info['content']}\n```\n"
    
    prompt = f"""
    You are an expert test engineer specializing in test transplantation. Your task is to create a test file for the host code by adapting and transplanting tests from a donor test file.
    
    Host code file: {host_code_file}
    ```python
    {host_code}
    ```
    
    Donor code file: {donor_code_file}
    ```python
    {donor_code}
    ```
    
    Donor test file: {donor_test_file}
    ```python
    {donor_test}
    ```
    
    Transplantation analysis:
    ```json
    {transplant_analysis_result}
    ```
    
    Additional files information:
    ```json
    {additional_files_info}
    ```
    
    {additional_host_files_str}
    {additional_donor_files_str}
    
    Please create a complete Python test file that:
    1. Tests the functionality in the host code
    2. Is adapted from the donor test
    3. Follows best practices for the testing framework used (likely pytest)
    4. Includes appropriate imports, fixtures, and test methods
    5. Contains clear comments explaining what is being tested
    
    The output should be a complete, runnable Python test file that has been adapted to work with the host code. 
    Include a comment at the top of the file indicating it was generated through test transplantation.
    
    Please output only the Python code without any additional explanation or markdown formatting.
    """
    return prompt